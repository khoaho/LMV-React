(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory();else if(typeof define==="function"&&define.amd)define([],factory);else if(typeof exports==="object")exports["Autodesk.ADN.Viewing.Extension.ModelLoader"]=factory();else root["Autodesk.ADN.Viewing.Extension.ModelLoader"]=factory()})(this,function(){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}({0:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nvar _inspireTree = __webpack_require__(187);\n\nvar _inspireTree2 = _interopRequireDefault(_inspireTree);\n\n__webpack_require__(250);\n\n__webpack_require__(251);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step(\"next\", value); }, function (err) { return step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\n/////////////////////////////////////////////////////////////////////\n// Autodesk.ADN.Viewing.Extension.ModelLoader\n// by Philippe Leefsma, Feb 2016\n//\n/////////////////////////////////////////////////////////////////////\nAutodeskNamespace(\"Autodesk.ADN.Viewing.Extension\");\n\nAutodesk.ADN.Viewing.Extension.ModelLoader = function (viewer, options) {\n\n  Autodesk.Viewing.Extension.call(this, viewer, options);\n\n  var _panel = null;\n\n  ///////////////////////////////////////////////////////////////////\n  // The model API used by this extension\n  //\n  ///////////////////////////////////////////////////////////////////\n  var API = {\n\n    /////////////////////////////////////////////////////////////////\n    // Extracts model name (filename) from base64 URN\n    //\n    /////////////////////////////////////////////////////////////////\n    getModelName: function getModelName(urn) {\n\n      var fileId = decodeURIComponent(escape(window.atob(urn)));\n\n      var filename = fileId.split('/')[1];\n\n      var splits = filename.split('.');\n\n      return filename.substring(0, filename.length - (splits[splits.length - 1].length + 1));\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Returns list of models available in the Gallery\n    //\n    /////////////////////////////////////////////////////////////////\n    getGalleryModels: function getGalleryModels() {\n\n      return new Promise(function (resolve, reject) {\n\n        $.get(options.apiUrl + '/models', function (models) {\n\n          resolve(models);\n        });\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Returns list of models loaded in the current scene\n    //\n    /////////////////////////////////////////////////////////////////\n    getLoadedModels: function getLoadedModels() {\n\n      return new Promise(function (resolve, reject) {\n\n        resolve(viewer.impl.modelQueue().getModels());\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Returns Gallery token\n    //\n    /////////////////////////////////////////////////////////////////\n    getToken: function getToken() {\n\n      return new Promise(function (resolve, reject) {\n\n        $.get(options.apiUrl + '/lmv/token', function (response) {\n\n          resolve(response.access_token);\n        });\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Returns viewable path from URN (needs matching token)\n    //\n    /////////////////////////////////////////////////////////////////\n    getViewablePath: function getViewablePath(token, urn) {\n\n      return new Promise(function (resolve, reject) {\n\n        try {\n\n          Autodesk.Viewing.Initializer({\n            accessToken: token\n          }, function () {\n\n            Autodesk.Viewing.Document.load('urn:' + urn, function (document) {\n\n              var rootItem = document.getRootItem();\n\n              var geometryItems3d = Autodesk.Viewing.Document.getSubItemsWithProperties(rootItem, {\n                'type': 'geometry',\n                'role': '3d' }, true);\n\n              var geometryItems2d = Autodesk.Viewing.Document.getSubItemsWithProperties(rootItem, {\n                'type': 'geometry',\n                'role': '2d' }, true);\n\n              var got2d = geometryItems2d && geometryItems2d.length > 0;\n              var got3d = geometryItems3d && geometryItems3d.length > 0;\n\n              if (got2d || got3d) {\n\n                var pathCollection = [];\n\n                geometryItems2d.forEach(function (item) {\n\n                  pathCollection.push(document.getViewablePath(item));\n                });\n\n                geometryItems3d.forEach(function (item) {\n\n                  pathCollection.push(document.getViewablePath(item));\n                });\n\n                return resolve(pathCollection);\n              } else {\n\n                return reject('no viewable content');\n              }\n            }, function (err) {\n\n              console.log('Error loading document... ');\n\n              //Autodesk.Viewing.ErrorCode\n\n              switch (err) {\n\n                case 1:\n                  //UNKNOWN_FAILURE\n                  console.log('An unknown failure has occurred.');\n                  break;\n\n                case 2:\n                  //BAD_DATA\n                  console.log('Bad data (corrupted or malformed) ' + 'was encountered.');\n                  break;\n\n                case 3:\n                  //NETWORK_FAILURE\n                  console.log('A network failure was encountered.');\n                  break;\n\n                case 4:\n                  //NETWORK_ACCESS_DENIED\n                  console.log('Access was denied to a ' + 'network resource (HTTP 403).');\n                  break;\n\n                case 5:\n                  //NETWORK_FILE_NOT_FOUND\n                  console.log('A network resource could not ' + 'be found (HTTP 404).');\n                  break;\n\n                case 6:\n                  //NETWORK_SERVER_ERROR\n                  console.log('A server error was returned when ' + 'accessing a network resource (HTTP 5xx).');\n                  break;\n\n                case 7:\n                  //NETWORK_UNHANDLED_RESPONSE_CODE\n                  console.log('An unhandled response code was ' + 'returned when accessing a network resource ' + '(HTTP everything else).');\n                  break;\n\n                case 8:\n                  //BROWSER_WEBGL_NOT_SUPPORTED\n                  console.log('Browser error: WebGL is not ' + 'supported by the current browser.');\n                  break;\n\n                case 9:\n                  //BAD_DATA_NO_VIEWABLE_CONTENT\n                  console.log('There is nothing viewable in ' + 'the fetched document.');\n                  break;\n\n                case 10:\n                  //BROWSER_WEBGL_DISABLED\n                  console.log('Browser error: WebGL is ' + 'supported, but not enabled.');\n                  break;\n\n                case 11:\n                  //RTC_ERROR\n                  console.log('Collaboration server error');\n                  break;\n              }\n            });\n          });\n        } catch (ex) {\n\n          return reject(ex);\n        }\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Loads model into current scene\n    //\n    /////////////////////////////////////////////////////////////////\n    loadModel: function loadModel(path, opts) {\n      var _this = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var _onGeometryLoaded;\n\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _onGeometryLoaded = function _onGeometryLoaded(event) {\n\n                    viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, _onGeometryLoaded);\n\n                    return resolve(event.model);\n                  };\n\n                  viewer.addEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, _onGeometryLoaded);\n\n                  viewer.loadModel(path, opts, function () {}, function (errorCode, errorMessage, statusCode, statusText) {\n\n                    viewer.removeEventListener(Autodesk.Viewing.GEOMETRY_LOADED_EVENT, _onGeometryLoaded);\n\n                    return reject({\n                      errorCode: errorCode,\n                      errorMessage: errorMessage,\n                      statusCode: statusCode,\n                      statusText: statusText\n                    });\n                  });\n\n                case 3:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this);\n        }));\n\n        return function (_x, _x2) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Sets model as \"current\"\n    //\n    /////////////////////////////////////////////////////////////////\n    setCurrentModel: function setCurrentModel(model) {\n\n      return new Promise(function (resolve, reject) {\n\n        viewer.model = model;\n\n        var propertyPanel = viewer.getPropertyPanel(true);\n\n        propertyPanel.currentModel = model;\n\n        model.getObjectTree(function (instanceTree) {\n\n          viewer.modelstructure.setModel(instanceTree);\n\n          return resolve();\n        });\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Fits model to view\n    //\n    /////////////////////////////////////////////////////////////////\n    fitModelToView: function fitModelToView(model) {\n\n      return new Promise(function (resolve, reject) {\n\n        model.getObjectTree(function (instanceTree) {\n\n          viewer.fitToView([instanceTree.rootId]);\n        });\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Unloads model from current scene\n    //\n    /////////////////////////////////////////////////////////////////\n    unloadModel: function unloadModel(model) {\n      var _this2 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n\n                  viewer.impl.unloadModel(model);\n\n                  viewer.impl.sceneUpdated(true);\n\n                  return _context2.abrupt('return', resolve());\n\n                case 3:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this2);\n        }));\n\n        return function (_x3, _x4) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Applies transform to specific model\n    //\n    /////////////////////////////////////////////////////////////////\n    transformModel: function transformModel(model, transform) {\n      var _this3 = this;\n\n      function _transformFragProxy(fragId) {\n\n        var fragProxy = viewer.impl.getFragmentProxy(model, fragId);\n\n        fragProxy.getAnimTransform();\n\n        fragProxy.position = transform.translation;\n\n        fragProxy.scale = transform.scale;\n\n        //Not a standard three.js quaternion\n        fragProxy.quaternion._x = transform.rotation.x;\n        fragProxy.quaternion._y = transform.rotation.y;\n        fragProxy.quaternion._z = transform.rotation.z;\n        fragProxy.quaternion._w = transform.rotation.w;\n\n        fragProxy.updateAnimTransform();\n      }\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var fragCount, fragId;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  fragCount = model.getFragmentList().fragments.fragId2dbId.length;\n\n                  //fragIds range from 0 to fragCount-1\n\n                  for (fragId = 0; fragId < fragCount; ++fragId) {\n\n                    _transformFragProxy(fragId);\n                  }\n\n                  return _context3.abrupt('return', resolve());\n\n                case 3:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, _this3);\n        }));\n\n        return function (_x5, _x6) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Hides node (if nodeOff = true completely hides the node)\n    //\n    /////////////////////////////////////////////////////////////////\n    hideNode: function hideNode(model, dbIds) {\n      var nodeOff = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];\n\n\n      return new Promise(function (resolve, reject) {\n\n        dbIds = Array.isArray(dbIds) ? dbIds : [dbIds];\n\n        model.getObjectTree(function (instanceTree) {\n\n          var vm = new Autodesk.Viewing.Private.VisibilityManager(viewer.impl, viewer.model);\n\n          dbIds.forEach(function (dbId) {\n\n            var node = instanceTree.dbIdToNode[dbId];\n\n            vm.hide(node);\n            vm.setNodeOff(node, nodeOff);\n          });\n\n          return resolve();\n        });\n      });\n    },\n\n    /////////////////////////////////////////////////////////////////\n    // Shows node\n    //\n    /////////////////////////////////////////////////////////////////\n    showNode: function showNode(model, dbIds) {\n\n      return new Promise(function (resolve, reject) {\n\n        dbIds = Array.isArray(dbIds) ? dbIds : [dbIds];\n\n        model.getObjectTree(function (instanceTree) {\n\n          var vm = new Autodesk.Viewing.Private.VisibilityManager(viewer.impl, viewer.model);\n\n          dbIds.forEach(function (dbId) {\n\n            var node = instanceTree.dbIdToNode[dbId];\n\n            vm.setNodeOff(node, false);\n            vm.show(node);\n          });\n\n          return resolve();\n        });\n      });\n    }\n  };\n\n  /////////////////////////////////////////////////////////////////\n  // Extension load callback\n  //\n  /////////////////////////////////////////////////////////////////\n  this.load = function () {\n\n    //set name of original model\n    viewer.model.name = options.model.name;\n\n    var button = createButton(guid(), 'glyphicon glyphicon-list', 'Model Loader', function () {\n\n      _panel.toggleVisibility();\n    });\n\n    var viewerToolbar = viewer.getToolbar(true);\n\n    var ctrlGroup = new Autodesk.Viewing.UI.ControlGroup('ModelLoader');\n\n    ctrlGroup.addControl(button, { index: 1 });\n\n    viewerToolbar.addControl(ctrlGroup);\n\n    _panel = new ModelLoaderPanel(viewer.container, guid(), button.container, _inspireTree2.default);\n\n    console.log('Autodesk.ADN.Viewing.Extension.ModelLoader loaded');\n\n    return true;\n  };\n\n  /////////////////////////////////////////////////////////////////\n  //  Extension unload callback\n  //\n  /////////////////////////////////////////////////////////////////\n  this.unload = function () {\n\n    if (_panel) {\n\n      _panel.setVisible(false);\n\n      _panel = null;\n\n      var viewerToolbar = viewer.getToolbar(true);\n\n      viewerToolbar.removeControl('ModelLoader');\n    }\n\n    console.log('Autodesk.ADN.Viewing.Extension.ModelLoader unloaded');\n\n    return true;\n  };\n\n  /////////////////////////////////////////////////////////////////\n  // toolbar button\n  //\n  /////////////////////////////////////////////////////////////////\n  function createButton(id, className, tooltip, handler) {\n\n    var button = new Autodesk.Viewing.UI.Button(id);\n\n    button.icon.style.fontSize = \"24px\";\n\n    button.icon.className = className;\n\n    button.setToolTip(tooltip);\n\n    button.onClick = handler;\n\n    return button;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Generates random guid to use as DOM id\n  //\n  /////////////////////////////////////////////////////////////////\n  function guid() {\n\n    var d = new Date().getTime();\n\n    var guid = 'xxxx-xxxx-xxxx-xxxx'.replace(/[xy]/g, function (c) {\n      var r = (d + Math.random() * 16) % 16 | 0;\n      d = Math.floor(d / 16);\n      return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n    });\n\n    return guid;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // The Model Loader Panel\n  //\n  /////////////////////////////////////////////////////////////////\n  var ModelLoaderPanel = function ModelLoaderPanel(parentContainer, panelId, btnElement, InspireTree) {\n\n    /////////////////////////////////////////////////////////////////\n    // Initializes the panel\n    //\n    /////////////////////////////////////////////////////////////////\n\n    var initialize = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5() {\n        var _this4 = this;\n\n        var rootNode, galleryModels, tree;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n\n                _thisPanel.content = document.createElement('div');\n\n                $(_thisPanel.container).addClass('model-loader');\n\n                $(_thisPanel.container).append(generateHtml(panelId));\n\n                //$('[data-toggle=\"tooltip\"]').tooltip();\n\n                reloadTree();\n\n                $('#' + panelId + '-load-btn').click(onLoad);\n\n                $('#' + panelId + '-load-gallery-btn').click(onLoadGallery);\n\n                $('#' + panelId + '-transform-btn').click(onTransform);\n\n                $('#' + panelId + '-clear-btn').click(onClear);\n\n                viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, onAggregateSelectionChanged);\n\n                // Loads gallery models tree\n\n                $('.model-loader .tree-container.gallery').append('<div class=\"model-loader-gallery-tree\"></div>');\n\n                rootNode = {\n                  type: 'root_node',\n                  text: 'Gallery Models',\n                  children: []\n                };\n                _context5.next = 13;\n                return API.getGalleryModels();\n\n              case 13:\n                galleryModels = _context5.sent;\n\n\n                galleryModels.forEach(function (model) {\n\n                  // filters out .dwg's\n\n                  var fileId = decodeURIComponent(escape(window.atob(model.urn)));\n\n                  if (!fileId.endsWith('.dwg')) {\n\n                    rootNode.children.push({\n                      type: 'model_node',\n                      text: model.name,\n                      model: model,\n                      children: []\n                    });\n                  }\n                });\n\n                tree = new InspireTree({\n                  target: '.model-loader-gallery-tree',\n                  data: [rootNode]\n                });\n\n\n                tree.on('node.dblclick', function () {\n                  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(event, node) {\n                    return regeneratorRuntime.wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            if (!(node.type == 'model_node')) {\n                              _context4.next = 4;\n                              break;\n                            }\n\n                            _context4.next = 3;\n                            return loadGalleryNode(node);\n\n                          case 3:\n\n                            reloadTree();\n\n                          case 4:\n                          case 'end':\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4, _this4);\n                  }));\n\n                  return function (_x8, _x9) {\n                    return ref.apply(this, arguments);\n                  };\n                }());\n\n                $('#' + panelId + '-search').on('keyup', function (e) {\n\n                  var matches = tree.search(e.target.value);\n\n                  _galleryFilteredNodes = matches || [];\n                });\n\n              case 18:\n              case 'end':\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function initialize() {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////\n    // Custom html content of the panel\n    //\n    /////////////////////////////////////////////////////////////\n\n\n    /////////////////////////////////////////////////////////////////\n    // Aggregate SelectionChanged handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n    var onAggregateSelectionChanged = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(event) {\n        var selection, model, nodeId;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(event.selections && event.selections.length)) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                selection = event.selections[0];\n                model = selection.model;\n                _context6.next = 5;\n                return API.setCurrentModel(model);\n\n              case 5:\n                nodeId = selection.dbIdArray[0];\n\n\n                setPropertyPanelNode(nodeId);\n                _context6.next = 10;\n                break;\n\n              case 9:\n\n                viewer.model.getObjectTree(function (instanceTree) {\n\n                  setPropertyPanelNode(instanceTree.rootId);\n                });\n\n              case 10:\n              case 'end':\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function onAggregateSelectionChanged(_x10) {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////////\n    // Load button handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n    var onLoad = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(event) {\n        var urn, token, model;\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n\n                event.preventDefault();\n\n                urn = $('#' + panelId + '-urn').val();\n                token = $('#' + panelId + '-token').val();\n\n                if (urn.length) {\n                  _context7.next = 6;\n                  break;\n                }\n\n                alert('Invalid model URN...');\n                return _context7.abrupt('return');\n\n              case 6:\n                if (!token.length) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                _context7.t0 = token;\n                _context7.next = 13;\n                break;\n\n              case 10:\n                _context7.next = 12;\n                return API.getToken();\n\n              case 12:\n                _context7.t0 = _context7.sent;\n\n              case 13:\n                token = _context7.t0;\n                _context7.next = 16;\n                return loadFromURN(token, urn);\n\n              case 16:\n                model = _context7.sent;\n\n\n                model.name = API.getModelName(urn);\n\n                reloadTree();\n\n              case 19:\n              case 'end':\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      return function onLoad(_x11) {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////////\n    // Loads model from URN\n    //\n    /////////////////////////////////////////////////////////////////\n\n\n    var loadFromURN = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(token, urn) {\n        var loadOptions, pathCollection, model;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                loadOptions = {\n                  placementTransform: buildTransformMatrix()\n                };\n                _context8.next = 3;\n                return API.getViewablePath(token, urn);\n\n              case 3:\n                pathCollection = _context8.sent;\n                _context8.next = 6;\n                return API.loadModel(pathCollection[0], loadOptions);\n\n              case 6:\n                model = _context8.sent;\n                return _context8.abrupt('return', model);\n\n              case 8:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      return function loadFromURN(_x12, _x13) {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////////\n    // Transform button handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n\n    /////////////////////////////////////////////////////////////////\n    // Load from gallery button handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n    var onLoadGallery = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee10(event) {\n        var promises;\n        return regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n\n                event.preventDefault();\n\n                promises = [];\n\n\n                _galleryFilteredNodes.forEach(function (node) {\n\n                  promises.push(loadGalleryNode(node));\n                });\n\n                Promise.all(promises).then(function () {\n\n                  reloadTree();\n                });\n\n              case 4:\n              case 'end':\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      return function onLoadGallery(_x15) {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////////\n    // Loads a gallery node model\n    //\n    /////////////////////////////////////////////////////////////////\n\n\n    var loadGalleryNode = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee11(node) {\n        var loadOptions, model, token;\n        return regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (!(node.model.viewablePath && node.model.viewablePath.length)) {\n                  _context11.next = 8;\n                  break;\n                }\n\n                loadOptions = {\n                  placementTransform: buildTransformMatrix()\n                };\n                _context11.next = 4;\n                return API.loadModel(node.model.viewablePath[0].path, loadOptions);\n\n              case 4:\n                model = _context11.sent;\n\n\n                model.name = node.model.name;\n                _context11.next = 15;\n                break;\n\n              case 8:\n                _context11.next = 10;\n                return API.getToken();\n\n              case 10:\n                token = _context11.sent;\n                _context11.next = 13;\n                return loadFromURN(token, node.model.urn);\n\n              case 13:\n                model = _context11.sent;\n\n\n                model.name = node.model.name;\n\n              case 15:\n              case 'end':\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      return function loadGalleryNode(_x16) {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////////\n    // Reloads model tree\n    //\n    /////////////////////////////////////////////////////////////////\n\n\n    var reloadTree = function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee14() {\n        var _this6 = this;\n\n        var rootNode, models, tree;\n        return regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n\n                $('.model-loader-tree').remove();\n\n                $('.model-loader .tree-container.loaded').append('<div class=\"model-loader-tree\"></div>');\n\n                rootNode = {\n                  type: 'root_node',\n                  text: 'Loaded Models',\n                  children: []\n                };\n                _context14.next = 5;\n                return API.getLoadedModels();\n\n              case 5:\n                models = _context14.sent;\n\n\n                models.forEach(function (model) {\n\n                  rootNode.children.push({\n                    type: 'model_node',\n                    text: model.name + ' [Id: ' + model.id + ']',\n                    model: model,\n                    children: []\n                  });\n                });\n\n                tree = new InspireTree({\n                  target: '.model-loader-tree',\n                  data: [rootNode],\n                  contextMenu: [{\n                    text: 'Set as Current',\n                    handler: function handler(event, node, closer) {\n\n                      closer();\n                      API.setCurrentModel(node.model);\n                    }\n                  }, {\n                    text: 'Unload Model',\n                    handler: function () {\n                      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee12(event, node, closer) {\n                        return regeneratorRuntime.wrap(function _callee12$(_context12) {\n                          while (1) {\n                            switch (_context12.prev = _context12.next) {\n                              case 0:\n\n                                closer();\n\n                                _context12.next = 3;\n                                return API.unloadModel(node.model);\n\n                              case 3:\n\n                                reloadTree();\n\n                              case 4:\n                              case 'end':\n                                return _context12.stop();\n                            }\n                          }\n                        }, _callee12, _this6);\n                      }));\n\n                      return function handler(_x17, _x18, _x19) {\n                        return ref.apply(this, arguments);\n                      };\n                    }()\n                  }]\n                });\n\n\n                tree.on('node.dblclick', function () {\n                  var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee13(event, node) {\n                    return regeneratorRuntime.wrap(function _callee13$(_context13) {\n                      while (1) {\n                        switch (_context13.prev = _context13.next) {\n                          case 0:\n                            if (!(node.type == 'model_node')) {\n                              _context13.next = 5;\n                              break;\n                            }\n\n                            _context13.next = 3;\n                            return API.setCurrentModel(node.model);\n\n                          case 3:\n                            _context13.next = 5;\n                            return API.fitModelToView(node.model);\n\n                          case 5:\n                          case 'end':\n                            return _context13.stop();\n                        }\n                      }\n                    }, _callee13, _this6);\n                  }));\n\n                  return function (_x20, _x21) {\n                    return ref.apply(this, arguments);\n                  };\n                }());\n\n                //expand root\n                tree.nodes()[0].expand();\n\n                _loadedModelsTree = tree;\n\n              case 11:\n              case 'end':\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      return function reloadTree() {\n        return ref.apply(this, arguments);\n      };\n    }();\n\n    /////////////////////////////////////////////////////////////\n    // Gets input transform\n    //\n    /////////////////////////////////////////////////////////////\n\n\n    /////////////////////////////////////////////////////////////////\n    // Base class constructor\n    //\n    /////////////////////////////////////////////////////////////////\n    Autodesk.Viewing.UI.DockingPanel.call(this, parentContainer, panelId, 'Model Loader', { shadow: true });\n\n    /////////////////////////////////////////////////////////////////\n    // \"Private\" ModelLoaderPanel members\n    //\n    /////////////////////////////////////////////////////////////////\n    var _thisPanel = this;\n\n    var _isVisible = false;\n\n    var _isMinimized = false;\n\n    var _loadedModelsTree = null;\n\n    var _galleryFilteredNodes = [];function generateHtml(id) {\n\n      return '\\n\\n      <div class=\"container\">\\n\\n        <button class=\"btn btn-info btn-load\"\\n                id=\"' + id + '-load-btn\"\\n                data-placement=\"bottom\"\\n                data-toggle=\"tooltip\"\\n                title=\"Load from URN using provided token\">\\n          <span class=\"glyphicon glyphicon-save btn-span\"\\n                aria-hidden=\"true\" style=\"top:1px;\">\\n          </span>\\n          Load\\n        </button>\\n\\n        <input id=\"' + id + '-token\" type=\"text\"\\n          class=\"input token\"\\n          placeholder=\" Token...\">\\n\\n        <input id=\"' + id + '-urn\" type=\"text\"\\n          class=\"input urn\"\\n          placeholder=\" Model URN ...\">\\n\\n        <hr class=\"v-spacer\">\\n\\n        <div>\\n          <span class=\"text-span\">\\n            Scale:\\n          </span>\\n\\n          <hr class=\"v-spacer\">\\n\\n          <input id=\"' + id + '-Sx\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  x (1.0)\">\\n\\n          <input id=\"' + id + '-Sy\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  y (1.0)\">\\n\\n          <input id=\"' + id + '-Sz\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  z (1.0)\">\\n\\n          <hr class=\"v-spacer\">\\n\\n          <span class=\"text-span\">\\n            Translation:\\n          </span>\\n\\n          <hr class=\"v-spacer\">\\n\\n          <input id=\"' + id + '-Tx\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  x (0.0)\">\\n\\n          <input id=\"' + id + '-Ty\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  y (0.0)\">\\n\\n          <input id=\"' + id + '-Tz\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  z (0.0)\">\\n        </div>\\n\\n        <hr class=\"v-spacer\">\\n\\n        <div>\\n          <span class=\"text-span\">\\n            Rotation (deg):\\n          </span>\\n\\n          <hr class=\"v-spacer\">\\n\\n          <input id=\"' + id + '-Rx\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  x (0.0)\">\\n\\n          <input id=\"' + id + '-Ry\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  y (0.0)\">\\n\\n          <input id=\"' + id + '-Rz\" type=\"text\"\\n            class=\"input numeric\"\\n            placeholder=\"  z (0.0)\">\\n\\n          <hr class=\"v-spacer-large\">\\n\\n          <button class=\"btn btn-info btn-transform\"\\n                  id=\"' + id + '-transform-btn\"\\n                  data-placement=\"bottom\"\\n                  data-toggle=\"tooltip\"\\n                  title=\"Transform selected loaded models\">\\n            <span class=\"glyphicon glyphicon-random btn-span\"\\n                  aria-hidden=\"true\">\\n            </span>\\n             Transform Selection ...\\n          </button>\\n\\n          <button class=\"btn btn-info btn-clear\"\\n                  id=\"' + id + '-clear-btn\"\\n                  data-placement=\"bottom\"\\n                  data-toggle=\"tooltip\"\\n                  title=\"Clear transform fields\">\\n            <span class=\"glyphicon glyphicon-remove btn-span\"\\n                  aria-hidden=\"true\">\\n            </span>\\n             Clear\\n          </button>\\n\\n        </div>\\n\\n        <hr class=\"v-spacer-large\">\\n\\n        <input id=\"' + id + '-search\" type=\"text\"\\n            class=\"input search\"\\n            placeholder=\" Search Gallery Models...\">\\n\\n        <button class=\"btn btn-info btn-load-gallery\"\\n                id=\"' + id + '-load-gallery-btn\"\\n                data-placement=\"bottom\"\\n                data-toggle=\"tooltip\"\\n                title=\"Load filtered gallery models\">\\n          <span class=\"glyphicon glyphicon-import btn-span\"\\n                aria-hidden=\"true\">\\n          </span>\\n           Load\\n        </button>\\n\\n        <hr class=\"v-spacer-large\">\\n\\n        <div class=\"all-trees-container\">\\n\\n          <div class=\"tree-container gallery\">\\n          </div>\\n\\n          <hr class=\"tree-spacer\">\\n\\n          <div class=\"tree-container loaded\">\\n          </div>\\n\\n        </div>\\n\\n      </div>';\n    }\n\n    function setPropertyPanelNode(nodeId) {\n\n      viewer.getProperties(nodeId, function (result) {\n\n        if (result.properties) {\n\n          var propertyPanel = viewer.getPropertyPanel(true);\n\n          propertyPanel.setNodeProperties(nodeId);\n\n          propertyPanel.setProperties(result.properties);\n        }\n      });\n    }function onTransform(event) {\n      var _this5 = this;\n\n      var root = _loadedModelsTree.nodes()[0];\n\n      var selectedNodes = [];\n\n      root.children.recurseDown(function (node) {\n\n        if (node.selected() && node.type == 'model_node') {\n\n          selectedNodes.push(node);\n        }\n      });\n\n      var transform = {\n        translation: getTranslation(),\n        rotation: getRotation(),\n        scale: getScale()\n      };\n\n      selectedNodes.forEach(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee9(node) {\n          return regeneratorRuntime.wrap(function _callee9$(_context9) {\n            while (1) {\n              switch (_context9.prev = _context9.next) {\n                case 0:\n                  _context9.next = 2;\n                  return API.transformModel(node.model, transform);\n\n                case 2:\n\n                  viewer.impl.sceneUpdated(true);\n\n                case 3:\n                case 'end':\n                  return _context9.stop();\n              }\n            }\n          }, _callee9, _this5);\n        }));\n\n        return function (_x14) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Clear Transform button handler\n    //\n    /////////////////////////////////////////////////////////////////\n    function onClear(event) {\n\n      $('#' + panelId + '-Sx').val('');\n      $('#' + panelId + '-Sy').val('');\n      $('#' + panelId + '-Sz').val('');\n\n      $('#' + panelId + '-Tx').val('');\n      $('#' + panelId + '-Ty').val('');\n      $('#' + panelId + '-Tz').val('');\n\n      $('#' + panelId + '-Rx').val('');\n      $('#' + panelId + '-Ry').val('');\n      $('#' + panelId + '-Rz').val('');\n    }function getScale() {\n\n      var x = parseFloat($('#' + panelId + '-Sx').val());\n      var y = parseFloat($('#' + panelId + '-Sy').val());\n      var z = parseFloat($('#' + panelId + '-Sz').val());\n\n      x = isNaN(x) ? 1.0 : x;\n      y = isNaN(y) ? 1.0 : y;\n      z = isNaN(z) ? 1.0 : z;\n\n      return new THREE.Vector3(x, y, z);\n    }\n\n    function getTranslation() {\n\n      var x = parseFloat($('#' + panelId + '-Tx').val());\n      var y = parseFloat($('#' + panelId + '-Ty').val());\n      var z = parseFloat($('#' + panelId + '-Tz').val());\n\n      x = isNaN(x) ? 0.0 : x;\n      y = isNaN(y) ? 0.0 : y;\n      z = isNaN(z) ? 0.0 : z;\n\n      return new THREE.Vector3(x, y, z);\n    }\n\n    function getRotation() {\n\n      var x = parseFloat($('#' + panelId + '-Rx').val());\n      var y = parseFloat($('#' + panelId + '-Ry').val());\n      var z = parseFloat($('#' + panelId + '-Rz').val());\n\n      x = isNaN(x) ? 0.0 : x;\n      y = isNaN(y) ? 0.0 : y;\n      z = isNaN(z) ? 0.0 : z;\n\n      var euler = new THREE.Euler(x * Math.PI / 180, y * Math.PI / 180, z * Math.PI / 180, 'XYZ');\n\n      var q = new THREE.Quaternion();\n\n      q.setFromEuler(euler);\n\n      return q;\n    }\n\n    /////////////////////////////////////////////////////////////\n    // Builds transform matrix\n    //\n    /////////////////////////////////////////////////////////////\n    function buildTransformMatrix() {\n\n      var t = getTranslation();\n      var r = getRotation();\n      var s = getScale();\n\n      var m = new THREE.Matrix4();\n\n      m.compose(t, r, s);\n\n      return m;\n    }\n\n    /////////////////////////////////////////////////////////////\n    // setVisible override\n    //\n    /////////////////////////////////////////////////////////////\n    _thisPanel.setVisible = function (show) {\n\n      _isVisible = show;\n\n      btnElement.classList.toggle('active');\n\n      Autodesk.Viewing.UI.DockingPanel.prototype.setVisible.call(this, show);\n    };\n\n    /////////////////////////////////////////////////////////////\n    // Toggles panel visibility\n    //\n    /////////////////////////////////////////////////////////////\n    _thisPanel.toggleVisibility = function () {\n\n      _panel.setVisible(!_isVisible);\n    };\n\n    /////////////////////////////////////////////////////////////\n    // initialize override\n    //\n    /////////////////////////////////////////////////////////////\n    _thisPanel.initialize = function () {\n\n      this.title = this.createTitleBar(this.titleLabel || this.container.id);\n\n      this.closer = this.createCloseButton();\n\n      this.container.appendChild(this.title);\n      this.title.appendChild(this.closer);\n      this.container.appendChild(this.content);\n\n      this.initializeMoveHandlers(this.title);\n      this.initializeCloseHandler(this.closer);\n    };\n\n    /////////////////////////////////////////////////////////////\n    // onTitleDoubleClick override\n    //\n    /////////////////////////////////////////////////////////////\n    _thisPanel.onTitleDoubleClick = function (event) {\n\n      _isMinimized = !_isMinimized;\n\n      if (_isMinimized) {\n\n        $(_thisPanel.container).addClass('minimized');\n      } else {\n        $(_thisPanel.container).removeClass('minimized');\n      }\n    };\n\n    // Initializes the panel\n    initialize();\n  };\n\n  /////////////////////////////////////////////////////////////\n  // Set up JS inheritance\n  //\n  /////////////////////////////////////////////////////////////\n  ModelLoaderPanel.prototype = Object.create(Autodesk.Viewing.UI.DockingPanel.prototype);\n\n  ModelLoaderPanel.prototype.constructor = ModelLoaderPanel;\n};\n\nAutodesk.ADN.Viewing.Extension.ModelLoader.prototype = Object.create(Autodesk.Viewing.Extension.prototype);\n\nAutodesk.ADN.Viewing.Extension.ModelLoader.prototype.constructor = Autodesk.ADN.Viewing.Extension.ModelLoader;\n\nAutodesk.Viewing.theExtensionManager.registerExtension('Autodesk.ADN.Viewing.Extension.ModelLoader', Autodesk.ADN.Viewing.Extension.ModelLoader);\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL0F1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci5qcz9hYzVhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBT0E7Ozs7QUFDQTs7QUFDQTs7Ozs7Ozs7Ozs7QUFKQSxrQkFBa0IsZ0NBQWxCOztBQU1BLFNBQVMsR0FBVCxDQUFhLE9BQWIsQ0FBcUIsU0FBckIsQ0FBK0IsV0FBL0IsR0FBNkMsVUFBVSxNQUFWLEVBQWtCLE9BQWxCLEVBQTJCOztBQUV0RSxXQUFTLE9BQVQsQ0FBaUIsU0FBakIsQ0FBMkIsSUFBM0IsQ0FBZ0MsSUFBaEMsRUFBc0MsTUFBdEMsRUFBOEMsT0FBOUMsRUFGc0U7O0FBSXRFLE1BQUksU0FBUyxJQUFUOzs7Ozs7QUFKa0UsTUFVbEUsTUFBTTs7Ozs7O0FBTVIsa0JBQWMsc0JBQVMsR0FBVCxFQUFjOztBQUUxQixVQUFJLFNBQVMsbUJBQW1CLE9BQU8sT0FBTyxJQUFQLENBQVksR0FBWixDQUFQLENBQW5CLENBQVQsQ0FGc0I7O0FBSTFCLFVBQUksV0FBVyxPQUFPLEtBQVAsQ0FBYSxHQUFiLEVBQWtCLENBQWxCLENBQVgsQ0FKc0I7O0FBTTFCLFVBQUksU0FBUyxTQUFTLEtBQVQsQ0FBZSxHQUFmLENBQVQsQ0FOc0I7O0FBUTFCLGFBQU8sU0FBUyxTQUFULENBQW1CLENBQW5CLEVBQ0wsU0FBUyxNQUFULElBQW1CLE9BQU8sT0FBTyxNQUFQLEdBQWMsQ0FBZCxDQUFQLENBQXdCLE1BQXhCLEdBQWlDLENBQWpDLENBQW5CLENBREYsQ0FSMEI7S0FBZDs7Ozs7O0FBZ0JkLHNCQUFrQiw0QkFBVzs7QUFFM0IsYUFBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQW9COztBQUVyQyxVQUFFLEdBQUYsQ0FBTSxRQUFRLE1BQVIsR0FBaUIsU0FBakIsRUFBNEIsVUFBQyxNQUFELEVBQVc7O0FBRTNDLGtCQUFRLE1BQVIsRUFGMkM7U0FBWCxDQUFsQyxDQUZxQztPQUFwQixDQUFuQixDQUYyQjtLQUFYOzs7Ozs7QUFlbEIscUJBQWlCLDJCQUFXOztBQUUxQixhQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBb0I7O0FBRXJDLGdCQUFRLE9BQU8sSUFBUCxDQUFZLFVBQVosR0FBeUIsU0FBekIsRUFBUixFQUZxQztPQUFwQixDQUFuQixDQUYwQjtLQUFYOzs7Ozs7QUFZakIsY0FBVSxvQkFBVzs7QUFFbkIsYUFBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQW9COztBQUVuQyxVQUFFLEdBQUYsQ0FBTSxRQUFRLE1BQVIsR0FBaUIsWUFBakIsRUFBK0IsVUFBQyxRQUFELEVBQWE7O0FBRWhELGtCQUFRLFNBQVMsWUFBVCxDQUFSLENBRmdEO1NBQWIsQ0FBckMsQ0FGbUM7T0FBcEIsQ0FBbkIsQ0FGbUI7S0FBWDs7Ozs7O0FBZVYscUJBQWlCLHlCQUFTLEtBQVQsRUFBZ0IsR0FBaEIsRUFBcUI7O0FBRXBDLGFBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjs7QUFFckMsWUFBSTs7QUFFRixtQkFBUyxPQUFULENBQWlCLFdBQWpCLENBQTZCO0FBQzNCLHlCQUFhLEtBQWI7V0FERixFQUVLLFlBQUs7O0FBRVYscUJBQVMsT0FBVCxDQUFpQixRQUFqQixDQUEwQixJQUExQixDQUNFLFNBQVMsR0FBVCxFQUNBLFVBQUMsUUFBRCxFQUFhOztBQUVYLGtCQUFJLFdBQVcsU0FBUyxXQUFULEVBQVgsQ0FGTzs7QUFJWCxrQkFBSSxrQkFBa0IsU0FBUyxPQUFULENBQWlCLFFBQWpCLENBQ3BCLHlCQURvQixDQUVwQixRQUZvQixFQUVWO0FBQ1Isd0JBQVEsVUFBUjtBQUNBLHdCQUFRLElBQVIsRUFKa0IsRUFLcEIsSUFMb0IsQ0FBbEIsQ0FKTzs7QUFXWCxrQkFBSSxrQkFBa0IsU0FBUyxPQUFULENBQWlCLFFBQWpCLENBQ3BCLHlCQURvQixDQUVwQixRQUZvQixFQUVWO0FBQ1Isd0JBQVEsVUFBUjtBQUNBLHdCQUFRLElBQVIsRUFKa0IsRUFLcEIsSUFMb0IsQ0FBbEIsQ0FYTzs7QUFrQlgsa0JBQUksUUFBUyxtQkFBbUIsZ0JBQWdCLE1BQWhCLEdBQXlCLENBQXpCLENBbEJyQjtBQW1CWCxrQkFBSSxRQUFTLG1CQUFtQixnQkFBZ0IsTUFBaEIsR0FBeUIsQ0FBekIsQ0FuQnJCOztBQXFCWCxrQkFBRyxTQUFTLEtBQVQsRUFBZ0I7O0FBRWpCLG9CQUFJLGlCQUFpQixFQUFqQixDQUZhOztBQUlqQixnQ0FBZ0IsT0FBaEIsQ0FBd0IsVUFBQyxJQUFELEVBQVE7O0FBRTlCLGlDQUFlLElBQWYsQ0FBb0IsU0FBUyxlQUFULENBQXlCLElBQXpCLENBQXBCLEVBRjhCO2lCQUFSLENBQXhCLENBSmlCOztBQVNqQixnQ0FBZ0IsT0FBaEIsQ0FBd0IsVUFBQyxJQUFELEVBQVE7O0FBRTlCLGlDQUFlLElBQWYsQ0FBb0IsU0FBUyxlQUFULENBQXlCLElBQXpCLENBQXBCLEVBRjhCO2lCQUFSLENBQXhCLENBVGlCOztBQWNqQix1QkFBTyxRQUFRLGNBQVIsQ0FBUCxDQWRpQjtlQUFuQixNQWdCSzs7QUFFSCx1QkFBTyxPQUFPLHFCQUFQLENBQVAsQ0FGRztlQWhCTDthQXJCRixFQTBDQSxVQUFDLEdBQUQsRUFBUTs7QUFFTixzQkFBUSxHQUFSLENBQVksNEJBQVo7Ozs7QUFGTSxzQkFNQyxHQUFQOztBQUVFLHFCQUFLLENBQUw7O0FBQ0UsMEJBQVEsR0FBUixDQUFZLGtDQUFaLEVBREY7QUFFRSx3QkFGRjs7QUFGRixxQkFNTyxDQUFMOztBQUNFLDBCQUFRLEdBQVIsQ0FBWSx1Q0FDVixrQkFEVSxDQUFaLENBREY7QUFHRSx3QkFIRjs7QUFORixxQkFXTyxDQUFMOztBQUNFLDBCQUFRLEdBQVIsQ0FBWSxvQ0FBWixFQURGO0FBRUUsd0JBRkY7O0FBWEYscUJBZU8sQ0FBTDs7QUFDRSwwQkFBUSxHQUFSLENBQVksNEJBQ1YsOEJBRFUsQ0FBWixDQURGO0FBR0Usd0JBSEY7O0FBZkYscUJBb0JPLENBQUw7O0FBQ0UsMEJBQVEsR0FBUixDQUFZLGtDQUNWLHNCQURVLENBQVosQ0FERjtBQUdFLHdCQUhGOztBQXBCRixxQkF5Qk8sQ0FBTDs7QUFDRSwwQkFBUSxHQUFSLENBQVksc0NBQ1YsMENBRFUsQ0FBWixDQURGO0FBR0Usd0JBSEY7O0FBekJGLHFCQThCTyxDQUFMOztBQUNFLDBCQUFRLEdBQVIsQ0FBWSxvQ0FDViw2Q0FEVSxHQUVWLHlCQUZVLENBQVosQ0FERjtBQUlFLHdCQUpGOztBQTlCRixxQkFvQ08sQ0FBTDs7QUFDRSwwQkFBUSxHQUFSLENBQVksaUNBQ1YsbUNBRFUsQ0FBWixDQURGO0FBR0Usd0JBSEY7O0FBcENGLHFCQXlDTyxDQUFMOztBQUNFLDBCQUFRLEdBQVIsQ0FBWSxrQ0FDVix1QkFEVSxDQUFaLENBREY7QUFHRSx3QkFIRjs7QUF6Q0YscUJBOENPLEVBQUw7O0FBQ0UsMEJBQVEsR0FBUixDQUFZLDZCQUNWLDZCQURVLENBQVosQ0FERjtBQUdFLHdCQUhGOztBQTlDRixxQkFtRE8sRUFBTDs7QUFDRSwwQkFBUSxHQUFSLENBQVksNEJBQVosRUFERjtBQUVFLHdCQUZGO0FBbkRGLGVBTk07YUFBUixDQTVDRixDQUZVO1dBQUwsQ0FGTCxDQUZFO1NBQUosQ0FrSEEsT0FBTSxFQUFOLEVBQVM7O0FBRVAsaUJBQU8sT0FBTyxFQUFQLENBQVAsQ0FGTztTQUFUO09BcEhpQixDQUFuQixDQUZvQztLQUFyQjs7Ozs7O0FBaUlqQixlQUFXLG1CQUFTLElBQVQsRUFBZSxJQUFmLEVBQXFCOzs7QUFFOUIsYUFBTyxJQUFJLE9BQUo7NERBQVksaUJBQU0sT0FBTixFQUFlLE1BQWY7Y0FFUjs7Ozs7O2lFQUFrQixPQUFPOztBQUVoQywyQkFBTyxtQkFBUCxDQUNFLFNBQVMsT0FBVCxDQUFpQixxQkFBakIsRUFDQSxpQkFGRixFQUZnQzs7QUFNaEMsMkJBQU8sUUFBUSxNQUFNLEtBQU4sQ0FBZixDQU5nQzs7O0FBU2xDLHlCQUFPLGdCQUFQLENBQ0UsU0FBUyxPQUFULENBQWlCLHFCQUFqQixFQUNBLGlCQUZGOztBQUlBLHlCQUFPLFNBQVAsQ0FBaUIsSUFBakIsRUFBdUIsSUFBdkIsRUFBNkIsWUFBSyxFQUFMLEVBRzNCLFVBQUMsU0FBRCxFQUFZLFlBQVosRUFBMEIsVUFBMUIsRUFBc0MsVUFBdEMsRUFBb0Q7O0FBRWxELDJCQUFPLG1CQUFQLENBQ0UsU0FBUyxPQUFULENBQWlCLHFCQUFqQixFQUNBLGlCQUZGLEVBRmtEOztBQU1sRCwyQkFBTyxPQUFPO0FBQ1osaUNBQVcsU0FBWDtBQUNBLG9DQUFjLFlBQWQ7QUFDQSxrQ0FBWSxVQUFaO0FBQ0Esa0NBQVksVUFBWjtxQkFKSyxDQUFQLENBTmtEO21CQUFwRCxDQUhGOzs7Ozs7OztTQWZpQjs7Ozs7U0FBWixDQUFQLENBRjhCO0tBQXJCOzs7Ozs7QUF3Q1gscUJBQWlCLHlCQUFTLEtBQVQsRUFBZ0I7O0FBRS9CLGFBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjs7QUFFckMsZUFBTyxLQUFQLEdBQWUsS0FBZixDQUZxQzs7QUFJckMsWUFBSSxnQkFBZ0IsT0FBTyxnQkFBUCxDQUF3QixJQUF4QixDQUFoQixDQUppQzs7QUFNckMsc0JBQWMsWUFBZCxHQUE2QixLQUE3QixDQU5xQzs7QUFRckMsY0FBTSxhQUFOLENBQW9CLFVBQUMsWUFBRCxFQUFpQjs7QUFFbkMsaUJBQU8sY0FBUCxDQUFzQixRQUF0QixDQUErQixZQUEvQixFQUZtQzs7QUFJbkMsaUJBQU8sU0FBUCxDQUptQztTQUFqQixDQUFwQixDQVJxQztPQUFwQixDQUFuQixDQUYrQjtLQUFoQjs7Ozs7O0FBdUJqQixvQkFBZ0Isd0JBQVMsS0FBVCxFQUFnQjs7QUFFOUIsYUFBTyxJQUFJLE9BQUosQ0FBWSxVQUFDLE9BQUQsRUFBVSxNQUFWLEVBQW9COztBQUVyQyxjQUFNLGFBQU4sQ0FBb0IsVUFBQyxZQUFELEVBQWlCOztBQUVuQyxpQkFBTyxTQUFQLENBQWlCLENBQUMsYUFBYSxNQUFiLENBQWxCLEVBRm1DO1NBQWpCLENBQXBCLENBRnFDO09BQXBCLENBQW5CLENBRjhCO0tBQWhCOzs7Ozs7QUFlaEIsaUJBQWEscUJBQVMsS0FBVCxFQUFnQjs7O0FBRTNCLGFBQU8sSUFBSSxPQUFKOzREQUFZLGtCQUFNLE9BQU4sRUFBZSxNQUFmOzs7Ozs7QUFFakIseUJBQU8sSUFBUCxDQUFZLFdBQVosQ0FBd0IsS0FBeEI7O0FBRUEseUJBQU8sSUFBUCxDQUFZLFlBQVosQ0FBeUIsSUFBekI7O29EQUVPOzs7Ozs7OztTQU5VOzs7OztTQUFaLENBQVAsQ0FGMkI7S0FBaEI7Ozs7OztBQWdCYixvQkFBZ0Isd0JBQVMsS0FBVCxFQUFnQixTQUFoQixFQUEyQjs7O0FBRXpDLGVBQVMsbUJBQVQsQ0FBNkIsTUFBN0IsRUFBb0M7O0FBRWxDLFlBQUksWUFBWSxPQUFPLElBQVAsQ0FBWSxnQkFBWixDQUNkLEtBRGMsRUFFZCxNQUZjLENBQVosQ0FGOEI7O0FBTWxDLGtCQUFVLGdCQUFWLEdBTmtDOztBQVFsQyxrQkFBVSxRQUFWLEdBQXFCLFVBQVUsV0FBVixDQVJhOztBQVVsQyxrQkFBVSxLQUFWLEdBQWtCLFVBQVUsS0FBVjs7O0FBVmdCLGlCQWFsQyxDQUFVLFVBQVYsQ0FBcUIsRUFBckIsR0FBMEIsVUFBVSxRQUFWLENBQW1CLENBQW5CLENBYlE7QUFjbEMsa0JBQVUsVUFBVixDQUFxQixFQUFyQixHQUEwQixVQUFVLFFBQVYsQ0FBbUIsQ0FBbkIsQ0FkUTtBQWVsQyxrQkFBVSxVQUFWLENBQXFCLEVBQXJCLEdBQTBCLFVBQVUsUUFBVixDQUFtQixDQUFuQixDQWZRO0FBZ0JsQyxrQkFBVSxVQUFWLENBQXFCLEVBQXJCLEdBQTBCLFVBQVUsUUFBVixDQUFtQixDQUFuQixDQWhCUTs7QUFrQmxDLGtCQUFVLG1CQUFWLEdBbEJrQztPQUFwQzs7QUFxQkEsYUFBTyxJQUFJLE9BQUo7NERBQVksa0JBQU0sT0FBTixFQUFlLE1BQWY7Y0FFYixXQUlJOzs7OztBQUpKLDhCQUFZLE1BQU0sZUFBTixHQUNkLFNBRGMsQ0FDSixXQURJLENBQ1EsTUFEUjs7OztBQUloQix1QkFBUSxTQUFPLENBQWYsRUFBa0IsU0FBTyxTQUFQLEVBQWtCLEVBQUUsTUFBRixFQUFTOztBQUUzQyx3Q0FBb0IsTUFBcEIsRUFGMkM7bUJBQTdDOztvREFLTzs7Ozs7Ozs7U0FYVTs7Ozs7U0FBWixDQUFQLENBdkJ5QztLQUEzQjs7Ozs7O0FBMENoQixjQUFVLGtCQUFTLEtBQVQsRUFBZ0IsS0FBaEIsRUFBc0M7VUFBZixnRUFBUSxxQkFBTzs7O0FBRTlDLGFBQU8sSUFBSSxPQUFKLENBQVksVUFBQyxPQUFELEVBQVUsTUFBVixFQUFvQjs7QUFFckMsZ0JBQVEsTUFBTSxPQUFOLENBQWMsS0FBZCxJQUF1QixLQUF2QixHQUErQixDQUFDLEtBQUQsQ0FBL0IsQ0FGNkI7O0FBSXJDLGNBQU0sYUFBTixDQUFvQixVQUFDLFlBQUQsRUFBaUI7O0FBRW5DLGNBQUksS0FBSyxJQUFJLFNBQVMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixpQkFBekIsQ0FDWCxPQUFPLElBQVAsRUFDQSxPQUFPLEtBQVAsQ0FGRSxDQUYrQjs7QUFNbkMsZ0JBQU0sT0FBTixDQUFjLFVBQUMsSUFBRCxFQUFTOztBQUVyQixnQkFBSSxPQUFPLGFBQWEsVUFBYixDQUF3QixJQUF4QixDQUFQLENBRmlCOztBQUlyQixlQUFHLElBQUgsQ0FBUSxJQUFSLEVBSnFCO0FBS3JCLGVBQUcsVUFBSCxDQUFjLElBQWQsRUFBb0IsT0FBcEIsRUFMcUI7V0FBVCxDQUFkLENBTm1DOztBQWNuQyxpQkFBTyxTQUFQLENBZG1DO1NBQWpCLENBQXBCLENBSnFDO09BQXBCLENBQW5CLENBRjhDO0tBQXRDOzs7Ozs7QUE2QlYsY0FBVSxrQkFBUyxLQUFULEVBQWdCLEtBQWhCLEVBQXVCOztBQUUvQixhQUFPLElBQUksT0FBSixDQUFZLFVBQUMsT0FBRCxFQUFVLE1BQVYsRUFBb0I7O0FBRXJDLGdCQUFRLE1BQU0sT0FBTixDQUFjLEtBQWQsSUFBdUIsS0FBdkIsR0FBK0IsQ0FBQyxLQUFELENBQS9CLENBRjZCOztBQUlyQyxjQUFNLGFBQU4sQ0FBb0IsVUFBQyxZQUFELEVBQWlCOztBQUVuQyxjQUFJLEtBQUssSUFBSSxTQUFTLE9BQVQsQ0FBaUIsT0FBakIsQ0FBeUIsaUJBQXpCLENBQ1gsT0FBTyxJQUFQLEVBQ0EsT0FBTyxLQUFQLENBRkUsQ0FGK0I7O0FBTW5DLGdCQUFNLE9BQU4sQ0FBYyxVQUFDLElBQUQsRUFBUzs7QUFFckIsZ0JBQUksT0FBTyxhQUFhLFVBQWIsQ0FBd0IsSUFBeEIsQ0FBUCxDQUZpQjs7QUFJckIsZUFBRyxVQUFILENBQWMsSUFBZCxFQUFvQixLQUFwQixFQUpxQjtBQUtyQixlQUFHLElBQUgsQ0FBUSxJQUFSLEVBTHFCO1dBQVQsQ0FBZCxDQU5tQzs7QUFjbkMsaUJBQU8sU0FBUCxDQWRtQztTQUFqQixDQUFwQixDQUpxQztPQUFwQixDQUFuQixDQUYrQjtLQUF2QjtHQXRXUjs7Ozs7O0FBVmtFLE1BOFl0RSxDQUFLLElBQUwsR0FBWSxZQUFXOzs7QUFHckIsV0FBTyxLQUFQLENBQWEsSUFBYixHQUFvQixRQUFRLEtBQVIsQ0FBYyxJQUFkLENBSEM7O0FBS3JCLFFBQUksU0FBUyxhQUFhLE1BQWIsRUFDWCwwQkFEVyxFQUVYLGNBRlcsRUFFSyxZQUFJOztBQUVsQixhQUFPLGdCQUFQLEdBRmtCO0tBQUosQ0FGZCxDQUxpQjs7QUFZckIsUUFBSSxnQkFBZ0IsT0FBTyxVQUFQLENBQWtCLElBQWxCLENBQWhCLENBWmlCOztBQWNyQixRQUFJLFlBQVksSUFBSSxTQUFTLE9BQVQsQ0FBaUIsRUFBakIsQ0FBb0IsWUFBcEIsQ0FDbEIsYUFEYyxDQUFaLENBZGlCOztBQWlCckIsY0FBVSxVQUFWLENBQXFCLE1BQXJCLEVBQTZCLEVBQUMsT0FBTSxDQUFOLEVBQTlCLEVBakJxQjs7QUFtQnJCLGtCQUFjLFVBQWQsQ0FBeUIsU0FBekIsRUFuQnFCOztBQXFCckIsYUFBUyxJQUFJLGdCQUFKLENBQ1AsT0FBTyxTQUFQLEVBQ0EsTUFGTyxFQUdQLE9BQU8sU0FBUCx1QkFITyxDQUFULENBckJxQjs7QUEyQnJCLFlBQVEsR0FBUixDQUFZLG1EQUFaLEVBM0JxQjs7QUE2QnJCLFdBQU8sSUFBUCxDQTdCcUI7R0FBWDs7Ozs7O0FBOVkwRCxNQWtidEUsQ0FBSyxNQUFMLEdBQWMsWUFBWTs7QUFFeEIsUUFBRyxNQUFILEVBQVc7O0FBRVQsYUFBTyxVQUFQLENBQWtCLEtBQWxCLEVBRlM7O0FBSVQsZUFBUyxJQUFULENBSlM7O0FBTVQsVUFBSSxnQkFBZ0IsT0FBTyxVQUFQLENBQWtCLElBQWxCLENBQWhCLENBTks7O0FBUVQsb0JBQWMsYUFBZCxDQUNFLGFBREYsRUFSUztLQUFYOztBQVlBLFlBQVEsR0FBUixDQUFZLHFEQUFaLEVBZHdCOztBQWdCeEIsV0FBTyxJQUFQLENBaEJ3QjtHQUFaOzs7Ozs7QUFsYndELFdBeWM3RCxZQUFULENBQXNCLEVBQXRCLEVBQTBCLFNBQTFCLEVBQXFDLE9BQXJDLEVBQThDLE9BQTlDLEVBQXVEOztBQUVyRCxRQUFJLFNBQVMsSUFBSSxTQUFTLE9BQVQsQ0FBaUIsRUFBakIsQ0FBb0IsTUFBcEIsQ0FBMkIsRUFBL0IsQ0FBVCxDQUZpRDs7QUFJckQsV0FBTyxJQUFQLENBQVksS0FBWixDQUFrQixRQUFsQixHQUE2QixNQUE3QixDQUpxRDs7QUFNckQsV0FBTyxJQUFQLENBQVksU0FBWixHQUF3QixTQUF4QixDQU5xRDs7QUFRckQsV0FBTyxVQUFQLENBQWtCLE9BQWxCLEVBUnFEOztBQVVyRCxXQUFPLE9BQVAsR0FBaUIsT0FBakIsQ0FWcUQ7O0FBWXJELFdBQU8sTUFBUCxDQVpxRDtHQUF2RDs7Ozs7O0FBemNzRSxXQTRkN0QsSUFBVCxHQUFnQjs7QUFFZCxRQUFJLElBQUksSUFBSSxJQUFKLEdBQVcsT0FBWCxFQUFKLENBRlU7O0FBSWQsUUFBSSxPQUFPLHNCQUFzQixPQUF0QixDQUNULE9BRFMsRUFFVCxVQUFVLENBQVYsRUFBYTtBQUNYLFVBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFMLEtBQWdCLEVBQWhCLENBQUwsR0FBMkIsRUFBM0IsR0FBZ0MsQ0FBaEMsQ0FERztBQUVYLFVBQUksS0FBSyxLQUFMLENBQVcsSUFBSSxFQUFKLENBQWYsQ0FGVztBQUdYLGFBQU8sQ0FBQyxLQUFLLEdBQUwsR0FBVyxDQUFYLEdBQWdCLElBQUksR0FBSixHQUFVLEdBQVYsQ0FBakIsQ0FBaUMsUUFBakMsQ0FBMEMsRUFBMUMsQ0FBUCxDQUhXO0tBQWIsQ0FGRSxDQUpVOztBQVlkLFdBQU8sSUFBUCxDQVpjO0dBQWhCOzs7Ozs7QUE1ZHNFLE1BK2VsRSxtQkFBbUIsU0FBbkIsZ0JBQW1CLENBQ3JCLGVBRHFCLEVBRXJCLE9BRnFCLEVBR3JCLFVBSHFCLEVBSXJCLFdBSnFCLEVBSVI7Ozs7Ozs7OzBEQStCYjs7O1lBa0NNLFVBTUEsZUFvQkE7Ozs7OztBQTFESiwyQkFBVyxPQUFYLEdBQXFCLFNBQVMsYUFBVCxDQUF1QixLQUF2QixDQUFyQjs7QUFFQSxrQkFBRSxXQUFXLFNBQVgsQ0FBRixDQUF3QixRQUF4QixDQUFpQyxjQUFqQzs7QUFFQSxrQkFBRSxXQUFXLFNBQVgsQ0FBRixDQUF3QixNQUF4QixDQUErQixhQUFhLE9BQWIsQ0FBL0I7Ozs7QUFJQTs7QUFFQSx3QkFBTSxxQkFBTixFQUEwQixLQUExQixDQUNFLE1BREY7O0FBR0Esd0JBQU0sNkJBQU4sRUFBa0MsS0FBbEMsQ0FDRSxhQURGOztBQUdBLHdCQUFNLDBCQUFOLEVBQStCLEtBQS9CLENBQ0UsV0FERjs7QUFHQSx3QkFBTSxzQkFBTixFQUEyQixLQUEzQixDQUNFLE9BREY7O0FBR0EsdUJBQU8sZ0JBQVAsQ0FDRSxTQUFTLE9BQVQsQ0FBaUIsaUNBQWpCLEVBQ0EsMkJBRkY7Ozs7QUFNQSxrQkFBRSx1Q0FBRixFQUEyQyxNQUEzQyxDQUNFLCtDQURGOztBQUlJLDJCQUFXO0FBQ2Isd0JBQU0sV0FBTjtBQUNBLHdCQUFNLGdCQUFOO0FBQ0EsNEJBQVUsRUFBVjs7O3VCQUd3QixJQUFJLGdCQUFKOzs7QUFBdEI7OztBQUVKLDhCQUFjLE9BQWQsQ0FBc0IsVUFBQyxLQUFELEVBQVM7Ozs7QUFJN0Isc0JBQUksU0FBUyxtQkFDWCxPQUFPLE9BQU8sSUFBUCxDQUFZLE1BQU0sR0FBTixDQUFuQixDQURXLENBQVQsQ0FKeUI7O0FBTzdCLHNCQUFHLENBQUMsT0FBTyxRQUFQLENBQWdCLE1BQWhCLENBQUQsRUFBMEI7O0FBRTNCLDZCQUFTLFFBQVQsQ0FBa0IsSUFBbEIsQ0FBdUI7QUFDckIsNEJBQU0sWUFBTjtBQUNBLDRCQUFNLE1BQU0sSUFBTjtBQUNOLDZCQUFPLEtBQVA7QUFDQSxnQ0FBVSxFQUFWO3FCQUpGLEVBRjJCO21CQUE3QjtpQkFQb0IsQ0FBdEI7O0FBa0JJLHVCQUFPLElBQUksV0FBSixDQUFnQjtBQUN6QiwwQkFBUSw0QkFBUjtBQUNBLHdCQUFNLENBQUMsUUFBRCxDQUFOO2lCQUZTOzs7QUFLWCxxQkFBSyxFQUFMLENBQVEsZUFBUjtzRUFBeUIsa0JBQU0sS0FBTixFQUFhLElBQWI7Ozs7O2tDQUVwQixLQUFLLElBQUwsSUFBYSxZQUFiOzs7Ozs7bUNBRUcsZ0JBQWdCLElBQWhCOzs7O0FBRUo7Ozs7Ozs7O21CQU5xQjs7Ozs7bUJBQXpCOztBQVVBLHdCQUFNLG1CQUFOLEVBQXdCLEVBQXhCLENBQTJCLE9BQTNCLEVBQW9DLFVBQUMsQ0FBRCxFQUFNOztBQUV4QyxzQkFBSSxVQUFVLEtBQUssTUFBTCxDQUFZLEVBQUUsTUFBRixDQUFTLEtBQVQsQ0FBdEIsQ0FGb0M7O0FBSXhDLDBDQUF3QixXQUFXLEVBQVgsQ0FKZ0I7aUJBQU4sQ0FBcEM7Ozs7Ozs7O09BM0VGOztzQkFBZTs7Ozs7Ozs7O0FBL0JGOzs7Ozs7OzswREE4UWIsa0JBQTJDLEtBQTNDO1lBSVEsV0FFQSxPQUlBOzs7OztzQkFSSCxNQUFNLFVBQU4sSUFBb0IsTUFBTSxVQUFOLENBQWlCLE1BQWpCOzs7OztBQUVqQiw0QkFBWSxNQUFNLFVBQU4sQ0FBaUIsQ0FBakI7QUFFWix3QkFBUSxVQUFVLEtBQVY7O3VCQUVOLElBQUksZUFBSixDQUFvQixLQUFwQjs7O0FBRUYseUJBQVMsVUFBVSxTQUFWLENBQW9CLENBQXBCOzs7QUFFYixxQ0FBcUIsTUFBckI7Ozs7OztBQUtBLHVCQUFPLEtBQVAsQ0FBYSxhQUFiLENBQTJCLFVBQUMsWUFBRCxFQUFpQjs7QUFFMUMsdUNBQXFCLGFBQWEsTUFBYixDQUFyQixDQUYwQztpQkFBakIsQ0FBM0I7Ozs7Ozs7O09BakJKOztzQkFBZTs7O1FBOVFGOzs7Ozs7OzswREF5VGIsa0JBQXNCLEtBQXRCO1lBSU0sS0FFQSxPQVVBOzs7Ozs7QUFkSixzQkFBTSxjQUFOOztBQUVJLHNCQUFNLFFBQU0sZ0JBQU4sRUFBcUIsR0FBckI7QUFFTix3QkFBUSxRQUFNLGtCQUFOLEVBQXVCLEdBQXZCOztvQkFFUixJQUFJLE1BQUo7Ozs7O0FBRUYsc0JBQU0sc0JBQU47Ozs7cUJBSU8sTUFBTSxNQUFOOzs7OzsrQkFBZTs7Ozs7O3VCQUFjLElBQUksUUFBSjs7Ozs7O0FBQXRDOzt1QkFFa0IsWUFBWSxLQUFaLEVBQW1CLEdBQW5COzs7QUFBZDs7O0FBRUosc0JBQU0sSUFBTixHQUFhLElBQUksWUFBSixDQUFpQixHQUFqQixDQUFiOztBQUVBOzs7Ozs7OztPQXBCRjs7c0JBQWU7Ozs7Ozs7OztBQXpURjs7OzBEQW9WYixrQkFBMkIsS0FBM0IsRUFBa0MsR0FBbEM7WUFFTSxhQUlBLGdCQUdBOzs7OztBQVBBLDhCQUFjO0FBQ2hCLHNDQUFvQixzQkFBcEI7Ozt1QkFHeUIsSUFBSSxlQUFKLENBQ3pCLEtBRHlCLEVBQ2xCLEdBRGtCOzs7QUFBdkI7O3VCQUdjLElBQUksU0FBSixDQUNoQixlQUFlLENBQWYsQ0FEZ0IsRUFFaEIsV0FGZ0I7OztBQUFkO2tEQUlHOzs7Ozs7OztPQWJUOztzQkFBZTs7Ozs7Ozs7O0FBcFZGOzs7Ozs7OzswREE2WmIsbUJBQTZCLEtBQTdCO1lBSU07Ozs7OztBQUZKLHNCQUFNLGNBQU47O0FBRUksMkJBQVc7OztBQUVmLHNDQUFzQixPQUF0QixDQUE4QixVQUFDLElBQUQsRUFBUTs7QUFFcEMsMkJBQVMsSUFBVCxDQUFjLGdCQUFnQixJQUFoQixDQUFkLEVBRm9DO2lCQUFSLENBQTlCOztBQUtBLHdCQUFRLEdBQVIsQ0FBWSxRQUFaLEVBQXNCLElBQXRCLENBQTJCLFlBQUs7O0FBRTlCLCtCQUY4QjtpQkFBTCxDQUEzQjs7Ozs7Ozs7T0FYRjs7c0JBQWU7Ozs7Ozs7OztBQTdaRjs7OzBEQWtiYixtQkFBK0IsSUFBL0I7WUFNUSxhQWVBLE9BRkE7Ozs7O3NCQWhCSCxLQUFLLEtBQUwsQ0FBVyxZQUFYLElBQ0QsS0FBSyxLQUFMLENBQVcsWUFBWCxDQUF3QixNQUF4Qjs7Ozs7QUFFSSw4QkFBYztBQUNoQixzQ0FBb0Isc0JBQXBCOzs7dUJBR2dCLElBQUksU0FBSixDQUNoQixLQUFLLEtBQUwsQ0FBVyxZQUFYLENBQXdCLENBQXhCLEVBQTJCLElBQTNCLEVBQ0EsV0FGZ0I7OztBQUFkOzs7QUFJSixzQkFBTSxJQUFOLEdBQWEsS0FBSyxLQUFMLENBQVcsSUFBWDs7Ozs7O3VCQUtLLElBQUksUUFBSjs7O0FBQWQ7O3VCQUVjLFlBQ2hCLEtBRGdCLEVBRWhCLEtBQUssS0FBTCxDQUFXLEdBQVg7OztBQUZFOzs7QUFJSixzQkFBTSxJQUFOLEdBQWEsS0FBSyxLQUFMLENBQVcsSUFBWDs7Ozs7Ozs7T0F6QmpCOztzQkFBZTs7Ozs7Ozs7O0FBbGJGOzs7MERBbWRiOzs7WUFRTSxVQU1BLFFBWUE7Ozs7OztBQXhCSixrQkFBRSxvQkFBRixFQUF3QixNQUF4Qjs7QUFFQSxrQkFBRSxzQ0FBRixFQUEwQyxNQUExQyxDQUNFLHVDQURGOztBQUlJLDJCQUFXO0FBQ2Isd0JBQU0sV0FBTjtBQUNBLHdCQUFNLGVBQU47QUFDQSw0QkFBVSxFQUFWOzs7dUJBR2lCLElBQUksZUFBSjs7O0FBQWY7OztBQUVKLHVCQUFPLE9BQVAsQ0FBZSxVQUFDLEtBQUQsRUFBUzs7QUFFdEIsMkJBQVMsUUFBVCxDQUFrQixJQUFsQixDQUF1QjtBQUNyQiwwQkFBTSxZQUFOO0FBQ0EsMEJBQVMsTUFBTSxJQUFOLGNBQW1CLE1BQU0sRUFBTixNQUE1QjtBQUNBLDJCQUFPLEtBQVA7QUFDQSw4QkFBVSxFQUFWO21CQUpGLEVBRnNCO2lCQUFULENBQWY7O0FBVUksdUJBQU8sSUFBSSxXQUFKLENBQWdCO0FBQ3pCLDBCQUFRLG9CQUFSO0FBQ0Esd0JBQU0sQ0FBQyxRQUFELENBQU47QUFDQSwrQkFBYSxDQUFDO0FBQ1osMEJBQU0sZ0JBQU47QUFDQSw2QkFBUyxpQkFBQyxLQUFELEVBQVEsSUFBUixFQUFjLE1BQWQsRUFBd0I7O0FBRS9CLCtCQUYrQjtBQUcvQiwwQkFBSSxlQUFKLENBQW9CLEtBQUssS0FBTCxDQUFwQixDQUgrQjtxQkFBeEI7bUJBRkUsRUFPWDtBQUNBLDBCQUFNLGNBQU47QUFDQTswRUFBUyxtQkFBTSxLQUFOLEVBQWEsSUFBYixFQUFtQixNQUFuQjs7Ozs7O0FBRVA7Ozt1Q0FFTSxJQUFJLFdBQUosQ0FBZ0IsS0FBSyxLQUFMOzs7O0FBRXRCOzs7Ozs7Ozt1QkFOTzs7Ozs7dUJBQVQ7bUJBVFcsQ0FBYjtpQkFIUzs7O0FBdUJYLHFCQUFLLEVBQUwsQ0FBUSxlQUFSO3NFQUF5QixtQkFBTSxLQUFOLEVBQWEsSUFBYjs7Ozs7a0NBRXBCLEtBQUssSUFBTCxJQUFhLFlBQWI7Ozs7OzttQ0FFSyxJQUFJLGVBQUosQ0FBb0IsS0FBSyxLQUFMOzs7O21DQUVwQixJQUFJLGNBQUosQ0FBbUIsS0FBSyxLQUFMOzs7Ozs7OzttQkFOSjs7Ozs7bUJBQXpCOzs7QUFXQSxxQkFBSyxLQUFMLEdBQWEsQ0FBYixFQUFnQixNQUFoQjs7QUFFQSxvQ0FBb0IsSUFBcEI7Ozs7Ozs7O09BOURGOztzQkFBZTs7Ozs7Ozs7O0FBbmRGOzs7Ozs7QUFNYixhQUFTLE9BQVQsQ0FBaUIsRUFBakIsQ0FBb0IsWUFBcEIsQ0FBaUMsSUFBakMsQ0FDRSxJQURGLEVBRUUsZUFGRixFQUdFLE9BSEYsRUFJRSxjQUpGLEVBS0UsRUFBQyxRQUFRLElBQVIsRUFMSDs7Ozs7O0FBTmEsUUFpQlQsYUFBYSxJQUFiLENBakJTOztBQW1CYixRQUFJLGFBQWEsS0FBYixDQW5CUzs7QUFxQmIsUUFBSSxlQUFlLEtBQWYsQ0FyQlM7O0FBdUJiLFFBQUksb0JBQW9CLElBQXBCLENBdkJTOztBQXlCYixRQUFJLHdCQUF3QixFQUF4QixDQXpCUyxTQXNISixZQUFULENBQXNCLEVBQXRCLEVBQTBCOztBQUV4QiwwSEFLZ0IsK1ZBVUQsdUhBSUEsMFJBYUUsNEhBSUEsNEhBSUEscVJBWUEsNEhBSUEsNEhBSUEscVRBY0EsNEhBSUEsNEhBSUEsNE5BT0MsNGFBV0EsZ1pBY0gscU1BS0MsNGxCQXZIaEIsQ0FGd0I7S0FBMUI7O0FBZ0xBLGFBQVMsb0JBQVQsQ0FBOEIsTUFBOUIsRUFBc0M7O0FBRXBDLGFBQU8sYUFBUCxDQUFxQixNQUFyQixFQUE2QixVQUFDLE1BQUQsRUFBVTs7QUFFckMsWUFBRyxPQUFPLFVBQVAsRUFBbUI7O0FBRXBCLGNBQUksZ0JBQWdCLE9BQU8sZ0JBQVAsQ0FBd0IsSUFBeEIsQ0FBaEIsQ0FGZ0I7O0FBSXBCLHdCQUFjLGlCQUFkLENBQWdDLE1BQWhDLEVBSm9COztBQU1wQix3QkFBYyxhQUFkLENBQTRCLE9BQU8sVUFBUCxDQUE1QixDQU5vQjtTQUF0QjtPQUYyQixDQUE3QixDQUZvQztLQUF0QyxTQWtFUyxXQUFULENBQXFCLEtBQXJCLEVBQTRCOzs7QUFFMUIsVUFBSSxPQUFPLGtCQUFrQixLQUFsQixHQUEwQixDQUExQixDQUFQLENBRnNCOztBQUkxQixVQUFJLGdCQUFnQixFQUFoQixDQUpzQjs7QUFNMUIsV0FBSyxRQUFMLENBQWMsV0FBZCxDQUEwQixVQUFDLElBQUQsRUFBUzs7QUFFakMsWUFBSSxLQUFLLFFBQUwsTUFBbUIsS0FBSyxJQUFMLElBQWEsWUFBYixFQUEyQjs7QUFFaEQsd0JBQWMsSUFBZCxDQUFtQixJQUFuQixFQUZnRDtTQUFsRDtPQUZ3QixDQUExQixDQU4wQjs7QUFjMUIsVUFBSSxZQUFZO0FBQ2QscUJBQWEsZ0JBQWI7QUFDQSxrQkFBVSxhQUFWO0FBQ0EsZUFBTyxVQUFQO09BSEUsQ0Fkc0I7O0FBb0IxQixvQkFBYyxPQUFkOzREQUFzQixrQkFBTSxJQUFOOzs7Ozs7eUJBRWQsSUFBSSxjQUFKLENBQ0osS0FBSyxLQUFMLEVBQ0EsU0FGSTs7OztBQUlOLHlCQUFPLElBQVAsQ0FBWSxZQUFaLENBQXlCLElBQXpCOzs7Ozs7OztTQU5vQjs7Ozs7U0FBdEIsRUFwQjBCO0tBQTVCOzs7Ozs7QUF4V2EsYUEwWUosT0FBVCxDQUFpQixLQUFqQixFQUF3Qjs7QUFFdEIsY0FBTSxlQUFOLEVBQW9CLEdBQXBCLENBQXdCLEVBQXhCLEVBRnNCO0FBR3RCLGNBQU0sZUFBTixFQUFvQixHQUFwQixDQUF3QixFQUF4QixFQUhzQjtBQUl0QixjQUFNLGVBQU4sRUFBb0IsR0FBcEIsQ0FBd0IsRUFBeEIsRUFKc0I7O0FBTXRCLGNBQU0sZUFBTixFQUFvQixHQUFwQixDQUF3QixFQUF4QixFQU5zQjtBQU90QixjQUFNLGVBQU4sRUFBb0IsR0FBcEIsQ0FBd0IsRUFBeEIsRUFQc0I7QUFRdEIsY0FBTSxlQUFOLEVBQW9CLEdBQXBCLENBQXdCLEVBQXhCLEVBUnNCOztBQVV0QixjQUFNLGVBQU4sRUFBb0IsR0FBcEIsQ0FBd0IsRUFBeEIsRUFWc0I7QUFXdEIsY0FBTSxlQUFOLEVBQW9CLEdBQXBCLENBQXdCLEVBQXhCLEVBWHNCO0FBWXRCLGNBQU0sZUFBTixFQUFvQixHQUFwQixDQUF3QixFQUF4QixFQVpzQjtLQUF4QixTQThJUyxRQUFULEdBQW9COztBQUVsQixVQUFJLElBQUksV0FBVyxRQUFNLGVBQU4sRUFBb0IsR0FBcEIsRUFBWCxDQUFKLENBRmM7QUFHbEIsVUFBSSxJQUFJLFdBQVcsUUFBTSxlQUFOLEVBQW9CLEdBQXBCLEVBQVgsQ0FBSixDQUhjO0FBSWxCLFVBQUksSUFBSSxXQUFXLFFBQU0sZUFBTixFQUFvQixHQUFwQixFQUFYLENBQUosQ0FKYzs7QUFNbEIsVUFBSSxNQUFNLENBQU4sSUFBVyxHQUFYLEdBQWlCLENBQWpCLENBTmM7QUFPbEIsVUFBSSxNQUFNLENBQU4sSUFBVyxHQUFYLEdBQWlCLENBQWpCLENBUGM7QUFRbEIsVUFBSSxNQUFNLENBQU4sSUFBVyxHQUFYLEdBQWlCLENBQWpCLENBUmM7O0FBVWxCLGFBQU8sSUFBSSxNQUFNLE9BQU4sQ0FBYyxDQUFsQixFQUFxQixDQUFyQixFQUF3QixDQUF4QixDQUFQLENBVmtCO0tBQXBCOztBQWFBLGFBQVMsY0FBVCxHQUEwQjs7QUFFeEIsVUFBSSxJQUFJLFdBQVcsUUFBTSxlQUFOLEVBQW9CLEdBQXBCLEVBQVgsQ0FBSixDQUZvQjtBQUd4QixVQUFJLElBQUksV0FBVyxRQUFNLGVBQU4sRUFBb0IsR0FBcEIsRUFBWCxDQUFKLENBSG9CO0FBSXhCLFVBQUksSUFBSSxXQUFXLFFBQU0sZUFBTixFQUFvQixHQUFwQixFQUFYLENBQUosQ0FKb0I7O0FBTXhCLFVBQUksTUFBTSxDQUFOLElBQVcsR0FBWCxHQUFpQixDQUFqQixDQU5vQjtBQU94QixVQUFJLE1BQU0sQ0FBTixJQUFXLEdBQVgsR0FBaUIsQ0FBakIsQ0FQb0I7QUFReEIsVUFBSSxNQUFNLENBQU4sSUFBVyxHQUFYLEdBQWlCLENBQWpCLENBUm9COztBQVV4QixhQUFPLElBQUksTUFBTSxPQUFOLENBQWMsQ0FBbEIsRUFBcUIsQ0FBckIsRUFBd0IsQ0FBeEIsQ0FBUCxDQVZ3QjtLQUExQjs7QUFhQSxhQUFTLFdBQVQsR0FBdUI7O0FBRXJCLFVBQUksSUFBSSxXQUFXLFFBQU0sZUFBTixFQUFvQixHQUFwQixFQUFYLENBQUosQ0FGaUI7QUFHckIsVUFBSSxJQUFJLFdBQVcsUUFBTSxlQUFOLEVBQW9CLEdBQXBCLEVBQVgsQ0FBSixDQUhpQjtBQUlyQixVQUFJLElBQUksV0FBVyxRQUFNLGVBQU4sRUFBb0IsR0FBcEIsRUFBWCxDQUFKLENBSmlCOztBQU1yQixVQUFJLE1BQU0sQ0FBTixJQUFXLEdBQVgsR0FBaUIsQ0FBakIsQ0FOaUI7QUFPckIsVUFBSSxNQUFNLENBQU4sSUFBVyxHQUFYLEdBQWlCLENBQWpCLENBUGlCO0FBUXJCLFVBQUksTUFBTSxDQUFOLElBQVcsR0FBWCxHQUFpQixDQUFqQixDQVJpQjs7QUFVckIsVUFBSSxRQUFRLElBQUksTUFBTSxLQUFOLENBQ2QsSUFBSSxLQUFLLEVBQUwsR0FBUSxHQUFaLEVBQ0EsSUFBSSxLQUFLLEVBQUwsR0FBUSxHQUFaLEVBQ0EsSUFBSSxLQUFLLEVBQUwsR0FBUSxHQUFaLEVBQ0EsS0FKVSxDQUFSLENBVmlCOztBQWdCckIsVUFBSSxJQUFJLElBQUksTUFBTSxVQUFOLEVBQVIsQ0FoQmlCOztBQWtCckIsUUFBRSxZQUFGLENBQWUsS0FBZixFQWxCcUI7O0FBb0JyQixhQUFPLENBQVAsQ0FwQnFCO0tBQXZCOzs7Ozs7QUFsakJhLGFBNmtCSixvQkFBVCxHQUFnQzs7QUFFOUIsVUFBSSxJQUFJLGdCQUFKLENBRjBCO0FBRzlCLFVBQUksSUFBSSxhQUFKLENBSDBCO0FBSTlCLFVBQUksSUFBSSxVQUFKLENBSjBCOztBQU05QixVQUFJLElBQUksSUFBSSxNQUFNLE9BQU4sRUFBUixDQU4wQjs7QUFROUIsUUFBRSxPQUFGLENBQVUsQ0FBVixFQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFSOEI7O0FBVTlCLGFBQU8sQ0FBUCxDQVY4QjtLQUFoQzs7Ozs7O0FBN2tCYSxjQThsQmIsQ0FBVyxVQUFYLEdBQXdCLFVBQVMsSUFBVCxFQUFlOztBQUVyQyxtQkFBYSxJQUFiLENBRnFDOztBQUlyQyxpQkFBVyxTQUFYLENBQXFCLE1BQXJCLENBQTRCLFFBQTVCLEVBSnFDOztBQU1yQyxlQUFTLE9BQVQsQ0FBaUIsRUFBakIsQ0FBb0IsWUFBcEIsQ0FBaUMsU0FBakMsQ0FDRSxVQURGLENBQ2EsSUFEYixDQUNrQixJQURsQixFQUN3QixJQUR4QixFQU5xQztLQUFmOzs7Ozs7QUE5bEJYLGNBNG1CYixDQUFXLGdCQUFYLEdBQThCLFlBQVc7O0FBRXZDLGFBQU8sVUFBUCxDQUFrQixDQUFDLFVBQUQsQ0FBbEIsQ0FGdUM7S0FBWDs7Ozs7O0FBNW1CakIsY0FxbkJiLENBQVcsVUFBWCxHQUF3QixZQUFXOztBQUVqQyxXQUFLLEtBQUwsR0FBYSxLQUFLLGNBQUwsQ0FDWCxLQUFLLFVBQUwsSUFDQSxLQUFLLFNBQUwsQ0FBZSxFQUFmLENBRkYsQ0FGaUM7O0FBTWpDLFdBQUssTUFBTCxHQUFjLEtBQUssaUJBQUwsRUFBZCxDQU5pQzs7QUFRakMsV0FBSyxTQUFMLENBQWUsV0FBZixDQUEyQixLQUFLLEtBQUwsQ0FBM0IsQ0FSaUM7QUFTakMsV0FBSyxLQUFMLENBQVcsV0FBWCxDQUF1QixLQUFLLE1BQUwsQ0FBdkIsQ0FUaUM7QUFVakMsV0FBSyxTQUFMLENBQWUsV0FBZixDQUEyQixLQUFLLE9BQUwsQ0FBM0IsQ0FWaUM7O0FBWWpDLFdBQUssc0JBQUwsQ0FBNEIsS0FBSyxLQUFMLENBQTVCLENBWmlDO0FBYWpDLFdBQUssc0JBQUwsQ0FBNEIsS0FBSyxNQUFMLENBQTVCLENBYmlDO0tBQVg7Ozs7OztBQXJuQlgsY0F5b0JiLENBQVcsa0JBQVgsR0FBZ0MsVUFBVSxLQUFWLEVBQWlCOztBQUUvQyxxQkFBZSxDQUFDLFlBQUQsQ0FGZ0M7O0FBSS9DLFVBQUcsWUFBSCxFQUFpQjs7QUFFZixVQUFFLFdBQVcsU0FBWCxDQUFGLENBQXdCLFFBQXhCLENBQ0UsV0FERixFQUZlO09BQWpCLE1BS0s7QUFDSCxVQUFFLFdBQVcsU0FBWCxDQUFGLENBQXdCLFdBQXhCLENBQ0UsV0FERixFQURHO09BTEw7S0FKOEI7OztBQXpvQm5CLGNBeXBCYixHQXpwQmE7R0FKUTs7Ozs7O0FBL2UrQyxrQkFtcEN0RSxDQUFpQixTQUFqQixHQUE2QixPQUFPLE1BQVAsQ0FDM0IsU0FBUyxPQUFULENBQWlCLEVBQWpCLENBQW9CLFlBQXBCLENBQWlDLFNBQWpDLENBREYsQ0FucENzRTs7QUFzcEN0RSxtQkFBaUIsU0FBakIsQ0FBMkIsV0FBM0IsR0FBeUMsZ0JBQXpDLENBdHBDc0U7Q0FBM0I7O0FBeXBDN0MsU0FBUyxHQUFULENBQWEsT0FBYixDQUFxQixTQUFyQixDQUErQixXQUEvQixDQUEyQyxTQUEzQyxHQUNFLE9BQU8sTUFBUCxDQUFjLFNBQVMsT0FBVCxDQUFpQixTQUFqQixDQUEyQixTQUEzQixDQURoQjs7QUFHQSxTQUFTLEdBQVQsQ0FBYSxPQUFiLENBQXFCLFNBQXJCLENBQStCLFdBQS9CLENBQTJDLFNBQTNDLENBQXFELFdBQXJELEdBQ0UsU0FBUyxHQUFULENBQWEsT0FBYixDQUFxQixTQUFyQixDQUErQixXQUEvQjs7QUFFRixTQUFTLE9BQVQsQ0FBaUIsbUJBQWpCLENBQXFDLGlCQUFyQyxDQUNFLDRDQURGLEVBRUUsU0FBUyxHQUFULENBQWEsT0FBYixDQUFxQixTQUFyQixDQUErQixXQUEvQixDQUZGLEMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyXG4vLyBieSBQaGlsaXBwZSBMZWVmc21hLCBGZWIgMjAxNlxuLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQXV0b2Rlc2tOYW1lc3BhY2UoXCJBdXRvZGVzay5BRE4uVmlld2luZy5FeHRlbnNpb25cIik7XG5cbmltcG9ydCBpbnNwaXJlVHJlZSBmcm9tICdpbnNwaXJlLXRyZWUnO1xuaW1wb3J0ICcuL2luc3BpcmUtdHJlZS5jc3MnO1xuaW1wb3J0ICcuL21vZGVsLWxvYWRlci5jc3MnO1xuXG5BdXRvZGVzay5BRE4uVmlld2luZy5FeHRlbnNpb24uTW9kZWxMb2FkZXIgPSBmdW5jdGlvbiAodmlld2VyLCBvcHRpb25zKSB7XG4gIFxuICBBdXRvZGVzay5WaWV3aW5nLkV4dGVuc2lvbi5jYWxsKHRoaXMsIHZpZXdlciwgb3B0aW9ucyk7XG4gIFxuICB2YXIgX3BhbmVsID0gbnVsbDtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFRoZSBtb2RlbCBBUEkgdXNlZCBieSB0aGlzIGV4dGVuc2lvblxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBBUEkgPSB7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEV4dHJhY3RzIG1vZGVsIG5hbWUgKGZpbGVuYW1lKSBmcm9tIGJhc2U2NCBVUk5cbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgZ2V0TW9kZWxOYW1lOiBmdW5jdGlvbih1cm4pIHtcblxuICAgICAgdmFyIGZpbGVJZCA9IGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUod2luZG93LmF0b2IodXJuKSkpO1xuXG4gICAgICB2YXIgZmlsZW5hbWUgPSBmaWxlSWQuc3BsaXQoJy8nKVsxXTtcblxuICAgICAgdmFyIHNwbGl0cyA9IGZpbGVuYW1lLnNwbGl0KCcuJyk7XG5cbiAgICAgIHJldHVybiBmaWxlbmFtZS5zdWJzdHJpbmcoMCxcbiAgICAgICAgZmlsZW5hbWUubGVuZ3RoIC0gKHNwbGl0c1tzcGxpdHMubGVuZ3RoLTFdLmxlbmd0aCArIDEpKTtcbiAgICB9LFxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZXR1cm5zIGxpc3Qgb2YgbW9kZWxzIGF2YWlsYWJsZSBpbiB0aGUgR2FsbGVyeVxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBnZXRHYWxsZXJ5TW9kZWxzOiBmdW5jdGlvbigpIHtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuXG4gICAgICAgICQuZ2V0KG9wdGlvbnMuYXBpVXJsICsgJy9tb2RlbHMnLCAobW9kZWxzKT0+IHtcblxuICAgICAgICAgIHJlc29sdmUobW9kZWxzKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBSZXR1cm5zIGxpc3Qgb2YgbW9kZWxzIGxvYWRlZCBpbiB0aGUgY3VycmVudCBzY2VuZVxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBnZXRMb2FkZWRNb2RlbHM6IGZ1bmN0aW9uKCkge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG5cbiAgICAgICAgcmVzb2x2ZSh2aWV3ZXIuaW1wbC5tb2RlbFF1ZXVlKCkuZ2V0TW9kZWxzKCkpO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmV0dXJucyBHYWxsZXJ5IHRva2VuXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGdldFRva2VuOiBmdW5jdGlvbigpIHtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuXG4gICAgICAgICAgJC5nZXQob3B0aW9ucy5hcGlVcmwgKyAnL2xtdi90b2tlbicsIChyZXNwb25zZSk9PiB7XG5cbiAgICAgICAgICAgIHJlc29sdmUocmVzcG9uc2UuYWNjZXNzX3Rva2VuKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmV0dXJucyB2aWV3YWJsZSBwYXRoIGZyb20gVVJOIChuZWVkcyBtYXRjaGluZyB0b2tlbilcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgZ2V0Vmlld2FibGVQYXRoOiBmdW5jdGlvbih0b2tlbiwgdXJuKSB7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcblxuICAgICAgICB0cnkge1xuXG4gICAgICAgICAgQXV0b2Rlc2suVmlld2luZy5Jbml0aWFsaXplcih7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogdG9rZW5cbiAgICAgICAgICAgIH0sICgpPT4ge1xuXG4gICAgICAgICAgQXV0b2Rlc2suVmlld2luZy5Eb2N1bWVudC5sb2FkKFxuICAgICAgICAgICAgJ3VybjonICsgdXJuLFxuICAgICAgICAgICAgKGRvY3VtZW50KT0+IHtcblxuICAgICAgICAgICAgICB2YXIgcm9vdEl0ZW0gPSBkb2N1bWVudC5nZXRSb290SXRlbSgpO1xuXG4gICAgICAgICAgICAgIHZhciBnZW9tZXRyeUl0ZW1zM2QgPSBBdXRvZGVzay5WaWV3aW5nLkRvY3VtZW50LlxuICAgICAgICAgICAgICAgIGdldFN1Ykl0ZW1zV2l0aFByb3BlcnRpZXMoXG4gICAgICAgICAgICAgICAgcm9vdEl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2dlb21ldHJ5JyxcbiAgICAgICAgICAgICAgICAgICdyb2xlJzogJzNkJyB9LFxuICAgICAgICAgICAgICAgIHRydWUpO1xuXG4gICAgICAgICAgICAgIHZhciBnZW9tZXRyeUl0ZW1zMmQgPSBBdXRvZGVzay5WaWV3aW5nLkRvY3VtZW50LlxuICAgICAgICAgICAgICAgIGdldFN1Ykl0ZW1zV2l0aFByb3BlcnRpZXMoXG4gICAgICAgICAgICAgICAgcm9vdEl0ZW0sIHtcbiAgICAgICAgICAgICAgICAgICd0eXBlJzogJ2dlb21ldHJ5JyxcbiAgICAgICAgICAgICAgICAgICdyb2xlJzogJzJkJyB9LFxuICAgICAgICAgICAgICAgIHRydWUpO1xuXG4gICAgICAgICAgICAgIHZhciBnb3QyZCA9IChnZW9tZXRyeUl0ZW1zMmQgJiYgZ2VvbWV0cnlJdGVtczJkLmxlbmd0aCA+IDApO1xuICAgICAgICAgICAgICB2YXIgZ290M2QgPSAoZ2VvbWV0cnlJdGVtczNkICYmIGdlb21ldHJ5SXRlbXMzZC5sZW5ndGggPiAwKTtcblxuICAgICAgICAgICAgICBpZihnb3QyZCB8fCBnb3QzZCkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHBhdGhDb2xsZWN0aW9uID0gW107XG5cbiAgICAgICAgICAgICAgICBnZW9tZXRyeUl0ZW1zMmQuZm9yRWFjaCgoaXRlbSk9PntcblxuICAgICAgICAgICAgICAgICAgcGF0aENvbGxlY3Rpb24ucHVzaChkb2N1bWVudC5nZXRWaWV3YWJsZVBhdGgoaXRlbSkpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnlJdGVtczNkLmZvckVhY2goKGl0ZW0pPT57XG5cbiAgICAgICAgICAgICAgICAgIHBhdGhDb2xsZWN0aW9uLnB1c2goZG9jdW1lbnQuZ2V0Vmlld2FibGVQYXRoKGl0ZW0pKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHBhdGhDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBlbHNlIHtcblxuICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoJ25vIHZpZXdhYmxlIGNvbnRlbnQnKVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKGVycik9PiB7XG5cbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Vycm9yIGxvYWRpbmcgZG9jdW1lbnQuLi4gJyk7XG5cbiAgICAgICAgICAgICAgLy9BdXRvZGVzay5WaWV3aW5nLkVycm9yQ29kZVxuXG4gICAgICAgICAgICAgIHN3aXRjaChlcnIpe1xuXG4gICAgICAgICAgICAgICAgY2FzZSAxOiAvL1VOS05PV05fRkFJTFVSRVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FuIHVua25vd24gZmFpbHVyZSBoYXMgb2NjdXJyZWQuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMjogLy9CQURfREFUQVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0JhZCBkYXRhIChjb3JydXB0ZWQgb3IgbWFsZm9ybWVkKSAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3dhcyBlbmNvdW50ZXJlZC4nKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSAzOiAvL05FVFdPUktfRkFJTFVSRVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0EgbmV0d29yayBmYWlsdXJlIHdhcyBlbmNvdW50ZXJlZC4nKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA0OiAvL05FVFdPUktfQUNDRVNTX0RFTklFRFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FjY2VzcyB3YXMgZGVuaWVkIHRvIGEgJyArXG4gICAgICAgICAgICAgICAgICAgICduZXR3b3JrIHJlc291cmNlIChIVFRQIDQwMykuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNTogLy9ORVRXT1JLX0ZJTEVfTk9UX0ZPVU5EXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQSBuZXR3b3JrIHJlc291cmNlIGNvdWxkIG5vdCAnICtcbiAgICAgICAgICAgICAgICAgICAgJ2JlIGZvdW5kIChIVFRQIDQwNCkuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgNjogLy9ORVRXT1JLX1NFUlZFUl9FUlJPUlxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Egc2VydmVyIGVycm9yIHdhcyByZXR1cm5lZCB3aGVuICcgK1xuICAgICAgICAgICAgICAgICAgICAnYWNjZXNzaW5nIGEgbmV0d29yayByZXNvdXJjZSAoSFRUUCA1eHgpLicpO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICBjYXNlIDc6IC8vTkVUV09SS19VTkhBTkRMRURfUkVTUE9OU0VfQ09ERVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0FuIHVuaGFuZGxlZCByZXNwb25zZSBjb2RlIHdhcyAnICtcbiAgICAgICAgICAgICAgICAgICAgJ3JldHVybmVkIHdoZW4gYWNjZXNzaW5nIGEgbmV0d29yayByZXNvdXJjZSAnICtcbiAgICAgICAgICAgICAgICAgICAgJyhIVFRQIGV2ZXJ5dGhpbmcgZWxzZSkuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgODogLy9CUk9XU0VSX1dFQkdMX05PVF9TVVBQT1JURURcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdCcm93c2VyIGVycm9yOiBXZWJHTCBpcyBub3QgJyArXG4gICAgICAgICAgICAgICAgICAgICdzdXBwb3J0ZWQgYnkgdGhlIGN1cnJlbnQgYnJvd3Nlci4nKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgY2FzZSA5OiAvL0JBRF9EQVRBX05PX1ZJRVdBQkxFX0NPTlRFTlRcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdUaGVyZSBpcyBub3RoaW5nIHZpZXdhYmxlIGluICcgK1xuICAgICAgICAgICAgICAgICAgICAndGhlIGZldGNoZWQgZG9jdW1lbnQuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTA6IC8vQlJPV1NFUl9XRUJHTF9ESVNBQkxFRFxuICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0Jyb3dzZXIgZXJyb3I6IFdlYkdMIGlzICcgK1xuICAgICAgICAgICAgICAgICAgICAnc3VwcG9ydGVkLCBidXQgbm90IGVuYWJsZWQuJyk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgMTE6IC8vUlRDX0VSUk9SXG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnQ29sbGFib3JhdGlvbiBzZXJ2ZXIgZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChleCl7XG5cbiAgICAgICAgICByZXR1cm4gcmVqZWN0KGV4KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gTG9hZHMgbW9kZWwgaW50byBjdXJyZW50IHNjZW5lXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGxvYWRNb2RlbDogZnVuY3Rpb24ocGF0aCwgb3B0cykge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMocmVzb2x2ZSwgcmVqZWN0KT0+IHtcblxuICAgICAgICBmdW5jdGlvbiBfb25HZW9tZXRyeUxvYWRlZChldmVudCkge1xuXG4gICAgICAgICAgdmlld2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICBBdXRvZGVzay5WaWV3aW5nLkdFT01FVFJZX0xPQURFRF9FVkVOVCxcbiAgICAgICAgICAgIF9vbkdlb21ldHJ5TG9hZGVkKTtcblxuICAgICAgICAgIHJldHVybiByZXNvbHZlKGV2ZW50Lm1vZGVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZpZXdlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgIEF1dG9kZXNrLlZpZXdpbmcuR0VPTUVUUllfTE9BREVEX0VWRU5ULFxuICAgICAgICAgIF9vbkdlb21ldHJ5TG9hZGVkKTtcblxuICAgICAgICB2aWV3ZXIubG9hZE1vZGVsKHBhdGgsIG9wdHMsICgpPT4ge1xuXG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyb3JDb2RlLCBlcnJvck1lc3NhZ2UsIHN0YXR1c0NvZGUsIHN0YXR1c1RleHQpPT4ge1xuXG4gICAgICAgICAgICB2aWV3ZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgQXV0b2Rlc2suVmlld2luZy5HRU9NRVRSWV9MT0FERURfRVZFTlQsXG4gICAgICAgICAgICAgIF9vbkdlb21ldHJ5TG9hZGVkKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlamVjdCh7XG4gICAgICAgICAgICAgIGVycm9yQ29kZTogZXJyb3JDb2RlLFxuICAgICAgICAgICAgICBlcnJvck1lc3NhZ2U6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgc3RhdHVzQ29kZTogc3RhdHVzQ29kZSxcbiAgICAgICAgICAgICAgc3RhdHVzVGV4dDogc3RhdHVzVGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gU2V0cyBtb2RlbCBhcyBcImN1cnJlbnRcIlxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBzZXRDdXJyZW50TW9kZWw6IGZ1bmN0aW9uKG1vZGVsKSB7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcblxuICAgICAgICB2aWV3ZXIubW9kZWwgPSBtb2RlbDtcblxuICAgICAgICB2YXIgcHJvcGVydHlQYW5lbCA9IHZpZXdlci5nZXRQcm9wZXJ0eVBhbmVsKHRydWUpO1xuXG4gICAgICAgIHByb3BlcnR5UGFuZWwuY3VycmVudE1vZGVsID0gbW9kZWw7XG5cbiAgICAgICAgbW9kZWwuZ2V0T2JqZWN0VHJlZSgoaW5zdGFuY2VUcmVlKSA9PntcblxuICAgICAgICAgIHZpZXdlci5tb2RlbHN0cnVjdHVyZS5zZXRNb2RlbChpbnN0YW5jZVRyZWUpO1xuXG4gICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBGaXRzIG1vZGVsIHRvIHZpZXdcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgZml0TW9kZWxUb1ZpZXc6IGZ1bmN0aW9uKG1vZGVsKSB7XG5cbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KT0+IHtcblxuICAgICAgICBtb2RlbC5nZXRPYmplY3RUcmVlKChpbnN0YW5jZVRyZWUpID0+e1xuXG4gICAgICAgICAgdmlld2VyLmZpdFRvVmlldyhbaW5zdGFuY2VUcmVlLnJvb3RJZF0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFVubG9hZHMgbW9kZWwgZnJvbSBjdXJyZW50IHNjZW5lXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIHVubG9hZE1vZGVsOiBmdW5jdGlvbihtb2RlbCkge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXG4gICAgICAgIHZpZXdlci5pbXBsLnVubG9hZE1vZGVsKG1vZGVsKTtcblxuICAgICAgICB2aWV3ZXIuaW1wbC5zY2VuZVVwZGF0ZWQodHJ1ZSk7XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEFwcGxpZXMgdHJhbnNmb3JtIHRvIHNwZWNpZmljIG1vZGVsXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIHRyYW5zZm9ybU1vZGVsOiBmdW5jdGlvbihtb2RlbCwgdHJhbnNmb3JtKSB7XG5cbiAgICAgIGZ1bmN0aW9uIF90cmFuc2Zvcm1GcmFnUHJveHkoZnJhZ0lkKXtcblxuICAgICAgICB2YXIgZnJhZ1Byb3h5ID0gdmlld2VyLmltcGwuZ2V0RnJhZ21lbnRQcm94eShcbiAgICAgICAgICBtb2RlbCxcbiAgICAgICAgICBmcmFnSWQpO1xuXG4gICAgICAgIGZyYWdQcm94eS5nZXRBbmltVHJhbnNmb3JtKCk7XG5cbiAgICAgICAgZnJhZ1Byb3h5LnBvc2l0aW9uID0gdHJhbnNmb3JtLnRyYW5zbGF0aW9uO1xuXG4gICAgICAgIGZyYWdQcm94eS5zY2FsZSA9IHRyYW5zZm9ybS5zY2FsZTtcblxuICAgICAgICAvL05vdCBhIHN0YW5kYXJkIHRocmVlLmpzIHF1YXRlcm5pb25cbiAgICAgICAgZnJhZ1Byb3h5LnF1YXRlcm5pb24uX3ggPSB0cmFuc2Zvcm0ucm90YXRpb24ueDtcbiAgICAgICAgZnJhZ1Byb3h5LnF1YXRlcm5pb24uX3kgPSB0cmFuc2Zvcm0ucm90YXRpb24ueTtcbiAgICAgICAgZnJhZ1Byb3h5LnF1YXRlcm5pb24uX3ogPSB0cmFuc2Zvcm0ucm90YXRpb24uejtcbiAgICAgICAgZnJhZ1Byb3h5LnF1YXRlcm5pb24uX3cgPSB0cmFuc2Zvcm0ucm90YXRpb24udztcblxuICAgICAgICBmcmFnUHJveHkudXBkYXRlQW5pbVRyYW5zZm9ybSgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMocmVzb2x2ZSwgcmVqZWN0KT0+e1xuXG4gICAgICAgIHZhciBmcmFnQ291bnQgPSBtb2RlbC5nZXRGcmFnbWVudExpc3QoKS5cbiAgICAgICAgICBmcmFnbWVudHMuZnJhZ0lkMmRiSWQubGVuZ3RoO1xuXG4gICAgICAgIC8vZnJhZ0lkcyByYW5nZSBmcm9tIDAgdG8gZnJhZ0NvdW50LTFcbiAgICAgICAgZm9yKHZhciBmcmFnSWQ9MDsgZnJhZ0lkPGZyYWdDb3VudDsgKytmcmFnSWQpe1xuXG4gICAgICAgICAgX3RyYW5zZm9ybUZyYWdQcm94eShmcmFnSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEhpZGVzIG5vZGUgKGlmIG5vZGVPZmYgPSB0cnVlIGNvbXBsZXRlbHkgaGlkZXMgdGhlIG5vZGUpXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGhpZGVOb2RlOiBmdW5jdGlvbihtb2RlbCwgZGJJZHMsIG5vZGVPZmY9ZmFsc2UpIHtcblxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpPT4ge1xuXG4gICAgICAgIGRiSWRzID0gQXJyYXkuaXNBcnJheShkYklkcykgPyBkYklkcyA6IFtkYklkc107XG5cbiAgICAgICAgbW9kZWwuZ2V0T2JqZWN0VHJlZSgoaW5zdGFuY2VUcmVlKT0+IHtcblxuICAgICAgICAgIHZhciB2bSA9IG5ldyBBdXRvZGVzay5WaWV3aW5nLlByaXZhdGUuVmlzaWJpbGl0eU1hbmFnZXIoXG4gICAgICAgICAgICB2aWV3ZXIuaW1wbCxcbiAgICAgICAgICAgIHZpZXdlci5tb2RlbCk7XG5cbiAgICAgICAgICBkYklkcy5mb3JFYWNoKChkYklkKT0+IHtcblxuICAgICAgICAgICAgdmFyIG5vZGUgPSBpbnN0YW5jZVRyZWUuZGJJZFRvTm9kZVtkYklkXTtcblxuICAgICAgICAgICAgdm0uaGlkZShub2RlKTtcbiAgICAgICAgICAgIHZtLnNldE5vZGVPZmYobm9kZSwgbm9kZU9mZik7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFNob3dzIG5vZGVcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgc2hvd05vZGU6IGZ1bmN0aW9uKG1vZGVsLCBkYklkcykge1xuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCk9PiB7XG5cbiAgICAgICAgZGJJZHMgPSBBcnJheS5pc0FycmF5KGRiSWRzKSA/IGRiSWRzIDogW2RiSWRzXTtcblxuICAgICAgICBtb2RlbC5nZXRPYmplY3RUcmVlKChpbnN0YW5jZVRyZWUpPT4ge1xuXG4gICAgICAgICAgdmFyIHZtID0gbmV3IEF1dG9kZXNrLlZpZXdpbmcuUHJpdmF0ZS5WaXNpYmlsaXR5TWFuYWdlcihcbiAgICAgICAgICAgIHZpZXdlci5pbXBsLFxuICAgICAgICAgICAgdmlld2VyLm1vZGVsKTtcblxuICAgICAgICAgIGRiSWRzLmZvckVhY2goKGRiSWQpPT4ge1xuXG4gICAgICAgICAgICB2YXIgbm9kZSA9IGluc3RhbmNlVHJlZS5kYklkVG9Ob2RlW2RiSWRdO1xuXG4gICAgICAgICAgICB2bS5zZXROb2RlT2ZmKG5vZGUsIGZhbHNlKTtcbiAgICAgICAgICAgIHZtLnNob3cobm9kZSk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEV4dGVuc2lvbiBsb2FkIGNhbGxiYWNrXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHRoaXMubG9hZCA9IGZ1bmN0aW9uKCkge1xuXG4gICAgLy9zZXQgbmFtZSBvZiBvcmlnaW5hbCBtb2RlbFxuICAgIHZpZXdlci5tb2RlbC5uYW1lID0gb3B0aW9ucy5tb2RlbC5uYW1lO1xuXG4gICAgdmFyIGJ1dHRvbiA9IGNyZWF0ZUJ1dHRvbihndWlkKCksXG4gICAgICAnZ2x5cGhpY29uIGdseXBoaWNvbi1saXN0JyxcbiAgICAgICdNb2RlbCBMb2FkZXInLCAoKT0+e1xuXG4gICAgICAgIF9wYW5lbC50b2dnbGVWaXNpYmlsaXR5KCk7XG4gICAgICB9KTtcblxuICAgIHZhciB2aWV3ZXJUb29sYmFyID0gdmlld2VyLmdldFRvb2xiYXIodHJ1ZSk7XG5cbiAgICB2YXIgY3RybEdyb3VwID0gbmV3IEF1dG9kZXNrLlZpZXdpbmcuVUkuQ29udHJvbEdyb3VwKFxuICAgICAgJ01vZGVsTG9hZGVyJyk7XG5cbiAgICBjdHJsR3JvdXAuYWRkQ29udHJvbChidXR0b24sIHtpbmRleDoxfSk7XG5cbiAgICB2aWV3ZXJUb29sYmFyLmFkZENvbnRyb2woY3RybEdyb3VwKTtcblxuICAgIF9wYW5lbCA9IG5ldyBNb2RlbExvYWRlclBhbmVsKFxuICAgICAgdmlld2VyLmNvbnRhaW5lcixcbiAgICAgIGd1aWQoKSxcbiAgICAgIGJ1dHRvbi5jb250YWluZXIsXG4gICAgICBpbnNwaXJlVHJlZSk7XG5cbiAgICBjb25zb2xlLmxvZygnQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyIGxvYWRlZCcpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vICBFeHRlbnNpb24gdW5sb2FkIGNhbGxiYWNrXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHRoaXMudW5sb2FkID0gZnVuY3Rpb24gKCkge1xuXG4gICAgaWYoX3BhbmVsKSB7XG5cbiAgICAgIF9wYW5lbC5zZXRWaXNpYmxlKGZhbHNlKTtcblxuICAgICAgX3BhbmVsID0gbnVsbDtcblxuICAgICAgdmFyIHZpZXdlclRvb2xiYXIgPSB2aWV3ZXIuZ2V0VG9vbGJhcih0cnVlKTtcblxuICAgICAgdmlld2VyVG9vbGJhci5yZW1vdmVDb250cm9sKFxuICAgICAgICAnTW9kZWxMb2FkZXInKTtcbiAgICB9XG5cbiAgICBjb25zb2xlLmxvZygnQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyIHVubG9hZGVkJyk7XG4gICAgXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyB0b29sYmFyIGJ1dHRvblxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBjcmVhdGVCdXR0b24oaWQsIGNsYXNzTmFtZSwgdG9vbHRpcCwgaGFuZGxlcikge1xuXG4gICAgdmFyIGJ1dHRvbiA9IG5ldyBBdXRvZGVzay5WaWV3aW5nLlVJLkJ1dHRvbihpZCk7XG5cbiAgICBidXR0b24uaWNvbi5zdHlsZS5mb250U2l6ZSA9IFwiMjRweFwiO1xuXG4gICAgYnV0dG9uLmljb24uY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xuXG4gICAgYnV0dG9uLnNldFRvb2xUaXAodG9vbHRpcCk7XG5cbiAgICBidXR0b24ub25DbGljayA9IGhhbmRsZXI7XG5cbiAgICByZXR1cm4gYnV0dG9uO1xuICB9XG4gIFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBHZW5lcmF0ZXMgcmFuZG9tIGd1aWQgdG8gdXNlIGFzIERPTSBpZFxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBmdW5jdGlvbiBndWlkKCkge1xuICAgIFxuICAgIHZhciBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgXG4gICAgdmFyIGd1aWQgPSAneHh4eC14eHh4LXh4eHgteHh4eCcucmVwbGFjZShcbiAgICAgIC9beHldL2csXG4gICAgICBmdW5jdGlvbiAoYykge1xuICAgICAgICB2YXIgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcbiAgICAgICAgZCA9IE1hdGguZmxvb3IoZCAvIDE2KTtcbiAgICAgICAgcmV0dXJuIChjID09ICd4JyA/IHIgOiAociAmIDB4NyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICAgIH0pO1xuICAgIFxuICAgIHJldHVybiBndWlkO1xuICB9XG4gIFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBUaGUgTW9kZWwgTG9hZGVyIFBhbmVsXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZhciBNb2RlbExvYWRlclBhbmVsID0gZnVuY3Rpb24oXG4gICAgcGFyZW50Q29udGFpbmVyLFxuICAgIHBhbmVsSWQsXG4gICAgYnRuRWxlbWVudCxcbiAgICBJbnNwaXJlVHJlZSkge1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBCYXNlIGNsYXNzIGNvbnN0cnVjdG9yXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIEF1dG9kZXNrLlZpZXdpbmcuVUkuRG9ja2luZ1BhbmVsLmNhbGwoXG4gICAgICB0aGlzLFxuICAgICAgcGFyZW50Q29udGFpbmVyLFxuICAgICAgcGFuZWxJZCxcbiAgICAgICdNb2RlbCBMb2FkZXInLFxuICAgICAge3NoYWRvdzogdHJ1ZX0pO1xuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBcIlByaXZhdGVcIiBNb2RlbExvYWRlclBhbmVsIG1lbWJlcnNcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgdmFyIF90aGlzUGFuZWwgPSB0aGlzO1xuXG4gICAgdmFyIF9pc1Zpc2libGUgPSBmYWxzZTtcblxuICAgIHZhciBfaXNNaW5pbWl6ZWQgPSBmYWxzZTtcblxuICAgIHZhciBfbG9hZGVkTW9kZWxzVHJlZSA9IG51bGw7XG5cbiAgICB2YXIgX2dhbGxlcnlGaWx0ZXJlZE5vZGVzID0gW107XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIEluaXRpYWxpemVzIHRoZSBwYW5lbFxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBhc3luYyBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuXG4gICAgICBfdGhpc1BhbmVsLmNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxuICAgICAgJChfdGhpc1BhbmVsLmNvbnRhaW5lcikuYWRkQ2xhc3MoJ21vZGVsLWxvYWRlcicpO1xuXG4gICAgICAkKF90aGlzUGFuZWwuY29udGFpbmVyKS5hcHBlbmQoZ2VuZXJhdGVIdG1sKHBhbmVsSWQpKTtcblxuICAgICAgLy8kKCdbZGF0YS10b2dnbGU9XCJ0b29sdGlwXCJdJykudG9vbHRpcCgpO1xuXG4gICAgICByZWxvYWRUcmVlKCk7XG5cbiAgICAgICQoYCMke3BhbmVsSWR9LWxvYWQtYnRuYCkuY2xpY2soXG4gICAgICAgIG9uTG9hZCk7XG5cbiAgICAgICQoYCMke3BhbmVsSWR9LWxvYWQtZ2FsbGVyeS1idG5gKS5jbGljayhcbiAgICAgICAgb25Mb2FkR2FsbGVyeSk7XG5cbiAgICAgICQoYCMke3BhbmVsSWR9LXRyYW5zZm9ybS1idG5gKS5jbGljayhcbiAgICAgICAgb25UcmFuc2Zvcm0pO1xuXG4gICAgICAkKGAjJHtwYW5lbElkfS1jbGVhci1idG5gKS5jbGljayhcbiAgICAgICAgb25DbGVhcik7XG5cbiAgICAgIHZpZXdlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBBdXRvZGVzay5WaWV3aW5nLkFHR1JFR0FURV9TRUxFQ1RJT05fQ0hBTkdFRF9FVkVOVCxcbiAgICAgICAgb25BZ2dyZWdhdGVTZWxlY3Rpb25DaGFuZ2VkKTtcblxuICAgICAgLy8gTG9hZHMgZ2FsbGVyeSBtb2RlbHMgdHJlZVxuXG4gICAgICAkKCcubW9kZWwtbG9hZGVyIC50cmVlLWNvbnRhaW5lci5nYWxsZXJ5JykuYXBwZW5kKFxuICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGVsLWxvYWRlci1nYWxsZXJ5LXRyZWVcIj48L2Rpdj4nXG4gICAgICApO1xuXG4gICAgICB2YXIgcm9vdE5vZGUgPSB7XG4gICAgICAgIHR5cGU6ICdyb290X25vZGUnLFxuICAgICAgICB0ZXh0OiAnR2FsbGVyeSBNb2RlbHMnLFxuICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgIH07XG5cbiAgICAgIHZhciBnYWxsZXJ5TW9kZWxzID0gYXdhaXQgQVBJLmdldEdhbGxlcnlNb2RlbHMoKTtcblxuICAgICAgZ2FsbGVyeU1vZGVscy5mb3JFYWNoKChtb2RlbCk9PntcblxuICAgICAgICAvLyBmaWx0ZXJzIG91dCAuZHdnJ3NcblxuICAgICAgICB2YXIgZmlsZUlkID0gZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgIGVzY2FwZSh3aW5kb3cuYXRvYihtb2RlbC51cm4pKSk7XG5cbiAgICAgICAgaWYoIWZpbGVJZC5lbmRzV2l0aCgnLmR3ZycpKSB7XG5cbiAgICAgICAgICByb290Tm9kZS5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdtb2RlbF9ub2RlJyxcbiAgICAgICAgICAgIHRleHQ6IG1vZGVsLm5hbWUsXG4gICAgICAgICAgICBtb2RlbDogbW9kZWwsXG4gICAgICAgICAgICBjaGlsZHJlbjogW11cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0cmVlID0gbmV3IEluc3BpcmVUcmVlKHtcbiAgICAgICAgdGFyZ2V0OiAnLm1vZGVsLWxvYWRlci1nYWxsZXJ5LXRyZWUnLFxuICAgICAgICBkYXRhOiBbcm9vdE5vZGVdXG4gICAgICB9KTtcblxuICAgICAgdHJlZS5vbignbm9kZS5kYmxjbGljaycsIGFzeW5jKGV2ZW50LCBub2RlKT0+IHtcblxuICAgICAgICBpZihub2RlLnR5cGUgPT0gJ21vZGVsX25vZGUnKSB7XG5cbiAgICAgICAgYXdhaXQgbG9hZEdhbGxlcnlOb2RlKG5vZGUpO1xuXG4gICAgICAgICAgcmVsb2FkVHJlZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgJChgIyR7cGFuZWxJZH0tc2VhcmNoYCkub24oJ2tleXVwJywgKGUpPT4ge1xuXG4gICAgICAgIHZhciBtYXRjaGVzID0gdHJlZS5zZWFyY2goZS50YXJnZXQudmFsdWUpO1xuXG4gICAgICAgIF9nYWxsZXJ5RmlsdGVyZWROb2RlcyA9IG1hdGNoZXMgfHwgW107XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3VzdG9tIGh0bWwgY29udGVudCBvZiB0aGUgcGFuZWxcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUh0bWwoaWQpIHtcblxuICAgICAgcmV0dXJuIGBcblxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRhaW5lclwiPlxuXG4gICAgICAgIDxidXR0b24gY2xhc3M9XCJidG4gYnRuLWluZm8gYnRuLWxvYWRcIlxuICAgICAgICAgICAgICAgIGlkPVwiJHtpZH0tbG9hZC1idG5cIlxuICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIlxuICAgICAgICAgICAgICAgIHRpdGxlPVwiTG9hZCBmcm9tIFVSTiB1c2luZyBwcm92aWRlZCB0b2tlblwiPlxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZ2x5cGhpY29uIGdseXBoaWNvbi1zYXZlIGJ0bi1zcGFuXCJcbiAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIiBzdHlsZT1cInRvcDoxcHg7XCI+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgIExvYWRcbiAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPGlucHV0IGlkPVwiJHtpZH0tdG9rZW5cIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgY2xhc3M9XCJpbnB1dCB0b2tlblwiXG4gICAgICAgICAgcGxhY2Vob2xkZXI9XCIgVG9rZW4uLi5cIj5cblxuICAgICAgICA8aW5wdXQgaWQ9XCIke2lkfS11cm5cIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgY2xhc3M9XCJpbnB1dCB1cm5cIlxuICAgICAgICAgIHBsYWNlaG9sZGVyPVwiIE1vZGVsIFVSTiAuLi5cIj5cblxuICAgICAgICA8aHIgY2xhc3M9XCJ2LXNwYWNlclwiPlxuXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNwYW5cIj5cbiAgICAgICAgICAgIFNjYWxlOlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxociBjbGFzcz1cInYtc3BhY2VyXCI+XG5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCIke2lkfS1TeFwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXQgbnVtZXJpY1wiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIiAgeCAoMS4wKVwiPlxuXG4gICAgICAgICAgPGlucHV0IGlkPVwiJHtpZH0tU3lcIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzcz1cImlucHV0IG51bWVyaWNcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIgIHkgKDEuMClcIj5cblxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7aWR9LVN6XCIgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dCBudW1lcmljXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiICB6ICgxLjApXCI+XG5cbiAgICAgICAgICA8aHIgY2xhc3M9XCJ2LXNwYWNlclwiPlxuXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0LXNwYW5cIj5cbiAgICAgICAgICAgIFRyYW5zbGF0aW9uOlxuICAgICAgICAgIDwvc3Bhbj5cblxuICAgICAgICAgIDxociBjbGFzcz1cInYtc3BhY2VyXCI+XG5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCIke2lkfS1UeFwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXQgbnVtZXJpY1wiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIiAgeCAoMC4wKVwiPlxuXG4gICAgICAgICAgPGlucHV0IGlkPVwiJHtpZH0tVHlcIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzcz1cImlucHV0IG51bWVyaWNcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIgIHkgKDAuMClcIj5cblxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7aWR9LVR6XCIgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dCBudW1lcmljXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiICB6ICgwLjApXCI+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxociBjbGFzcz1cInYtc3BhY2VyXCI+XG5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHQtc3BhblwiPlxuICAgICAgICAgICAgUm90YXRpb24gKGRlZyk6XG4gICAgICAgICAgPC9zcGFuPlxuXG4gICAgICAgICAgPGhyIGNsYXNzPVwidi1zcGFjZXJcIj5cblxuICAgICAgICAgIDxpbnB1dCBpZD1cIiR7aWR9LVJ4XCIgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgY2xhc3M9XCJpbnB1dCBudW1lcmljXCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiICB4ICgwLjApXCI+XG5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCIke2lkfS1SeVwiIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIGNsYXNzPVwiaW5wdXQgbnVtZXJpY1wiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIiAgeSAoMC4wKVwiPlxuXG4gICAgICAgICAgPGlucHV0IGlkPVwiJHtpZH0tUnpcIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzcz1cImlucHV0IG51bWVyaWNcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCIgIHogKDAuMClcIj5cblxuICAgICAgICAgIDxociBjbGFzcz1cInYtc3BhY2VyLWxhcmdlXCI+XG5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGJ0bi10cmFuc2Zvcm1cIlxuICAgICAgICAgICAgICAgICAgaWQ9XCIke2lkfS10cmFuc2Zvcm0tYnRuXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtcGxhY2VtZW50PVwiYm90dG9tXCJcbiAgICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgICB0aXRsZT1cIlRyYW5zZm9ybSBzZWxlY3RlZCBsb2FkZWQgbW9kZWxzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmFuZG9tIGJ0bi1zcGFuXCJcbiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgIFRyYW5zZm9ybSBTZWxlY3Rpb24gLi4uXG4gICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGJ0bi1jbGVhclwiXG4gICAgICAgICAgICAgICAgICBpZD1cIiR7aWR9LWNsZWFyLWJ0blwiXG4gICAgICAgICAgICAgICAgICBkYXRhLXBsYWNlbWVudD1cImJvdHRvbVwiXG4gICAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT1cInRvb2x0aXBcIlxuICAgICAgICAgICAgICAgICAgdGl0bGU9XCJDbGVhciB0cmFuc2Zvcm0gZmllbGRzXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImdseXBoaWNvbiBnbHlwaGljb24tcmVtb3ZlIGJ0bi1zcGFuXCJcbiAgICAgICAgICAgICAgICAgIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgIENsZWFyXG4gICAgICAgICAgPC9idXR0b24+XG5cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPGhyIGNsYXNzPVwidi1zcGFjZXItbGFyZ2VcIj5cblxuICAgICAgICA8aW5wdXQgaWQ9XCIke2lkfS1zZWFyY2hcIiB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBjbGFzcz1cImlucHV0IHNlYXJjaFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIiBTZWFyY2ggR2FsbGVyeSBNb2RlbHMuLi5cIj5cblxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1pbmZvIGJ0bi1sb2FkLWdhbGxlcnlcIlxuICAgICAgICAgICAgICAgIGlkPVwiJHtpZH0tbG9hZC1nYWxsZXJ5LWJ0blwiXG4gICAgICAgICAgICAgICAgZGF0YS1wbGFjZW1lbnQ9XCJib3R0b21cIlxuICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPVwidG9vbHRpcFwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJMb2FkIGZpbHRlcmVkIGdhbGxlcnkgbW9kZWxzXCI+XG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJnbHlwaGljb24gZ2x5cGhpY29uLWltcG9ydCBidG4tc3BhblwiXG4gICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCI+XG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICBMb2FkXG4gICAgICAgIDwvYnV0dG9uPlxuXG4gICAgICAgIDxociBjbGFzcz1cInYtc3BhY2VyLWxhcmdlXCI+XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFsbC10cmVlcy1jb250YWluZXJcIj5cblxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmVlLWNvbnRhaW5lciBnYWxsZXJ5XCI+XG4gICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICA8aHIgY2xhc3M9XCJ0cmVlLXNwYWNlclwiPlxuXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInRyZWUtY29udGFpbmVyIGxvYWRlZFwiPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDwvZGl2PlxuXG4gICAgICA8L2Rpdj5gO1xuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQWdncmVnYXRlIFNlbGVjdGlvbkNoYW5nZWQgaGFuZGxlclxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBhc3luYyBmdW5jdGlvbiBvbkFnZ3JlZ2F0ZVNlbGVjdGlvbkNoYW5nZWQoZXZlbnQpIHtcblxuICAgICAgaWYoZXZlbnQuc2VsZWN0aW9ucyAmJiBldmVudC5zZWxlY3Rpb25zLmxlbmd0aCl7XG5cbiAgICAgICAgdmFyIHNlbGVjdGlvbiA9IGV2ZW50LnNlbGVjdGlvbnNbMF07XG5cbiAgICAgICAgdmFyIG1vZGVsID0gc2VsZWN0aW9uLm1vZGVsO1xuXG4gICAgICAgIGF3YWl0IEFQSS5zZXRDdXJyZW50TW9kZWwobW9kZWwpO1xuXG4gICAgICAgIHZhciBub2RlSWQgPSBzZWxlY3Rpb24uZGJJZEFycmF5WzBdO1xuXG4gICAgICAgIHNldFByb3BlcnR5UGFuZWxOb2RlKG5vZGVJZCk7XG4gICAgICB9XG4gICAgICAvL25vIGNvbXBvbmVudHMgc2VsZWN0ZWQgLT4gZGlzcGxheSBwcm9wZXJ0aWVzIG9mIHJvb3RcbiAgICAgIGVsc2Uge1xuXG4gICAgICAgIHZpZXdlci5tb2RlbC5nZXRPYmplY3RUcmVlKChpbnN0YW5jZVRyZWUpID0+e1xuXG4gICAgICAgICAgc2V0UHJvcGVydHlQYW5lbE5vZGUoaW5zdGFuY2VUcmVlLnJvb3RJZCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFByb3BlcnR5UGFuZWxOb2RlKG5vZGVJZCkge1xuXG4gICAgICB2aWV3ZXIuZ2V0UHJvcGVydGllcyhub2RlSWQsIChyZXN1bHQpPT57XG5cbiAgICAgICAgaWYocmVzdWx0LnByb3BlcnRpZXMpIHtcblxuICAgICAgICAgIHZhciBwcm9wZXJ0eVBhbmVsID0gdmlld2VyLmdldFByb3BlcnR5UGFuZWwodHJ1ZSk7XG5cbiAgICAgICAgICBwcm9wZXJ0eVBhbmVsLnNldE5vZGVQcm9wZXJ0aWVzKG5vZGVJZCk7XG5cbiAgICAgICAgICBwcm9wZXJ0eVBhbmVsLnNldFByb3BlcnRpZXMocmVzdWx0LnByb3BlcnRpZXMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIExvYWQgYnV0dG9uIGhhbmRsZXJcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgYXN5bmMgZnVuY3Rpb24gb25Mb2FkKGV2ZW50KSB7XG4gICAgICBcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBcbiAgICAgIHZhciB1cm4gPSAkKGAjJHtwYW5lbElkfS11cm5gKS52YWwoKTtcblxuICAgICAgdmFyIHRva2VuID0gJChgIyR7cGFuZWxJZH0tdG9rZW5gKS52YWwoKTtcbiAgICAgIFxuICAgICAgaWYoIXVybi5sZW5ndGgpIHtcblxuICAgICAgICBhbGVydCgnSW52YWxpZCBtb2RlbCBVUk4uLi4nKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbiA9ICh0b2tlbi5sZW5ndGggPyB0b2tlbiA6IGF3YWl0IEFQSS5nZXRUb2tlbigpKTtcblxuICAgICAgdmFyIG1vZGVsID0gYXdhaXQgbG9hZEZyb21VUk4odG9rZW4sIHVybik7XG5cbiAgICAgIG1vZGVsLm5hbWUgPSBBUEkuZ2V0TW9kZWxOYW1lKHVybik7XG5cbiAgICAgIHJlbG9hZFRyZWUoKTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIExvYWRzIG1vZGVsIGZyb20gVVJOXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRGcm9tVVJOKHRva2VuLCB1cm4pIHtcblxuICAgICAgdmFyIGxvYWRPcHRpb25zID0ge1xuICAgICAgICBwbGFjZW1lbnRUcmFuc2Zvcm06IGJ1aWxkVHJhbnNmb3JtTWF0cml4KClcbiAgICAgIH1cblxuICAgICAgdmFyIHBhdGhDb2xsZWN0aW9uID0gYXdhaXQgQVBJLmdldFZpZXdhYmxlUGF0aChcbiAgICAgICAgdG9rZW4sIHVybik7XG5cbiAgICAgIHZhciBtb2RlbCA9IGF3YWl0IEFQSS5sb2FkTW9kZWwoXG4gICAgICAgIHBhdGhDb2xsZWN0aW9uWzBdLFxuICAgICAgICBsb2FkT3B0aW9ucyk7XG5cbiAgICAgIHJldHVybiBtb2RlbDtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFRyYW5zZm9ybSBidXR0b24gaGFuZGxlclxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBmdW5jdGlvbiBvblRyYW5zZm9ybShldmVudCkge1xuXG4gICAgICB2YXIgcm9vdCA9IF9sb2FkZWRNb2RlbHNUcmVlLm5vZGVzKClbMF07XG5cbiAgICAgIHZhciBzZWxlY3RlZE5vZGVzID0gW107XG5cbiAgICAgIHJvb3QuY2hpbGRyZW4ucmVjdXJzZURvd24oKG5vZGUpPT4ge1xuXG4gICAgICAgIGlmIChub2RlLnNlbGVjdGVkKCkgJiYgbm9kZS50eXBlID09ICdtb2RlbF9ub2RlJykge1xuXG4gICAgICAgICAgc2VsZWN0ZWROb2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgdmFyIHRyYW5zZm9ybSA9IHtcbiAgICAgICAgdHJhbnNsYXRpb246IGdldFRyYW5zbGF0aW9uKCksXG4gICAgICAgIHJvdGF0aW9uOiBnZXRSb3RhdGlvbigpLFxuICAgICAgICBzY2FsZTogZ2V0U2NhbGUoKVxuICAgICAgfTtcblxuICAgICAgc2VsZWN0ZWROb2Rlcy5mb3JFYWNoKGFzeW5jKG5vZGUpPT57XG5cbiAgICAgICAgYXdhaXQgQVBJLnRyYW5zZm9ybU1vZGVsKFxuICAgICAgICAgIG5vZGUubW9kZWwsXG4gICAgICAgICAgdHJhbnNmb3JtKTtcblxuICAgICAgICB2aWV3ZXIuaW1wbC5zY2VuZVVwZGF0ZWQodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIENsZWFyIFRyYW5zZm9ybSBidXR0b24gaGFuZGxlclxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBmdW5jdGlvbiBvbkNsZWFyKGV2ZW50KSB7XG5cbiAgICAgICQoYCMke3BhbmVsSWR9LVN4YCkudmFsKCcnKTtcbiAgICAgICQoYCMke3BhbmVsSWR9LVN5YCkudmFsKCcnKTtcbiAgICAgICQoYCMke3BhbmVsSWR9LVN6YCkudmFsKCcnKTtcblxuICAgICAgJChgIyR7cGFuZWxJZH0tVHhgKS52YWwoJycpO1xuICAgICAgJChgIyR7cGFuZWxJZH0tVHlgKS52YWwoJycpO1xuICAgICAgJChgIyR7cGFuZWxJZH0tVHpgKS52YWwoJycpO1xuXG4gICAgICAkKGAjJHtwYW5lbElkfS1SeGApLnZhbCgnJyk7XG4gICAgICAkKGAjJHtwYW5lbElkfS1SeWApLnZhbCgnJyk7XG4gICAgICAkKGAjJHtwYW5lbElkfS1SemApLnZhbCgnJyk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBMb2FkIGZyb20gZ2FsbGVyeSBidXR0b24gaGFuZGxlclxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBhc3luYyBmdW5jdGlvbiBvbkxvYWRHYWxsZXJ5KGV2ZW50KSB7XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHZhciBwcm9taXNlcyA9IFtdO1xuXG4gICAgICBfZ2FsbGVyeUZpbHRlcmVkTm9kZXMuZm9yRWFjaCgobm9kZSk9PntcblxuICAgICAgICBwcm9taXNlcy5wdXNoKGxvYWRHYWxsZXJ5Tm9kZShub2RlKSlcbiAgICAgIH0pO1xuXG4gICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbigoKT0+IHtcblxuICAgICAgICByZWxvYWRUcmVlKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIExvYWRzIGEgZ2FsbGVyeSBub2RlIG1vZGVsXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRHYWxsZXJ5Tm9kZShub2RlKSB7XG5cbiAgICAgIC8vIGxvYWQgbW9kZWwgZnJvbSBsb2NhbCByZXNvdXJjZSBpZiBhdmFpbGFibGVcbiAgICAgIGlmKG5vZGUubW9kZWwudmlld2FibGVQYXRoICYmXG4gICAgICAgIG5vZGUubW9kZWwudmlld2FibGVQYXRoLmxlbmd0aCkge1xuXG4gICAgICAgIHZhciBsb2FkT3B0aW9ucyA9IHtcbiAgICAgICAgICBwbGFjZW1lbnRUcmFuc2Zvcm06IGJ1aWxkVHJhbnNmb3JtTWF0cml4KClcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtb2RlbCA9IGF3YWl0IEFQSS5sb2FkTW9kZWwoXG4gICAgICAgICAgbm9kZS5tb2RlbC52aWV3YWJsZVBhdGhbMF0ucGF0aCxcbiAgICAgICAgICBsb2FkT3B0aW9ucyk7XG5cbiAgICAgICAgbW9kZWwubmFtZSA9IG5vZGUubW9kZWwubmFtZTtcbiAgICAgIH1cbiAgICAgIC8vIGxvYWQgZnJvbSBWaWV3ICYgRGF0YSBzZXJ2ZXJcbiAgICAgIGVsc2Uge1xuXG4gICAgICAgIHZhciB0b2tlbiA9IGF3YWl0IEFQSS5nZXRUb2tlbigpO1xuXG4gICAgICAgIHZhciBtb2RlbCA9IGF3YWl0IGxvYWRGcm9tVVJOKFxuICAgICAgICAgIHRva2VuLFxuICAgICAgICAgIG5vZGUubW9kZWwudXJuKTtcblxuICAgICAgICBtb2RlbC5uYW1lID0gbm9kZS5tb2RlbC5uYW1lO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmVsb2FkcyBtb2RlbCB0cmVlXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGFzeW5jIGZ1bmN0aW9uIHJlbG9hZFRyZWUoKSB7XG5cbiAgICAgICQoJy5tb2RlbC1sb2FkZXItdHJlZScpLnJlbW92ZSgpO1xuXG4gICAgICAkKCcubW9kZWwtbG9hZGVyIC50cmVlLWNvbnRhaW5lci5sb2FkZWQnKS5hcHBlbmQoXG4gICAgICAgICc8ZGl2IGNsYXNzPVwibW9kZWwtbG9hZGVyLXRyZWVcIj48L2Rpdj4nXG4gICAgICApO1xuXG4gICAgICB2YXIgcm9vdE5vZGUgPSB7XG4gICAgICAgIHR5cGU6ICdyb290X25vZGUnLFxuICAgICAgICB0ZXh0OiAnTG9hZGVkIE1vZGVscycsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgfTtcblxuICAgICAgdmFyIG1vZGVscyA9IGF3YWl0IEFQSS5nZXRMb2FkZWRNb2RlbHMoKTtcblxuICAgICAgbW9kZWxzLmZvckVhY2goKG1vZGVsKT0+e1xuXG4gICAgICAgIHJvb3ROb2RlLmNoaWxkcmVuLnB1c2goe1xuICAgICAgICAgIHR5cGU6ICdtb2RlbF9ub2RlJyxcbiAgICAgICAgICB0ZXh0OiBgJHttb2RlbC5uYW1lfSBbSWQ6ICR7bW9kZWwuaWR9XWAsXG4gICAgICAgICAgbW9kZWw6IG1vZGVsLFxuICAgICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdHJlZSA9IG5ldyBJbnNwaXJlVHJlZSh7XG4gICAgICAgIHRhcmdldDogJy5tb2RlbC1sb2FkZXItdHJlZScsXG4gICAgICAgIGRhdGE6IFtyb290Tm9kZV0sXG4gICAgICAgIGNvbnRleHRNZW51OiBbe1xuICAgICAgICAgIHRleHQ6ICdTZXQgYXMgQ3VycmVudCcsXG4gICAgICAgICAgaGFuZGxlcjogKGV2ZW50LCBub2RlLCBjbG9zZXIpPT4ge1xuXG4gICAgICAgICAgICBjbG9zZXIoKTtcbiAgICAgICAgICAgIEFQSS5zZXRDdXJyZW50TW9kZWwobm9kZS5tb2RlbCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LHtcbiAgICAgICAgICB0ZXh0OiAnVW5sb2FkIE1vZGVsJyxcbiAgICAgICAgICBoYW5kbGVyOiBhc3luYyhldmVudCwgbm9kZSwgY2xvc2VyKT0+IHtcblxuICAgICAgICAgICAgY2xvc2VyKCk7XG5cbiAgICAgICAgICAgIGF3YWl0IEFQSS51bmxvYWRNb2RlbChub2RlLm1vZGVsKTtcblxuICAgICAgICAgICAgcmVsb2FkVHJlZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH0pO1xuXG4gICAgICB0cmVlLm9uKCdub2RlLmRibGNsaWNrJywgYXN5bmMoZXZlbnQsIG5vZGUpPT4ge1xuXG4gICAgICAgIGlmKG5vZGUudHlwZSA9PSAnbW9kZWxfbm9kZScpe1xuXG4gICAgICAgICAgYXdhaXQgQVBJLnNldEN1cnJlbnRNb2RlbChub2RlLm1vZGVsKTtcblxuICAgICAgICAgIGF3YWl0IEFQSS5maXRNb2RlbFRvVmlldyhub2RlLm1vZGVsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIC8vZXhwYW5kIHJvb3RcbiAgICAgIHRyZWUubm9kZXMoKVswXS5leHBhbmQoKTtcblxuICAgICAgX2xvYWRlZE1vZGVsc1RyZWUgPSB0cmVlO1xuICAgIH1cblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBHZXRzIGlucHV0IHRyYW5zZm9ybVxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIGZ1bmN0aW9uIGdldFNjYWxlKCkge1xuXG4gICAgICB2YXIgeCA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tU3hgKS52YWwoKSk7XG4gICAgICB2YXIgeSA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tU3lgKS52YWwoKSk7XG4gICAgICB2YXIgeiA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tU3pgKS52YWwoKSk7XG5cbiAgICAgIHggPSBpc05hTih4KSA/IDEuMCA6IHg7XG4gICAgICB5ID0gaXNOYU4oeSkgPyAxLjAgOiB5O1xuICAgICAgeiA9IGlzTmFOKHopID8gMS4wIDogejtcblxuICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zbGF0aW9uKCkge1xuXG4gICAgICB2YXIgeCA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tVHhgKS52YWwoKSk7XG4gICAgICB2YXIgeSA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tVHlgKS52YWwoKSk7XG4gICAgICB2YXIgeiA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tVHpgKS52YWwoKSk7XG5cbiAgICAgIHggPSBpc05hTih4KSA/IDAuMCA6IHg7XG4gICAgICB5ID0gaXNOYU4oeSkgPyAwLjAgOiB5O1xuICAgICAgeiA9IGlzTmFOKHopID8gMC4wIDogejtcblxuICAgICAgcmV0dXJuIG5ldyBUSFJFRS5WZWN0b3IzKHgsIHksIHopO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJvdGF0aW9uKCkge1xuXG4gICAgICB2YXIgeCA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tUnhgKS52YWwoKSk7XG4gICAgICB2YXIgeSA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tUnlgKS52YWwoKSk7XG4gICAgICB2YXIgeiA9IHBhcnNlRmxvYXQoJChgIyR7cGFuZWxJZH0tUnpgKS52YWwoKSk7XG5cbiAgICAgIHggPSBpc05hTih4KSA/IDAuMCA6IHg7XG4gICAgICB5ID0gaXNOYU4oeSkgPyAwLjAgOiB5O1xuICAgICAgeiA9IGlzTmFOKHopID8gMC4wIDogejtcblxuICAgICAgdmFyIGV1bGVyID0gbmV3IFRIUkVFLkV1bGVyKFxuICAgICAgICB4ICogTWF0aC5QSS8xODAsXG4gICAgICAgIHkgKiBNYXRoLlBJLzE4MCxcbiAgICAgICAgeiAqIE1hdGguUEkvMTgwLFxuICAgICAgICAnWFlaJyk7XG5cbiAgICAgIHZhciBxID0gbmV3IFRIUkVFLlF1YXRlcm5pb24oKTtcblxuICAgICAgcS5zZXRGcm9tRXVsZXIoZXVsZXIpO1xuXG4gICAgICByZXR1cm4gcTtcbiAgICB9XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQnVpbGRzIHRyYW5zZm9ybSBtYXRyaXhcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBmdW5jdGlvbiBidWlsZFRyYW5zZm9ybU1hdHJpeCgpIHtcblxuICAgICAgdmFyIHQgPSBnZXRUcmFuc2xhdGlvbigpO1xuICAgICAgdmFyIHIgPSBnZXRSb3RhdGlvbigpO1xuICAgICAgdmFyIHMgPSBnZXRTY2FsZSgpO1xuXG4gICAgICB2YXIgbSA9IG5ldyBUSFJFRS5NYXRyaXg0KCk7XG5cbiAgICAgIG0uY29tcG9zZSh0LCByLCBzKTtcblxuICAgICAgcmV0dXJuIG07XG4gICAgfVxuICAgIFxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBzZXRWaXNpYmxlIG92ZXJyaWRlXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgX3RoaXNQYW5lbC5zZXRWaXNpYmxlID0gZnVuY3Rpb24oc2hvdykge1xuXG4gICAgICBfaXNWaXNpYmxlID0gc2hvdztcblxuICAgICAgYnRuRWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKCdhY3RpdmUnKTtcblxuICAgICAgQXV0b2Rlc2suVmlld2luZy5VSS5Eb2NraW5nUGFuZWwucHJvdG90eXBlLlxuICAgICAgICBzZXRWaXNpYmxlLmNhbGwodGhpcywgc2hvdyk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIFRvZ2dsZXMgcGFuZWwgdmlzaWJpbGl0eVxuICAgIC8vXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIF90aGlzUGFuZWwudG9nZ2xlVmlzaWJpbGl0eSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICBfcGFuZWwuc2V0VmlzaWJsZSghX2lzVmlzaWJsZSk7XG4gICAgfVxuICAgIFxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBpbml0aWFsaXplIG92ZXJyaWRlXG4gICAgLy9cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgX3RoaXNQYW5lbC5pbml0aWFsaXplID0gZnVuY3Rpb24oKSB7XG4gICAgICBcbiAgICAgIHRoaXMudGl0bGUgPSB0aGlzLmNyZWF0ZVRpdGxlQmFyKFxuICAgICAgICB0aGlzLnRpdGxlTGFiZWwgfHxcbiAgICAgICAgdGhpcy5jb250YWluZXIuaWQpO1xuICAgICAgXG4gICAgICB0aGlzLmNsb3NlciA9IHRoaXMuY3JlYXRlQ2xvc2VCdXR0b24oKTtcbiAgICAgIFxuICAgICAgdGhpcy5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhpcy50aXRsZSk7XG4gICAgICB0aGlzLnRpdGxlLmFwcGVuZENoaWxkKHRoaXMuY2xvc2VyKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY29udGVudCk7XG4gICAgICBcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZU1vdmVIYW5kbGVycyh0aGlzLnRpdGxlKTtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZUNsb3NlSGFuZGxlcih0aGlzLmNsb3Nlcik7XG4gICAgfVxuICAgIFxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBvblRpdGxlRG91YmxlQ2xpY2sgb3ZlcnJpZGVcbiAgICAvL1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBfdGhpc1BhbmVsLm9uVGl0bGVEb3VibGVDbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgXG4gICAgICBfaXNNaW5pbWl6ZWQgPSAhX2lzTWluaW1pemVkO1xuICAgICAgXG4gICAgICBpZihfaXNNaW5pbWl6ZWQpIHtcbiAgICAgICAgXG4gICAgICAgICQoX3RoaXNQYW5lbC5jb250YWluZXIpLmFkZENsYXNzKFxuICAgICAgICAgICdtaW5pbWl6ZWQnKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICAkKF90aGlzUGFuZWwuY29udGFpbmVyKS5yZW1vdmVDbGFzcyhcbiAgICAgICAgICAnbWluaW1pemVkJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZXMgdGhlIHBhbmVsXG4gICAgaW5pdGlhbGl6ZSgpO1xuICB9XG4gIFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFNldCB1cCBKUyBpbmhlcml0YW5jZVxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIE1vZGVsTG9hZGVyUGFuZWwucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShcbiAgICBBdXRvZGVzay5WaWV3aW5nLlVJLkRvY2tpbmdQYW5lbC5wcm90b3R5cGUpO1xuXG4gIE1vZGVsTG9hZGVyUGFuZWwucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTW9kZWxMb2FkZXJQYW5lbDtcbn07XG5cbkF1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci5wcm90b3R5cGUgPVxuICBPYmplY3QuY3JlYXRlKEF1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9uLnByb3RvdHlwZSk7XG5cbkF1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPVxuICBBdXRvZGVzay5BRE4uVmlld2luZy5FeHRlbnNpb24uTW9kZWxMb2FkZXI7XG5cbkF1dG9kZXNrLlZpZXdpbmcudGhlRXh0ZW5zaW9uTWFuYWdlci5yZWdpc3RlckV4dGVuc2lvbihcbiAgJ0F1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlcicsXG4gIEF1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlcik7XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL0F1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci5qc1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=");
},1:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.3\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-04-05T19:26Z\n */\n\n(function( global, factory ) {\n\n	if ( typeof module === "object" && typeof module.exports === "object" ) {\n		// For CommonJS and CommonJS-like environments where a proper `window`\n		// is present, execute the factory and get jQuery.\n		// For environments that do not have a `window` with a `document`\n		// (such as Node.js), expose a factory as module.exports.\n		// This accentuates the need for the creation of a real `window`.\n		// e.g. var jQuery = require("jquery")(window);\n		// See ticket #14549 for more info.\n		module.exports = global.document ?\n			factory( global, true ) :\n			function( w ) {\n				if ( !w.document ) {\n					throw new Error( "jQuery requires a window with a document" );\n				}\n				return factory( w );\n			};\n	} else {\n		factory( global );\n	}\n\n// Pass this if window is not defined yet\n}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can\'t be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through "use strict" call chains. (#13335)\n//"use strict";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n	version = "2.2.3",\n\n	// Define a local copy of jQuery\n	jQuery = function( selector, context ) {\n\n		// The jQuery object is actually just the init constructor \'enhanced\'\n		// Need init if jQuery is called (just allow error to be thrown if not included)\n		return new jQuery.fn.init( selector, context );\n	},\n\n	// Support: Android<4.1\n	// Make sure we trim BOM and NBSP\n	rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n	// Matches dashed string for camelizing\n	rmsPrefix = /^-ms-/,\n	rdashAlpha = /-([\\da-z])/gi,\n\n	// Used by jQuery.camelCase as callback to replace()\n	fcamelCase = function( all, letter ) {\n		return letter.toUpperCase();\n	};\n\njQuery.fn = jQuery.prototype = {\n\n	// The current version of jQuery being used\n	jquery: version,\n\n	constructor: jQuery,\n\n	// Start with an empty selector\n	selector: "",\n\n	// The default length of a jQuery object is 0\n	length: 0,\n\n	toArray: function() {\n		return slice.call( this );\n	},\n\n	// Get the Nth element in the matched element set OR\n	// Get the whole matched element set as a clean array\n	get: function( num ) {\n		return num != null ?\n\n			// Return just the one element from the set\n			( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n			// Return all the elements in a clean array\n			slice.call( this );\n	},\n\n	// Take an array of elements and push it onto the stack\n	// (returning the new matched element set)\n	pushStack: function( elems ) {\n\n		// Build a new jQuery matched element set\n		var ret = jQuery.merge( this.constructor(), elems );\n\n		// Add the old object onto the stack (as a reference)\n		ret.prevObject = this;\n		ret.context = this.context;\n\n		// Return the newly-formed element set\n		return ret;\n	},\n\n	// Execute a callback for every element in the matched set.\n	each: function( callback ) {\n		return jQuery.each( this, callback );\n	},\n\n	map: function( callback ) {\n		return this.pushStack( jQuery.map( this, function( elem, i ) {\n			return callback.call( elem, i, elem );\n		} ) );\n	},\n\n	slice: function() {\n		return this.pushStack( slice.apply( this, arguments ) );\n	},\n\n	first: function() {\n		return this.eq( 0 );\n	},\n\n	last: function() {\n		return this.eq( -1 );\n	},\n\n	eq: function( i ) {\n		var len = this.length,\n			j = +i + ( i < 0 ? len : 0 );\n		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n	},\n\n	end: function() {\n		return this.prevObject || this.constructor();\n	},\n\n	// For internal use only.\n	// Behaves like an Array\'s method, not like a jQuery method.\n	push: push,\n	sort: arr.sort,\n	splice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n	var options, name, src, copy, copyIsArray, clone,\n		target = arguments[ 0 ] || {},\n		i = 1,\n		length = arguments.length,\n		deep = false;\n\n	// Handle a deep copy situation\n	if ( typeof target === "boolean" ) {\n		deep = target;\n\n		// Skip the boolean and the target\n		target = arguments[ i ] || {};\n		i++;\n	}\n\n	// Handle case when target is a string or something (possible in deep copy)\n	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {\n		target = {};\n	}\n\n	// Extend jQuery itself if only one argument is passed\n	if ( i === length ) {\n		target = this;\n		i--;\n	}\n\n	for ( ; i < length; i++ ) {\n\n		// Only deal with non-null/undefined values\n		if ( ( options = arguments[ i ] ) != null ) {\n\n			// Extend the base object\n			for ( name in options ) {\n				src = target[ name ];\n				copy = options[ name ];\n\n				// Prevent never-ending loop\n				if ( target === copy ) {\n					continue;\n				}\n\n				// Recurse if we\'re merging plain objects or arrays\n				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n					( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n					if ( copyIsArray ) {\n						copyIsArray = false;\n						clone = src && jQuery.isArray( src ) ? src : [];\n\n					} else {\n						clone = src && jQuery.isPlainObject( src ) ? src : {};\n					}\n\n					// Never move original objects, clone them\n					target[ name ] = jQuery.extend( deep, clone, copy );\n\n				// Don\'t bring in undefined values\n				} else if ( copy !== undefined ) {\n					target[ name ] = copy;\n				}\n			}\n		}\n	}\n\n	// Return the modified object\n	return target;\n};\n\njQuery.extend( {\n\n	// Unique for each copy of jQuery on the page\n	expando: "jQuery" + ( version + Math.random() ).replace( /\\D/g, "" ),\n\n	// Assume jQuery is ready without the ready module\n	isReady: true,\n\n	error: function( msg ) {\n		throw new Error( msg );\n	},\n\n	noop: function() {},\n\n	isFunction: function( obj ) {\n		return jQuery.type( obj ) === "function";\n	},\n\n	isArray: Array.isArray,\n\n	isWindow: function( obj ) {\n		return obj != null && obj === obj.window;\n	},\n\n	isNumeric: function( obj ) {\n\n		// parseFloat NaNs numeric-cast false positives (null|true|false|"")\n		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n		// subtraction forces infinities to NaN\n		// adding 1 corrects loss of precision from parseFloat (#15100)\n		var realStringObj = obj && obj.toString();\n		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n	},\n\n	isPlainObject: function( obj ) {\n		var key;\n\n		// Not plain objects:\n		// - Any object or value whose internal [[Class]] property is not "[object Object]"\n		// - DOM nodes\n		// - window\n		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {\n			return false;\n		}\n\n		// Not own constructor property must be Object\n		if ( obj.constructor &&\n				!hasOwn.call( obj, "constructor" ) &&\n				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {\n			return false;\n		}\n\n		// Own properties are enumerated firstly, so to speed up,\n		// if last one is own, then all properties are own\n		for ( key in obj ) {}\n\n		return key === undefined || hasOwn.call( obj, key );\n	},\n\n	isEmptyObject: function( obj ) {\n		var name;\n		for ( name in obj ) {\n			return false;\n		}\n		return true;\n	},\n\n	type: function( obj ) {\n		if ( obj == null ) {\n			return obj + "";\n		}\n\n		// Support: Android<4.0, iOS<6 (functionish RegExp)\n		return typeof obj === "object" || typeof obj === "function" ?\n			class2type[ toString.call( obj ) ] || "object" :\n			typeof obj;\n	},\n\n	// Evaluates a script in a global context\n	globalEval: function( code ) {\n		var script,\n			indirect = eval;\n\n		code = jQuery.trim( code );\n\n		if ( code ) {\n\n			// If the code includes a valid, prologue position\n			// strict mode pragma, execute code by injecting a\n			// script tag into the document.\n			if ( code.indexOf( "use strict" ) === 1 ) {\n				script = document.createElement( "script" );\n				script.text = code;\n				document.head.appendChild( script ).parentNode.removeChild( script );\n			} else {\n\n				// Otherwise, avoid the DOM node creation, insertion\n				// and removal by using an indirect global eval\n\n				indirect( code );\n			}\n		}\n	},\n\n	// Convert dashed to camelCase; used by the css and data modules\n	// Support: IE9-11+\n	// Microsoft forgot to hump their vendor prefix (#9572)\n	camelCase: function( string ) {\n		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );\n	},\n\n	nodeName: function( elem, name ) {\n		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n	},\n\n	each: function( obj, callback ) {\n		var length, i = 0;\n\n		if ( isArrayLike( obj ) ) {\n			length = obj.length;\n			for ( ; i < length; i++ ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		} else {\n			for ( i in obj ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		}\n\n		return obj;\n	},\n\n	// Support: Android<4.1\n	trim: function( text ) {\n		return text == null ?\n			"" :\n			( text + "" ).replace( rtrim, "" );\n	},\n\n	// results is for internal usage only\n	makeArray: function( arr, results ) {\n		var ret = results || [];\n\n		if ( arr != null ) {\n			if ( isArrayLike( Object( arr ) ) ) {\n				jQuery.merge( ret,\n					typeof arr === "string" ?\n					[ arr ] : arr\n				);\n			} else {\n				push.call( ret, arr );\n			}\n		}\n\n		return ret;\n	},\n\n	inArray: function( elem, arr, i ) {\n		return arr == null ? -1 : indexOf.call( arr, elem, i );\n	},\n\n	merge: function( first, second ) {\n		var len = +second.length,\n			j = 0,\n			i = first.length;\n\n		for ( ; j < len; j++ ) {\n			first[ i++ ] = second[ j ];\n		}\n\n		first.length = i;\n\n		return first;\n	},\n\n	grep: function( elems, callback, invert ) {\n		var callbackInverse,\n			matches = [],\n			i = 0,\n			length = elems.length,\n			callbackExpect = !invert;\n\n		// Go through the array, only saving the items\n		// that pass the validator function\n		for ( ; i < length; i++ ) {\n			callbackInverse = !callback( elems[ i ], i );\n			if ( callbackInverse !== callbackExpect ) {\n				matches.push( elems[ i ] );\n			}\n		}\n\n		return matches;\n	},\n\n	// arg is for internal usage only\n	map: function( elems, callback, arg ) {\n		var length, value,\n			i = 0,\n			ret = [];\n\n		// Go through the array, translating each of the items to their new values\n		if ( isArrayLike( elems ) ) {\n			length = elems.length;\n			for ( ; i < length; i++ ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n\n		// Go through every key on the object,\n		} else {\n			for ( i in elems ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n		}\n\n		// Flatten any nested arrays\n		return concat.apply( [], ret );\n	},\n\n	// A global GUID counter for objects\n	guid: 1,\n\n	// Bind a function to a context, optionally partially applying any\n	// arguments.\n	proxy: function( fn, context ) {\n		var tmp, args, proxy;\n\n		if ( typeof context === "string" ) {\n			tmp = fn[ context ];\n			context = fn;\n			fn = tmp;\n		}\n\n		// Quick check to determine if target is callable, in the spec\n		// this throws a TypeError, but we will just return undefined.\n		if ( !jQuery.isFunction( fn ) ) {\n			return undefined;\n		}\n\n		// Simulated bind\n		args = slice.call( arguments, 2 );\n		proxy = function() {\n			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n		};\n\n		// Set the guid of unique handler to the same of original handler, so it can be removed\n		proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n		return proxy;\n	},\n\n	now: Date.now,\n\n	// jQuery.support is not used in Core but other projects attach their\n	// properties to it so it needs to exist.\n	support: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === "function" ) {\n	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),\nfunction( i, name ) {\n	class2type[ "[object " + name + "]" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n	// Support: iOS 8.2 (not reproducible in simulator)\n	// `in` check used to prevent JIT error (gh-2145)\n	// hasOwn isn\'t used here due to false negatives\n	// regarding Nodelist length in IE\n	var length = !!obj && "length" in obj && obj.length,\n		type = jQuery.type( obj );\n\n	if ( type === "function" || jQuery.isWindow( obj ) ) {\n		return false;\n	}\n\n	return type === "array" || length === 0 ||\n		typeof length === "number" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n	support,\n	Expr,\n	getText,\n	isXML,\n	tokenize,\n	compile,\n	select,\n	outermostContext,\n	sortInput,\n	hasDuplicate,\n\n	// Local document vars\n	setDocument,\n	document,\n	docElem,\n	documentIsHTML,\n	rbuggyQSA,\n	rbuggyMatches,\n	matches,\n	contains,\n\n	// Instance-specific data\n	expando = "sizzle" + 1 * new Date(),\n	preferredDoc = window.document,\n	dirruns = 0,\n	done = 0,\n	classCache = createCache(),\n	tokenCache = createCache(),\n	compilerCache = createCache(),\n	sortOrder = function( a, b ) {\n		if ( a === b ) {\n			hasDuplicate = true;\n		}\n		return 0;\n	},\n\n	// General-purpose constants\n	MAX_NEGATIVE = 1 << 31,\n\n	// Instance methods\n	hasOwn = ({}).hasOwnProperty,\n	arr = [],\n	pop = arr.pop,\n	push_native = arr.push,\n	push = arr.push,\n	slice = arr.slice,\n	// Use a stripped-down indexOf as it\'s faster than native\n	// http://jsperf.com/thor-indexof-vs-for/5\n	indexOf = function( list, elem ) {\n		var i = 0,\n			len = list.length;\n		for ( ; i < len; i++ ) {\n			if ( list[i] === elem ) {\n				return i;\n			}\n		}\n		return -1;\n	},\n\n	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",\n\n	// Regular expressions\n\n	// http://www.w3.org/TR/css3-selectors/#whitespace\n	whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n\n	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n	identifier = "(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+",\n\n	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n	attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +\n		// Operator (capture 2)\n		"*([*^$|!~]?=)" + whitespace +\n		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"\n		"*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace +\n		"*\\\\]",\n\n	pseudos = ":(" + identifier + ")(?:\\\\((" +\n		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n		// 1. quoted (capture 3; capture 4 or capture 5)\n		"(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" +\n		// 2. simple (capture 6)\n		"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" +\n		// 3. anything else (capture 2)\n		".*" +\n		")\\\\)|)",\n\n	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n	rwhitespace = new RegExp( whitespace + "+", "g" ),\n	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g" ),\n\n	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),\n	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),\n\n	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\\\]\'\\"]*?)" + whitespace + "*\\\\]", "g" ),\n\n	rpseudo = new RegExp( pseudos ),\n	ridentifier = new RegExp( "^" + identifier + "$" ),\n\n	matchExpr = {\n		"ID": new RegExp( "^#(" + identifier + ")" ),\n		"CLASS": new RegExp( "^\\\\.(" + identifier + ")" ),\n		"TAG": new RegExp( "^(" + identifier + "|[*])" ),\n		"ATTR": new RegExp( "^" + attributes ),\n		"PSEUDO": new RegExp( "^" + pseudos ),\n		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace +\n			"*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +\n			"*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i" ),\n		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),\n		// For use in libraries implementing .is()\n		// We use this for POS matching in `select`\n		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" +\n			whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i" )\n	},\n\n	rinputs = /^(?:input|select|textarea|button)$/i,\n	rheader = /^h\\d$/i,\n\n	rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n	// Easily-parseable/retrievable ID or TAG or CLASS selectors\n	rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n	rsibling = /[+~]/,\n	rescape = /\'|\\\\/g,\n\n	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n	runescape = new RegExp( "\\\\\\\\([\\\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),\n	funescape = function( _, escaped, escapedWhitespace ) {\n		var high = "0x" + escaped - 0x10000;\n		// NaN means non-codepoint\n		// Support: Firefox<24\n		// Workaround erroneous numeric interpretation of +"0x"\n		return high !== high || escapedWhitespace ?\n			escaped :\n			high < 0 ?\n				// BMP codepoint\n				String.fromCharCode( high + 0x10000 ) :\n				// Supplemental Plane codepoint (surrogate pair)\n				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n	},\n\n	// Used for iframes\n	// See setDocument()\n	// Removing the function wrapper causes a "Permission Denied"\n	// error in IE\n	unloadHandler = function() {\n		setDocument();\n	};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n	push.apply(\n		(arr = slice.call( preferredDoc.childNodes )),\n		preferredDoc.childNodes\n	);\n	// Support: Android<4.0\n	// Detect silently failing push.apply\n	arr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n	push = { apply: arr.length ?\n\n		// Leverage slice if possible\n		function( target, els ) {\n			push_native.apply( target, slice.call(els) );\n		} :\n\n		// Support: IE<9\n		// Otherwise append directly\n		function( target, els ) {\n			var j = target.length,\n				i = 0;\n			// Can\'t trust NodeList.length\n			while ( (target[j++] = els[i++]) ) {}\n			target.length = j - 1;\n		}\n	};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n	var m, i, elem, nid, nidselect, match, groups, newSelector,\n		newContext = context && context.ownerDocument,\n\n		// nodeType defaults to 9, since context defaults to document\n		nodeType = context ? context.nodeType : 9;\n\n	results = results || [];\n\n	// Return early from calls with invalid selector or context\n	if ( typeof selector !== "string" || !selector ||\n		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n		return results;\n	}\n\n	// Try to shortcut find operations (as opposed to filters) in HTML documents\n	if ( !seed ) {\n\n		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n			setDocument( context );\n		}\n		context = context || document;\n\n		if ( documentIsHTML ) {\n\n			// If the selector is sufficiently simple, try using a "get*By*" DOM method\n			// (excepting DocumentFragment context, where the methods don\'t exist)\n			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n				// ID selector\n				if ( (m = match[1]) ) {\n\n					// Document context\n					if ( nodeType === 9 ) {\n						if ( (elem = context.getElementById( m )) ) {\n\n							// Support: IE, Opera, Webkit\n							// TODO: identify versions\n							// getElementById can match elements by name instead of ID\n							if ( elem.id === m ) {\n								results.push( elem );\n								return results;\n							}\n						} else {\n							return results;\n						}\n\n					// Element context\n					} else {\n\n						// Support: IE, Opera, Webkit\n						// TODO: identify versions\n						// getElementById can match elements by name instead of ID\n						if ( newContext && (elem = newContext.getElementById( m )) &&\n							contains( context, elem ) &&\n							elem.id === m ) {\n\n							results.push( elem );\n							return results;\n						}\n					}\n\n				// Type selector\n				} else if ( match[2] ) {\n					push.apply( results, context.getElementsByTagName( selector ) );\n					return results;\n\n				// Class selector\n				} else if ( (m = match[3]) && support.getElementsByClassName &&\n					context.getElementsByClassName ) {\n\n					push.apply( results, context.getElementsByClassName( m ) );\n					return results;\n				}\n			}\n\n			// Take advantage of querySelectorAll\n			if ( support.qsa &&\n				!compilerCache[ selector + " " ] &&\n				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n				if ( nodeType !== 1 ) {\n					newContext = context;\n					newSelector = selector;\n\n				// qSA looks outside Element context, which is not what we want\n				// Thanks to Andrew Dupont for this workaround technique\n				// Support: IE <=8\n				// Exclude object elements\n				} else if ( context.nodeName.toLowerCase() !== "object" ) {\n\n					// Capture the context ID, setting it first if necessary\n					if ( (nid = context.getAttribute( "id" )) ) {\n						nid = nid.replace( rescape, "\\\\$&" );\n					} else {\n						context.setAttribute( "id", (nid = expando) );\n					}\n\n					// Prefix every selector in the list\n					groups = tokenize( selector );\n					i = groups.length;\n					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id=\'" + nid + "\']";\n					while ( i-- ) {\n						groups[i] = nidselect + " " + toSelector( groups[i] );\n					}\n					newSelector = groups.join( "," );\n\n					// Expand context for sibling selectors\n					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n						context;\n				}\n\n				if ( newSelector ) {\n					try {\n						push.apply( results,\n							newContext.querySelectorAll( newSelector )\n						);\n						return results;\n					} catch ( qsaError ) {\n					} finally {\n						if ( nid === expando ) {\n							context.removeAttribute( "id" );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	// All others\n	return select( selector.replace( rtrim, "$1" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *	deleting the oldest entry\n */\nfunction createCache() {\n	var keys = [];\n\n	function cache( key, value ) {\n		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n		if ( keys.push( key + " " ) > Expr.cacheLength ) {\n			// Only keep the most recent entries\n			delete cache[ keys.shift() ];\n		}\n		return (cache[ key + " " ] = value);\n	}\n	return cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n	fn[ expando ] = true;\n	return fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n	var div = document.createElement("div");\n\n	try {\n		return !!fn( div );\n	} catch (e) {\n		return false;\n	} finally {\n		// Remove from its parent by default\n		if ( div.parentNode ) {\n			div.parentNode.removeChild( div );\n		}\n		// release memory in IE\n		div = null;\n	}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n	var arr = attrs.split("|"),\n		i = arr.length;\n\n	while ( i-- ) {\n		Expr.attrHandle[ arr[i] ] = handler;\n	}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n	var cur = b && a,\n		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n			( ~b.sourceIndex || MAX_NEGATIVE ) -\n			( ~a.sourceIndex || MAX_NEGATIVE );\n\n	// Use IE sourceIndex if available on both nodes\n	if ( diff ) {\n		return diff;\n	}\n\n	// Check if b follows a\n	if ( cur ) {\n		while ( (cur = cur.nextSibling) ) {\n			if ( cur === b ) {\n				return -1;\n			}\n		}\n	}\n\n	return a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return name === "input" && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return (name === "input" || name === "button") && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n	return markFunction(function( argument ) {\n		argument = +argument;\n		return markFunction(function( seed, matches ) {\n			var j,\n				matchIndexes = fn( [], seed.length, argument ),\n				i = matchIndexes.length;\n\n			// Match elements found at the specified indexes\n			while ( i-- ) {\n				if ( seed[ (j = matchIndexes[i]) ] ) {\n					seed[j] = !(matches[j] = seed[j]);\n				}\n			}\n		});\n	});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n	return context && typeof context.getElementsByTagName !== "undefined" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n	// documentElement is verified for cases where it doesn\'t yet exist\n	// (such as loading iframes in IE - #4833)\n	var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n	return documentElement ? documentElement.nodeName !== "HTML" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n	var hasCompare, parent,\n		doc = node ? node.ownerDocument || node : preferredDoc;\n\n	// Return early if doc is invalid or already selected\n	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n		return document;\n	}\n\n	// Update global variables\n	document = doc;\n	docElem = document.documentElement;\n	documentIsHTML = !isXML( document );\n\n	// Support: IE 9-11, Edge\n	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n	if ( (parent = document.defaultView) && parent.top !== parent ) {\n		// Support: IE 11\n		if ( parent.addEventListener ) {\n			parent.addEventListener( "unload", unloadHandler, false );\n\n		// Support: IE 9 - 10 only\n		} else if ( parent.attachEvent ) {\n			parent.attachEvent( "onunload", unloadHandler );\n		}\n	}\n\n	/* Attributes\n	---------------------------------------------------------------------- */\n\n	// Support: IE<8\n	// Verify that getAttribute really returns attributes and not properties\n	// (excepting IE8 booleans)\n	support.attributes = assert(function( div ) {\n		div.className = "i";\n		return !div.getAttribute("className");\n	});\n\n	/* getElement(s)By*\n	---------------------------------------------------------------------- */\n\n	// Check if getElementsByTagName("*") returns only elements\n	support.getElementsByTagName = assert(function( div ) {\n		div.appendChild( document.createComment("") );\n		return !div.getElementsByTagName("*").length;\n	});\n\n	// Support: IE<9\n	support.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n	// Support: IE<10\n	// Check if getElementById returns elements by name\n	// The broken getElementById methods don\'t pick up programatically-set names,\n	// so use a roundabout getElementsByName test\n	support.getById = assert(function( div ) {\n		docElem.appendChild( div ).id = expando;\n		return !document.getElementsByName || !document.getElementsByName( expando ).length;\n	});\n\n	// ID find and filter\n	if ( support.getById ) {\n		Expr.find["ID"] = function( id, context ) {\n			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {\n				var m = context.getElementById( id );\n				return m ? [ m ] : [];\n			}\n		};\n		Expr.filter["ID"] = function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				return elem.getAttribute("id") === attrId;\n			};\n		};\n	} else {\n		// Support: IE6/7\n		// getElementById is not reliable as a find shortcut\n		delete Expr.find["ID"];\n\n		Expr.filter["ID"] =  function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				var node = typeof elem.getAttributeNode !== "undefined" &&\n					elem.getAttributeNode("id");\n				return node && node.value === attrId;\n			};\n		};\n	}\n\n	// Tag\n	Expr.find["TAG"] = support.getElementsByTagName ?\n		function( tag, context ) {\n			if ( typeof context.getElementsByTagName !== "undefined" ) {\n				return context.getElementsByTagName( tag );\n\n			// DocumentFragment nodes don\'t have gEBTN\n			} else if ( support.qsa ) {\n				return context.querySelectorAll( tag );\n			}\n		} :\n\n		function( tag, context ) {\n			var elem,\n				tmp = [],\n				i = 0,\n				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n				results = context.getElementsByTagName( tag );\n\n			// Filter out possible comments\n			if ( tag === "*" ) {\n				while ( (elem = results[i++]) ) {\n					if ( elem.nodeType === 1 ) {\n						tmp.push( elem );\n					}\n				}\n\n				return tmp;\n			}\n			return results;\n		};\n\n	// Class\n	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {\n		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {\n			return context.getElementsByClassName( className );\n		}\n	};\n\n	/* QSA/matchesSelector\n	---------------------------------------------------------------------- */\n\n	// QSA and matchesSelector support\n\n	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n	rbuggyMatches = [];\n\n	// qSa(:focus) reports false when true (Chrome 21)\n	// We allow this because of a bug in IE8/9 that throws an error\n	// whenever `document.activeElement` is accessed on an iframe\n	// So, we allow :focus to pass through QSA all the time to avoid the IE error\n	// See http://bugs.jquery.com/ticket/13378\n	rbuggyQSA = [];\n\n	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n		// Build QSA regex\n		// Regex strategy adopted from Diego Perini\n		assert(function( div ) {\n			// Select is set to empty string on purpose\n			// This is to test IE\'s treatment of not explicitly\n			// setting a boolean content attribute,\n			// since its presence should be enough\n			// http://bugs.jquery.com/ticket/12359\n			docElem.appendChild( div ).innerHTML = "<a id=\'" + expando + "\'></a>" +\n				"<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" +\n				"<option selected=\'\'></option></select>";\n\n			// Support: IE8, Opera 11-12.16\n			// Nothing should be selected when empty strings follow ^= or $= or *=\n			// The test attribute must be unknown in Opera but "safe" for WinRT\n			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n			if ( div.querySelectorAll("[msallowcapture^=\'\']").length ) {\n				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\'\'|\\"\\")" );\n			}\n\n			// Support: IE8\n			// Boolean attributes and "value" are not treated correctly\n			if ( !div.querySelectorAll("[selected]").length ) {\n				rbuggyQSA.push( "\\\\[" + whitespace + "*(?:value|" + booleans + ")" );\n			}\n\n			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {\n				rbuggyQSA.push("~=");\n			}\n\n			// Webkit/Opera - :checked should return selected option elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			// IE8 throws error here and will not see later tests\n			if ( !div.querySelectorAll(":checked").length ) {\n				rbuggyQSA.push(":checked");\n			}\n\n			// Support: Safari 8+, iOS 8+\n			// https://bugs.webkit.org/show_bug.cgi?id=136851\n			// In-page `selector#id sibing-combinator selector` fails\n			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {\n				rbuggyQSA.push(".#.+[+~]");\n			}\n		});\n\n		assert(function( div ) {\n			// Support: Windows 8 Native Apps\n			// The type and name attributes are restricted during .innerHTML assignment\n			var input = document.createElement("input");\n			input.setAttribute( "type", "hidden" );\n			div.appendChild( input ).setAttribute( "name", "D" );\n\n			// Support: IE8\n			// Enforce case-sensitivity of name attribute\n			if ( div.querySelectorAll("[name=d]").length ) {\n				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );\n			}\n\n			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n			// IE8 throws error here and will not see later tests\n			if ( !div.querySelectorAll(":enabled").length ) {\n				rbuggyQSA.push( ":enabled", ":disabled" );\n			}\n\n			// Opera 10-11 does not throw on post-comma invalid pseudos\n			div.querySelectorAll("*,:x");\n			rbuggyQSA.push(",.*:");\n		});\n	}\n\n	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n		docElem.webkitMatchesSelector ||\n		docElem.mozMatchesSelector ||\n		docElem.oMatchesSelector ||\n		docElem.msMatchesSelector) )) ) {\n\n		assert(function( div ) {\n			// Check to see if it\'s possible to do matchesSelector\n			// on a disconnected node (IE 9)\n			support.disconnectedMatch = matches.call( div, "div" );\n\n			// This should fail with an exception\n			// Gecko does not error, returns false instead\n			matches.call( div, "[s!=\'\']:x" );\n			rbuggyMatches.push( "!=", pseudos );\n		});\n	}\n\n	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );\n	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );\n\n	/* Contains\n	---------------------------------------------------------------------- */\n	hasCompare = rnative.test( docElem.compareDocumentPosition );\n\n	// Element contains another\n	// Purposefully self-exclusive\n	// As in, an element does not contain itself\n	contains = hasCompare || rnative.test( docElem.contains ) ?\n		function( a, b ) {\n			var adown = a.nodeType === 9 ? a.documentElement : a,\n				bup = b && b.parentNode;\n			return a === bup || !!( bup && bup.nodeType === 1 && (\n				adown.contains ?\n					adown.contains( bup ) :\n					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n			));\n		} :\n		function( a, b ) {\n			if ( b ) {\n				while ( (b = b.parentNode) ) {\n					if ( b === a ) {\n						return true;\n					}\n				}\n			}\n			return false;\n		};\n\n	/* Sorting\n	---------------------------------------------------------------------- */\n\n	// Document order sorting\n	sortOrder = hasCompare ?\n	function( a, b ) {\n\n		// Flag for duplicate removal\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		// Sort on method existence if only one input has compareDocumentPosition\n		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n		if ( compare ) {\n			return compare;\n		}\n\n		// Calculate position if both inputs belong to the same document\n		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n			a.compareDocumentPosition( b ) :\n\n			// Otherwise we know they are disconnected\n			1;\n\n		// Disconnected nodes\n		if ( compare & 1 ||\n			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n			// Choose the first element that is related to our preferred document\n			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n				return -1;\n			}\n			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n				return 1;\n			}\n\n			// Maintain original order\n			return sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n		}\n\n		return compare & 4 ? -1 : 1;\n	} :\n	function( a, b ) {\n		// Exit early if the nodes are identical\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		var cur,\n			i = 0,\n			aup = a.parentNode,\n			bup = b.parentNode,\n			ap = [ a ],\n			bp = [ b ];\n\n		// Parentless nodes are either documents or disconnected\n		if ( !aup || !bup ) {\n			return a === document ? -1 :\n				b === document ? 1 :\n				aup ? -1 :\n				bup ? 1 :\n				sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n\n		// If the nodes are siblings, we can do a quick check\n		} else if ( aup === bup ) {\n			return siblingCheck( a, b );\n		}\n\n		// Otherwise we need full lists of their ancestors for comparison\n		cur = a;\n		while ( (cur = cur.parentNode) ) {\n			ap.unshift( cur );\n		}\n		cur = b;\n		while ( (cur = cur.parentNode) ) {\n			bp.unshift( cur );\n		}\n\n		// Walk down the tree looking for a discrepancy\n		while ( ap[i] === bp[i] ) {\n			i++;\n		}\n\n		return i ?\n			// Do a sibling check if the nodes have a common ancestor\n			siblingCheck( ap[i], bp[i] ) :\n\n			// Otherwise nodes in our document sort first\n			ap[i] === preferredDoc ? -1 :\n			bp[i] === preferredDoc ? 1 :\n			0;\n	};\n\n	return document;\n};\n\nSizzle.matches = function( expr, elements ) {\n	return Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	// Make sure that attribute selectors are quoted\n	expr = expr.replace( rattributeQuotes, "=\'$1\']" );\n\n	if ( support.matchesSelector && documentIsHTML &&\n		!compilerCache[ expr + " " ] &&\n		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n		try {\n			var ret = matches.call( elem, expr );\n\n			// IE 9\'s matchesSelector returns false on disconnected nodes\n			if ( ret || support.disconnectedMatch ||\n					// As well, disconnected nodes are said to be in a document\n					// fragment in IE 9\n					elem.document && elem.document.nodeType !== 11 ) {\n				return ret;\n			}\n		} catch (e) {}\n	}\n\n	return Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n	// Set document vars if needed\n	if ( ( context.ownerDocument || context ) !== document ) {\n		setDocument( context );\n	}\n	return contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	var fn = Expr.attrHandle[ name.toLowerCase() ],\n		// Don\'t get fooled by Object.prototype properties (jQuery #13807)\n		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n			fn( elem, name, !documentIsHTML ) :\n			undefined;\n\n	return val !== undefined ?\n		val :\n		support.attributes || !documentIsHTML ?\n			elem.getAttribute( name ) :\n			(val = elem.getAttributeNode(name)) && val.specified ?\n				val.value :\n				null;\n};\n\nSizzle.error = function( msg ) {\n	throw new Error( "Syntax error, unrecognized expression: " + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n	var elem,\n		duplicates = [],\n		j = 0,\n		i = 0;\n\n	// Unless we *know* we can detect duplicates, assume their presence\n	hasDuplicate = !support.detectDuplicates;\n	sortInput = !support.sortStable && results.slice( 0 );\n	results.sort( sortOrder );\n\n	if ( hasDuplicate ) {\n		while ( (elem = results[i++]) ) {\n			if ( elem === results[ i ] ) {\n				j = duplicates.push( i );\n			}\n		}\n		while ( j-- ) {\n			results.splice( duplicates[ j ], 1 );\n		}\n	}\n\n	// Clear input after sorting to release objects\n	// See https://github.com/jquery/sizzle/pull/225\n	sortInput = null;\n\n	return results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n	var node,\n		ret = "",\n		i = 0,\n		nodeType = elem.nodeType;\n\n	if ( !nodeType ) {\n		// If no nodeType, this is expected to be an array\n		while ( (node = elem[i++]) ) {\n			// Do not traverse comment nodes\n			ret += getText( node );\n		}\n	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n		// Use textContent for elements\n		// innerText usage removed for consistency of new lines (jQuery #11153)\n		if ( typeof elem.textContent === "string" ) {\n			return elem.textContent;\n		} else {\n			// Traverse its children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				ret += getText( elem );\n			}\n		}\n	} else if ( nodeType === 3 || nodeType === 4 ) {\n		return elem.nodeValue;\n	}\n	// Do not include comment or processing instruction nodes\n\n	return ret;\n};\n\nExpr = Sizzle.selectors = {\n\n	// Can be adjusted by the user\n	cacheLength: 50,\n\n	createPseudo: markFunction,\n\n	match: matchExpr,\n\n	attrHandle: {},\n\n	find: {},\n\n	relative: {\n		">": { dir: "parentNode", first: true },\n		" ": { dir: "parentNode" },\n		"+": { dir: "previousSibling", first: true },\n		"~": { dir: "previousSibling" }\n	},\n\n	preFilter: {\n		"ATTR": function( match ) {\n			match[1] = match[1].replace( runescape, funescape );\n\n			// Move the given value to match[3] whether quoted or unquoted\n			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );\n\n			if ( match[2] === "~=" ) {\n				match[3] = " " + match[3] + " ";\n			}\n\n			return match.slice( 0, 4 );\n		},\n\n		"CHILD": function( match ) {\n			/* matches from matchExpr["CHILD"]\n				1 type (only|nth|...)\n				2 what (child|of-type)\n				3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n				4 xn-component of xn+y argument ([+-]?\\d*n|)\n				5 sign of xn-component\n				6 x of xn-component\n				7 sign of y-component\n				8 y of y-component\n			*/\n			match[1] = match[1].toLowerCase();\n\n			if ( match[1].slice( 0, 3 ) === "nth" ) {\n				// nth-* requires argument\n				if ( !match[3] ) {\n					Sizzle.error( match[0] );\n				}\n\n				// numeric x and y parameters for Expr.filter.CHILD\n				// remember that false/true cast respectively to 0/1\n				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );\n				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );\n\n			// other types prohibit arguments\n			} else if ( match[3] ) {\n				Sizzle.error( match[0] );\n			}\n\n			return match;\n		},\n\n		"PSEUDO": function( match ) {\n			var excess,\n				unquoted = !match[6] && match[2];\n\n			if ( matchExpr["CHILD"].test( match[0] ) ) {\n				return null;\n			}\n\n			// Accept quoted arguments as-is\n			if ( match[3] ) {\n				match[2] = match[4] || match[5] || "";\n\n			// Strip excess characters from unquoted arguments\n			} else if ( unquoted && rpseudo.test( unquoted ) &&\n				// Get excess from tokenize (recursively)\n				(excess = tokenize( unquoted, true )) &&\n				// advance to the next closing parenthesis\n				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {\n\n				// excess is a negative index\n				match[0] = match[0].slice( 0, excess );\n				match[2] = unquoted.slice( 0, excess );\n			}\n\n			// Return only captures needed by the pseudo filter method (type and argument)\n			return match.slice( 0, 3 );\n		}\n	},\n\n	filter: {\n\n		"TAG": function( nodeNameSelector ) {\n			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n			return nodeNameSelector === "*" ?\n				function() { return true; } :\n				function( elem ) {\n					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n				};\n		},\n\n		"CLASS": function( className ) {\n			var pattern = classCache[ className + " " ];\n\n			return pattern ||\n				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&\n				classCache( className, function( elem ) {\n					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );\n				});\n		},\n\n		"ATTR": function( name, operator, check ) {\n			return function( elem ) {\n				var result = Sizzle.attr( elem, name );\n\n				if ( result == null ) {\n					return operator === "!=";\n				}\n				if ( !operator ) {\n					return true;\n				}\n\n				result += "";\n\n				return operator === "=" ? result === check :\n					operator === "!=" ? result !== check :\n					operator === "^=" ? check && result.indexOf( check ) === 0 :\n					operator === "*=" ? check && result.indexOf( check ) > -1 :\n					operator === "$=" ? check && result.slice( -check.length ) === check :\n					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :\n					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :\n					false;\n			};\n		},\n\n		"CHILD": function( type, what, argument, first, last ) {\n			var simple = type.slice( 0, 3 ) !== "nth",\n				forward = type.slice( -4 ) !== "last",\n				ofType = what === "of-type";\n\n			return first === 1 && last === 0 ?\n\n				// Shortcut for :nth-*(n)\n				function( elem ) {\n					return !!elem.parentNode;\n				} :\n\n				function( elem, context, xml ) {\n					var cache, uniqueCache, outerCache, node, nodeIndex, start,\n						dir = simple !== forward ? "nextSibling" : "previousSibling",\n						parent = elem.parentNode,\n						name = ofType && elem.nodeName.toLowerCase(),\n						useCache = !xml && !ofType,\n						diff = false;\n\n					if ( parent ) {\n\n						// :(first|last|only)-(child|of-type)\n						if ( simple ) {\n							while ( dir ) {\n								node = elem;\n								while ( (node = node[ dir ]) ) {\n									if ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) {\n\n										return false;\n									}\n								}\n								// Reverse direction for :only-* (if we haven\'t yet done so)\n								start = dir = type === "only" && !start && "nextSibling";\n							}\n							return true;\n						}\n\n						start = [ forward ? parent.firstChild : parent.lastChild ];\n\n						// non-xml :nth-child(...) stores cache data on `parent`\n						if ( forward && useCache ) {\n\n							// Seek `elem` from a previously-cached index\n\n							// ...in a gzip-friendly way\n							node = parent;\n							outerCache = node[ expando ] || (node[ expando ] = {});\n\n							// Support: IE <9 only\n							// Defend against cloned attroperties (jQuery gh-1709)\n							uniqueCache = outerCache[ node.uniqueID ] ||\n								(outerCache[ node.uniqueID ] = {});\n\n							cache = uniqueCache[ type ] || [];\n							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n							diff = nodeIndex && cache[ 2 ];\n							node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n							while ( (node = ++nodeIndex && node && node[ dir ] ||\n\n								// Fallback to seeking `elem` from the start\n								(diff = nodeIndex = 0) || start.pop()) ) {\n\n								// When found, cache indexes on `parent` and break\n								if ( node.nodeType === 1 && ++diff && node === elem ) {\n									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n									break;\n								}\n							}\n\n						} else {\n							// Use previously-cached element index if available\n							if ( useCache ) {\n								// ...in a gzip-friendly way\n								node = elem;\n								outerCache = node[ expando ] || (node[ expando ] = {});\n\n								// Support: IE <9 only\n								// Defend against cloned attroperties (jQuery gh-1709)\n								uniqueCache = outerCache[ node.uniqueID ] ||\n									(outerCache[ node.uniqueID ] = {});\n\n								cache = uniqueCache[ type ] || [];\n								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n								diff = nodeIndex;\n							}\n\n							// xml :nth-child(...)\n							// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n							if ( diff === false ) {\n								// Use the same loop as above to seek `elem` from the start\n								while ( (node = ++nodeIndex && node && node[ dir ] ||\n									(diff = nodeIndex = 0) || start.pop()) ) {\n\n									if ( ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) &&\n										++diff ) {\n\n										// Cache the index of each encountered element\n										if ( useCache ) {\n											outerCache = node[ expando ] || (node[ expando ] = {});\n\n											// Support: IE <9 only\n											// Defend against cloned attroperties (jQuery gh-1709)\n											uniqueCache = outerCache[ node.uniqueID ] ||\n												(outerCache[ node.uniqueID ] = {});\n\n											uniqueCache[ type ] = [ dirruns, diff ];\n										}\n\n										if ( node === elem ) {\n											break;\n										}\n									}\n								}\n							}\n						}\n\n						// Incorporate the offset, then check against cycle size\n						diff -= last;\n						return diff === first || ( diff % first === 0 && diff / first >= 0 );\n					}\n				};\n		},\n\n		"PSEUDO": function( pseudo, argument ) {\n			// pseudo-class names are case-insensitive\n			// http://www.w3.org/TR/selectors/#pseudo-classes\n			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n			// Remember that setFilters inherits from pseudos\n			var args,\n				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n					Sizzle.error( "unsupported pseudo: " + pseudo );\n\n			// The user may use createPseudo to indicate that\n			// arguments are needed to create the filter function\n			// just as Sizzle does\n			if ( fn[ expando ] ) {\n				return fn( argument );\n			}\n\n			// But maintain support for old signatures\n			if ( fn.length > 1 ) {\n				args = [ pseudo, pseudo, "", argument ];\n				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n					markFunction(function( seed, matches ) {\n						var idx,\n							matched = fn( seed, argument ),\n							i = matched.length;\n						while ( i-- ) {\n							idx = indexOf( seed, matched[i] );\n							seed[ idx ] = !( matches[ idx ] = matched[i] );\n						}\n					}) :\n					function( elem ) {\n						return fn( elem, 0, args );\n					};\n			}\n\n			return fn;\n		}\n	},\n\n	pseudos: {\n		// Potentially complex pseudos\n		"not": markFunction(function( selector ) {\n			// Trim the selector passed to compile\n			// to avoid treating leading and trailing\n			// spaces as combinators\n			var input = [],\n				results = [],\n				matcher = compile( selector.replace( rtrim, "$1" ) );\n\n			return matcher[ expando ] ?\n				markFunction(function( seed, matches, context, xml ) {\n					var elem,\n						unmatched = matcher( seed, null, xml, [] ),\n						i = seed.length;\n\n					// Match elements unmatched by `matcher`\n					while ( i-- ) {\n						if ( (elem = unmatched[i]) ) {\n							seed[i] = !(matches[i] = elem);\n						}\n					}\n				}) :\n				function( elem, context, xml ) {\n					input[0] = elem;\n					matcher( input, null, xml, results );\n					// Don\'t keep the element (issue #299)\n					input[0] = null;\n					return !results.pop();\n				};\n		}),\n\n		"has": markFunction(function( selector ) {\n			return function( elem ) {\n				return Sizzle( selector, elem ).length > 0;\n			};\n		}),\n\n		"contains": markFunction(function( text ) {\n			text = text.replace( runescape, funescape );\n			return function( elem ) {\n				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n			};\n		}),\n\n		// "Whether an element is represented by a :lang() selector\n		// is based solely on the element\'s language value\n		// being equal to the identifier C,\n		// or beginning with the identifier C immediately followed by "-".\n		// The matching of C against the element\'s language value is performed case-insensitively.\n		// The identifier C does not have to be a valid language name."\n		// http://www.w3.org/TR/selectors/#lang-pseudo\n		"lang": markFunction( function( lang ) {\n			// lang value must be a valid identifier\n			if ( !ridentifier.test(lang || "") ) {\n				Sizzle.error( "unsupported lang: " + lang );\n			}\n			lang = lang.replace( runescape, funescape ).toLowerCase();\n			return function( elem ) {\n				var elemLang;\n				do {\n					if ( (elemLang = documentIsHTML ?\n						elem.lang :\n						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {\n\n						elemLang = elemLang.toLowerCase();\n						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;\n					}\n				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n				return false;\n			};\n		}),\n\n		// Miscellaneous\n		"target": function( elem ) {\n			var hash = window.location && window.location.hash;\n			return hash && hash.slice( 1 ) === elem.id;\n		},\n\n		"root": function( elem ) {\n			return elem === docElem;\n		},\n\n		"focus": function( elem ) {\n			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n		},\n\n		// Boolean properties\n		"enabled": function( elem ) {\n			return elem.disabled === false;\n		},\n\n		"disabled": function( elem ) {\n			return elem.disabled === true;\n		},\n\n		"checked": function( elem ) {\n			// In CSS3, :checked should return both checked and selected elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			var nodeName = elem.nodeName.toLowerCase();\n			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);\n		},\n\n		"selected": function( elem ) {\n			// Accessing this property makes selected-by-default\n			// options in Safari work properly\n			if ( elem.parentNode ) {\n				elem.parentNode.selectedIndex;\n			}\n\n			return elem.selected === true;\n		},\n\n		// Contents\n		"empty": function( elem ) {\n			// http://www.w3.org/TR/selectors/#empty-pseudo\n			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n			//   but not by others (comment: 8; processing instruction: 7; etc.)\n			// nodeType < 6 works because attributes (2) do not appear as children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				if ( elem.nodeType < 6 ) {\n					return false;\n				}\n			}\n			return true;\n		},\n\n		"parent": function( elem ) {\n			return !Expr.pseudos["empty"]( elem );\n		},\n\n		// Element/input types\n		"header": function( elem ) {\n			return rheader.test( elem.nodeName );\n		},\n\n		"input": function( elem ) {\n			return rinputs.test( elem.nodeName );\n		},\n\n		"button": function( elem ) {\n			var name = elem.nodeName.toLowerCase();\n			return name === "input" && elem.type === "button" || name === "button";\n		},\n\n		"text": function( elem ) {\n			var attr;\n			return elem.nodeName.toLowerCase() === "input" &&\n				elem.type === "text" &&\n\n				// Support: IE<8\n				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );\n		},\n\n		// Position-in-collection\n		"first": createPositionalPseudo(function() {\n			return [ 0 ];\n		}),\n\n		"last": createPositionalPseudo(function( matchIndexes, length ) {\n			return [ length - 1 ];\n		}),\n\n		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			return [ argument < 0 ? argument + length : argument ];\n		}),\n\n		"even": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 0;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"odd": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 1;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; --i >= 0; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; ++i < length; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		})\n	}\n};\n\nExpr.pseudos["nth"] = Expr.pseudos["eq"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n	Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n	Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n	var matched, match, tokens, type,\n		soFar, groups, preFilters,\n		cached = tokenCache[ selector + " " ];\n\n	if ( cached ) {\n		return parseOnly ? 0 : cached.slice( 0 );\n	}\n\n	soFar = selector;\n	groups = [];\n	preFilters = Expr.preFilter;\n\n	while ( soFar ) {\n\n		// Comma and first run\n		if ( !matched || (match = rcomma.exec( soFar )) ) {\n			if ( match ) {\n				// Don\'t consume trailing commas as valid\n				soFar = soFar.slice( match[0].length ) || soFar;\n			}\n			groups.push( (tokens = []) );\n		}\n\n		matched = false;\n\n		// Combinators\n		if ( (match = rcombinators.exec( soFar )) ) {\n			matched = match.shift();\n			tokens.push({\n				value: matched,\n				// Cast descendant combinators to space\n				type: match[0].replace( rtrim, " " )\n			});\n			soFar = soFar.slice( matched.length );\n		}\n\n		// Filters\n		for ( type in Expr.filter ) {\n			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n				(match = preFilters[ type ]( match ))) ) {\n				matched = match.shift();\n				tokens.push({\n					value: matched,\n					type: type,\n					matches: match\n				});\n				soFar = soFar.slice( matched.length );\n			}\n		}\n\n		if ( !matched ) {\n			break;\n		}\n	}\n\n	// Return the length of the invalid excess\n	// if we\'re just parsing\n	// Otherwise, throw an error or return tokens\n	return parseOnly ?\n		soFar.length :\n		soFar ?\n			Sizzle.error( selector ) :\n			// Cache the tokens\n			tokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n	var i = 0,\n		len = tokens.length,\n		selector = "";\n	for ( ; i < len; i++ ) {\n		selector += tokens[i].value;\n	}\n	return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n	var dir = combinator.dir,\n		checkNonElements = base && dir === "parentNode",\n		doneName = done++;\n\n	return combinator.first ?\n		// Check against closest ancestor/preceding element\n		function( elem, context, xml ) {\n			while ( (elem = elem[ dir ]) ) {\n				if ( elem.nodeType === 1 || checkNonElements ) {\n					return matcher( elem, context, xml );\n				}\n			}\n		} :\n\n		// Check against all ancestor/preceding elements\n		function( elem, context, xml ) {\n			var oldCache, uniqueCache, outerCache,\n				newCache = [ dirruns, doneName ];\n\n			// We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n			if ( xml ) {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						if ( matcher( elem, context, xml ) ) {\n							return true;\n						}\n					}\n				}\n			} else {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						outerCache = elem[ expando ] || (elem[ expando ] = {});\n\n						// Support: IE <9 only\n						// Defend against cloned attroperties (jQuery gh-1709)\n						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n						if ( (oldCache = uniqueCache[ dir ]) &&\n							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n							// Assign to newCache so results back-propagate to previous elements\n							return (newCache[ 2 ] = oldCache[ 2 ]);\n						} else {\n							// Reuse newcache so results back-propagate to previous elements\n							uniqueCache[ dir ] = newCache;\n\n							// A match means we\'re done; a fail means we have to keep checking\n							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n								return true;\n							}\n						}\n					}\n				}\n			}\n		};\n}\n\nfunction elementMatcher( matchers ) {\n	return matchers.length > 1 ?\n		function( elem, context, xml ) {\n			var i = matchers.length;\n			while ( i-- ) {\n				if ( !matchers[i]( elem, context, xml ) ) {\n					return false;\n				}\n			}\n			return true;\n		} :\n		matchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n	var i = 0,\n		len = contexts.length;\n	for ( ; i < len; i++ ) {\n		Sizzle( selector, contexts[i], results );\n	}\n	return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n	var elem,\n		newUnmatched = [],\n		i = 0,\n		len = unmatched.length,\n		mapped = map != null;\n\n	for ( ; i < len; i++ ) {\n		if ( (elem = unmatched[i]) ) {\n			if ( !filter || filter( elem, context, xml ) ) {\n				newUnmatched.push( elem );\n				if ( mapped ) {\n					map.push( i );\n				}\n			}\n		}\n	}\n\n	return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n	if ( postFilter && !postFilter[ expando ] ) {\n		postFilter = setMatcher( postFilter );\n	}\n	if ( postFinder && !postFinder[ expando ] ) {\n		postFinder = setMatcher( postFinder, postSelector );\n	}\n	return markFunction(function( seed, results, context, xml ) {\n		var temp, i, elem,\n			preMap = [],\n			postMap = [],\n			preexisting = results.length,\n\n			// Get initial elements from seed or context\n			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),\n\n			// Prefilter to get matcher input, preserving a map for seed-results synchronization\n			matcherIn = preFilter && ( seed || !selector ) ?\n				condense( elems, preMap, preFilter, context, xml ) :\n				elems,\n\n			matcherOut = matcher ?\n				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n					// ...intermediate processing is necessary\n					[] :\n\n					// ...otherwise use results directly\n					results :\n				matcherIn;\n\n		// Find primary matches\n		if ( matcher ) {\n			matcher( matcherIn, matcherOut, context, xml );\n		}\n\n		// Apply postFilter\n		if ( postFilter ) {\n			temp = condense( matcherOut, postMap );\n			postFilter( temp, [], context, xml );\n\n			// Un-match failing elements by moving them back to matcherIn\n			i = temp.length;\n			while ( i-- ) {\n				if ( (elem = temp[i]) ) {\n					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n				}\n			}\n		}\n\n		if ( seed ) {\n			if ( postFinder || preFilter ) {\n				if ( postFinder ) {\n					// Get the final matcherOut by condensing this intermediate into postFinder contexts\n					temp = [];\n					i = matcherOut.length;\n					while ( i-- ) {\n						if ( (elem = matcherOut[i]) ) {\n							// Restore matcherIn since elem is not yet a final match\n							temp.push( (matcherIn[i] = elem) );\n						}\n					}\n					postFinder( null, (matcherOut = []), temp, xml );\n				}\n\n				// Move matched elements from seed to results to keep them synchronized\n				i = matcherOut.length;\n				while ( i-- ) {\n					if ( (elem = matcherOut[i]) &&\n						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n						seed[temp] = !(results[temp] = elem);\n					}\n				}\n			}\n\n		// Add elements to results, through postFinder if defined\n		} else {\n			matcherOut = condense(\n				matcherOut === results ?\n					matcherOut.splice( preexisting, matcherOut.length ) :\n					matcherOut\n			);\n			if ( postFinder ) {\n				postFinder( null, results, matcherOut, xml );\n			} else {\n				push.apply( results, matcherOut );\n			}\n		}\n	});\n}\n\nfunction matcherFromTokens( tokens ) {\n	var checkContext, matcher, j,\n		len = tokens.length,\n		leadingRelative = Expr.relative[ tokens[0].type ],\n		implicitRelative = leadingRelative || Expr.relative[" "],\n		i = leadingRelative ? 1 : 0,\n\n		// The foundational matcher ensures that elements are reachable from top-level context(s)\n		matchContext = addCombinator( function( elem ) {\n			return elem === checkContext;\n		}, implicitRelative, true ),\n		matchAnyContext = addCombinator( function( elem ) {\n			return indexOf( checkContext, elem ) > -1;\n		}, implicitRelative, true ),\n		matchers = [ function( elem, context, xml ) {\n			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n				(checkContext = context).nodeType ?\n					matchContext( elem, context, xml ) :\n					matchAnyContext( elem, context, xml ) );\n			// Avoid hanging onto element (issue #299)\n			checkContext = null;\n			return ret;\n		} ];\n\n	for ( ; i < len; i++ ) {\n		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n		} else {\n			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n			// Return special upon seeing a positional matcher\n			if ( matcher[ expando ] ) {\n				// Find the next relative operator (if any) for proper handling\n				j = ++i;\n				for ( ; j < len; j++ ) {\n					if ( Expr.relative[ tokens[j].type ] ) {\n						break;\n					}\n				}\n				return setMatcher(\n					i > 1 && elementMatcher( matchers ),\n					i > 1 && toSelector(\n						// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })\n					).replace( rtrim, "$1" ),\n					matcher,\n					i < j && matcherFromTokens( tokens.slice( i, j ) ),\n					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n					j < len && toSelector( tokens )\n				);\n			}\n			matchers.push( matcher );\n		}\n	}\n\n	return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n	var bySet = setMatchers.length > 0,\n		byElement = elementMatchers.length > 0,\n		superMatcher = function( seed, context, xml, results, outermost ) {\n			var elem, j, matcher,\n				matchedCount = 0,\n				i = "0",\n				unmatched = seed && [],\n				setMatched = [],\n				contextBackup = outermostContext,\n				// We must always have either seed elements or outermost context\n				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),\n				// Use integer dirruns iff this is the outermost matcher\n				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n				len = elems.length;\n\n			if ( outermost ) {\n				outermostContext = context === document || context || outermost;\n			}\n\n			// Add elements passing elementMatchers directly to results\n			// Support: IE<9, Safari\n			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n				if ( byElement && elem ) {\n					j = 0;\n					if ( !context && elem.ownerDocument !== document ) {\n						setDocument( elem );\n						xml = !documentIsHTML;\n					}\n					while ( (matcher = elementMatchers[j++]) ) {\n						if ( matcher( elem, context || document, xml) ) {\n							results.push( elem );\n							break;\n						}\n					}\n					if ( outermost ) {\n						dirruns = dirrunsUnique;\n					}\n				}\n\n				// Track unmatched elements for set filters\n				if ( bySet ) {\n					// They will have gone through all possible matchers\n					if ( (elem = !matcher && elem) ) {\n						matchedCount--;\n					}\n\n					// Lengthen the array for every element, matched or not\n					if ( seed ) {\n						unmatched.push( elem );\n					}\n				}\n			}\n\n			// `i` is now the count of elements visited above, and adding it to `matchedCount`\n			// makes the latter nonnegative.\n			matchedCount += i;\n\n			// Apply set filters to unmatched elements\n			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n			// equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n			// no element matchers and no seed.\n			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n			// case, which will result in a "00" `matchedCount` that differs from `i` but is also\n			// numerically zero.\n			if ( bySet && i !== matchedCount ) {\n				j = 0;\n				while ( (matcher = setMatchers[j++]) ) {\n					matcher( unmatched, setMatched, context, xml );\n				}\n\n				if ( seed ) {\n					// Reintegrate element matches to eliminate the need for sorting\n					if ( matchedCount > 0 ) {\n						while ( i-- ) {\n							if ( !(unmatched[i] || setMatched[i]) ) {\n								setMatched[i] = pop.call( results );\n							}\n						}\n					}\n\n					// Discard index placeholder values to get only actual matches\n					setMatched = condense( setMatched );\n				}\n\n				// Add matches to results\n				push.apply( results, setMatched );\n\n				// Seedless set matches succeeding multiple successful matchers stipulate sorting\n				if ( outermost && !seed && setMatched.length > 0 &&\n					( matchedCount + setMatchers.length ) > 1 ) {\n\n					Sizzle.uniqueSort( results );\n				}\n			}\n\n			// Override manipulation of globals by nested matchers\n			if ( outermost ) {\n				dirruns = dirrunsUnique;\n				outermostContext = contextBackup;\n			}\n\n			return unmatched;\n		};\n\n	return bySet ?\n		markFunction( superMatcher ) :\n		superMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n	var i,\n		setMatchers = [],\n		elementMatchers = [],\n		cached = compilerCache[ selector + " " ];\n\n	if ( !cached ) {\n		// Generate a function of recursive functions that can be used to check each element\n		if ( !match ) {\n			match = tokenize( selector );\n		}\n		i = match.length;\n		while ( i-- ) {\n			cached = matcherFromTokens( match[i] );\n			if ( cached[ expando ] ) {\n				setMatchers.push( cached );\n			} else {\n				elementMatchers.push( cached );\n			}\n		}\n\n		// Cache the compiled function\n		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n		// Save selector and tokenization\n		cached.selector = selector;\n	}\n	return cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle\'s compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n	var i, tokens, token, type, find,\n		compiled = typeof selector === "function" && selector,\n		match = !seed && tokenize( (selector = compiled.selector || selector) );\n\n	results = results || [];\n\n	// Try to minimize operations if there is only one selector in the list and no seed\n	// (the latter of which guarantees us context)\n	if ( match.length === 1 ) {\n\n		// Reduce context if the leading compound selector is an ID\n		tokens = match[0] = match[0].slice( 0 );\n		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&\n				support.getById && context.nodeType === 9 && documentIsHTML &&\n				Expr.relative[ tokens[1].type ] ) {\n\n			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n			if ( !context ) {\n				return results;\n\n			// Precompiled matchers will still verify ancestry, so step up a level\n			} else if ( compiled ) {\n				context = context.parentNode;\n			}\n\n			selector = selector.slice( tokens.shift().value.length );\n		}\n\n		// Fetch a seed set for right-to-left matching\n		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;\n		while ( i-- ) {\n			token = tokens[i];\n\n			// Abort if we hit a combinator\n			if ( Expr.relative[ (type = token.type) ] ) {\n				break;\n			}\n			if ( (find = Expr.find[ type ]) ) {\n				// Search, expanding context for leading sibling combinators\n				if ( (seed = find(\n					token.matches[0].replace( runescape, funescape ),\n					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n				)) ) {\n\n					// If seed is empty or no tokens remain, we can return early\n					tokens.splice( i, 1 );\n					selector = seed.length && toSelector( tokens );\n					if ( !selector ) {\n						push.apply( results, seed );\n						return results;\n					}\n\n					break;\n				}\n			}\n		}\n	}\n\n	// Compile and execute a filtering function if one is not provided\n	// Provide `match` to avoid retokenization if we modified the selector above\n	( compiled || compile( selector, match ) )(\n		seed,\n		context,\n		!documentIsHTML,\n		results,\n		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n	);\n	return results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split("").sort( sortOrder ).join("") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren\'t passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n	// Should return 1, but returns 4 (following)\n	return div1.compareDocumentPosition( document.createElement("div") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property "interpolation"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n	div.innerHTML = "<a href=\'#\'></a>";\n	return div.firstChild.getAttribute("href") === "#" ;\n}) ) {\n	addHandle( "type|href|height|width", function( elem, name, isXML ) {\n		if ( !isXML ) {\n			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );\n		}\n	});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute("value")\nif ( !support.attributes || !assert(function( div ) {\n	div.innerHTML = "<input/>";\n	div.firstChild.setAttribute( "value", "" );\n	return div.firstChild.getAttribute( "value" ) === "";\n}) ) {\n	addHandle( "value", function( elem, name, isXML ) {\n		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {\n			return elem.defaultValue;\n		}\n	});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n	return div.getAttribute("disabled") == null;\n}) ) {\n	addHandle( booleans, function( elem, name, isXML ) {\n		var val;\n		if ( !isXML ) {\n			return elem[ name ] === true ? name.toLowerCase() :\n					(val = elem.getAttributeNode( name )) && val.specified ?\n					val.value :\n				null;\n		}\n	});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ ":" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n	var matched = [],\n		truncate = until !== undefined;\n\n	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n		if ( elem.nodeType === 1 ) {\n			if ( truncate && jQuery( elem ).is( until ) ) {\n				break;\n			}\n			matched.push( elem );\n		}\n	}\n	return matched;\n};\n\n\nvar siblings = function( n, elem ) {\n	var matched = [];\n\n	for ( ; n; n = n.nextSibling ) {\n		if ( n.nodeType === 1 && n !== elem ) {\n			matched.push( n );\n		}\n	}\n\n	return matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n	if ( jQuery.isFunction( qualifier ) ) {\n		return jQuery.grep( elements, function( elem, i ) {\n			/* jshint -W018 */\n			return !!qualifier.call( elem, i, elem ) !== not;\n		} );\n\n	}\n\n	if ( qualifier.nodeType ) {\n		return jQuery.grep( elements, function( elem ) {\n			return ( elem === qualifier ) !== not;\n		} );\n\n	}\n\n	if ( typeof qualifier === "string" ) {\n		if ( risSimple.test( qualifier ) ) {\n			return jQuery.filter( qualifier, elements, not );\n		}\n\n		qualifier = jQuery.filter( qualifier, elements );\n	}\n\n	return jQuery.grep( elements, function( elem ) {\n		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n	} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n	var elem = elems[ 0 ];\n\n	if ( not ) {\n		expr = ":not(" + expr + ")";\n	}\n\n	return elems.length === 1 && elem.nodeType === 1 ?\n		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n			return elem.nodeType === 1;\n		} ) );\n};\n\njQuery.fn.extend( {\n	find: function( selector ) {\n		var i,\n			len = this.length,\n			ret = [],\n			self = this;\n\n		if ( typeof selector !== "string" ) {\n			return this.pushStack( jQuery( selector ).filter( function() {\n				for ( i = 0; i < len; i++ ) {\n					if ( jQuery.contains( self[ i ], this ) ) {\n						return true;\n					}\n				}\n			} ) );\n		}\n\n		for ( i = 0; i < len; i++ ) {\n			jQuery.find( selector, self[ i ], ret );\n		}\n\n		// Needed because $( selector, context ) becomes $( context ).find( selector )\n		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n		ret.selector = this.selector ? this.selector + " " + selector : selector;\n		return ret;\n	},\n	filter: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], false ) );\n	},\n	not: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], true ) );\n	},\n	is: function( selector ) {\n		return !!winnow(\n			this,\n\n			// If this is a positional/relative selector, check membership in the returned set\n			// so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n			typeof selector === "string" && rneedsContext.test( selector ) ?\n				jQuery( selector ) :\n				selector || [],\n			false\n		).length;\n	}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n	// A simple way to check for HTML strings\n	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n	// Strict HTML recognition (#11290: must start with <)\n	rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n	init = jQuery.fn.init = function( selector, context, root ) {\n		var match, elem;\n\n		// HANDLE: $(""), $(null), $(undefined), $(false)\n		if ( !selector ) {\n			return this;\n		}\n\n		// Method init() accepts an alternate rootjQuery\n		// so migrate can support jQuery.sub (gh-2101)\n		root = root || rootjQuery;\n\n		// Handle HTML strings\n		if ( typeof selector === "string" ) {\n			if ( selector[ 0 ] === "<" &&\n				selector[ selector.length - 1 ] === ">" &&\n				selector.length >= 3 ) {\n\n				// Assume that strings that start and end with <> are HTML and skip the regex check\n				match = [ null, selector, null ];\n\n			} else {\n				match = rquickExpr.exec( selector );\n			}\n\n			// Match html or make sure no context is specified for #id\n			if ( match && ( match[ 1 ] || !context ) ) {\n\n				// HANDLE: $(html) -> $(array)\n				if ( match[ 1 ] ) {\n					context = context instanceof jQuery ? context[ 0 ] : context;\n\n					// Option to run scripts is true for back-compat\n					// Intentionally let the error be thrown if parseHTML is not present\n					jQuery.merge( this, jQuery.parseHTML(\n						match[ 1 ],\n						context && context.nodeType ? context.ownerDocument || context : document,\n						true\n					) );\n\n					// HANDLE: $(html, props)\n					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n						for ( match in context ) {\n\n							// Properties of context are called as methods if possible\n							if ( jQuery.isFunction( this[ match ] ) ) {\n								this[ match ]( context[ match ] );\n\n							// ...and otherwise set as attributes\n							} else {\n								this.attr( match, context[ match ] );\n							}\n						}\n					}\n\n					return this;\n\n				// HANDLE: $(#id)\n				} else {\n					elem = document.getElementById( match[ 2 ] );\n\n					// Support: Blackberry 4.6\n					// gEBID returns nodes no longer in the document (#6963)\n					if ( elem && elem.parentNode ) {\n\n						// Inject the element directly into the jQuery object\n						this.length = 1;\n						this[ 0 ] = elem;\n					}\n\n					this.context = document;\n					this.selector = selector;\n					return this;\n				}\n\n			// HANDLE: $(expr, $(...))\n			} else if ( !context || context.jquery ) {\n				return ( context || root ).find( selector );\n\n			// HANDLE: $(expr, context)\n			// (which is just equivalent to: $(context).find(expr)\n			} else {\n				return this.constructor( context ).find( selector );\n			}\n\n		// HANDLE: $(DOMElement)\n		} else if ( selector.nodeType ) {\n			this.context = this[ 0 ] = selector;\n			this.length = 1;\n			return this;\n\n		// HANDLE: $(function)\n		// Shortcut for document ready\n		} else if ( jQuery.isFunction( selector ) ) {\n			return root.ready !== undefined ?\n				root.ready( selector ) :\n\n				// Execute immediately if ready is not present\n				selector( jQuery );\n		}\n\n		if ( selector.selector !== undefined ) {\n			this.selector = selector.selector;\n			this.context = selector.context;\n		}\n\n		return jQuery.makeArray( selector, this );\n	};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n	// Methods guaranteed to produce a unique set when starting from a unique set\n	guaranteedUnique = {\n		children: true,\n		contents: true,\n		next: true,\n		prev: true\n	};\n\njQuery.fn.extend( {\n	has: function( target ) {\n		var targets = jQuery( target, this ),\n			l = targets.length;\n\n		return this.filter( function() {\n			var i = 0;\n			for ( ; i < l; i++ ) {\n				if ( jQuery.contains( this, targets[ i ] ) ) {\n					return true;\n				}\n			}\n		} );\n	},\n\n	closest: function( selectors, context ) {\n		var cur,\n			i = 0,\n			l = this.length,\n			matched = [],\n			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?\n				jQuery( selectors, context || this.context ) :\n				0;\n\n		for ( ; i < l; i++ ) {\n			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n				// Always skip document fragments\n				if ( cur.nodeType < 11 && ( pos ?\n					pos.index( cur ) > -1 :\n\n					// Don\'t pass non-elements to Sizzle\n					cur.nodeType === 1 &&\n						jQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n					matched.push( cur );\n					break;\n				}\n			}\n		}\n\n		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n	},\n\n	// Determine the position of an element within the set\n	index: function( elem ) {\n\n		// No argument, return index in parent\n		if ( !elem ) {\n			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n		}\n\n		// Index in selector\n		if ( typeof elem === "string" ) {\n			return indexOf.call( jQuery( elem ), this[ 0 ] );\n		}\n\n		// Locate the position of the desired element\n		return indexOf.call( this,\n\n			// If it receives a jQuery object, the first element is used\n			elem.jquery ? elem[ 0 ] : elem\n		);\n	},\n\n	add: function( selector, context ) {\n		return this.pushStack(\n			jQuery.uniqueSort(\n				jQuery.merge( this.get(), jQuery( selector, context ) )\n			)\n		);\n	},\n\n	addBack: function( selector ) {\n		return this.add( selector == null ?\n			this.prevObject : this.prevObject.filter( selector )\n		);\n	}\n} );\n\nfunction sibling( cur, dir ) {\n	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n	return cur;\n}\n\njQuery.each( {\n	parent: function( elem ) {\n		var parent = elem.parentNode;\n		return parent && parent.nodeType !== 11 ? parent : null;\n	},\n	parents: function( elem ) {\n		return dir( elem, "parentNode" );\n	},\n	parentsUntil: function( elem, i, until ) {\n		return dir( elem, "parentNode", until );\n	},\n	next: function( elem ) {\n		return sibling( elem, "nextSibling" );\n	},\n	prev: function( elem ) {\n		return sibling( elem, "previousSibling" );\n	},\n	nextAll: function( elem ) {\n		return dir( elem, "nextSibling" );\n	},\n	prevAll: function( elem ) {\n		return dir( elem, "previousSibling" );\n	},\n	nextUntil: function( elem, i, until ) {\n		return dir( elem, "nextSibling", until );\n	},\n	prevUntil: function( elem, i, until ) {\n		return dir( elem, "previousSibling", until );\n	},\n	siblings: function( elem ) {\n		return siblings( ( elem.parentNode || {} ).firstChild, elem );\n	},\n	children: function( elem ) {\n		return siblings( elem.firstChild );\n	},\n	contents: function( elem ) {\n		return elem.contentDocument || jQuery.merge( [], elem.childNodes );\n	}\n}, function( name, fn ) {\n	jQuery.fn[ name ] = function( until, selector ) {\n		var matched = jQuery.map( this, fn, until );\n\n		if ( name.slice( -5 ) !== "Until" ) {\n			selector = until;\n		}\n\n		if ( selector && typeof selector === "string" ) {\n			matched = jQuery.filter( selector, matched );\n		}\n\n		if ( this.length > 1 ) {\n\n			// Remove duplicates\n			if ( !guaranteedUnique[ name ] ) {\n				jQuery.uniqueSort( matched );\n			}\n\n			// Reverse order for parents* and prev-derivatives\n			if ( rparentsprev.test( name ) ) {\n				matched.reverse();\n			}\n		}\n\n		return this.pushStack( matched );\n	};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n	var object = {};\n	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n		object[ flag ] = true;\n	} );\n	return object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *	options: an optional list of space-separated options that will change how\n *			the callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * "fired" multiple times.\n *\n * Possible options:\n *\n *	once:			will ensure the callback list can only be fired once (like a Deferred)\n *\n *	memory:			will keep track of previous values and will call any callback added\n *					after the list has been fired right away with the latest "memorized"\n *					values (like a Deferred)\n *\n *	unique:			will ensure a callback can only be added once (no duplicate in the list)\n *\n *	stopOnFalse:	interrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n	// Convert options from String-formatted to Object-formatted if needed\n	// (we check in cache first)\n	options = typeof options === "string" ?\n		createOptions( options ) :\n		jQuery.extend( {}, options );\n\n	var // Flag to know if list is currently firing\n		firing,\n\n		// Last fire value for non-forgettable lists\n		memory,\n\n		// Flag to know if list was already fired\n		fired,\n\n		// Flag to prevent firing\n		locked,\n\n		// Actual callback list\n		list = [],\n\n		// Queue of execution data for repeatable lists\n		queue = [],\n\n		// Index of currently firing callback (modified by add/remove as needed)\n		firingIndex = -1,\n\n		// Fire callbacks\n		fire = function() {\n\n			// Enforce single-firing\n			locked = options.once;\n\n			// Execute callbacks for all pending executions,\n			// respecting firingIndex overrides and runtime changes\n			fired = firing = true;\n			for ( ; queue.length; firingIndex = -1 ) {\n				memory = queue.shift();\n				while ( ++firingIndex < list.length ) {\n\n					// Run callback and check for early termination\n					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n						options.stopOnFalse ) {\n\n						// Jump to end and forget the data so .add doesn\'t re-fire\n						firingIndex = list.length;\n						memory = false;\n					}\n				}\n			}\n\n			// Forget the data if we\'re done with it\n			if ( !options.memory ) {\n				memory = false;\n			}\n\n			firing = false;\n\n			// Clean up if we\'re done firing for good\n			if ( locked ) {\n\n				// Keep an empty list if we have data for future add calls\n				if ( memory ) {\n					list = [];\n\n				// Otherwise, this object is spent\n				} else {\n					list = "";\n				}\n			}\n		},\n\n		// Actual Callbacks object\n		self = {\n\n			// Add a callback or a collection of callbacks to the list\n			add: function() {\n				if ( list ) {\n\n					// If we have memory from a past run, we should fire after adding\n					if ( memory && !firing ) {\n						firingIndex = list.length - 1;\n						queue.push( memory );\n					}\n\n					( function add( args ) {\n						jQuery.each( args, function( _, arg ) {\n							if ( jQuery.isFunction( arg ) ) {\n								if ( !options.unique || !self.has( arg ) ) {\n									list.push( arg );\n								}\n							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {\n\n								// Inspect recursively\n								add( arg );\n							}\n						} );\n					} )( arguments );\n\n					if ( memory && !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Remove a callback from the list\n			remove: function() {\n				jQuery.each( arguments, function( _, arg ) {\n					var index;\n					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n						list.splice( index, 1 );\n\n						// Handle firing indexes\n						if ( index <= firingIndex ) {\n							firingIndex--;\n						}\n					}\n				} );\n				return this;\n			},\n\n			// Check if a given callback is in the list.\n			// If no argument is given, return whether or not list has callbacks attached.\n			has: function( fn ) {\n				return fn ?\n					jQuery.inArray( fn, list ) > -1 :\n					list.length > 0;\n			},\n\n			// Remove all callbacks from the list\n			empty: function() {\n				if ( list ) {\n					list = [];\n				}\n				return this;\n			},\n\n			// Disable .fire and .add\n			// Abort any current/pending executions\n			// Clear all callbacks and values\n			disable: function() {\n				locked = queue = [];\n				list = memory = "";\n				return this;\n			},\n			disabled: function() {\n				return !list;\n			},\n\n			// Disable .fire\n			// Also disable .add unless we have memory (since it would have no effect)\n			// Abort any pending executions\n			lock: function() {\n				locked = queue = [];\n				if ( !memory ) {\n					list = memory = "";\n				}\n				return this;\n			},\n			locked: function() {\n				return !!locked;\n			},\n\n			// Call all callbacks with the given context and arguments\n			fireWith: function( context, args ) {\n				if ( !locked ) {\n					args = args || [];\n					args = [ context, args.slice ? args.slice() : args ];\n					queue.push( args );\n					if ( !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Call all the callbacks with the given arguments\n			fire: function() {\n				self.fireWith( this, arguments );\n				return this;\n			},\n\n			// To know if the callbacks have already been called at least once\n			fired: function() {\n				return !!fired;\n			}\n		};\n\n	return self;\n};\n\n\njQuery.extend( {\n\n	Deferred: function( func ) {\n		var tuples = [\n\n				// action, add listener, listener list, final state\n				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],\n				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],\n				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]\n			],\n			state = "pending",\n			promise = {\n				state: function() {\n					return state;\n				},\n				always: function() {\n					deferred.done( arguments ).fail( arguments );\n					return this;\n				},\n				then: function( /* fnDone, fnFail, fnProgress */ ) {\n					var fns = arguments;\n					return jQuery.Deferred( function( newDefer ) {\n						jQuery.each( tuples, function( i, tuple ) {\n							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n							// deferred[ done | fail | progress ] for forwarding actions to newDefer\n							deferred[ tuple[ 1 ] ]( function() {\n								var returned = fn && fn.apply( this, arguments );\n								if ( returned && jQuery.isFunction( returned.promise ) ) {\n									returned.promise()\n										.progress( newDefer.notify )\n										.done( newDefer.resolve )\n										.fail( newDefer.reject );\n								} else {\n									newDefer[ tuple[ 0 ] + "With" ](\n										this === promise ? newDefer.promise() : this,\n										fn ? [ returned ] : arguments\n									);\n								}\n							} );\n						} );\n						fns = null;\n					} ).promise();\n				},\n\n				// Get a promise for this deferred\n				// If obj is provided, the promise aspect is added to the object\n				promise: function( obj ) {\n					return obj != null ? jQuery.extend( obj, promise ) : promise;\n				}\n			},\n			deferred = {};\n\n		// Keep pipe for back-compat\n		promise.pipe = promise.then;\n\n		// Add list-specific methods\n		jQuery.each( tuples, function( i, tuple ) {\n			var list = tuple[ 2 ],\n				stateString = tuple[ 3 ];\n\n			// promise[ done | fail | progress ] = list.add\n			promise[ tuple[ 1 ] ] = list.add;\n\n			// Handle state\n			if ( stateString ) {\n				list.add( function() {\n\n					// state = [ resolved | rejected ]\n					state = stateString;\n\n				// [ reject_list | resolve_list ].disable; progress_list.lock\n				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n			}\n\n			// deferred[ resolve | reject | notify ]\n			deferred[ tuple[ 0 ] ] = function() {\n				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );\n				return this;\n			};\n			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;\n		} );\n\n		// Make the deferred a promise\n		promise.promise( deferred );\n\n		// Call given func if any\n		if ( func ) {\n			func.call( deferred, deferred );\n		}\n\n		// All done!\n		return deferred;\n	},\n\n	// Deferred helper\n	when: function( subordinate /* , ..., subordinateN */ ) {\n		var i = 0,\n			resolveValues = slice.call( arguments ),\n			length = resolveValues.length,\n\n			// the count of uncompleted subordinates\n			remaining = length !== 1 ||\n				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n			// the master Deferred.\n			// If resolveValues consist of only a single Deferred, just use that.\n			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n			// Update function for both resolve and progress values\n			updateFunc = function( i, contexts, values ) {\n				return function( value ) {\n					contexts[ i ] = this;\n					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n					if ( values === progressValues ) {\n						deferred.notifyWith( contexts, values );\n					} else if ( !( --remaining ) ) {\n						deferred.resolveWith( contexts, values );\n					}\n				};\n			},\n\n			progressValues, progressContexts, resolveContexts;\n\n		// Add listeners to Deferred subordinates; treat others as resolved\n		if ( length > 1 ) {\n			progressValues = new Array( length );\n			progressContexts = new Array( length );\n			resolveContexts = new Array( length );\n			for ( ; i < length; i++ ) {\n				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n					resolveValues[ i ].promise()\n						.progress( updateFunc( i, progressContexts, progressValues ) )\n						.done( updateFunc( i, resolveContexts, resolveValues ) )\n						.fail( deferred.reject );\n				} else {\n					--remaining;\n				}\n			}\n		}\n\n		// If we\'re not waiting on anything, resolve the master\n		if ( !remaining ) {\n			deferred.resolveWith( resolveContexts, resolveValues );\n		}\n\n		return deferred.promise();\n	}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n	// Add the callback\n	jQuery.ready.promise().done( fn );\n\n	return this;\n};\n\njQuery.extend( {\n\n	// Is the DOM ready to be used? Set to true once it occurs.\n	isReady: false,\n\n	// A counter to track how many items to wait for before\n	// the ready event fires. See #6781\n	readyWait: 1,\n\n	// Hold (or release) the ready event\n	holdReady: function( hold ) {\n		if ( hold ) {\n			jQuery.readyWait++;\n		} else {\n			jQuery.ready( true );\n		}\n	},\n\n	// Handle when the DOM is ready\n	ready: function( wait ) {\n\n		// Abort if there are pending holds or we\'re already ready\n		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n			return;\n		}\n\n		// Remember that the DOM is ready\n		jQuery.isReady = true;\n\n		// If a normal DOM Ready event fired, decrement, and wait if need be\n		if ( wait !== true && --jQuery.readyWait > 0 ) {\n			return;\n		}\n\n		// If there are functions bound, to execute\n		readyList.resolveWith( document, [ jQuery ] );\n\n		// Trigger any bound ready events\n		if ( jQuery.fn.triggerHandler ) {\n			jQuery( document ).triggerHandler( "ready" );\n			jQuery( document ).off( "ready" );\n		}\n	}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n	document.removeEventListener( "DOMContentLoaded", completed );\n	window.removeEventListener( "load", completed );\n	jQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n	if ( !readyList ) {\n\n		readyList = jQuery.Deferred();\n\n		// Catch cases where $(document).ready() is called\n		// after the browser event has already occurred.\n		// Support: IE9-10 only\n		// Older IE sometimes signals "interactive" too soon\n		if ( document.readyState === "complete" ||\n			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {\n\n			// Handle it asynchronously to allow scripts the opportunity to delay ready\n			window.setTimeout( jQuery.ready );\n\n		} else {\n\n			// Use the handy event callback\n			document.addEventListener( "DOMContentLoaded", completed );\n\n			// A fallback to window.onload, that will always work\n			window.addEventListener( "load", completed );\n		}\n	}\n	return readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it\'s a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n	var i = 0,\n		len = elems.length,\n		bulk = key == null;\n\n	// Sets many values\n	if ( jQuery.type( key ) === "object" ) {\n		chainable = true;\n		for ( i in key ) {\n			access( elems, fn, i, key[ i ], true, emptyGet, raw );\n		}\n\n	// Sets one value\n	} else if ( value !== undefined ) {\n		chainable = true;\n\n		if ( !jQuery.isFunction( value ) ) {\n			raw = true;\n		}\n\n		if ( bulk ) {\n\n			// Bulk operations run against the entire set\n			if ( raw ) {\n				fn.call( elems, value );\n				fn = null;\n\n			// ...except when executing function values\n			} else {\n				bulk = fn;\n				fn = function( elem, key, value ) {\n					return bulk.call( jQuery( elem ), value );\n				};\n			}\n		}\n\n		if ( fn ) {\n			for ( ; i < len; i++ ) {\n				fn(\n					elems[ i ], key, raw ?\n					value :\n					value.call( elems[ i ], i, fn( elems[ i ], key ) )\n				);\n			}\n		}\n	}\n\n	return chainable ?\n		elems :\n\n		// Gets\n		bulk ?\n			fn.call( elems ) :\n			len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n	// Accepts only:\n	//  - Node\n	//    - Node.ELEMENT_NODE\n	//    - Node.DOCUMENT_NODE\n	//  - Object\n	//    - Any\n	/* jshint -W018 */\n	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n	this.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n	register: function( owner, initial ) {\n		var value = initial || {};\n\n		// If it is a node unlikely to be stringify-ed or looped over\n		// use plain assignment\n		if ( owner.nodeType ) {\n			owner[ this.expando ] = value;\n\n		// Otherwise secure it in a non-enumerable, non-writable property\n		// configurability must be true to allow the property to be\n		// deleted with the delete operator\n		} else {\n			Object.defineProperty( owner, this.expando, {\n				value: value,\n				writable: true,\n				configurable: true\n			} );\n		}\n		return owner[ this.expando ];\n	},\n	cache: function( owner ) {\n\n		// We can accept data for non-element nodes in modern browsers,\n		// but we should not, see #8335.\n		// Always return an empty object.\n		if ( !acceptData( owner ) ) {\n			return {};\n		}\n\n		// Check if the owner object already has a cache\n		var value = owner[ this.expando ];\n\n		// If not, create one\n		if ( !value ) {\n			value = {};\n\n			// We can accept data for non-element nodes in modern browsers,\n			// but we should not, see #8335.\n			// Always return an empty object.\n			if ( acceptData( owner ) ) {\n\n				// If it is a node unlikely to be stringify-ed or looped over\n				// use plain assignment\n				if ( owner.nodeType ) {\n					owner[ this.expando ] = value;\n\n				// Otherwise secure it in a non-enumerable property\n				// configurable must be true to allow the property to be\n				// deleted when data is removed\n				} else {\n					Object.defineProperty( owner, this.expando, {\n						value: value,\n						configurable: true\n					} );\n				}\n			}\n		}\n\n		return value;\n	},\n	set: function( owner, data, value ) {\n		var prop,\n			cache = this.cache( owner );\n\n		// Handle: [ owner, key, value ] args\n		if ( typeof data === "string" ) {\n			cache[ data ] = value;\n\n		// Handle: [ owner, { properties } ] args\n		} else {\n\n			// Copy the properties one-by-one to the cache object\n			for ( prop in data ) {\n				cache[ prop ] = data[ prop ];\n			}\n		}\n		return cache;\n	},\n	get: function( owner, key ) {\n		return key === undefined ?\n			this.cache( owner ) :\n			owner[ this.expando ] && owner[ this.expando ][ key ];\n	},\n	access: function( owner, key, value ) {\n		var stored;\n\n		// In cases where either:\n		//\n		//   1. No key was specified\n		//   2. A string key was specified, but no value provided\n		//\n		// Take the "read" path and allow the get method to determine\n		// which value to return, respectively either:\n		//\n		//   1. The entire cache object\n		//   2. The data stored at the key\n		//\n		if ( key === undefined ||\n				( ( key && typeof key === "string" ) && value === undefined ) ) {\n\n			stored = this.get( owner, key );\n\n			return stored !== undefined ?\n				stored : this.get( owner, jQuery.camelCase( key ) );\n		}\n\n		// When the key is not a string, or both a key and value\n		// are specified, set or extend (existing objects) with either:\n		//\n		//   1. An object of properties\n		//   2. A key and value\n		//\n		this.set( owner, key, value );\n\n		// Since the "set" path can have two possible entry points\n		// return the expected data based on which path was taken[*]\n		return value !== undefined ? value : key;\n	},\n	remove: function( owner, key ) {\n		var i, name, camel,\n			cache = owner[ this.expando ];\n\n		if ( cache === undefined ) {\n			return;\n		}\n\n		if ( key === undefined ) {\n			this.register( owner );\n\n		} else {\n\n			// Support array or space separated string of keys\n			if ( jQuery.isArray( key ) ) {\n\n				// If "name" is an array of keys...\n				// When data is initially created, via ("key", "val") signature,\n				// keys will be converted to camelCase.\n				// Since there is no way to tell _how_ a key was added, remove\n				// both plain key and camelCase key. #12786\n				// This will only penalize the array argument path.\n				name = key.concat( key.map( jQuery.camelCase ) );\n			} else {\n				camel = jQuery.camelCase( key );\n\n				// Try the string as a key before any manipulation\n				if ( key in cache ) {\n					name = [ key, camel ];\n				} else {\n\n					// If a key with the spaces exists, use it.\n					// Otherwise, create an array by matching non-whitespace\n					name = camel;\n					name = name in cache ?\n						[ name ] : ( name.match( rnotwhite ) || [] );\n				}\n			}\n\n			i = name.length;\n\n			while ( i-- ) {\n				delete cache[ name[ i ] ];\n			}\n		}\n\n		// Remove the expando if there\'s no more data\n		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n			// Support: Chrome <= 35-45+\n			// Webkit & Blink performance suffers when deleting properties\n			// from DOM nodes, so set to undefined instead\n			// https://code.google.com/p/chromium/issues/detail?id=378607\n			if ( owner.nodeType ) {\n				owner[ this.expando ] = undefined;\n			} else {\n				delete owner[ this.expando ];\n			}\n		}\n	},\n	hasData: function( owner ) {\n		var cache = owner[ this.expando ];\n		return cache !== undefined && !jQuery.isEmptyObject( cache );\n	}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//	Implementation Summary\n//\n//	1. Enforce API surface and semantic compatibility with 1.9.x branch\n//	2. Improve the module\'s maintainability by reducing the storage\n//		paths to a single mechanism.\n//	3. Use the same single mechanism to support "private" and "user" data.\n//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n//	5. Avoid exposing implementation details on user objects (eg. expando properties)\n//	6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n	rmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n	var name;\n\n	// If nothing was found internally, try to fetch any\n	// data from the HTML5 data-* attribute\n	if ( data === undefined && elem.nodeType === 1 ) {\n		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();\n		data = elem.getAttribute( name );\n\n		if ( typeof data === "string" ) {\n			try {\n				data = data === "true" ? true :\n					data === "false" ? false :\n					data === "null" ? null :\n\n					// Only convert to a number if it doesn\'t change the string\n					+data + "" === data ? +data :\n					rbrace.test( data ) ? jQuery.parseJSON( data ) :\n					data;\n			} catch ( e ) {}\n\n			// Make sure we set the data so it isn\'t changed later\n			dataUser.set( elem, key, data );\n		} else {\n			data = undefined;\n		}\n	}\n	return data;\n}\n\njQuery.extend( {\n	hasData: function( elem ) {\n		return dataUser.hasData( elem ) || dataPriv.hasData( elem );\n	},\n\n	data: function( elem, name, data ) {\n		return dataUser.access( elem, name, data );\n	},\n\n	removeData: function( elem, name ) {\n		dataUser.remove( elem, name );\n	},\n\n	// TODO: Now that all calls to _data and _removeData have been replaced\n	// with direct calls to dataPriv methods, these can be deprecated.\n	_data: function( elem, name, data ) {\n		return dataPriv.access( elem, name, data );\n	},\n\n	_removeData: function( elem, name ) {\n		dataPriv.remove( elem, name );\n	}\n} );\n\njQuery.fn.extend( {\n	data: function( key, value ) {\n		var i, name, data,\n			elem = this[ 0 ],\n			attrs = elem && elem.attributes;\n\n		// Gets all values\n		if ( key === undefined ) {\n			if ( this.length ) {\n				data = dataUser.get( elem );\n\n				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {\n					i = attrs.length;\n					while ( i-- ) {\n\n						// Support: IE11+\n						// The attrs elements can be null (#14894)\n						if ( attrs[ i ] ) {\n							name = attrs[ i ].name;\n							if ( name.indexOf( "data-" ) === 0 ) {\n								name = jQuery.camelCase( name.slice( 5 ) );\n								dataAttr( elem, name, data[ name ] );\n							}\n						}\n					}\n					dataPriv.set( elem, "hasDataAttrs", true );\n				}\n			}\n\n			return data;\n		}\n\n		// Sets multiple values\n		if ( typeof key === "object" ) {\n			return this.each( function() {\n				dataUser.set( this, key );\n			} );\n		}\n\n		return access( this, function( value ) {\n			var data, camelKey;\n\n			// The calling jQuery object (element matches) is not empty\n			// (and therefore has an element appears at this[ 0 ]) and the\n			// `value` parameter was not undefined. An empty jQuery object\n			// will result in `undefined` for elem = this[ 0 ] which will\n			// throw an exception if an attempt to read a data cache is made.\n			if ( elem && value === undefined ) {\n\n				// Attempt to get data from the cache\n				// with the key as-is\n				data = dataUser.get( elem, key ) ||\n\n					// Try to find dashed key if it exists (gh-2779)\n					// This is for 2.2.x only\n					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );\n\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				camelKey = jQuery.camelCase( key );\n\n				// Attempt to get data from the cache\n				// with the key camelized\n				data = dataUser.get( elem, camelKey );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// Attempt to "discover" the data in\n				// HTML5 custom data-* attrs\n				data = dataAttr( elem, camelKey, undefined );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// We tried really hard, but the data doesn\'t exist.\n				return;\n			}\n\n			// Set the data...\n			camelKey = jQuery.camelCase( key );\n			this.each( function() {\n\n				// First, attempt to store a copy or reference of any\n				// data that might\'ve been store with a camelCased key.\n				var data = dataUser.get( this, camelKey );\n\n				// For HTML5 data-* attribute interop, we have to\n				// store property names with dashes in a camelCase form.\n				// This might not apply to all properties...*\n				dataUser.set( this, camelKey, value );\n\n				// *... In the case of properties that might _actually_\n				// have dashes, we need to also store a copy of that\n				// unchanged property.\n				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {\n					dataUser.set( this, key, value );\n				}\n			} );\n		}, null, value, arguments.length > 1, null, true );\n	},\n\n	removeData: function( key ) {\n		return this.each( function() {\n			dataUser.remove( this, key );\n		} );\n	}\n} );\n\n\njQuery.extend( {\n	queue: function( elem, type, data ) {\n		var queue;\n\n		if ( elem ) {\n			type = ( type || "fx" ) + "queue";\n			queue = dataPriv.get( elem, type );\n\n			// Speed up dequeue by getting out quickly if this is just a lookup\n			if ( data ) {\n				if ( !queue || jQuery.isArray( data ) ) {\n					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n				} else {\n					queue.push( data );\n				}\n			}\n			return queue || [];\n		}\n	},\n\n	dequeue: function( elem, type ) {\n		type = type || "fx";\n\n		var queue = jQuery.queue( elem, type ),\n			startLength = queue.length,\n			fn = queue.shift(),\n			hooks = jQuery._queueHooks( elem, type ),\n			next = function() {\n				jQuery.dequeue( elem, type );\n			};\n\n		// If the fx queue is dequeued, always remove the progress sentinel\n		if ( fn === "inprogress" ) {\n			fn = queue.shift();\n			startLength--;\n		}\n\n		if ( fn ) {\n\n			// Add a progress sentinel to prevent the fx queue from being\n			// automatically dequeued\n			if ( type === "fx" ) {\n				queue.unshift( "inprogress" );\n			}\n\n			// Clear up the last queue stop function\n			delete hooks.stop;\n			fn.call( elem, next, hooks );\n		}\n\n		if ( !startLength && hooks ) {\n			hooks.empty.fire();\n		}\n	},\n\n	// Not public - generate a queueHooks object, or return the current one\n	_queueHooks: function( elem, type ) {\n		var key = type + "queueHooks";\n		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n			empty: jQuery.Callbacks( "once memory" ).add( function() {\n				dataPriv.remove( elem, [ type + "queue", key ] );\n			} )\n		} );\n	}\n} );\n\njQuery.fn.extend( {\n	queue: function( type, data ) {\n		var setter = 2;\n\n		if ( typeof type !== "string" ) {\n			data = type;\n			type = "fx";\n			setter--;\n		}\n\n		if ( arguments.length < setter ) {\n			return jQuery.queue( this[ 0 ], type );\n		}\n\n		return data === undefined ?\n			this :\n			this.each( function() {\n				var queue = jQuery.queue( this, type, data );\n\n				// Ensure a hooks for this queue\n				jQuery._queueHooks( this, type );\n\n				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {\n					jQuery.dequeue( this, type );\n				}\n			} );\n	},\n	dequeue: function( type ) {\n		return this.each( function() {\n			jQuery.dequeue( this, type );\n		} );\n	},\n	clearQueue: function( type ) {\n		return this.queue( type || "fx", [] );\n	},\n\n	// Get a promise resolved when queues of a certain type\n	// are emptied (fx is the type by default)\n	promise: function( type, obj ) {\n		var tmp,\n			count = 1,\n			defer = jQuery.Deferred(),\n			elements = this,\n			i = this.length,\n			resolve = function() {\n				if ( !( --count ) ) {\n					defer.resolveWith( elements, [ elements ] );\n				}\n			};\n\n		if ( typeof type !== "string" ) {\n			obj = type;\n			type = undefined;\n		}\n		type = type || "fx";\n\n		while ( i-- ) {\n			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );\n			if ( tmp && tmp.empty ) {\n				count++;\n				tmp.empty.add( resolve );\n			}\n		}\n		resolve();\n		return defer.promise( obj );\n	}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );\n\n\nvar cssExpand = [ "Top", "Right", "Bottom", "Left" ];\n\nvar isHidden = function( elem, el ) {\n\n		// isHidden might be called from jQuery#filter function;\n		// in that case, element will be second argument\n		elem = el || elem;\n		return jQuery.css( elem, "display" ) === "none" ||\n			!jQuery.contains( elem.ownerDocument, elem );\n	};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n	var adjusted,\n		scale = 1,\n		maxIterations = 20,\n		currentValue = tween ?\n			function() { return tween.cur(); } :\n			function() { return jQuery.css( elem, prop, "" ); },\n		initial = currentValue(),\n		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),\n\n		// Starting value computation is required for potential unit mismatches\n		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&\n			rcssNum.exec( jQuery.css( elem, prop ) );\n\n	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n		// Trust units reported by jQuery.css\n		unit = unit || initialInUnit[ 3 ];\n\n		// Make sure we update the tween properties later on\n		valueParts = valueParts || [];\n\n		// Iteratively approximate from a nonzero starting point\n		initialInUnit = +initial || 1;\n\n		do {\n\n			// If previous iteration zeroed out, double until we get *something*.\n			// Use string for doubling so we don\'t accidentally see scale as unchanged below\n			scale = scale || ".5";\n\n			// Adjust and apply\n			initialInUnit = initialInUnit / scale;\n			jQuery.style( elem, prop, initialInUnit + unit );\n\n		// Update scale, tolerating zero or NaN from tween.cur()\n		// Break the loop if scale is unchanged or perfect, or if we\'ve just had enough.\n		} while (\n			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n		);\n	}\n\n	if ( valueParts ) {\n		initialInUnit = +initialInUnit || +initial || 0;\n\n		// Apply relative offset (+=/-=) if specified\n		adjusted = valueParts[ 1 ] ?\n			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n			+valueParts[ 2 ];\n		if ( tween ) {\n			tween.unit = unit;\n			tween.start = initialInUnit;\n			tween.end = adjusted;\n		}\n	}\n	return adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n	// Support: IE9\n	option: [ 1, "<select multiple=\'multiple\'>", "</select>" ],\n\n	// XHTML parsers do not magically insert elements in the\n	// same way that tag soup parsers do. So we cannot shorten\n	// this by omitting <tbody> or other required elements.\n	thead: [ 1, "<table>", "</table>" ],\n	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],\n	tr: [ 2, "<table><tbody>", "</tbody></table>" ],\n	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],\n\n	_default: [ 0, "", "" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n	// Support: IE9-11+\n	// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n	var ret = typeof context.getElementsByTagName !== "undefined" ?\n			context.getElementsByTagName( tag || "*" ) :\n			typeof context.querySelectorAll !== "undefined" ?\n				context.querySelectorAll( tag || "*" ) :\n			[];\n\n	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n		jQuery.merge( [ context ], ret ) :\n		ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n	var i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		dataPriv.set(\n			elems[ i ],\n			"globalEval",\n			!refElements || dataPriv.get( refElements[ i ], "globalEval" )\n		);\n	}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n	var elem, tmp, tag, wrap, contains, j,\n		fragment = context.createDocumentFragment(),\n		nodes = [],\n		i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		elem = elems[ i ];\n\n		if ( elem || elem === 0 ) {\n\n			// Add nodes directly\n			if ( jQuery.type( elem ) === "object" ) {\n\n				// Support: Android<4.1, PhantomJS<2\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n			// Convert non-html into a text node\n			} else if ( !rhtml.test( elem ) ) {\n				nodes.push( context.createTextNode( elem ) );\n\n			// Convert html into DOM nodes\n			} else {\n				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );\n\n				// Deserialize a standard representation\n				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();\n				wrap = wrapMap[ tag ] || wrapMap._default;\n				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n				// Descend through wrappers to the right content\n				j = wrap[ 0 ];\n				while ( j-- ) {\n					tmp = tmp.lastChild;\n				}\n\n				// Support: Android<4.1, PhantomJS<2\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, tmp.childNodes );\n\n				// Remember the top-level container\n				tmp = fragment.firstChild;\n\n				// Ensure the created nodes are orphaned (#12392)\n				tmp.textContent = "";\n			}\n		}\n	}\n\n	// Remove wrapper from fragment\n	fragment.textContent = "";\n\n	i = 0;\n	while ( ( elem = nodes[ i++ ] ) ) {\n\n		// Skip elements already in the context collection (trac-4087)\n		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n			if ( ignored ) {\n				ignored.push( elem );\n			}\n			continue;\n		}\n\n		contains = jQuery.contains( elem.ownerDocument, elem );\n\n		// Append to fragment\n		tmp = getAll( fragment.appendChild( elem ), "script" );\n\n		// Preserve script evaluation history\n		if ( contains ) {\n			setGlobalEval( tmp );\n		}\n\n		// Capture executables\n		if ( scripts ) {\n			j = 0;\n			while ( ( elem = tmp[ j++ ] ) ) {\n				if ( rscriptType.test( elem.type || "" ) ) {\n					scripts.push( elem );\n				}\n			}\n		}\n	}\n\n	return fragment;\n}\n\n\n( function() {\n	var fragment = document.createDocumentFragment(),\n		div = fragment.appendChild( document.createElement( "div" ) ),\n		input = document.createElement( "input" );\n\n	// Support: Android 4.0-4.3, Safari<=5.1\n	// Check state lost if the name is set (#11217)\n	// Support: Windows Web Apps (WWA)\n	// `name` and `type` must use .setAttribute for WWA (#14901)\n	input.setAttribute( "type", "radio" );\n	input.setAttribute( "checked", "checked" );\n	input.setAttribute( "name", "t" );\n\n	div.appendChild( input );\n\n	// Support: Safari<=5.1, Android<4.2\n	// Older WebKit doesn\'t clone checked state correctly in fragments\n	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n	// Support: IE<=11+\n	// Make sure textarea (and checkbox) defaultValue is properly cloned\n	div.innerHTML = "<textarea>x</textarea>";\n	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n	rkeyEvent = /^key/,\n	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n	rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n	return true;\n}\n\nfunction returnFalse() {\n	return false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n	try {\n		return document.activeElement;\n	} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n	var origFn, type;\n\n	// Types can be a map of types/handlers\n	if ( typeof types === "object" ) {\n\n		// ( types-Object, selector, data )\n		if ( typeof selector !== "string" ) {\n\n			// ( types-Object, data )\n			data = data || selector;\n			selector = undefined;\n		}\n		for ( type in types ) {\n			on( elem, type, selector, data, types[ type ], one );\n		}\n		return elem;\n	}\n\n	if ( data == null && fn == null ) {\n\n		// ( types, fn )\n		fn = selector;\n		data = selector = undefined;\n	} else if ( fn == null ) {\n		if ( typeof selector === "string" ) {\n\n			// ( types, selector, fn )\n			fn = data;\n			data = undefined;\n		} else {\n\n			// ( types, data, fn )\n			fn = data;\n			data = selector;\n			selector = undefined;\n		}\n	}\n	if ( fn === false ) {\n		fn = returnFalse;\n	} else if ( !fn ) {\n		return elem;\n	}\n\n	if ( one === 1 ) {\n		origFn = fn;\n		fn = function( event ) {\n\n			// Can use an empty set, since event contains the info\n			jQuery().off( event );\n			return origFn.apply( this, arguments );\n		};\n\n		// Use same guid so caller can remove using origFn\n		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n	}\n	return elem.each( function() {\n		jQuery.event.add( this, types, fn, data, selector );\n	} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards\' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n	global: {},\n\n	add: function( elem, types, handler, data, selector ) {\n\n		var handleObjIn, eventHandle, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.get( elem );\n\n		// Don\'t attach events to noData or text/comment nodes (but allow plain objects)\n		if ( !elemData ) {\n			return;\n		}\n\n		// Caller can pass in an object of custom data in lieu of the handler\n		if ( handler.handler ) {\n			handleObjIn = handler;\n			handler = handleObjIn.handler;\n			selector = handleObjIn.selector;\n		}\n\n		// Make sure that the handler has a unique ID, used to find/remove it later\n		if ( !handler.guid ) {\n			handler.guid = jQuery.guid++;\n		}\n\n		// Init the element\'s event structure and main handler, if this is the first\n		if ( !( events = elemData.events ) ) {\n			events = elemData.events = {};\n		}\n		if ( !( eventHandle = elemData.handle ) ) {\n			eventHandle = elemData.handle = function( e ) {\n\n				// Discard the second event of a jQuery.event.trigger() and\n				// when an event is called after a page has unloaded\n				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?\n					jQuery.event.dispatch.apply( elem, arguments ) : undefined;\n			};\n		}\n\n		// Handle multiple events separated by a space\n		types = ( types || "" ).match( rnotwhite ) || [ "" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n			// There *must* be a type, no attaching namespace-only handlers\n			if ( !type ) {\n				continue;\n			}\n\n			// If event changes its type, use the special event handlers for the changed type\n			special = jQuery.event.special[ type ] || {};\n\n			// If selector defined, determine special event api type, otherwise given type\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n\n			// Update special based on newly reset type\n			special = jQuery.event.special[ type ] || {};\n\n			// handleObj is passed to all event handlers\n			handleObj = jQuery.extend( {\n				type: type,\n				origType: origType,\n				data: data,\n				handler: handler,\n				guid: handler.guid,\n				selector: selector,\n				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n				namespace: namespaces.join( "." )\n			}, handleObjIn );\n\n			// Init the event handler queue if we\'re the first\n			if ( !( handlers = events[ type ] ) ) {\n				handlers = events[ type ] = [];\n				handlers.delegateCount = 0;\n\n				// Only use addEventListener if the special events handler returns false\n				if ( !special.setup ||\n					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n					if ( elem.addEventListener ) {\n						elem.addEventListener( type, eventHandle );\n					}\n				}\n			}\n\n			if ( special.add ) {\n				special.add.call( elem, handleObj );\n\n				if ( !handleObj.handler.guid ) {\n					handleObj.handler.guid = handler.guid;\n				}\n			}\n\n			// Add to the element\'s handler list, delegates in front\n			if ( selector ) {\n				handlers.splice( handlers.delegateCount++, 0, handleObj );\n			} else {\n				handlers.push( handleObj );\n			}\n\n			// Keep track of which events have ever been used, for event optimization\n			jQuery.event.global[ type ] = true;\n		}\n\n	},\n\n	// Detach an event or set of events from an element\n	remove: function( elem, types, handler, selector, mappedTypes ) {\n\n		var j, origCount, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n		if ( !elemData || !( events = elemData.events ) ) {\n			return;\n		}\n\n		// Once for each type.namespace in types; type may be omitted\n		types = ( types || "" ).match( rnotwhite ) || [ "" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n			// Unbind all events (on this namespace, if provided) for the element\n			if ( !type ) {\n				for ( type in events ) {\n					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n				}\n				continue;\n			}\n\n			special = jQuery.event.special[ type ] || {};\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n			handlers = events[ type ] || [];\n			tmp = tmp[ 2 ] &&\n				new RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" );\n\n			// Remove matching events\n			origCount = j = handlers.length;\n			while ( j-- ) {\n				handleObj = handlers[ j ];\n\n				if ( ( mappedTypes || origType === handleObj.origType ) &&\n					( !handler || handler.guid === handleObj.guid ) &&\n					( !tmp || tmp.test( handleObj.namespace ) ) &&\n					( !selector || selector === handleObj.selector ||\n						selector === "**" && handleObj.selector ) ) {\n					handlers.splice( j, 1 );\n\n					if ( handleObj.selector ) {\n						handlers.delegateCount--;\n					}\n					if ( special.remove ) {\n						special.remove.call( elem, handleObj );\n					}\n				}\n			}\n\n			// Remove generic event handler if we removed something and no more handlers exist\n			// (avoids potential for endless recursion during removal of special event handlers)\n			if ( origCount && !handlers.length ) {\n				if ( !special.teardown ||\n					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n					jQuery.removeEvent( elem, type, elemData.handle );\n				}\n\n				delete events[ type ];\n			}\n		}\n\n		// Remove data and the expando if it\'s no longer used\n		if ( jQuery.isEmptyObject( events ) ) {\n			dataPriv.remove( elem, "handle events" );\n		}\n	},\n\n	dispatch: function( event ) {\n\n		// Make a writable jQuery.Event from the native event object\n		event = jQuery.event.fix( event );\n\n		var i, j, ret, matched, handleObj,\n			handlerQueue = [],\n			args = slice.call( arguments ),\n			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],\n			special = jQuery.event.special[ event.type ] || {};\n\n		// Use the fix-ed jQuery.Event rather than the (read-only) native event\n		args[ 0 ] = event;\n		event.delegateTarget = this;\n\n		// Call the preDispatch hook for the mapped type, and let it bail if desired\n		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n			return;\n		}\n\n		// Determine handlers\n		handlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n		// Run delegates first; they may want to stop propagation beneath us\n		i = 0;\n		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n			event.currentTarget = matched.elem;\n\n			j = 0;\n			while ( ( handleObj = matched.handlers[ j++ ] ) &&\n				!event.isImmediatePropagationStopped() ) {\n\n				// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n				// a subset or equal to those in the bound event (both can have no namespace).\n				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n					event.handleObj = handleObj;\n					event.data = handleObj.data;\n\n					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n						handleObj.handler ).apply( matched.elem, args );\n\n					if ( ret !== undefined ) {\n						if ( ( event.result = ret ) === false ) {\n							event.preventDefault();\n							event.stopPropagation();\n						}\n					}\n				}\n			}\n		}\n\n		// Call the postDispatch hook for the mapped type\n		if ( special.postDispatch ) {\n			special.postDispatch.call( this, event );\n		}\n\n		return event.result;\n	},\n\n	handlers: function( event, handlers ) {\n		var i, matches, sel, handleObj,\n			handlerQueue = [],\n			delegateCount = handlers.delegateCount,\n			cur = event.target;\n\n		// Support (at least): Chrome, IE9\n		// Find delegate handlers\n		// Black-hole SVG <use> instance trees (#13180)\n		//\n		// Support: Firefox<=42+\n		// Avoid non-left-click in FF but don\'t block IE radio events (#3861, gh-2343)\n		if ( delegateCount && cur.nodeType &&\n			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {\n\n			for ( ; cur !== this; cur = cur.parentNode || this ) {\n\n				// Don\'t check non-elements (#13208)\n				// Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {\n					matches = [];\n					for ( i = 0; i < delegateCount; i++ ) {\n						handleObj = handlers[ i ];\n\n						// Don\'t conflict with Object.prototype properties (#13203)\n						sel = handleObj.selector + " ";\n\n						if ( matches[ sel ] === undefined ) {\n							matches[ sel ] = handleObj.needsContext ?\n								jQuery( sel, this ).index( cur ) > -1 :\n								jQuery.find( sel, this, null, [ cur ] ).length;\n						}\n						if ( matches[ sel ] ) {\n							matches.push( handleObj );\n						}\n					}\n					if ( matches.length ) {\n						handlerQueue.push( { elem: cur, handlers: matches } );\n					}\n				}\n			}\n		}\n\n		// Add the remaining (directly-bound) handlers\n		if ( delegateCount < handlers.length ) {\n			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n		}\n\n		return handlerQueue;\n	},\n\n	// Includes some event props shared by KeyEvent and MouseEvent\n	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +\n		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),\n\n	fixHooks: {},\n\n	keyHooks: {\n		props: "char charCode key keyCode".split( " " ),\n		filter: function( event, original ) {\n\n			// Add which for key events\n			if ( event.which == null ) {\n				event.which = original.charCode != null ? original.charCode : original.keyCode;\n			}\n\n			return event;\n		}\n	},\n\n	mouseHooks: {\n		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +\n			"screenX screenY toElement" ).split( " " ),\n		filter: function( event, original ) {\n			var eventDoc, doc, body,\n				button = original.button;\n\n			// Calculate pageX/Y if missing and clientX/Y available\n			if ( event.pageX == null && original.clientX != null ) {\n				eventDoc = event.target.ownerDocument || document;\n				doc = eventDoc.documentElement;\n				body = eventDoc.body;\n\n				event.pageX = original.clientX +\n					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n					( doc && doc.clientLeft || body && body.clientLeft || 0 );\n				event.pageY = original.clientY +\n					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n					( doc && doc.clientTop  || body && body.clientTop  || 0 );\n			}\n\n			// Add which for click: 1 === left; 2 === middle; 3 === right\n			// Note: button is not normalized, so don\'t use it\n			if ( !event.which && button !== undefined ) {\n				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n			}\n\n			return event;\n		}\n	},\n\n	fix: function( event ) {\n		if ( event[ jQuery.expando ] ) {\n			return event;\n		}\n\n		// Create a writable copy of the event object and normalize some properties\n		var i, prop, copy,\n			type = event.type,\n			originalEvent = event,\n			fixHook = this.fixHooks[ type ];\n\n		if ( !fixHook ) {\n			this.fixHooks[ type ] = fixHook =\n				rmouseEvent.test( type ) ? this.mouseHooks :\n				rkeyEvent.test( type ) ? this.keyHooks :\n				{};\n		}\n		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n		event = new jQuery.Event( originalEvent );\n\n		i = copy.length;\n		while ( i-- ) {\n			prop = copy[ i ];\n			event[ prop ] = originalEvent[ prop ];\n		}\n\n		// Support: Cordova 2.5 (WebKit) (#13255)\n		// All events should have a target; Cordova deviceready doesn\'t\n		if ( !event.target ) {\n			event.target = document;\n		}\n\n		// Support: Safari 6.0+, Chrome<28\n		// Target should not be a text node (#504, #13143)\n		if ( event.target.nodeType === 3 ) {\n			event.target = event.target.parentNode;\n		}\n\n		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n	},\n\n	special: {\n		load: {\n\n			// Prevent triggered image.load events from bubbling to window.load\n			noBubble: true\n		},\n		focus: {\n\n			// Fire native event if possible so blur/focus sequence is correct\n			trigger: function() {\n				if ( this !== safeActiveElement() && this.focus ) {\n					this.focus();\n					return false;\n				}\n			},\n			delegateType: "focusin"\n		},\n		blur: {\n			trigger: function() {\n				if ( this === safeActiveElement() && this.blur ) {\n					this.blur();\n					return false;\n				}\n			},\n			delegateType: "focusout"\n		},\n		click: {\n\n			// For checkbox, fire native event so checked state will be right\n			trigger: function() {\n				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {\n					this.click();\n					return false;\n				}\n			},\n\n			// For cross-browser consistency, don\'t fire native .click() on links\n			_default: function( event ) {\n				return jQuery.nodeName( event.target, "a" );\n			}\n		},\n\n		beforeunload: {\n			postDispatch: function( event ) {\n\n				// Support: Firefox 20+\n				// Firefox doesn\'t alert if the returnValue field is not set.\n				if ( event.result !== undefined && event.originalEvent ) {\n					event.originalEvent.returnValue = event.result;\n				}\n			}\n		}\n	}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n	// This "if" is needed for plain objects\n	if ( elem.removeEventListener ) {\n		elem.removeEventListener( type, handle );\n	}\n};\n\njQuery.Event = function( src, props ) {\n\n	// Allow instantiation without the \'new\' keyword\n	if ( !( this instanceof jQuery.Event ) ) {\n		return new jQuery.Event( src, props );\n	}\n\n	// Event object\n	if ( src && src.type ) {\n		this.originalEvent = src;\n		this.type = src.type;\n\n		// Events bubbling up the document may have been marked as prevented\n		// by a handler lower down the tree; reflect the correct value.\n		this.isDefaultPrevented = src.defaultPrevented ||\n				src.defaultPrevented === undefined &&\n\n				// Support: Android<4.0\n				src.returnValue === false ?\n			returnTrue :\n			returnFalse;\n\n	// Event type\n	} else {\n		this.type = src;\n	}\n\n	// Put explicitly provided properties onto the event object\n	if ( props ) {\n		jQuery.extend( this, props );\n	}\n\n	// Create a timestamp if incoming event doesn\'t have one\n	this.timeStamp = src && src.timeStamp || jQuery.now();\n\n	// Mark it as fixed\n	this[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n	constructor: jQuery.Event,\n	isDefaultPrevented: returnFalse,\n	isPropagationStopped: returnFalse,\n	isImmediatePropagationStopped: returnFalse,\n\n	preventDefault: function() {\n		var e = this.originalEvent;\n\n		this.isDefaultPrevented = returnTrue;\n\n		if ( e ) {\n			e.preventDefault();\n		}\n	},\n	stopPropagation: function() {\n		var e = this.originalEvent;\n\n		this.isPropagationStopped = returnTrue;\n\n		if ( e ) {\n			e.stopPropagation();\n		}\n	},\n	stopImmediatePropagation: function() {\n		var e = this.originalEvent;\n\n		this.isImmediatePropagationStopped = returnTrue;\n\n		if ( e ) {\n			e.stopImmediatePropagation();\n		}\n\n		this.stopPropagation();\n	}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n	mouseenter: "mouseover",\n	mouseleave: "mouseout",\n	pointerenter: "pointerover",\n	pointerleave: "pointerout"\n}, function( orig, fix ) {\n	jQuery.event.special[ orig ] = {\n		delegateType: fix,\n		bindType: fix,\n\n		handle: function( event ) {\n			var ret,\n				target = this,\n				related = event.relatedTarget,\n				handleObj = event.handleObj;\n\n			// For mouseenter/leave call the handler if related is outside the target.\n			// NB: No relatedTarget if the mouse left/entered the browser window\n			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n				event.type = handleObj.origType;\n				ret = handleObj.handler.apply( this, arguments );\n				event.type = fix;\n			}\n			return ret;\n		}\n	};\n} );\n\njQuery.fn.extend( {\n	on: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn );\n	},\n	one: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn, 1 );\n	},\n	off: function( types, selector, fn ) {\n		var handleObj, type;\n		if ( types && types.preventDefault && types.handleObj ) {\n\n			// ( event )  dispatched jQuery.Event\n			handleObj = types.handleObj;\n			jQuery( types.delegateTarget ).off(\n				handleObj.namespace ?\n					handleObj.origType + "." + handleObj.namespace :\n					handleObj.origType,\n				handleObj.selector,\n				handleObj.handler\n			);\n			return this;\n		}\n		if ( typeof types === "object" ) {\n\n			// ( types-object [, selector] )\n			for ( type in types ) {\n				this.off( type, selector, types[ type ] );\n			}\n			return this;\n		}\n		if ( selector === false || typeof selector === "function" ) {\n\n			// ( types [, fn] )\n			fn = selector;\n			selector = undefined;\n		}\n		if ( fn === false ) {\n			fn = returnFalse;\n		}\n		return this.each( function() {\n			jQuery.event.remove( this, types, fn, selector );\n		} );\n	}\n} );\n\n\nvar\n	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n	// Support: IE 10-11, Edge 10240+\n	// In IE/Edge using regex groups here causes severe slowdowns.\n	// See https://connect.microsoft.com/IE/feedback/details/1736512/\n	rnoInnerhtml = /<script|<style|<link/i,\n\n	// checked="checked" or checked\n	rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n	rscriptTypeMasked = /^true\\/(.*)/,\n	rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n	return jQuery.nodeName( elem, "table" ) &&\n		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?\n\n		elem.getElementsByTagName( "tbody" )[ 0 ] ||\n			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :\n		elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;\n	return elem;\n}\nfunction restoreScript( elem ) {\n	var match = rscriptTypeMasked.exec( elem.type );\n\n	if ( match ) {\n		elem.type = match[ 1 ];\n	} else {\n		elem.removeAttribute( "type" );\n	}\n\n	return elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n	if ( dest.nodeType !== 1 ) {\n		return;\n	}\n\n	// 1. Copy private data: events, handlers, etc.\n	if ( dataPriv.hasData( src ) ) {\n		pdataOld = dataPriv.access( src );\n		pdataCur = dataPriv.set( dest, pdataOld );\n		events = pdataOld.events;\n\n		if ( events ) {\n			delete pdataCur.handle;\n			pdataCur.events = {};\n\n			for ( type in events ) {\n				for ( i = 0, l = events[ type ].length; i < l; i++ ) {\n					jQuery.event.add( dest, type, events[ type ][ i ] );\n				}\n			}\n		}\n	}\n\n	// 2. Copy user data\n	if ( dataUser.hasData( src ) ) {\n		udataOld = dataUser.access( src );\n		udataCur = jQuery.extend( {}, udataOld );\n\n		dataUser.set( dest, udataCur );\n	}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n	var nodeName = dest.nodeName.toLowerCase();\n\n	// Fails to persist the checked state of a cloned checkbox or radio button.\n	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {\n		dest.checked = src.checked;\n\n	// Fails to return the selected option to the default selected state when cloning options\n	} else if ( nodeName === "input" || nodeName === "textarea" ) {\n		dest.defaultValue = src.defaultValue;\n	}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n	// Flatten any nested arrays\n	args = concat.apply( [], args );\n\n	var fragment, first, scripts, hasScripts, node, doc,\n		i = 0,\n		l = collection.length,\n		iNoClone = l - 1,\n		value = args[ 0 ],\n		isFunction = jQuery.isFunction( value );\n\n	// We can\'t cloneNode fragments that contain checked, in WebKit\n	if ( isFunction ||\n			( l > 1 && typeof value === "string" &&\n				!support.checkClone && rchecked.test( value ) ) ) {\n		return collection.each( function( index ) {\n			var self = collection.eq( index );\n			if ( isFunction ) {\n				args[ 0 ] = value.call( this, index, self.html() );\n			}\n			domManip( self, args, callback, ignored );\n		} );\n	}\n\n	if ( l ) {\n		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n		first = fragment.firstChild;\n\n		if ( fragment.childNodes.length === 1 ) {\n			fragment = first;\n		}\n\n		// Require either new content or an interest in ignored elements to invoke the callback\n		if ( first || ignored ) {\n			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );\n			hasScripts = scripts.length;\n\n			// Use the original fragment for the last item\n			// instead of the first because it can end up\n			// being emptied incorrectly in certain situations (#8070).\n			for ( ; i < l; i++ ) {\n				node = fragment;\n\n				if ( i !== iNoClone ) {\n					node = jQuery.clone( node, true, true );\n\n					// Keep references to cloned scripts for later restoration\n					if ( hasScripts ) {\n\n						// Support: Android<4.1, PhantomJS<2\n						// push.apply(_, arraylike) throws on ancient WebKit\n						jQuery.merge( scripts, getAll( node, "script" ) );\n					}\n				}\n\n				callback.call( collection[ i ], node, i );\n			}\n\n			if ( hasScripts ) {\n				doc = scripts[ scripts.length - 1 ].ownerDocument;\n\n				// Reenable scripts\n				jQuery.map( scripts, restoreScript );\n\n				// Evaluate executable scripts on first document insertion\n				for ( i = 0; i < hasScripts; i++ ) {\n					node = scripts[ i ];\n					if ( rscriptType.test( node.type || "" ) &&\n						!dataPriv.access( node, "globalEval" ) &&\n						jQuery.contains( doc, node ) ) {\n\n						if ( node.src ) {\n\n							// Optional AJAX dependency, but won\'t run scripts if not present\n							if ( jQuery._evalUrl ) {\n								jQuery._evalUrl( node.src );\n							}\n						} else {\n							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n	var node,\n		nodes = selector ? jQuery.filter( selector, elem ) : elem,\n		i = 0;\n\n	for ( ; ( node = nodes[ i ] ) != null; i++ ) {\n		if ( !keepData && node.nodeType === 1 ) {\n			jQuery.cleanData( getAll( node ) );\n		}\n\n		if ( node.parentNode ) {\n			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n				setGlobalEval( getAll( node, "script" ) );\n			}\n			node.parentNode.removeChild( node );\n		}\n	}\n\n	return elem;\n}\n\njQuery.extend( {\n	htmlPrefilter: function( html ) {\n		return html.replace( rxhtmlTag, "<$1></$2>" );\n	},\n\n	clone: function( elem, dataAndEvents, deepDataAndEvents ) {\n		var i, l, srcElements, destElements,\n			clone = elem.cloneNode( true ),\n			inPage = jQuery.contains( elem.ownerDocument, elem );\n\n		// Fix IE cloning issues\n		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n				!jQuery.isXMLDoc( elem ) ) {\n\n			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n			destElements = getAll( clone );\n			srcElements = getAll( elem );\n\n			for ( i = 0, l = srcElements.length; i < l; i++ ) {\n				fixInput( srcElements[ i ], destElements[ i ] );\n			}\n		}\n\n		// Copy the events from the original to the clone\n		if ( dataAndEvents ) {\n			if ( deepDataAndEvents ) {\n				srcElements = srcElements || getAll( elem );\n				destElements = destElements || getAll( clone );\n\n				for ( i = 0, l = srcElements.length; i < l; i++ ) {\n					cloneCopyEvent( srcElements[ i ], destElements[ i ] );\n				}\n			} else {\n				cloneCopyEvent( elem, clone );\n			}\n		}\n\n		// Preserve script evaluation history\n		destElements = getAll( clone, "script" );\n		if ( destElements.length > 0 ) {\n			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );\n		}\n\n		// Return the cloned set\n		return clone;\n	},\n\n	cleanData: function( elems ) {\n		var data, elem, type,\n			special = jQuery.event.special,\n			i = 0;\n\n		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n			if ( acceptData( elem ) ) {\n				if ( ( data = elem[ dataPriv.expando ] ) ) {\n					if ( data.events ) {\n						for ( type in data.events ) {\n							if ( special[ type ] ) {\n								jQuery.event.remove( elem, type );\n\n							// This is a shortcut to avoid jQuery.event.remove\'s overhead\n							} else {\n								jQuery.removeEvent( elem, type, data.handle );\n							}\n						}\n					}\n\n					// Support: Chrome <= 35-45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataPriv.expando ] = undefined;\n				}\n				if ( elem[ dataUser.expando ] ) {\n\n					// Support: Chrome <= 35-45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataUser.expando ] = undefined;\n				}\n			}\n		}\n	}\n} );\n\njQuery.fn.extend( {\n\n	// Keep domManip exposed until 3.0 (gh-2225)\n	domManip: domManip,\n\n	detach: function( selector ) {\n		return remove( this, selector, true );\n	},\n\n	remove: function( selector ) {\n		return remove( this, selector );\n	},\n\n	text: function( value ) {\n		return access( this, function( value ) {\n			return value === undefined ?\n				jQuery.text( this ) :\n				this.empty().each( function() {\n					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n						this.textContent = value;\n					}\n				} );\n		}, null, value, arguments.length );\n	},\n\n	append: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.appendChild( elem );\n			}\n		} );\n	},\n\n	prepend: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.insertBefore( elem, target.firstChild );\n			}\n		} );\n	},\n\n	before: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this );\n			}\n		} );\n	},\n\n	after: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this.nextSibling );\n			}\n		} );\n	},\n\n	empty: function() {\n		var elem,\n			i = 0;\n\n		for ( ; ( elem = this[ i ] ) != null; i++ ) {\n			if ( elem.nodeType === 1 ) {\n\n				// Prevent memory leaks\n				jQuery.cleanData( getAll( elem, false ) );\n\n				// Remove any remaining nodes\n				elem.textContent = "";\n			}\n		}\n\n		return this;\n	},\n\n	clone: function( dataAndEvents, deepDataAndEvents ) {\n		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n		return this.map( function() {\n			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n		} );\n	},\n\n	html: function( value ) {\n		return access( this, function( value ) {\n			var elem = this[ 0 ] || {},\n				i = 0,\n				l = this.length;\n\n			if ( value === undefined && elem.nodeType === 1 ) {\n				return elem.innerHTML;\n			}\n\n			// See if we can take a shortcut and just use innerHTML\n			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&\n				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {\n\n				value = jQuery.htmlPrefilter( value );\n\n				try {\n					for ( ; i < l; i++ ) {\n						elem = this[ i ] || {};\n\n						// Remove element nodes and prevent memory leaks\n						if ( elem.nodeType === 1 ) {\n							jQuery.cleanData( getAll( elem, false ) );\n							elem.innerHTML = value;\n						}\n					}\n\n					elem = 0;\n\n				// If using innerHTML throws an exception, use the fallback method\n				} catch ( e ) {}\n			}\n\n			if ( elem ) {\n				this.empty().append( value );\n			}\n		}, null, value, arguments.length );\n	},\n\n	replaceWith: function() {\n		var ignored = [];\n\n		// Make the changes, replacing each non-ignored context element with the new content\n		return domManip( this, arguments, function( elem ) {\n			var parent = this.parentNode;\n\n			if ( jQuery.inArray( this, ignored ) < 0 ) {\n				jQuery.cleanData( getAll( this ) );\n				if ( parent ) {\n					parent.replaceChild( elem, this );\n				}\n			}\n\n		// Force callback invocation\n		}, ignored );\n	}\n} );\n\njQuery.each( {\n	appendTo: "append",\n	prependTo: "prepend",\n	insertBefore: "before",\n	insertAfter: "after",\n	replaceAll: "replaceWith"\n}, function( name, original ) {\n	jQuery.fn[ name ] = function( selector ) {\n		var elems,\n			ret = [],\n			insert = jQuery( selector ),\n			last = insert.length - 1,\n			i = 0;\n\n		for ( ; i <= last; i++ ) {\n			elems = i === last ? this : this.clone( true );\n			jQuery( insert[ i ] )[ original ]( elems );\n\n			// Support: QtWebKit\n			// .get() because push.apply(_, arraylike) throws\n			push.apply( ret, elems.get() );\n		}\n\n		return this.pushStack( ret );\n	};\n} );\n\n\nvar iframe,\n	elemdisplay = {\n\n		// Support: Firefox\n		// We have to pre-define these values for FF (#10227)\n		HTML: "block",\n		BODY: "block"\n	};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n		display = jQuery.css( elem[ 0 ], "display" );\n\n	// We don\'t have any data stored on the element,\n	// so use "detach" method as fast way to get rid of the element\n	elem.detach();\n\n	return display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n	var doc = document,\n		display = elemdisplay[ nodeName ];\n\n	if ( !display ) {\n		display = actualDisplay( nodeName, doc );\n\n		// If the simple way fails, read from inside an iframe\n		if ( display === "none" || !display ) {\n\n			// Use the already-created iframe if possible\n			iframe = ( iframe || jQuery( "<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>" ) )\n				.appendTo( doc.documentElement );\n\n			// Always write a new HTML skeleton so Webkit and Firefox don\'t choke on reuse\n			doc = iframe[ 0 ].contentDocument;\n\n			// Support: IE\n			doc.write();\n			doc.close();\n\n			display = actualDisplay( nodeName, doc );\n			iframe.detach();\n		}\n\n		// Store the correct default display\n		elemdisplay[ nodeName ] = display;\n	}\n\n	return display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );\n\nvar getStyles = function( elem ) {\n\n		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n		// IE throws on elements created in popups\n		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n		var view = elem.ownerDocument.defaultView;\n\n		if ( !view || !view.opener ) {\n			view = window;\n		}\n\n		return view.getComputedStyle( elem );\n	};\n\nvar swap = function( elem, options, callback, args ) {\n	var ret, name,\n		old = {};\n\n	// Remember the old values, and insert the new ones\n	for ( name in options ) {\n		old[ name ] = elem.style[ name ];\n		elem.style[ name ] = options[ name ];\n	}\n\n	ret = callback.apply( elem, args || [] );\n\n	// Revert the old values\n	for ( name in options ) {\n		elem.style[ name ] = old[ name ];\n	}\n\n	return ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n		container = document.createElement( "div" ),\n		div = document.createElement( "div" );\n\n	// Finish early in limited (non-browser) environments\n	if ( !div.style ) {\n		return;\n	}\n\n	// Support: IE9-11+\n	// Style of cloned element affects source element cloned (#8908)\n	div.style.backgroundClip = "content-box";\n	div.cloneNode( true ).style.backgroundClip = "";\n	support.clearCloneStyle = div.style.backgroundClip === "content-box";\n\n	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +\n		"padding:0;margin-top:1px;position:absolute";\n	container.appendChild( div );\n\n	// Executing both pixelPosition & boxSizingReliable tests require only one layout\n	// so they\'re executed at the same time to save the second computation.\n	function computeStyleTests() {\n		div.style.cssText =\n\n			// Support: Firefox<29, Android 2.3\n			// Vendor-prefix box-sizing\n			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +\n			"position:relative;display:block;" +\n			"margin:auto;border:1px;padding:1px;" +\n			"top:1%;width:50%";\n		div.innerHTML = "";\n		documentElement.appendChild( container );\n\n		var divStyle = window.getComputedStyle( div );\n		pixelPositionVal = divStyle.top !== "1%";\n		reliableMarginLeftVal = divStyle.marginLeft === "2px";\n		boxSizingReliableVal = divStyle.width === "4px";\n\n		// Support: Android 4.0 - 4.3 only\n		// Some styles come back with percentage values, even though they shouldn\'t\n		div.style.marginRight = "50%";\n		pixelMarginRightVal = divStyle.marginRight === "4px";\n\n		documentElement.removeChild( container );\n	}\n\n	jQuery.extend( support, {\n		pixelPosition: function() {\n\n			// This test is executed only once but we still do memoizing\n			// since we can use the boxSizingReliable pre-computing.\n			// No need to check if the test was already performed, though.\n			computeStyleTests();\n			return pixelPositionVal;\n		},\n		boxSizingReliable: function() {\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return boxSizingReliableVal;\n		},\n		pixelMarginRight: function() {\n\n			// Support: Android 4.0-4.3\n			// We\'re checking for boxSizingReliableVal here instead of pixelMarginRightVal\n			// since that compresses better and they\'re computed together anyway.\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return pixelMarginRightVal;\n		},\n		reliableMarginLeft: function() {\n\n			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return reliableMarginLeftVal;\n		},\n		reliableMarginRight: function() {\n\n			// Support: Android 2.3\n			// Check if div with explicit width and no margin-right incorrectly\n			// gets computed margin-right based on width of container. (#3333)\n			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n			// This support function is only executed once so no memoizing is needed.\n			var ret,\n				marginDiv = div.appendChild( document.createElement( "div" ) );\n\n			// Reset CSS: box-sizing; display; margin; border; padding\n			marginDiv.style.cssText = div.style.cssText =\n\n				// Support: Android 2.3\n				// Vendor-prefix box-sizing\n				"-webkit-box-sizing:content-box;box-sizing:content-box;" +\n				"display:block;margin:0;border:0;padding:0";\n			marginDiv.style.marginRight = marginDiv.style.width = "0";\n			div.style.width = "1px";\n			documentElement.appendChild( container );\n\n			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n			documentElement.removeChild( container );\n			div.removeChild( marginDiv );\n\n			return ret;\n		}\n	} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n	var width, minWidth, maxWidth, ret,\n		style = elem.style;\n\n	computed = computed || getStyles( elem );\n	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n	// Support: Opera 12.1x only\n	// Fall back to style even without computed\n	// computed is undefined for elems on document fragments\n	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n		ret = jQuery.style( elem, name );\n	}\n\n	// Support: IE9\n	// getPropertyValue is only needed for .css(\'filter\') (#12537)\n	if ( computed ) {\n\n		// A tribute to the "awesome hack by Dean Edwards"\n		// Android Browser returns percentage for some values,\n		// but width seems to be reliably pixels.\n		// This is against the CSSOM draft spec:\n		// http://dev.w3.org/csswg/cssom/#resolved-values\n		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n			// Remember the original values\n			width = style.width;\n			minWidth = style.minWidth;\n			maxWidth = style.maxWidth;\n\n			// Put in the new values to get a computed value out\n			style.minWidth = style.maxWidth = style.width = ret;\n			ret = computed.width;\n\n			// Revert the changed values\n			style.width = width;\n			style.minWidth = minWidth;\n			style.maxWidth = maxWidth;\n		}\n	}\n\n	return ret !== undefined ?\n\n		// Support: IE9-11+\n		// IE returns zIndex value as an integer.\n		ret + "" :\n		ret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n	// Define the hook, we\'ll check on the first run if it\'s really needed.\n	return {\n		get: function() {\n			if ( conditionFn() ) {\n\n				// Hook not needed (or it\'s not possible to use it due\n				// to missing dependency), remove it.\n				delete this.get;\n				return;\n			}\n\n			// Hook needed; redefine it so that the support test is not executed again.\n			return ( this.get = hookFn ).apply( this, arguments );\n		}\n	};\n}\n\n\nvar\n\n	// Swappable if display is none or starts with table\n	// except "table", "table-cell", or "table-caption"\n	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n	rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n	cssShow = { position: "absolute", visibility: "hidden", display: "block" },\n	cssNormalTransform = {\n		letterSpacing: "0",\n		fontWeight: "400"\n	},\n\n	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],\n	emptyStyle = document.createElement( "div" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n	// Shortcut for names that are not vendor prefixed\n	if ( name in emptyStyle ) {\n		return name;\n	}\n\n	// Check for vendor prefixed names\n	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n		i = cssPrefixes.length;\n\n	while ( i-- ) {\n		name = cssPrefixes[ i ] + capName;\n		if ( name in emptyStyle ) {\n			return name;\n		}\n	}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n	// Any relative (+/-) values have already been\n	// normalized at this point\n	var matches = rcssNum.exec( value );\n	return matches ?\n\n		// Guard against undefined "subtract", e.g., when used as in cssHooks\n		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :\n		value;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n	var i = extra === ( isBorderBox ? "border" : "content" ) ?\n\n		// If we already have the right measurement, avoid augmentation\n		4 :\n\n		// Otherwise initialize for horizontal or vertical properties\n		name === "width" ? 1 : 0,\n\n		val = 0;\n\n	for ( ; i < 4; i += 2 ) {\n\n		// Both box models exclude margin, so add it if we want it\n		if ( extra === "margin" ) {\n			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n		}\n\n		if ( isBorderBox ) {\n\n			// border-box includes padding, so remove it if we want content\n			if ( extra === "content" ) {\n				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n			}\n\n			// At this point, extra isn\'t border nor margin, so remove border\n			if ( extra !== "margin" ) {\n				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n			}\n		} else {\n\n			// At this point, extra isn\'t content, so add padding\n			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n\n			// At this point, extra isn\'t content nor padding, so add border\n			if ( extra !== "padding" ) {\n				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n			}\n		}\n	}\n\n	return val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n	// Start with offset property, which is equivalent to the border-box value\n	var valueIsBorderBox = true,\n		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,\n		styles = getStyles( elem ),\n		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";\n\n	// Support: IE11 only\n	// In IE 11 fullscreen elements inside of an iframe have\n	// 100x too small dimensions (gh-1764).\n	if ( document.msFullscreenElement && window.top !== window ) {\n\n		// Support: IE11 only\n		// Running getBoundingClientRect on a disconnected node\n		// in IE throws an error.\n		if ( elem.getClientRects().length ) {\n			val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );\n		}\n	}\n\n	// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n	if ( val <= 0 || val == null ) {\n\n		// Fall back to computed then uncomputed css if necessary\n		val = curCSS( elem, name, styles );\n		if ( val < 0 || val == null ) {\n			val = elem.style[ name ];\n		}\n\n		// Computed unit is not pixels. Stop here and return.\n		if ( rnumnonpx.test( val ) ) {\n			return val;\n		}\n\n		// Check for style in case a browser which returns unreliable values\n		// for getComputedStyle silently falls back to the reliable elem.style\n		valueIsBorderBox = isBorderBox &&\n			( support.boxSizingReliable() || val === elem.style[ name ] );\n\n		// Normalize "", auto, and prepare for extra\n		val = parseFloat( val ) || 0;\n	}\n\n	// Use the active box-sizing model to add/subtract irrelevant styles\n	return ( val +\n		augmentWidthOrHeight(\n			elem,\n			name,\n			extra || ( isBorderBox ? "border" : "content" ),\n			valueIsBorderBox,\n			styles\n		)\n	) + "px";\n}\n\nfunction showHide( elements, show ) {\n	var display, elem, hidden,\n		values = [],\n		index = 0,\n		length = elements.length;\n\n	for ( ; index < length; index++ ) {\n		elem = elements[ index ];\n		if ( !elem.style ) {\n			continue;\n		}\n\n		values[ index ] = dataPriv.get( elem, "olddisplay" );\n		display = elem.style.display;\n		if ( show ) {\n\n			// Reset the inline display of this element to learn if it is\n			// being hidden by cascaded rules or not\n			if ( !values[ index ] && display === "none" ) {\n				elem.style.display = "";\n			}\n\n			// Set elements which have been overridden with display: none\n			// in a stylesheet to whatever the default browser style is\n			// for such an element\n			if ( elem.style.display === "" && isHidden( elem ) ) {\n				values[ index ] = dataPriv.access(\n					elem,\n					"olddisplay",\n					defaultDisplay( elem.nodeName )\n				);\n			}\n		} else {\n			hidden = isHidden( elem );\n\n			if ( display !== "none" || !hidden ) {\n				dataPriv.set(\n					elem,\n					"olddisplay",\n					hidden ? display : jQuery.css( elem, "display" )\n				);\n			}\n		}\n	}\n\n	// Set the display of most of the elements in a second loop\n	// to avoid the constant reflow\n	for ( index = 0; index < length; index++ ) {\n		elem = elements[ index ];\n		if ( !elem.style ) {\n			continue;\n		}\n		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {\n			elem.style.display = show ? values[ index ] || "" : "none";\n		}\n	}\n\n	return elements;\n}\n\njQuery.extend( {\n\n	// Add in style property hooks for overriding the default\n	// behavior of getting and setting a style property\n	cssHooks: {\n		opacity: {\n			get: function( elem, computed ) {\n				if ( computed ) {\n\n					// We should always get a number back from opacity\n					var ret = curCSS( elem, "opacity" );\n					return ret === "" ? "1" : ret;\n				}\n			}\n		}\n	},\n\n	// Don\'t automatically add "px" to these possibly-unitless properties\n	cssNumber: {\n		"animationIterationCount": true,\n		"columnCount": true,\n		"fillOpacity": true,\n		"flexGrow": true,\n		"flexShrink": true,\n		"fontWeight": true,\n		"lineHeight": true,\n		"opacity": true,\n		"order": true,\n		"orphans": true,\n		"widows": true,\n		"zIndex": true,\n		"zoom": true\n	},\n\n	// Add in properties whose names you wish to fix before\n	// setting or getting the value\n	cssProps: {\n		"float": "cssFloat"\n	},\n\n	// Get and set the style property on a DOM Node\n	style: function( elem, name, value, extra ) {\n\n		// Don\'t set styles on text and comment nodes\n		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n			return;\n		}\n\n		// Make sure that we\'re working with the right name\n		var ret, type, hooks,\n			origName = jQuery.camelCase( name ),\n			style = elem.style;\n\n		name = jQuery.cssProps[ origName ] ||\n			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n		// Gets hook for the prefixed version, then unprefixed version\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// Check if we\'re setting a value\n		if ( value !== undefined ) {\n			type = typeof value;\n\n			// Convert "+=" or "-=" to relative numbers (#7345)\n			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n				value = adjustCSS( elem, name, ret );\n\n				// Fixes bug #9237\n				type = "number";\n			}\n\n			// Make sure that null and NaN values aren\'t set (#7116)\n			if ( value == null || value !== value ) {\n				return;\n			}\n\n			// If a number was passed in, add the unit (except for certain CSS properties)\n			if ( type === "number" ) {\n				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );\n			}\n\n			// Support: IE9-11+\n			// background-* props affect original clone\'s values\n			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {\n				style[ name ] = "inherit";\n			}\n\n			// If a hook was provided, use that value, otherwise just set the specified value\n			if ( !hooks || !( "set" in hooks ) ||\n				( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n				style[ name ] = value;\n			}\n\n		} else {\n\n			// If a hook was provided get the non-computed value from there\n			if ( hooks && "get" in hooks &&\n				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n				return ret;\n			}\n\n			// Otherwise just get the value from the style object\n			return style[ name ];\n		}\n	},\n\n	css: function( elem, name, extra, styles ) {\n		var val, num, hooks,\n			origName = jQuery.camelCase( name );\n\n		// Make sure that we\'re working with the right name\n		name = jQuery.cssProps[ origName ] ||\n			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n		// Try prefixed name followed by the unprefixed name\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// If a hook was provided get the computed value from there\n		if ( hooks && "get" in hooks ) {\n			val = hooks.get( elem, true, extra );\n		}\n\n		// Otherwise, if a way to get the computed value exists, use that\n		if ( val === undefined ) {\n			val = curCSS( elem, name, styles );\n		}\n\n		// Convert "normal" to computed value\n		if ( val === "normal" && name in cssNormalTransform ) {\n			val = cssNormalTransform[ name ];\n		}\n\n		// Make numeric if forced or a qualifier was provided and val looks numeric\n		if ( extra === "" || extra ) {\n			num = parseFloat( val );\n			return extra === true || isFinite( num ) ? num || 0 : val;\n		}\n		return val;\n	}\n} );\n\njQuery.each( [ "height", "width" ], function( i, name ) {\n	jQuery.cssHooks[ name ] = {\n		get: function( elem, computed, extra ) {\n			if ( computed ) {\n\n				// Certain elements can have dimension info if we invisibly show them\n				// but it must have a current display style that would benefit\n				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&\n					elem.offsetWidth === 0 ?\n						swap( elem, cssShow, function() {\n							return getWidthOrHeight( elem, name, extra );\n						} ) :\n						getWidthOrHeight( elem, name, extra );\n			}\n		},\n\n		set: function( elem, value, extra ) {\n			var matches,\n				styles = extra && getStyles( elem ),\n				subtract = extra && augmentWidthOrHeight(\n					elem,\n					name,\n					extra,\n					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",\n					styles\n				);\n\n			// Convert to pixels if value adjustment is needed\n			if ( subtract && ( matches = rcssNum.exec( value ) ) &&\n				( matches[ 3 ] || "px" ) !== "px" ) {\n\n				elem.style[ name ] = value;\n				value = jQuery.css( elem, name );\n			}\n\n			return setPositiveNumber( elem, value, subtract );\n		}\n	};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n	function( elem, computed ) {\n		if ( computed ) {\n			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||\n				elem.getBoundingClientRect().left -\n					swap( elem, { marginLeft: 0 }, function() {\n						return elem.getBoundingClientRect().left;\n					} )\n				) + "px";\n		}\n	}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n	function( elem, computed ) {\n		if ( computed ) {\n			return swap( elem, { "display": "inline-block" },\n				curCSS, [ elem, "marginRight" ] );\n		}\n	}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n	margin: "",\n	padding: "",\n	border: "Width"\n}, function( prefix, suffix ) {\n	jQuery.cssHooks[ prefix + suffix ] = {\n		expand: function( value ) {\n			var i = 0,\n				expanded = {},\n\n				// Assumes a single number if not a string\n				parts = typeof value === "string" ? value.split( " " ) : [ value ];\n\n			for ( ; i < 4; i++ ) {\n				expanded[ prefix + cssExpand[ i ] + suffix ] =\n					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n			}\n\n			return expanded;\n		}\n	};\n\n	if ( !rmargin.test( prefix ) ) {\n		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n	}\n} );\n\njQuery.fn.extend( {\n	css: function( name, value ) {\n		return access( this, function( elem, name, value ) {\n			var styles, len,\n				map = {},\n				i = 0;\n\n			if ( jQuery.isArray( name ) ) {\n				styles = getStyles( elem );\n				len = name.length;\n\n				for ( ; i < len; i++ ) {\n					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n				}\n\n				return map;\n			}\n\n			return value !== undefined ?\n				jQuery.style( elem, name, value ) :\n				jQuery.css( elem, name );\n		}, name, value, arguments.length > 1 );\n	},\n	show: function() {\n		return showHide( this, true );\n	},\n	hide: function() {\n		return showHide( this );\n	},\n	toggle: function( state ) {\n		if ( typeof state === "boolean" ) {\n			return state ? this.show() : this.hide();\n		}\n\n		return this.each( function() {\n			if ( isHidden( this ) ) {\n				jQuery( this ).show();\n			} else {\n				jQuery( this ).hide();\n			}\n		} );\n	}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n	return new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n	constructor: Tween,\n	init: function( elem, options, prop, end, easing, unit ) {\n		this.elem = elem;\n		this.prop = prop;\n		this.easing = easing || jQuery.easing._default;\n		this.options = options;\n		this.start = this.now = this.cur();\n		this.end = end;\n		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );\n	},\n	cur: function() {\n		var hooks = Tween.propHooks[ this.prop ];\n\n		return hooks && hooks.get ?\n			hooks.get( this ) :\n			Tween.propHooks._default.get( this );\n	},\n	run: function( percent ) {\n		var eased,\n			hooks = Tween.propHooks[ this.prop ];\n\n		if ( this.options.duration ) {\n			this.pos = eased = jQuery.easing[ this.easing ](\n				percent, this.options.duration * percent, 0, 1, this.options.duration\n			);\n		} else {\n			this.pos = eased = percent;\n		}\n		this.now = ( this.end - this.start ) * eased + this.start;\n\n		if ( this.options.step ) {\n			this.options.step.call( this.elem, this.now, this );\n		}\n\n		if ( hooks && hooks.set ) {\n			hooks.set( this );\n		} else {\n			Tween.propHooks._default.set( this );\n		}\n		return this;\n	}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n	_default: {\n		get: function( tween ) {\n			var result;\n\n			// Use a property on the element directly when it is not a DOM element,\n			// or when there is no matching style property that exists.\n			if ( tween.elem.nodeType !== 1 ||\n				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n				return tween.elem[ tween.prop ];\n			}\n\n			// Passing an empty string as a 3rd parameter to .css will automatically\n			// attempt a parseFloat and fallback to a string if the parse fails.\n			// Simple values such as "10px" are parsed to Float;\n			// complex values such as "rotate(1rad)" are returned as-is.\n			result = jQuery.css( tween.elem, tween.prop, "" );\n\n			// Empty strings, null, undefined and "auto" are converted to 0.\n			return !result || result === "auto" ? 0 : result;\n		},\n		set: function( tween ) {\n\n			// Use step hook for back compat.\n			// Use cssHook if its there.\n			// Use .style if available and use plain properties where available.\n			if ( jQuery.fx.step[ tween.prop ] ) {\n				jQuery.fx.step[ tween.prop ]( tween );\n			} else if ( tween.elem.nodeType === 1 &&\n				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n					jQuery.cssHooks[ tween.prop ] ) ) {\n				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n			} else {\n				tween.elem[ tween.prop ] = tween.now;\n			}\n		}\n	}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n	set: function( tween ) {\n		if ( tween.elem.nodeType && tween.elem.parentNode ) {\n			tween.elem[ tween.prop ] = tween.now;\n		}\n	}\n};\n\njQuery.easing = {\n	linear: function( p ) {\n		return p;\n	},\n	swing: function( p ) {\n		return 0.5 - Math.cos( p * Math.PI ) / 2;\n	},\n	_default: "swing"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n	fxNow, timerId,\n	rfxtypes = /^(?:toggle|show|hide)$/,\n	rrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n	window.setTimeout( function() {\n		fxNow = undefined;\n	} );\n	return ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n	var which,\n		i = 0,\n		attrs = { height: type };\n\n	// If we include width, step value is 1 to do all cssExpand values,\n	// otherwise step value is 2 to skip over Left and Right\n	includeWidth = includeWidth ? 1 : 0;\n	for ( ; i < 4 ; i += 2 - includeWidth ) {\n		which = cssExpand[ i ];\n		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;\n	}\n\n	if ( includeWidth ) {\n		attrs.opacity = attrs.width = type;\n	}\n\n	return attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n	var tween,\n		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),\n		index = 0,\n		length = collection.length;\n	for ( ; index < length; index++ ) {\n		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n			// We\'re done with this property\n			return tween;\n		}\n	}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n	/* jshint validthis: true */\n	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n		anim = this,\n		orig = {},\n		style = elem.style,\n		hidden = elem.nodeType && isHidden( elem ),\n		dataShow = dataPriv.get( elem, "fxshow" );\n\n	// Handle queue: false promises\n	if ( !opts.queue ) {\n		hooks = jQuery._queueHooks( elem, "fx" );\n		if ( hooks.unqueued == null ) {\n			hooks.unqueued = 0;\n			oldfire = hooks.empty.fire;\n			hooks.empty.fire = function() {\n				if ( !hooks.unqueued ) {\n					oldfire();\n				}\n			};\n		}\n		hooks.unqueued++;\n\n		anim.always( function() {\n\n			// Ensure the complete handler is called before this completes\n			anim.always( function() {\n				hooks.unqueued--;\n				if ( !jQuery.queue( elem, "fx" ).length ) {\n					hooks.empty.fire();\n				}\n			} );\n		} );\n	}\n\n	// Height/width overflow pass\n	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {\n\n		// Make sure that nothing sneaks out\n		// Record all 3 overflow attributes because IE9-10 do not\n		// change the overflow attribute when overflowX and\n		// overflowY are set to the same value\n		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n		// Set display property to inline-block for height/width\n		// animations on inline elements that are having width/height animated\n		display = jQuery.css( elem, "display" );\n\n		// Test default display if display is currently "none"\n		checkDisplay = display === "none" ?\n			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;\n\n		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {\n			style.display = "inline-block";\n		}\n	}\n\n	if ( opts.overflow ) {\n		style.overflow = "hidden";\n		anim.always( function() {\n			style.overflow = opts.overflow[ 0 ];\n			style.overflowX = opts.overflow[ 1 ];\n			style.overflowY = opts.overflow[ 2 ];\n		} );\n	}\n\n	// show/hide pass\n	for ( prop in props ) {\n		value = props[ prop ];\n		if ( rfxtypes.exec( value ) ) {\n			delete props[ prop ];\n			toggle = toggle || value === "toggle";\n			if ( value === ( hidden ? "hide" : "show" ) ) {\n\n				// If there is dataShow left over from a stopped hide or show\n				// and we are going to proceed with show, we should pretend to be hidden\n				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {\n					hidden = true;\n				} else {\n					continue;\n				}\n			}\n			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n		// Any non-fx value stops us from restoring the original display value\n		} else {\n			display = undefined;\n		}\n	}\n\n	if ( !jQuery.isEmptyObject( orig ) ) {\n		if ( dataShow ) {\n			if ( "hidden" in dataShow ) {\n				hidden = dataShow.hidden;\n			}\n		} else {\n			dataShow = dataPriv.access( elem, "fxshow", {} );\n		}\n\n		// Store state if its toggle - enables .stop().toggle() to "reverse"\n		if ( toggle ) {\n			dataShow.hidden = !hidden;\n		}\n		if ( hidden ) {\n			jQuery( elem ).show();\n		} else {\n			anim.done( function() {\n				jQuery( elem ).hide();\n			} );\n		}\n		anim.done( function() {\n			var prop;\n\n			dataPriv.remove( elem, "fxshow" );\n			for ( prop in orig ) {\n				jQuery.style( elem, prop, orig[ prop ] );\n			}\n		} );\n		for ( prop in orig ) {\n			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n			if ( !( prop in dataShow ) ) {\n				dataShow[ prop ] = tween.start;\n				if ( hidden ) {\n					tween.end = tween.start;\n					tween.start = prop === "width" || prop === "height" ? 1 : 0;\n				}\n			}\n		}\n\n	// If this is a noop like .hide().hide(), restore an overwritten display value\n	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {\n		style.display = display;\n	}\n}\n\nfunction propFilter( props, specialEasing ) {\n	var index, name, easing, value, hooks;\n\n	// camelCase, specialEasing and expand cssHook pass\n	for ( index in props ) {\n		name = jQuery.camelCase( index );\n		easing = specialEasing[ name ];\n		value = props[ index ];\n		if ( jQuery.isArray( value ) ) {\n			easing = value[ 1 ];\n			value = props[ index ] = value[ 0 ];\n		}\n\n		if ( index !== name ) {\n			props[ name ] = value;\n			delete props[ index ];\n		}\n\n		hooks = jQuery.cssHooks[ name ];\n		if ( hooks && "expand" in hooks ) {\n			value = hooks.expand( value );\n			delete props[ name ];\n\n			// Not quite $.extend, this won\'t overwrite existing keys.\n			// Reusing \'index\' because we have the correct "name"\n			for ( index in value ) {\n				if ( !( index in props ) ) {\n					props[ index ] = value[ index ];\n					specialEasing[ index ] = easing;\n				}\n			}\n		} else {\n			specialEasing[ name ] = easing;\n		}\n	}\n}\n\nfunction Animation( elem, properties, options ) {\n	var result,\n		stopped,\n		index = 0,\n		length = Animation.prefilters.length,\n		deferred = jQuery.Deferred().always( function() {\n\n			// Don\'t match elem in the :animated selector\n			delete tick.elem;\n		} ),\n		tick = function() {\n			if ( stopped ) {\n				return false;\n			}\n			var currentTime = fxNow || createFxNow(),\n				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n				// Support: Android 2.3\n				// Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n				temp = remaining / animation.duration || 0,\n				percent = 1 - temp,\n				index = 0,\n				length = animation.tweens.length;\n\n			for ( ; index < length ; index++ ) {\n				animation.tweens[ index ].run( percent );\n			}\n\n			deferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n			if ( percent < 1 && length ) {\n				return remaining;\n			} else {\n				deferred.resolveWith( elem, [ animation ] );\n				return false;\n			}\n		},\n		animation = deferred.promise( {\n			elem: elem,\n			props: jQuery.extend( {}, properties ),\n			opts: jQuery.extend( true, {\n				specialEasing: {},\n				easing: jQuery.easing._default\n			}, options ),\n			originalProperties: properties,\n			originalOptions: options,\n			startTime: fxNow || createFxNow(),\n			duration: options.duration,\n			tweens: [],\n			createTween: function( prop, end ) {\n				var tween = jQuery.Tween( elem, animation.opts, prop, end,\n						animation.opts.specialEasing[ prop ] || animation.opts.easing );\n				animation.tweens.push( tween );\n				return tween;\n			},\n			stop: function( gotoEnd ) {\n				var index = 0,\n\n					// If we are going to the end, we want to run all the tweens\n					// otherwise we skip this part\n					length = gotoEnd ? animation.tweens.length : 0;\n				if ( stopped ) {\n					return this;\n				}\n				stopped = true;\n				for ( ; index < length ; index++ ) {\n					animation.tweens[ index ].run( 1 );\n				}\n\n				// Resolve when we played the last frame; otherwise, reject\n				if ( gotoEnd ) {\n					deferred.notifyWith( elem, [ animation, 1, 0 ] );\n					deferred.resolveWith( elem, [ animation, gotoEnd ] );\n				} else {\n					deferred.rejectWith( elem, [ animation, gotoEnd ] );\n				}\n				return this;\n			}\n		} ),\n		props = animation.props;\n\n	propFilter( props, animation.opts.specialEasing );\n\n	for ( ; index < length ; index++ ) {\n		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n		if ( result ) {\n			if ( jQuery.isFunction( result.stop ) ) {\n				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n					jQuery.proxy( result.stop, result );\n			}\n			return result;\n		}\n	}\n\n	jQuery.map( props, createTween, animation );\n\n	if ( jQuery.isFunction( animation.opts.start ) ) {\n		animation.opts.start.call( elem, animation );\n	}\n\n	jQuery.fx.timer(\n		jQuery.extend( tick, {\n			elem: elem,\n			anim: animation,\n			queue: animation.opts.queue\n		} )\n	);\n\n	// attach callbacks from options\n	return animation.progress( animation.opts.progress )\n		.done( animation.opts.done, animation.opts.complete )\n		.fail( animation.opts.fail )\n		.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n	tweeners: {\n		"*": [ function( prop, value ) {\n			var tween = this.createTween( prop, value );\n			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n			return tween;\n		} ]\n	},\n\n	tweener: function( props, callback ) {\n		if ( jQuery.isFunction( props ) ) {\n			callback = props;\n			props = [ "*" ];\n		} else {\n			props = props.match( rnotwhite );\n		}\n\n		var prop,\n			index = 0,\n			length = props.length;\n\n		for ( ; index < length ; index++ ) {\n			prop = props[ index ];\n			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n			Animation.tweeners[ prop ].unshift( callback );\n		}\n	},\n\n	prefilters: [ defaultPrefilter ],\n\n	prefilter: function( callback, prepend ) {\n		if ( prepend ) {\n			Animation.prefilters.unshift( callback );\n		} else {\n			Animation.prefilters.push( callback );\n		}\n	}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {\n		complete: fn || !fn && easing ||\n			jQuery.isFunction( speed ) && speed,\n		duration: speed,\n		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n	};\n\n	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?\n		opt.duration : opt.duration in jQuery.fx.speeds ?\n			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n	// Normalize opt.queue - true/undefined/null -> "fx"\n	if ( opt.queue == null || opt.queue === true ) {\n		opt.queue = "fx";\n	}\n\n	// Queueing\n	opt.old = opt.complete;\n\n	opt.complete = function() {\n		if ( jQuery.isFunction( opt.old ) ) {\n			opt.old.call( this );\n		}\n\n		if ( opt.queue ) {\n			jQuery.dequeue( this, opt.queue );\n		}\n	};\n\n	return opt;\n};\n\njQuery.fn.extend( {\n	fadeTo: function( speed, to, easing, callback ) {\n\n		// Show any hidden elements after setting opacity to 0\n		return this.filter( isHidden ).css( "opacity", 0 ).show()\n\n			// Animate to the value specified\n			.end().animate( { opacity: to }, speed, easing, callback );\n	},\n	animate: function( prop, speed, easing, callback ) {\n		var empty = jQuery.isEmptyObject( prop ),\n			optall = jQuery.speed( speed, easing, callback ),\n			doAnimation = function() {\n\n				// Operate on a copy of prop so per-property easing won\'t be lost\n				var anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n				// Empty animations, or finishing resolves immediately\n				if ( empty || dataPriv.get( this, "finish" ) ) {\n					anim.stop( true );\n				}\n			};\n			doAnimation.finish = doAnimation;\n\n		return empty || optall.queue === false ?\n			this.each( doAnimation ) :\n			this.queue( optall.queue, doAnimation );\n	},\n	stop: function( type, clearQueue, gotoEnd ) {\n		var stopQueue = function( hooks ) {\n			var stop = hooks.stop;\n			delete hooks.stop;\n			stop( gotoEnd );\n		};\n\n		if ( typeof type !== "string" ) {\n			gotoEnd = clearQueue;\n			clearQueue = type;\n			type = undefined;\n		}\n		if ( clearQueue && type !== false ) {\n			this.queue( type || "fx", [] );\n		}\n\n		return this.each( function() {\n			var dequeue = true,\n				index = type != null && type + "queueHooks",\n				timers = jQuery.timers,\n				data = dataPriv.get( this );\n\n			if ( index ) {\n				if ( data[ index ] && data[ index ].stop ) {\n					stopQueue( data[ index ] );\n				}\n			} else {\n				for ( index in data ) {\n					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n						stopQueue( data[ index ] );\n					}\n				}\n			}\n\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this &&\n					( type == null || timers[ index ].queue === type ) ) {\n\n					timers[ index ].anim.stop( gotoEnd );\n					dequeue = false;\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Start the next in the queue if the last step wasn\'t forced.\n			// Timers currently will call their complete callbacks, which\n			// will dequeue but only if they were gotoEnd.\n			if ( dequeue || !gotoEnd ) {\n				jQuery.dequeue( this, type );\n			}\n		} );\n	},\n	finish: function( type ) {\n		if ( type !== false ) {\n			type = type || "fx";\n		}\n		return this.each( function() {\n			var index,\n				data = dataPriv.get( this ),\n				queue = data[ type + "queue" ],\n				hooks = data[ type + "queueHooks" ],\n				timers = jQuery.timers,\n				length = queue ? queue.length : 0;\n\n			// Enable finishing flag on private data\n			data.finish = true;\n\n			// Empty the queue first\n			jQuery.queue( this, type, [] );\n\n			if ( hooks && hooks.stop ) {\n				hooks.stop.call( this, true );\n			}\n\n			// Look for any active animations, and finish them\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n					timers[ index ].anim.stop( true );\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Look for any animations in the old queue and finish them\n			for ( index = 0; index < length; index++ ) {\n				if ( queue[ index ] && queue[ index ].finish ) {\n					queue[ index ].finish.call( this );\n				}\n			}\n\n			// Turn off finishing flag\n			delete data.finish;\n		} );\n	}\n} );\n\njQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {\n	var cssFn = jQuery.fn[ name ];\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return speed == null || typeof speed === "boolean" ?\n			cssFn.apply( this, arguments ) :\n			this.animate( genFx( name, true ), speed, easing, callback );\n	};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n	slideDown: genFx( "show" ),\n	slideUp: genFx( "hide" ),\n	slideToggle: genFx( "toggle" ),\n	fadeIn: { opacity: "show" },\n	fadeOut: { opacity: "hide" },\n	fadeToggle: { opacity: "toggle" }\n}, function( name, props ) {\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return this.animate( props, speed, easing, callback );\n	};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n	var timer,\n		i = 0,\n		timers = jQuery.timers;\n\n	fxNow = jQuery.now();\n\n	for ( ; i < timers.length; i++ ) {\n		timer = timers[ i ];\n\n		// Checks the timer has not already been removed\n		if ( !timer() && timers[ i ] === timer ) {\n			timers.splice( i--, 1 );\n		}\n	}\n\n	if ( !timers.length ) {\n		jQuery.fx.stop();\n	}\n	fxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n	jQuery.timers.push( timer );\n	if ( timer() ) {\n		jQuery.fx.start();\n	} else {\n		jQuery.timers.pop();\n	}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n	if ( !timerId ) {\n		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n	}\n};\n\njQuery.fx.stop = function() {\n	window.clearInterval( timerId );\n\n	timerId = null;\n};\n\njQuery.fx.speeds = {\n	slow: 600,\n	fast: 200,\n\n	// Default speed\n	_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n	type = type || "fx";\n\n	return this.queue( type, function( next, hooks ) {\n		var timeout = window.setTimeout( next, time );\n		hooks.stop = function() {\n			window.clearTimeout( timeout );\n		};\n	} );\n};\n\n\n( function() {\n	var input = document.createElement( "input" ),\n		select = document.createElement( "select" ),\n		opt = select.appendChild( document.createElement( "option" ) );\n\n	input.type = "checkbox";\n\n	// Support: iOS<=5.1, Android<=4.2+\n	// Default value for a checkbox should be "on"\n	support.checkOn = input.value !== "";\n\n	// Support: IE<=11+\n	// Must access selectedIndex to make default options select\n	support.optSelected = opt.selected;\n\n	// Support: Android<=2.3\n	// Options inside disabled selects are incorrectly marked as disabled\n	select.disabled = true;\n	support.optDisabled = !opt.disabled;\n\n	// Support: IE<=11+\n	// An input loses its value after becoming a radio\n	input = document.createElement( "input" );\n	input.value = "t";\n	input.type = "radio";\n	support.radioValue = input.value === "t";\n} )();\n\n\nvar boolHook,\n	attrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n	attr: function( name, value ) {\n		return access( this, jQuery.attr, name, value, arguments.length > 1 );\n	},\n\n	removeAttr: function( name ) {\n		return this.each( function() {\n			jQuery.removeAttr( this, name );\n		} );\n	}\n} );\n\njQuery.extend( {\n	attr: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don\'t get/set attributes on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		// Fallback to prop when attributes are not supported\n		if ( typeof elem.getAttribute === "undefined" ) {\n			return jQuery.prop( elem, name, value );\n		}\n\n		// All attributes are lowercase\n		// Grab necessary hook if one is defined\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n			name = name.toLowerCase();\n			hooks = jQuery.attrHooks[ name ] ||\n				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n		}\n\n		if ( value !== undefined ) {\n			if ( value === null ) {\n				jQuery.removeAttr( elem, name );\n				return;\n			}\n\n			if ( hooks && "set" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			elem.setAttribute( name, value + "" );\n			return value;\n		}\n\n		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		ret = jQuery.find.attr( elem, name );\n\n		// Non-existent attributes return null, we normalize to undefined\n		return ret == null ? undefined : ret;\n	},\n\n	attrHooks: {\n		type: {\n			set: function( elem, value ) {\n				if ( !support.radioValue && value === "radio" &&\n					jQuery.nodeName( elem, "input" ) ) {\n					var val = elem.value;\n					elem.setAttribute( "type", value );\n					if ( val ) {\n						elem.value = val;\n					}\n					return value;\n				}\n			}\n		}\n	},\n\n	removeAttr: function( elem, value ) {\n		var name, propName,\n			i = 0,\n			attrNames = value && value.match( rnotwhite );\n\n		if ( attrNames && elem.nodeType === 1 ) {\n			while ( ( name = attrNames[ i++ ] ) ) {\n				propName = jQuery.propFix[ name ] || name;\n\n				// Boolean attributes get special treatment (#10870)\n				if ( jQuery.expr.match.bool.test( name ) ) {\n\n					// Set corresponding property to false\n					elem[ propName ] = false;\n				}\n\n				elem.removeAttribute( name );\n			}\n		}\n	}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n	set: function( elem, value, name ) {\n		if ( value === false ) {\n\n			// Remove boolean attributes when set to false\n			jQuery.removeAttr( elem, name );\n		} else {\n			elem.setAttribute( name, name );\n		}\n		return name;\n	}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n	var getter = attrHandle[ name ] || jQuery.find.attr;\n\n	attrHandle[ name ] = function( elem, name, isXML ) {\n		var ret, handle;\n		if ( !isXML ) {\n\n			// Avoid an infinite loop by temporarily removing this function from the getter\n			handle = attrHandle[ name ];\n			attrHandle[ name ] = ret;\n			ret = getter( elem, name, isXML ) != null ?\n				name.toLowerCase() :\n				null;\n			attrHandle[ name ] = handle;\n		}\n		return ret;\n	};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n	rclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n	prop: function( name, value ) {\n		return access( this, jQuery.prop, name, value, arguments.length > 1 );\n	},\n\n	removeProp: function( name ) {\n		return this.each( function() {\n			delete this[ jQuery.propFix[ name ] || name ];\n		} );\n	}\n} );\n\njQuery.extend( {\n	prop: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don\'t get/set properties on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n			// Fix name and attach hooks\n			name = jQuery.propFix[ name ] || name;\n			hooks = jQuery.propHooks[ name ];\n		}\n\n		if ( value !== undefined ) {\n			if ( hooks && "set" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			return ( elem[ name ] = value );\n		}\n\n		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		return elem[ name ];\n	},\n\n	propHooks: {\n		tabIndex: {\n			get: function( elem ) {\n\n				// elem.tabIndex doesn\'t always return the\n				// correct value when it hasn\'t been explicitly set\n				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n				// Use proper attribute retrieval(#12072)\n				var tabindex = jQuery.find.attr( elem, "tabindex" );\n\n				return tabindex ?\n					parseInt( tabindex, 10 ) :\n					rfocusable.test( elem.nodeName ) ||\n						rclickable.test( elem.nodeName ) && elem.href ?\n							0 :\n							-1;\n			}\n		}\n	},\n\n	propFix: {\n		"for": "htmlFor",\n		"class": "className"\n	}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n	jQuery.propHooks.selected = {\n		get: function( elem ) {\n			var parent = elem.parentNode;\n			if ( parent && parent.parentNode ) {\n				parent.parentNode.selectedIndex;\n			}\n			return null;\n		},\n		set: function( elem ) {\n			var parent = elem.parentNode;\n			if ( parent ) {\n				parent.selectedIndex;\n\n				if ( parent.parentNode ) {\n					parent.parentNode.selectedIndex;\n				}\n			}\n		}\n	};\n}\n\njQuery.each( [\n	"tabIndex",\n	"readOnly",\n	"maxLength",\n	"cellSpacing",\n	"cellPadding",\n	"rowSpan",\n	"colSpan",\n	"useMap",\n	"frameBorder",\n	"contentEditable"\n], function() {\n	jQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n	return elem.getAttribute && elem.getAttribute( "class" ) || "";\n}\n\njQuery.fn.extend( {\n	addClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( typeof value === "string" && value ) {\n			classes = value.match( rnotwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n				cur = elem.nodeType === 1 &&\n					( " " + curValue + " " ).replace( rclass, " " );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {\n							cur += clazz + " ";\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = jQuery.trim( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( "class", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	removeClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( !arguments.length ) {\n			return this.attr( "class", "" );\n		}\n\n		if ( typeof value === "string" && value ) {\n			classes = value.match( rnotwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n\n				// This expression is here for better compressibility (see addClass)\n				cur = elem.nodeType === 1 &&\n					( " " + curValue + " " ).replace( rclass, " " );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n\n						// Remove *all* instances\n						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {\n							cur = cur.replace( " " + clazz + " ", " " );\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = jQuery.trim( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( "class", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	toggleClass: function( value, stateVal ) {\n		var type = typeof value;\n\n		if ( typeof stateVal === "boolean" && type === "string" ) {\n			return stateVal ? this.addClass( value ) : this.removeClass( value );\n		}\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).toggleClass(\n					value.call( this, i, getClass( this ), stateVal ),\n					stateVal\n				);\n			} );\n		}\n\n		return this.each( function() {\n			var className, i, self, classNames;\n\n			if ( type === "string" ) {\n\n				// Toggle individual class names\n				i = 0;\n				self = jQuery( this );\n				classNames = value.match( rnotwhite ) || [];\n\n				while ( ( className = classNames[ i++ ] ) ) {\n\n					// Check each className given, space separated list\n					if ( self.hasClass( className ) ) {\n						self.removeClass( className );\n					} else {\n						self.addClass( className );\n					}\n				}\n\n			// Toggle whole class name\n			} else if ( value === undefined || type === "boolean" ) {\n				className = getClass( this );\n				if ( className ) {\n\n					// Store className if set\n					dataPriv.set( this, "__className__", className );\n				}\n\n				// If the element has a class name or if we\'re passed `false`,\n				// then remove the whole classname (if there was one, the above saved it).\n				// Otherwise bring back whatever was previously saved (if anything),\n				// falling back to the empty string if nothing was stored.\n				if ( this.setAttribute ) {\n					this.setAttribute( "class",\n						className || value === false ?\n						"" :\n						dataPriv.get( this, "__className__" ) || ""\n					);\n				}\n			}\n		} );\n	},\n\n	hasClass: function( selector ) {\n		var className, elem,\n			i = 0;\n\n		className = " " + selector + " ";\n		while ( ( elem = this[ i++ ] ) ) {\n			if ( elem.nodeType === 1 &&\n				( " " + getClass( elem ) + " " ).replace( rclass, " " )\n					.indexOf( className ) > -1\n			) {\n				return true;\n			}\n		}\n\n		return false;\n	}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n	rspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n	val: function( value ) {\n		var hooks, ret, isFunction,\n			elem = this[ 0 ];\n\n		if ( !arguments.length ) {\n			if ( elem ) {\n				hooks = jQuery.valHooks[ elem.type ] ||\n					jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n				if ( hooks &&\n					"get" in hooks &&\n					( ret = hooks.get( elem, "value" ) ) !== undefined\n				) {\n					return ret;\n				}\n\n				ret = elem.value;\n\n				return typeof ret === "string" ?\n\n					// Handle most common string cases\n					ret.replace( rreturn, "" ) :\n\n					// Handle cases where value is null/undef or number\n					ret == null ? "" : ret;\n			}\n\n			return;\n		}\n\n		isFunction = jQuery.isFunction( value );\n\n		return this.each( function( i ) {\n			var val;\n\n			if ( this.nodeType !== 1 ) {\n				return;\n			}\n\n			if ( isFunction ) {\n				val = value.call( this, i, jQuery( this ).val() );\n			} else {\n				val = value;\n			}\n\n			// Treat null/undefined as ""; convert numbers to string\n			if ( val == null ) {\n				val = "";\n\n			} else if ( typeof val === "number" ) {\n				val += "";\n\n			} else if ( jQuery.isArray( val ) ) {\n				val = jQuery.map( val, function( value ) {\n					return value == null ? "" : value + "";\n				} );\n			}\n\n			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n			// If set returns undefined, fall back to normal setting\n			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {\n				this.value = val;\n			}\n		} );\n	}\n} );\n\njQuery.extend( {\n	valHooks: {\n		option: {\n			get: function( elem ) {\n\n				var val = jQuery.find.attr( elem, "value" );\n				return val != null ?\n					val :\n\n					// Support: IE10-11+\n					// option.text throws exceptions (#14686, #14858)\n					// Strip and collapse whitespace\n					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );\n			}\n		},\n		select: {\n			get: function( elem ) {\n				var value, option,\n					options = elem.options,\n					index = elem.selectedIndex,\n					one = elem.type === "select-one" || index < 0,\n					values = one ? null : [],\n					max = one ? index + 1 : options.length,\n					i = index < 0 ?\n						max :\n						one ? index : 0;\n\n				// Loop through all the selected options\n				for ( ; i < max; i++ ) {\n					option = options[ i ];\n\n					// IE8-9 doesn\'t update selected after form reset (#2551)\n					if ( ( option.selected || i === index ) &&\n\n							// Don\'t return options that are disabled or in a disabled optgroup\n							( support.optDisabled ?\n								!option.disabled : option.getAttribute( "disabled" ) === null ) &&\n							( !option.parentNode.disabled ||\n								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {\n\n						// Get the specific value for the option\n						value = jQuery( option ).val();\n\n						// We don\'t need an array for one selects\n						if ( one ) {\n							return value;\n						}\n\n						// Multi-Selects return an array\n						values.push( value );\n					}\n				}\n\n				return values;\n			},\n\n			set: function( elem, value ) {\n				var optionSet, option,\n					options = elem.options,\n					values = jQuery.makeArray( value ),\n					i = options.length;\n\n				while ( i-- ) {\n					option = options[ i ];\n					if ( option.selected =\n						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n					) {\n						optionSet = true;\n					}\n				}\n\n				// Force browsers to behave consistently when non-matching value is set\n				if ( !optionSet ) {\n					elem.selectedIndex = -1;\n				}\n				return values;\n			}\n		}\n	}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ "radio", "checkbox" ], function() {\n	jQuery.valHooks[ this ] = {\n		set: function( elem, value ) {\n			if ( jQuery.isArray( value ) ) {\n				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n			}\n		}\n	};\n	if ( !support.checkOn ) {\n		jQuery.valHooks[ this ].get = function( elem ) {\n			return elem.getAttribute( "value" ) === null ? "on" : elem.value;\n		};\n	}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n	trigger: function( event, data, elem, onlyHandlers ) {\n\n		var i, cur, tmp, bubbleType, ontype, handle, special,\n			eventPath = [ elem || document ],\n			type = hasOwn.call( event, "type" ) ? event.type : event,\n			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];\n\n		cur = tmp = elem = elem || document;\n\n		// Don\'t do events on text and comment nodes\n		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n			return;\n		}\n\n		// focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n			return;\n		}\n\n		if ( type.indexOf( "." ) > -1 ) {\n\n			// Namespaced trigger; create a regexp to match event type in handle()\n			namespaces = type.split( "." );\n			type = namespaces.shift();\n			namespaces.sort();\n		}\n		ontype = type.indexOf( ":" ) < 0 && "on" + type;\n\n		// Caller can pass in a jQuery.Event object, Object, or just an event type string\n		event = event[ jQuery.expando ] ?\n			event :\n			new jQuery.Event( type, typeof event === "object" && event );\n\n		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n		event.isTrigger = onlyHandlers ? 2 : 3;\n		event.namespace = namespaces.join( "." );\n		event.rnamespace = event.namespace ?\n			new RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" ) :\n			null;\n\n		// Clean up the event in case it is being reused\n		event.result = undefined;\n		if ( !event.target ) {\n			event.target = elem;\n		}\n\n		// Clone any incoming data and prepend the event, creating the handler arg list\n		data = data == null ?\n			[ event ] :\n			jQuery.makeArray( data, [ event ] );\n\n		// Allow special events to draw outside the lines\n		special = jQuery.event.special[ type ] || {};\n		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n			return;\n		}\n\n		// Determine event propagation path in advance, per W3C events spec (#9951)\n		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n			bubbleType = special.delegateType || type;\n			if ( !rfocusMorph.test( bubbleType + type ) ) {\n				cur = cur.parentNode;\n			}\n			for ( ; cur; cur = cur.parentNode ) {\n				eventPath.push( cur );\n				tmp = cur;\n			}\n\n			// Only add window if we got to document (e.g., not plain obj or detached DOM)\n			if ( tmp === ( elem.ownerDocument || document ) ) {\n				eventPath.push( tmp.defaultView || tmp.parentWindow || window );\n			}\n		}\n\n		// Fire handlers on the event path\n		i = 0;\n		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n			event.type = i > 1 ?\n				bubbleType :\n				special.bindType || type;\n\n			// jQuery handler\n			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&\n				dataPriv.get( cur, "handle" );\n			if ( handle ) {\n				handle.apply( cur, data );\n			}\n\n			// Native handler\n			handle = ontype && cur[ ontype ];\n			if ( handle && handle.apply && acceptData( cur ) ) {\n				event.result = handle.apply( cur, data );\n				if ( event.result === false ) {\n					event.preventDefault();\n				}\n			}\n		}\n		event.type = type;\n\n		// If nobody prevented the default action, do it now\n		if ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n			if ( ( !special._default ||\n				special._default.apply( eventPath.pop(), data ) === false ) &&\n				acceptData( elem ) ) {\n\n				// Call a native DOM method on the target with the same name name as the event.\n				// Don\'t do default actions on window, that\'s where global variables be (#6170)\n				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n					// Don\'t re-trigger an onFOO event when we call its FOO() method\n					tmp = elem[ ontype ];\n\n					if ( tmp ) {\n						elem[ ontype ] = null;\n					}\n\n					// Prevent re-triggering of the same event, since we already bubbled it above\n					jQuery.event.triggered = type;\n					elem[ type ]();\n					jQuery.event.triggered = undefined;\n\n					if ( tmp ) {\n						elem[ ontype ] = tmp;\n					}\n				}\n			}\n		}\n\n		return event.result;\n	},\n\n	// Piggyback on a donor event to simulate a different one\n	simulate: function( type, elem, event ) {\n		var e = jQuery.extend(\n			new jQuery.Event(),\n			event,\n			{\n				type: type,\n				isSimulated: true\n\n				// Previously, `originalEvent: {}` was set here, so stopPropagation call\n				// would not be triggered on donor event, since in our own\n				// jQuery.event.stopPropagation function we had a check for existence of\n				// originalEvent.stopPropagation method, so, consequently it would be a noop.\n				//\n				// But now, this "simulate" function is used only for events\n				// for which stopPropagation() is noop, so there is no need for that anymore.\n				//\n				// For the 1.x branch though, guard for "click" and "submit"\n				// events is still used, but was moved to jQuery.event.stopPropagation function\n				// because `originalEvent` should point to the original event for the constancy\n				// with other events and for more focused logic\n			}\n		);\n\n		jQuery.event.trigger( e, null, elem );\n\n		if ( e.isDefaultPrevented() ) {\n			event.preventDefault();\n		}\n	}\n\n} );\n\njQuery.fn.extend( {\n\n	trigger: function( type, data ) {\n		return this.each( function() {\n			jQuery.event.trigger( type, data, this );\n		} );\n	},\n	triggerHandler: function( type, data ) {\n		var elem = this[ 0 ];\n		if ( elem ) {\n			return jQuery.event.trigger( type, data, elem, true );\n		}\n	}\n} );\n\n\njQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +\n	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +\n	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),\n	function( i, name ) {\n\n	// Handle event binding\n	jQuery.fn[ name ] = function( data, fn ) {\n		return arguments.length > 0 ?\n			this.on( name, null, data, fn ) :\n			this.trigger( name );\n	};\n} );\n\njQuery.fn.extend( {\n	hover: function( fnOver, fnOut ) {\n		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n	}\n} );\n\n\n\n\nsupport.focusin = "onfocusin" in window;\n\n\n// Support: Firefox\n// Firefox doesn\'t have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {\n\n		// Attach a single capturing handler on the document while someone wants focusin/focusout\n		var handler = function( event ) {\n			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n		};\n\n		jQuery.event.special[ fix ] = {\n			setup: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix );\n\n				if ( !attaches ) {\n					doc.addEventListener( orig, handler, true );\n				}\n				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n			},\n			teardown: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix ) - 1;\n\n				if ( !attaches ) {\n					doc.removeEventListener( orig, handler, true );\n					dataPriv.remove( doc, fix );\n\n				} else {\n					dataPriv.access( doc, fix, attaches );\n				}\n			}\n		};\n	} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n	return JSON.parse( data + "" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n	var xml;\n	if ( !data || typeof data !== "string" ) {\n		return null;\n	}\n\n	// Support: IE9\n	try {\n		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );\n	} catch ( e ) {\n		xml = undefined;\n	}\n\n	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {\n		jQuery.error( "Invalid XML: " + data );\n	}\n	return xml;\n};\n\n\nvar\n	rhash = /#.*$/,\n	rts = /([?&])_=[^&]*/,\n	rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n	// #7653, #8125, #8152: local protocol detection\n	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n	rnoContent = /^(?:GET|HEAD)$/,\n	rprotocol = /^\\/\\//,\n\n	/* Prefilters\n	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n	 * 2) These are called:\n	 *    - BEFORE asking for a transport\n	 *    - AFTER param serialization (s.data is a string if s.processData is true)\n	 * 3) key is the dataType\n	 * 4) the catchall symbol "*" can be used\n	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n	 */\n	prefilters = {},\n\n	/* Transports bindings\n	 * 1) key is the dataType\n	 * 2) the catchall symbol "*" can be used\n	 * 3) selection will start with transport dataType and THEN go to "*" if needed\n	 */\n	transports = {},\n\n	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n	allTypes = "*/".concat( "*" ),\n\n	// Anchor tag for parsing the document origin\n	originAnchor = document.createElement( "a" );\n	originAnchor.href = location.href;\n\n// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n	// dataTypeExpression is optional and defaults to "*"\n	return function( dataTypeExpression, func ) {\n\n		if ( typeof dataTypeExpression !== "string" ) {\n			func = dataTypeExpression;\n			dataTypeExpression = "*";\n		}\n\n		var dataType,\n			i = 0,\n			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n		if ( jQuery.isFunction( func ) ) {\n\n			// For each dataType in the dataTypeExpression\n			while ( ( dataType = dataTypes[ i++ ] ) ) {\n\n				// Prepend if requested\n				if ( dataType[ 0 ] === "+" ) {\n					dataType = dataType.slice( 1 ) || "*";\n					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n				// Otherwise append\n				} else {\n					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n				}\n			}\n		}\n	};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n	var inspected = {},\n		seekingTransport = ( structure === transports );\n\n	function inspect( dataType ) {\n		var selected;\n		inspected[ dataType ] = true;\n		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n			if ( typeof dataTypeOrTransport === "string" &&\n				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n				options.dataTypes.unshift( dataTypeOrTransport );\n				inspect( dataTypeOrTransport );\n				return false;\n			} else if ( seekingTransport ) {\n				return !( selected = dataTypeOrTransport );\n			}\n		} );\n		return selected;\n	}\n\n	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );\n}\n\n// A special extend for ajax options\n// that takes "flat" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n	var key, deep,\n		flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n	for ( key in src ) {\n		if ( src[ key ] !== undefined ) {\n			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n		}\n	}\n	if ( deep ) {\n		jQuery.extend( true, target, deep );\n	}\n\n	return target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n	var ct, type, finalDataType, firstDataType,\n		contents = s.contents,\n		dataTypes = s.dataTypes;\n\n	// Remove auto dataType and get content-type in the process\n	while ( dataTypes[ 0 ] === "*" ) {\n		dataTypes.shift();\n		if ( ct === undefined ) {\n			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );\n		}\n	}\n\n	// Check if we\'re dealing with a known content-type\n	if ( ct ) {\n		for ( type in contents ) {\n			if ( contents[ type ] && contents[ type ].test( ct ) ) {\n				dataTypes.unshift( type );\n				break;\n			}\n		}\n	}\n\n	// Check to see if we have a response for the expected dataType\n	if ( dataTypes[ 0 ] in responses ) {\n		finalDataType = dataTypes[ 0 ];\n	} else {\n\n		// Try convertible dataTypes\n		for ( type in responses ) {\n			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {\n				finalDataType = type;\n				break;\n			}\n			if ( !firstDataType ) {\n				firstDataType = type;\n			}\n		}\n\n		// Or just use first one\n		finalDataType = finalDataType || firstDataType;\n	}\n\n	// If we found a dataType\n	// We add the dataType to the list if needed\n	// and return the corresponding response\n	if ( finalDataType ) {\n		if ( finalDataType !== dataTypes[ 0 ] ) {\n			dataTypes.unshift( finalDataType );\n		}\n		return responses[ finalDataType ];\n	}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n	var conv2, current, conv, tmp, prev,\n		converters = {},\n\n		// Work with a copy of dataTypes in case we need to modify it for conversion\n		dataTypes = s.dataTypes.slice();\n\n	// Create converters map with lowercased keys\n	if ( dataTypes[ 1 ] ) {\n		for ( conv in s.converters ) {\n			converters[ conv.toLowerCase() ] = s.converters[ conv ];\n		}\n	}\n\n	current = dataTypes.shift();\n\n	// Convert to each sequential dataType\n	while ( current ) {\n\n		if ( s.responseFields[ current ] ) {\n			jqXHR[ s.responseFields[ current ] ] = response;\n		}\n\n		// Apply the dataFilter if provided\n		if ( !prev && isSuccess && s.dataFilter ) {\n			response = s.dataFilter( response, s.dataType );\n		}\n\n		prev = current;\n		current = dataTypes.shift();\n\n		if ( current ) {\n\n		// There\'s only work to do if current dataType is non-auto\n			if ( current === "*" ) {\n\n				current = prev;\n\n			// Convert response if prev dataType is non-auto and differs from current\n			} else if ( prev !== "*" && prev !== current ) {\n\n				// Seek a direct converter\n				conv = converters[ prev + " " + current ] || converters[ "* " + current ];\n\n				// If none found, seek a pair\n				if ( !conv ) {\n					for ( conv2 in converters ) {\n\n						// If conv2 outputs current\n						tmp = conv2.split( " " );\n						if ( tmp[ 1 ] === current ) {\n\n							// If prev can be converted to accepted input\n							conv = converters[ prev + " " + tmp[ 0 ] ] ||\n								converters[ "* " + tmp[ 0 ] ];\n							if ( conv ) {\n\n								// Condense equivalence converters\n								if ( conv === true ) {\n									conv = converters[ conv2 ];\n\n								// Otherwise, insert the intermediate dataType\n								} else if ( converters[ conv2 ] !== true ) {\n									current = tmp[ 0 ];\n									dataTypes.unshift( tmp[ 1 ] );\n								}\n								break;\n							}\n						}\n					}\n				}\n\n				// Apply converter (if not an equivalence)\n				if ( conv !== true ) {\n\n					// Unless errors are allowed to bubble, catch and return them\n					if ( conv && s.throws ) {\n						response = conv( response );\n					} else {\n						try {\n							response = conv( response );\n						} catch ( e ) {\n							return {\n								state: "parsererror",\n								error: conv ? e : "No conversion from " + prev + " to " + current\n							};\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return { state: "success", data: response };\n}\n\njQuery.extend( {\n\n	// Counter for holding the number of active queries\n	active: 0,\n\n	// Last-Modified header cache for next request\n	lastModified: {},\n	etag: {},\n\n	ajaxSettings: {\n		url: location.href,\n		type: "GET",\n		isLocal: rlocalProtocol.test( location.protocol ),\n		global: true,\n		processData: true,\n		async: true,\n		contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n		/*\n		timeout: 0,\n		data: null,\n		dataType: null,\n		username: null,\n		password: null,\n		cache: null,\n		throws: false,\n		traditional: false,\n		headers: {},\n		*/\n\n		accepts: {\n			"*": allTypes,\n			text: "text/plain",\n			html: "text/html",\n			xml: "application/xml, text/xml",\n			json: "application/json, text/javascript"\n		},\n\n		contents: {\n			xml: /\\bxml\\b/,\n			html: /\\bhtml/,\n			json: /\\bjson\\b/\n		},\n\n		responseFields: {\n			xml: "responseXML",\n			text: "responseText",\n			json: "responseJSON"\n		},\n\n		// Data converters\n		// Keys separate source (or catchall "*") and destination types with a single space\n		converters: {\n\n			// Convert anything to text\n			"* text": String,\n\n			// Text to html (true = no transformation)\n			"text html": true,\n\n			// Evaluate text as a json expression\n			"text json": jQuery.parseJSON,\n\n			// Parse text as xml\n			"text xml": jQuery.parseXML\n		},\n\n		// For options that shouldn\'t be deep extended:\n		// you can add your own custom options here if\n		// and when you create one that shouldn\'t be\n		// deep extended (see ajaxExtend)\n		flatOptions: {\n			url: true,\n			context: true\n		}\n	},\n\n	// Creates a full fledged settings object into target\n	// with both ajaxSettings and settings fields.\n	// If target is omitted, writes into ajaxSettings.\n	ajaxSetup: function( target, settings ) {\n		return settings ?\n\n			// Building a settings object\n			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n			// Extending ajaxSettings\n			ajaxExtend( jQuery.ajaxSettings, target );\n	},\n\n	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n	ajaxTransport: addToPrefiltersOrTransports( transports ),\n\n	// Main method\n	ajax: function( url, options ) {\n\n		// If url is an object, simulate pre-1.5 signature\n		if ( typeof url === "object" ) {\n			options = url;\n			url = undefined;\n		}\n\n		// Force options to be an object\n		options = options || {};\n\n		var transport,\n\n			// URL without anti-cache param\n			cacheURL,\n\n			// Response headers\n			responseHeadersString,\n			responseHeaders,\n\n			// timeout handle\n			timeoutTimer,\n\n			// Url cleanup var\n			urlAnchor,\n\n			// To know if global events are to be dispatched\n			fireGlobals,\n\n			// Loop variable\n			i,\n\n			// Create the final options object\n			s = jQuery.ajaxSetup( {}, options ),\n\n			// Callbacks context\n			callbackContext = s.context || s,\n\n			// Context for global events is callbackContext if it is a DOM node or jQuery collection\n			globalEventContext = s.context &&\n				( callbackContext.nodeType || callbackContext.jquery ) ?\n					jQuery( callbackContext ) :\n					jQuery.event,\n\n			// Deferreds\n			deferred = jQuery.Deferred(),\n			completeDeferred = jQuery.Callbacks( "once memory" ),\n\n			// Status-dependent callbacks\n			statusCode = s.statusCode || {},\n\n			// Headers (they are sent all at once)\n			requestHeaders = {},\n			requestHeadersNames = {},\n\n			// The jqXHR state\n			state = 0,\n\n			// Default abort message\n			strAbort = "canceled",\n\n			// Fake xhr\n			jqXHR = {\n				readyState: 0,\n\n				// Builds headers hashtable if needed\n				getResponseHeader: function( key ) {\n					var match;\n					if ( state === 2 ) {\n						if ( !responseHeaders ) {\n							responseHeaders = {};\n							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n							}\n						}\n						match = responseHeaders[ key.toLowerCase() ];\n					}\n					return match == null ? null : match;\n				},\n\n				// Raw string\n				getAllResponseHeaders: function() {\n					return state === 2 ? responseHeadersString : null;\n				},\n\n				// Caches the header\n				setRequestHeader: function( name, value ) {\n					var lname = name.toLowerCase();\n					if ( !state ) {\n						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n						requestHeaders[ name ] = value;\n					}\n					return this;\n				},\n\n				// Overrides response content-type header\n				overrideMimeType: function( type ) {\n					if ( !state ) {\n						s.mimeType = type;\n					}\n					return this;\n				},\n\n				// Status-dependent callbacks\n				statusCode: function( map ) {\n					var code;\n					if ( map ) {\n						if ( state < 2 ) {\n							for ( code in map ) {\n\n								// Lazy-add the new callback in a way that preserves old ones\n								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n							}\n						} else {\n\n							// Execute the appropriate callbacks\n							jqXHR.always( map[ jqXHR.status ] );\n						}\n					}\n					return this;\n				},\n\n				// Cancel the request\n				abort: function( statusText ) {\n					var finalText = statusText || strAbort;\n					if ( transport ) {\n						transport.abort( finalText );\n					}\n					done( 0, finalText );\n					return this;\n				}\n			};\n\n		// Attach deferreds\n		deferred.promise( jqXHR ).complete = completeDeferred.add;\n		jqXHR.success = jqXHR.done;\n		jqXHR.error = jqXHR.fail;\n\n		// Remove hash character (#7531: and string promotion)\n		// Add protocol if not provided (prefilters might expect it)\n		// Handle falsy url in the settings object (#10093: consistency with old signature)\n		// We also use the url parameter if available\n		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )\n			.replace( rprotocol, location.protocol + "//" );\n\n		// Alias method option to type as per ticket #12004\n		s.type = options.method || options.type || s.method || s.type;\n\n		// Extract dataTypes list\n		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];\n\n		// A cross-domain request is in order when the origin doesn\'t match the current origin.\n		if ( s.crossDomain == null ) {\n			urlAnchor = document.createElement( "a" );\n\n			// Support: IE8-11+\n			// IE throws exception if url is malformed, e.g. http://example.com:80x/\n			try {\n				urlAnchor.href = s.url;\n\n				// Support: IE8-11+\n				// Anchor\'s host property isn\'t correctly set when s.url is relative\n				urlAnchor.href = urlAnchor.href;\n				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==\n					urlAnchor.protocol + "//" + urlAnchor.host;\n			} catch ( e ) {\n\n				// If there is an error parsing the URL, assume it is crossDomain,\n				// it can be rejected by the transport if it is invalid\n				s.crossDomain = true;\n			}\n		}\n\n		// Convert data if not already a string\n		if ( s.data && s.processData && typeof s.data !== "string" ) {\n			s.data = jQuery.param( s.data, s.traditional );\n		}\n\n		// Apply prefilters\n		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n		// If request was aborted inside a prefilter, stop there\n		if ( state === 2 ) {\n			return jqXHR;\n		}\n\n		// We can fire global events as of now if asked to\n		// Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n		fireGlobals = jQuery.event && s.global;\n\n		// Watch for a new set of requests\n		if ( fireGlobals && jQuery.active++ === 0 ) {\n			jQuery.event.trigger( "ajaxStart" );\n		}\n\n		// Uppercase the type\n		s.type = s.type.toUpperCase();\n\n		// Determine if request has content\n		s.hasContent = !rnoContent.test( s.type );\n\n		// Save the URL in case we\'re toying with the If-Modified-Since\n		// and/or If-None-Match header later on\n		cacheURL = s.url;\n\n		// More options handling for requests with no content\n		if ( !s.hasContent ) {\n\n			// If data is available, append data to url\n			if ( s.data ) {\n				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );\n\n				// #9682: remove data so that it\'s not used in an eventual retry\n				delete s.data;\n			}\n\n			// Add anti-cache in url if needed\n			if ( s.cache === false ) {\n				s.url = rts.test( cacheURL ) ?\n\n					// If there is already a \'_\' parameter, set its value\n					cacheURL.replace( rts, "$1_=" + nonce++ ) :\n\n					// Otherwise add one to the end\n					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;\n			}\n		}\n\n		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n		if ( s.ifModified ) {\n			if ( jQuery.lastModified[ cacheURL ] ) {\n				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );\n			}\n			if ( jQuery.etag[ cacheURL ] ) {\n				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );\n			}\n		}\n\n		// Set the correct header, if data is being sent\n		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n			jqXHR.setRequestHeader( "Content-Type", s.contentType );\n		}\n\n		// Set the Accepts header for the server, depending on the dataType\n		jqXHR.setRequestHeader(\n			"Accept",\n			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n				s.accepts[ s.dataTypes[ 0 ] ] +\n					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :\n				s.accepts[ "*" ]\n		);\n\n		// Check for headers option\n		for ( i in s.headers ) {\n			jqXHR.setRequestHeader( i, s.headers[ i ] );\n		}\n\n		// Allow custom headers/mimetypes and early abort\n		if ( s.beforeSend &&\n			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n			// Abort if not done already and return\n			return jqXHR.abort();\n		}\n\n		// Aborting is no longer a cancellation\n		strAbort = "abort";\n\n		// Install callbacks on deferreds\n		for ( i in { success: 1, error: 1, complete: 1 } ) {\n			jqXHR[ i ]( s[ i ] );\n		}\n\n		// Get transport\n		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n		// If no transport, we auto-abort\n		if ( !transport ) {\n			done( -1, "No Transport" );\n		} else {\n			jqXHR.readyState = 1;\n\n			// Send global event\n			if ( fireGlobals ) {\n				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );\n			}\n\n			// If request was aborted inside ajaxSend, stop there\n			if ( state === 2 ) {\n				return jqXHR;\n			}\n\n			// Timeout\n			if ( s.async && s.timeout > 0 ) {\n				timeoutTimer = window.setTimeout( function() {\n					jqXHR.abort( "timeout" );\n				}, s.timeout );\n			}\n\n			try {\n				state = 1;\n				transport.send( requestHeaders, done );\n			} catch ( e ) {\n\n				// Propagate exception as error if not done\n				if ( state < 2 ) {\n					done( -1, e );\n\n				// Simply rethrow otherwise\n				} else {\n					throw e;\n				}\n			}\n		}\n\n		// Callback for when everything is done\n		function done( status, nativeStatusText, responses, headers ) {\n			var isSuccess, success, error, response, modified,\n				statusText = nativeStatusText;\n\n			// Called once\n			if ( state === 2 ) {\n				return;\n			}\n\n			// State is "done" now\n			state = 2;\n\n			// Clear timeout if it exists\n			if ( timeoutTimer ) {\n				window.clearTimeout( timeoutTimer );\n			}\n\n			// Dereference transport for early garbage collection\n			// (no matter how long the jqXHR object will be used)\n			transport = undefined;\n\n			// Cache response headers\n			responseHeadersString = headers || "";\n\n			// Set readyState\n			jqXHR.readyState = status > 0 ? 4 : 0;\n\n			// Determine if successful\n			isSuccess = status >= 200 && status < 300 || status === 304;\n\n			// Get response data\n			if ( responses ) {\n				response = ajaxHandleResponses( s, jqXHR, responses );\n			}\n\n			// Convert no matter what (that way responseXXX fields are always set)\n			response = ajaxConvert( s, response, jqXHR, isSuccess );\n\n			// If successful, handle type chaining\n			if ( isSuccess ) {\n\n				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n				if ( s.ifModified ) {\n					modified = jqXHR.getResponseHeader( "Last-Modified" );\n					if ( modified ) {\n						jQuery.lastModified[ cacheURL ] = modified;\n					}\n					modified = jqXHR.getResponseHeader( "etag" );\n					if ( modified ) {\n						jQuery.etag[ cacheURL ] = modified;\n					}\n				}\n\n				// if no content\n				if ( status === 204 || s.type === "HEAD" ) {\n					statusText = "nocontent";\n\n				// if not modified\n				} else if ( status === 304 ) {\n					statusText = "notmodified";\n\n				// If we have data, let\'s convert it\n				} else {\n					statusText = response.state;\n					success = response.data;\n					error = response.error;\n					isSuccess = !error;\n				}\n			} else {\n\n				// Extract error from statusText and normalize for non-aborts\n				error = statusText;\n				if ( status || !statusText ) {\n					statusText = "error";\n					if ( status < 0 ) {\n						status = 0;\n					}\n				}\n			}\n\n			// Set data for the fake xhr object\n			jqXHR.status = status;\n			jqXHR.statusText = ( nativeStatusText || statusText ) + "";\n\n			// Success/Error\n			if ( isSuccess ) {\n				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n			} else {\n				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n			}\n\n			// Status-dependent callbacks\n			jqXHR.statusCode( statusCode );\n			statusCode = undefined;\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",\n					[ jqXHR, s, isSuccess ? success : error ] );\n			}\n\n			// Complete\n			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );\n\n				// Handle the global AJAX counter\n				if ( !( --jQuery.active ) ) {\n					jQuery.event.trigger( "ajaxStop" );\n				}\n			}\n		}\n\n		return jqXHR;\n	},\n\n	getJSON: function( url, data, callback ) {\n		return jQuery.get( url, data, callback, "json" );\n	},\n\n	getScript: function( url, callback ) {\n		return jQuery.get( url, undefined, callback, "script" );\n	}\n} );\n\njQuery.each( [ "get", "post" ], function( i, method ) {\n	jQuery[ method ] = function( url, data, callback, type ) {\n\n		// Shift arguments if data argument was omitted\n		if ( jQuery.isFunction( data ) ) {\n			type = type || callback;\n			callback = data;\n			data = undefined;\n		}\n\n		// The url can be an options object (which then must have .url)\n		return jQuery.ajax( jQuery.extend( {\n			url: url,\n			type: method,\n			dataType: type,\n			data: data,\n			success: callback\n		}, jQuery.isPlainObject( url ) && url ) );\n	};\n} );\n\n\njQuery._evalUrl = function( url ) {\n	return jQuery.ajax( {\n		url: url,\n\n		// Make this explicit, since user can override this through ajaxSetup (#11264)\n		type: "GET",\n		dataType: "script",\n		async: false,\n		global: false,\n		"throws": true\n	} );\n};\n\n\njQuery.fn.extend( {\n	wrapAll: function( html ) {\n		var wrap;\n\n		if ( jQuery.isFunction( html ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).wrapAll( html.call( this, i ) );\n			} );\n		}\n\n		if ( this[ 0 ] ) {\n\n			// The elements to wrap the target around\n			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n			if ( this[ 0 ].parentNode ) {\n				wrap.insertBefore( this[ 0 ] );\n			}\n\n			wrap.map( function() {\n				var elem = this;\n\n				while ( elem.firstElementChild ) {\n					elem = elem.firstElementChild;\n				}\n\n				return elem;\n			} ).append( this );\n		}\n\n		return this;\n	},\n\n	wrapInner: function( html ) {\n		if ( jQuery.isFunction( html ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).wrapInner( html.call( this, i ) );\n			} );\n		}\n\n		return this.each( function() {\n			var self = jQuery( this ),\n				contents = self.contents();\n\n			if ( contents.length ) {\n				contents.wrapAll( html );\n\n			} else {\n				self.append( html );\n			}\n		} );\n	},\n\n	wrap: function( html ) {\n		var isFunction = jQuery.isFunction( html );\n\n		return this.each( function( i ) {\n			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n		} );\n	},\n\n	unwrap: function() {\n		return this.parent().each( function() {\n			if ( !jQuery.nodeName( this, "body" ) ) {\n				jQuery( this ).replaceWith( this.childNodes );\n			}\n		} ).end();\n	}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n	return !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n	// Support: Opera <= 12.12\n	// Opera reports offsetWidths and offsetHeights less than zero on some elements\n	// Use OR instead of AND as the element is not visible if either is true\n	// See tickets #10406 and #13132\n	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n	rbracket = /\\[\\]$/,\n	rCRLF = /\\r?\\n/g,\n	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n	rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n	var name;\n\n	if ( jQuery.isArray( obj ) ) {\n\n		// Serialize array item.\n		jQuery.each( obj, function( i, v ) {\n			if ( traditional || rbracket.test( prefix ) ) {\n\n				// Treat each array item as a scalar.\n				add( prefix, v );\n\n			} else {\n\n				// Item is non-scalar (array or object), encode its numeric index.\n				buildParams(\n					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",\n					v,\n					traditional,\n					add\n				);\n			}\n		} );\n\n	} else if ( !traditional && jQuery.type( obj ) === "object" ) {\n\n		// Serialize object item.\n		for ( name in obj ) {\n			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );\n		}\n\n	} else {\n\n		// Serialize scalar item.\n		add( prefix, obj );\n	}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n	var prefix,\n		s = [],\n		add = function( key, value ) {\n\n			// If value is a function, invoke it and return its value\n			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );\n			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );\n		};\n\n	// Set traditional to true for jQuery <= 1.3.2 behavior.\n	if ( traditional === undefined ) {\n		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n	}\n\n	// If an array was passed in, assume that it is an array of form elements.\n	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n		// Serialize the form elements\n		jQuery.each( a, function() {\n			add( this.name, this.value );\n		} );\n\n	} else {\n\n		// If traditional, encode the "old" way (the way 1.3.2 or older\n		// did it), otherwise encode params recursively.\n		for ( prefix in a ) {\n			buildParams( prefix, a[ prefix ], traditional, add );\n		}\n	}\n\n	// Return the resulting serialization\n	return s.join( "&" ).replace( r20, "+" );\n};\n\njQuery.fn.extend( {\n	serialize: function() {\n		return jQuery.param( this.serializeArray() );\n	},\n	serializeArray: function() {\n		return this.map( function() {\n\n			// Can add propHook for "elements" to filter or add form elements\n			var elements = jQuery.prop( this, "elements" );\n			return elements ? jQuery.makeArray( elements ) : this;\n		} )\n		.filter( function() {\n			var type = this.type;\n\n			// Use .is( ":disabled" ) so that fieldset[disabled] works\n			return this.name && !jQuery( this ).is( ":disabled" ) &&\n				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n				( this.checked || !rcheckableType.test( type ) );\n		} )\n		.map( function( i, elem ) {\n			var val = jQuery( this ).val();\n\n			return val == null ?\n				null :\n				jQuery.isArray( val ) ?\n					jQuery.map( val, function( val ) {\n						return { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n					} ) :\n					{ name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n		} ).get();\n	}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n	try {\n		return new window.XMLHttpRequest();\n	} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n		// File protocol always yields status code 0, assume 200\n		0: 200,\n\n		// Support: IE9\n		// #1450: sometimes IE returns 1223 when it should be 204\n		1223: 204\n	},\n	xhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n	var callback, errorCallback;\n\n	// Cross domain only allowed if supported through XMLHttpRequest\n	if ( support.cors || xhrSupported && !options.crossDomain ) {\n		return {\n			send: function( headers, complete ) {\n				var i,\n					xhr = options.xhr();\n\n				xhr.open(\n					options.type,\n					options.url,\n					options.async,\n					options.username,\n					options.password\n				);\n\n				// Apply custom fields if provided\n				if ( options.xhrFields ) {\n					for ( i in options.xhrFields ) {\n						xhr[ i ] = options.xhrFields[ i ];\n					}\n				}\n\n				// Override mime type if needed\n				if ( options.mimeType && xhr.overrideMimeType ) {\n					xhr.overrideMimeType( options.mimeType );\n				}\n\n				// X-Requested-With header\n				// For cross-domain requests, seeing as conditions for a preflight are\n				// akin to a jigsaw puzzle, we simply never set it to be sure.\n				// (it can always be set on a per-request basis or even using ajaxSetup)\n				// For same-domain requests, won\'t change header if already provided.\n				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {\n					headers[ "X-Requested-With" ] = "XMLHttpRequest";\n				}\n\n				// Set headers\n				for ( i in headers ) {\n					xhr.setRequestHeader( i, headers[ i ] );\n				}\n\n				// Callback\n				callback = function( type ) {\n					return function() {\n						if ( callback ) {\n							callback = errorCallback = xhr.onload =\n								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n							if ( type === "abort" ) {\n								xhr.abort();\n							} else if ( type === "error" ) {\n\n								// Support: IE9\n								// On a manual native abort, IE9 throws\n								// errors on any property access that is not readyState\n								if ( typeof xhr.status !== "number" ) {\n									complete( 0, "error" );\n								} else {\n									complete(\n\n										// File: protocol always yields status 0; see #8605, #14207\n										xhr.status,\n										xhr.statusText\n									);\n								}\n							} else {\n								complete(\n									xhrSuccessStatus[ xhr.status ] || xhr.status,\n									xhr.statusText,\n\n									// Support: IE9 only\n									// IE9 has no XHR2 but throws on binary (trac-11426)\n									// For XHR2 non-text, let the caller handle it (gh-2498)\n									( xhr.responseType || "text" ) !== "text"  ||\n									typeof xhr.responseText !== "string" ?\n										{ binary: xhr.response } :\n										{ text: xhr.responseText },\n									xhr.getAllResponseHeaders()\n								);\n							}\n						}\n					};\n				};\n\n				// Listen to events\n				xhr.onload = callback();\n				errorCallback = xhr.onerror = callback( "error" );\n\n				// Support: IE9\n				// Use onreadystatechange to replace onabort\n				// to handle uncaught aborts\n				if ( xhr.onabort !== undefined ) {\n					xhr.onabort = errorCallback;\n				} else {\n					xhr.onreadystatechange = function() {\n\n						// Check readyState before timeout as it changes\n						if ( xhr.readyState === 4 ) {\n\n							// Allow onerror to be called first,\n							// but that will not handle a native abort\n							// Also, save errorCallback to a variable\n							// as xhr.onerror cannot be accessed\n							window.setTimeout( function() {\n								if ( callback ) {\n									errorCallback();\n								}\n							} );\n						}\n					};\n				}\n\n				// Create the abort callback\n				callback = callback( "abort" );\n\n				try {\n\n					// Do send the request (this may raise an exception)\n					xhr.send( options.hasContent && options.data || null );\n				} catch ( e ) {\n\n					// #14683: Only rethrow if this hasn\'t been notified as an error yet\n					if ( callback ) {\n						throw e;\n					}\n				}\n			},\n\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n	accepts: {\n		script: "text/javascript, application/javascript, " +\n			"application/ecmascript, application/x-ecmascript"\n	},\n	contents: {\n		script: /\\b(?:java|ecma)script\\b/\n	},\n	converters: {\n		"text script": function( text ) {\n			jQuery.globalEval( text );\n			return text;\n		}\n	}\n} );\n\n// Handle cache\'s special case and crossDomain\njQuery.ajaxPrefilter( "script", function( s ) {\n	if ( s.cache === undefined ) {\n		s.cache = false;\n	}\n	if ( s.crossDomain ) {\n		s.type = "GET";\n	}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( "script", function( s ) {\n\n	// This transport only deals with cross domain requests\n	if ( s.crossDomain ) {\n		var script, callback;\n		return {\n			send: function( _, complete ) {\n				script = jQuery( "<script>" ).prop( {\n					charset: s.scriptCharset,\n					src: s.url\n				} ).on(\n					"load error",\n					callback = function( evt ) {\n						script.remove();\n						callback = null;\n						if ( evt ) {\n							complete( evt.type === "error" ? 404 : 200, evt.type );\n						}\n					}\n				);\n\n				// Use native DOM manipulation to avoid our domManip AJAX trickery\n				document.head.appendChild( script[ 0 ] );\n			},\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\nvar oldCallbacks = [],\n	rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n	jsonp: "callback",\n	jsonpCallback: function() {\n		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );\n		this[ callback ] = true;\n		return callback;\n	}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {\n\n	var callbackName, overwritten, responseContainer,\n		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n			"url" :\n			typeof s.data === "string" &&\n				( s.contentType || "" )\n					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&\n				rjsonp.test( s.data ) && "data"\n		);\n\n	// Handle iff the expected data type is "jsonp" or we have a parameter to set\n	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {\n\n		// Get callback name, remembering preexisting value associated with it\n		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n			s.jsonpCallback() :\n			s.jsonpCallback;\n\n		// Insert callback into url or form data\n		if ( jsonProp ) {\n			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );\n		} else if ( s.jsonp !== false ) {\n			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;\n		}\n\n		// Use data converter to retrieve json after script execution\n		s.converters[ "script json" ] = function() {\n			if ( !responseContainer ) {\n				jQuery.error( callbackName + " was not called" );\n			}\n			return responseContainer[ 0 ];\n		};\n\n		// Force json dataType\n		s.dataTypes[ 0 ] = "json";\n\n		// Install callback\n		overwritten = window[ callbackName ];\n		window[ callbackName ] = function() {\n			responseContainer = arguments;\n		};\n\n		// Clean-up function (fires after converters)\n		jqXHR.always( function() {\n\n			// If previous value didn\'t exist - remove it\n			if ( overwritten === undefined ) {\n				jQuery( window ).removeProp( callbackName );\n\n			// Otherwise restore preexisting value\n			} else {\n				window[ callbackName ] = overwritten;\n			}\n\n			// Save back as free\n			if ( s[ callbackName ] ) {\n\n				// Make sure that re-using the options doesn\'t screw things around\n				s.jsonpCallback = originalSettings.jsonpCallback;\n\n				// Save the callback name for future use\n				oldCallbacks.push( callbackName );\n			}\n\n			// Call if it was a function and we have a response\n			if ( responseContainer && jQuery.isFunction( overwritten ) ) {\n				overwritten( responseContainer[ 0 ] );\n			}\n\n			responseContainer = overwritten = undefined;\n		} );\n\n		// Delegate to script\n		return "script";\n	}\n} );\n\n\n\n\n// Argument "data" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n	if ( !data || typeof data !== "string" ) {\n		return null;\n	}\n	if ( typeof context === "boolean" ) {\n		keepScripts = context;\n		context = false;\n	}\n	context = context || document;\n\n	var parsed = rsingleTag.exec( data ),\n		scripts = !keepScripts && [];\n\n	// Single tag\n	if ( parsed ) {\n		return [ context.createElement( parsed[ 1 ] ) ];\n	}\n\n	parsed = buildFragment( [ data ], context, scripts );\n\n	if ( scripts && scripts.length ) {\n		jQuery( scripts ).remove();\n	}\n\n	return jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n	if ( typeof url !== "string" && _load ) {\n		return _load.apply( this, arguments );\n	}\n\n	var selector, type, response,\n		self = this,\n		off = url.indexOf( " " );\n\n	if ( off > -1 ) {\n		selector = jQuery.trim( url.slice( off ) );\n		url = url.slice( 0, off );\n	}\n\n	// If it\'s a function\n	if ( jQuery.isFunction( params ) ) {\n\n		// We assume that it\'s the callback\n		callback = params;\n		params = undefined;\n\n	// Otherwise, build a param string\n	} else if ( params && typeof params === "object" ) {\n		type = "POST";\n	}\n\n	// If we have elements to modify, make the request\n	if ( self.length > 0 ) {\n		jQuery.ajax( {\n			url: url,\n\n			// If "type" variable is undefined, then "GET" method will be used.\n			// Make value of this field explicit since\n			// user can override it through ajaxSetup method\n			type: type || "GET",\n			dataType: "html",\n			data: params\n		} ).done( function( responseText ) {\n\n			// Save response for use in complete callback\n			response = arguments;\n\n			self.html( selector ?\n\n				// If a selector was specified, locate the right elements in a dummy div\n				// Exclude scripts to avoid IE \'Permission Denied\' errors\n				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n				// Otherwise use the full result\n				responseText );\n\n		// If the request succeeds, this function gets "data", "status", "jqXHR"\n		// but they are ignored because response was set above.\n		// If it fails, this function gets "jqXHR", "status", "error"\n		} ).always( callback && function( jqXHR, status ) {\n			self.each( function() {\n				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n			} );\n		} );\n	}\n\n	return this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n	"ajaxStart",\n	"ajaxStop",\n	"ajaxComplete",\n	"ajaxError",\n	"ajaxSuccess",\n	"ajaxSend"\n], function( i, type ) {\n	jQuery.fn[ type ] = function( fn ) {\n		return this.on( type, fn );\n	};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n	return jQuery.grep( jQuery.timers, function( fn ) {\n		return elem === fn.elem;\n	} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n	setOffset: function( elem, options, i ) {\n		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n			position = jQuery.css( elem, "position" ),\n			curElem = jQuery( elem ),\n			props = {};\n\n		// Set position first, in-case top/left are set even on static elem\n		if ( position === "static" ) {\n			elem.style.position = "relative";\n		}\n\n		curOffset = curElem.offset();\n		curCSSTop = jQuery.css( elem, "top" );\n		curCSSLeft = jQuery.css( elem, "left" );\n		calculatePosition = ( position === "absolute" || position === "fixed" ) &&\n			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;\n\n		// Need to be able to calculate position if either\n		// top or left is auto and position is either absolute or fixed\n		if ( calculatePosition ) {\n			curPosition = curElem.position();\n			curTop = curPosition.top;\n			curLeft = curPosition.left;\n\n		} else {\n			curTop = parseFloat( curCSSTop ) || 0;\n			curLeft = parseFloat( curCSSLeft ) || 0;\n		}\n\n		if ( jQuery.isFunction( options ) ) {\n\n			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n		}\n\n		if ( options.top != null ) {\n			props.top = ( options.top - curOffset.top ) + curTop;\n		}\n		if ( options.left != null ) {\n			props.left = ( options.left - curOffset.left ) + curLeft;\n		}\n\n		if ( "using" in options ) {\n			options.using.call( elem, props );\n\n		} else {\n			curElem.css( props );\n		}\n	}\n};\n\njQuery.fn.extend( {\n	offset: function( options ) {\n		if ( arguments.length ) {\n			return options === undefined ?\n				this :\n				this.each( function( i ) {\n					jQuery.offset.setOffset( this, options, i );\n				} );\n		}\n\n		var docElem, win,\n			elem = this[ 0 ],\n			box = { top: 0, left: 0 },\n			doc = elem && elem.ownerDocument;\n\n		if ( !doc ) {\n			return;\n		}\n\n		docElem = doc.documentElement;\n\n		// Make sure it\'s not a disconnected DOM node\n		if ( !jQuery.contains( docElem, elem ) ) {\n			return box;\n		}\n\n		box = elem.getBoundingClientRect();\n		win = getWindow( doc );\n		return {\n			top: box.top + win.pageYOffset - docElem.clientTop,\n			left: box.left + win.pageXOffset - docElem.clientLeft\n		};\n	},\n\n	position: function() {\n		if ( !this[ 0 ] ) {\n			return;\n		}\n\n		var offsetParent, offset,\n			elem = this[ 0 ],\n			parentOffset = { top: 0, left: 0 };\n\n		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n		// because it is its only offset parent\n		if ( jQuery.css( elem, "position" ) === "fixed" ) {\n\n			// Assume getBoundingClientRect is there when computed position is fixed\n			offset = elem.getBoundingClientRect();\n\n		} else {\n\n			// Get *real* offsetParent\n			offsetParent = this.offsetParent();\n\n			// Get correct offsets\n			offset = this.offset();\n			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {\n				parentOffset = offsetParent.offset();\n			}\n\n			// Add offsetParent borders\n			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );\n			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );\n		}\n\n		// Subtract parent offsets and element margins\n		return {\n			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),\n			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )\n		};\n	},\n\n	// This method will return documentElement in the following cases:\n	// 1) For the element inside the iframe without offsetParent, this method will return\n	//    documentElement of the parent window\n	// 2) For the hidden or detached element\n	// 3) For body or html element, i.e. in case of the html node - it will return itself\n	//\n	// but those exceptions were never presented as a real life use-cases\n	// and might be considered as more preferable results.\n	//\n	// This logic, however, is not guaranteed and can change at any point in the future\n	offsetParent: function() {\n		return this.map( function() {\n			var offsetParent = this.offsetParent;\n\n			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {\n				offsetParent = offsetParent.offsetParent;\n			}\n\n			return offsetParent || documentElement;\n		} );\n	}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {\n	var top = "pageYOffset" === prop;\n\n	jQuery.fn[ method ] = function( val ) {\n		return access( this, function( elem, method, val ) {\n			var win = getWindow( elem );\n\n			if ( val === undefined ) {\n				return win ? win[ prop ] : elem[ method ];\n			}\n\n			if ( win ) {\n				win.scrollTo(\n					!top ? val : win.pageXOffset,\n					top ? val : win.pageYOffset\n				);\n\n			} else {\n				elem[ method ] = val;\n			}\n		}, method, val, arguments.length );\n	};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ "top", "left" ], function( i, prop ) {\n	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n		function( elem, computed ) {\n			if ( computed ) {\n				computed = curCSS( elem, prop );\n\n				// If curCSS returns percentage, fallback to offset\n				return rnumnonpx.test( computed ) ?\n					jQuery( elem ).position()[ prop ] + "px" :\n					computed;\n			}\n		}\n	);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: "height", Width: "width" }, function( name, type ) {\n	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },\n		function( defaultExtra, funcName ) {\n\n		// Margin is only for outerHeight, outerWidth\n		jQuery.fn[ funcName ] = function( margin, value ) {\n			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),\n				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );\n\n			return access( this, function( elem, type, value ) {\n				var doc;\n\n				if ( jQuery.isWindow( elem ) ) {\n\n					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n					// isn\'t a whole lot we can do. See pull request at this URL for discussion:\n					// https://github.com/jquery/jquery/pull/764\n					return elem.document.documentElement[ "client" + name ];\n				}\n\n				// Get document width or height\n				if ( elem.nodeType === 9 ) {\n					doc = elem.documentElement;\n\n					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n					// whichever is greatest\n					return Math.max(\n						elem.body[ "scroll" + name ], doc[ "scroll" + name ],\n						elem.body[ "offset" + name ], doc[ "offset" + name ],\n						doc[ "client" + name ]\n					);\n				}\n\n				return value === undefined ?\n\n					// Get width or height on the element, requesting but not forcing parseFloat\n					jQuery.css( elem, type, extra ) :\n\n					// Set width or height on the element\n					jQuery.style( elem, type, value, extra );\n			}, type, chainable ? margin : undefined, chainable, null );\n		};\n	} );\n} );\n\n\njQuery.fn.extend( {\n\n	bind: function( types, data, fn ) {\n		return this.on( types, null, data, fn );\n	},\n	unbind: function( types, fn ) {\n		return this.off( types, null, fn );\n	},\n\n	delegate: function( selector, types, data, fn ) {\n		return this.on( types, selector, data, fn );\n	},\n	undelegate: function( selector, types, fn ) {\n\n		// ( namespace ) or ( selector, types [, fn] )\n		return arguments.length === 1 ?\n			this.off( selector, "**" ) :\n			this.off( types, selector || "**", fn );\n	},\n	size: function() {\n		return this.length;\n	}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n		return jQuery;\n	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n	// Map over jQuery in case of overwrite\n	_jQuery = window.jQuery,\n\n	// Map over the $ in case of overwrite\n	_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n	if ( window.$ === jQuery ) {\n		window.$ = _$;\n	}\n\n	if ( deep && window.jQuery === jQuery ) {\n		window.jQuery = _jQuery;\n	}\n\n	return jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n	window.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n//# sourceMappingURL=data:application/json;base64,');
},4:function(module,exports){eval('/*\r\n	MIT License http://www.opensource.org/licenses/mit-license.php\r\n	Author Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n	var list = [];\r\n\r\n	// return the list of modules as css string\r\n	list.toString = function toString() {\r\n		var result = [];\r\n		for(var i = 0; i < this.length; i++) {\r\n			var item = this[i];\r\n			if(item[2]) {\r\n				result.push("@media " + item[2] + "{" + item[1] + "}");\r\n			} else {\r\n				result.push(item[1]);\r\n			}\r\n		}\r\n		return result.join("");\r\n	};\r\n\r\n	// import a list of modules into the list\r\n	list.i = function(modules, mediaQuery) {\r\n		if(typeof modules === "string")\r\n			modules = [[null, modules, ""]];\r\n		var alreadyImportedModules = {};\r\n		for(var i = 0; i < this.length; i++) {\r\n			var id = this[i][0];\r\n			if(typeof id === "number")\r\n				alreadyImportedModules[id] = true;\r\n		}\r\n		for(i = 0; i < modules.length; i++) {\r\n			var item = modules[i];\r\n			// skip already imported module\r\n			// this implementation is not 100% perfect for weird media query combinations\r\n			//  when a module is imported multiple times with different media queries.\r\n			//  I hope this will never occur (Hey this way we have smaller bundles)\r\n			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\r\n				if(mediaQuery && !item[2]) {\r\n					item[2] = mediaQuery;\r\n				} else if(mediaQuery) {\r\n					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\r\n				}\r\n				list.push(item);\r\n			}\r\n		}\r\n	};\r\n	return list;\r\n};\r\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4gKiogbW9kdWxlIGlkID0gNFxuICoqIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDQgNSA2IDcgOSAxMCAxMVxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=')},6:function(module,exports,__webpack_require__){eval('/*\r\n	MIT License http://www.opensource.org/licenses/mit-license.php\r\n	Author Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n	memoize = function(fn) {\r\n		var memo;\r\n		return function () {\r\n			if (typeof memo === "undefined") memo = fn.apply(this, arguments);\r\n			return memo;\r\n		};\r\n	},\r\n	isOldIE = memoize(function() {\r\n		return /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n	}),\r\n	getHeadElement = memoize(function () {\r\n		return document.head || document.getElementsByTagName("head")[0];\r\n	}),\r\n	singletonElement = null,\r\n	singletonCounter = 0,\r\n	styleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n	if(false) {\r\n		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\r\n	}\r\n\r\n	options = options || {};\r\n	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n	// tags it will allow on a page\r\n	if (typeof options.singleton === "undefined") options.singleton = isOldIE();\r\n\r\n	// By default, add <style> tags to the bottom of <head>.\r\n	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";\r\n\r\n	var styles = listToStyles(list);\r\n	addStylesToDom(styles, options);\r\n\r\n	return function update(newList) {\r\n		var mayRemove = [];\r\n		for(var i = 0; i < styles.length; i++) {\r\n			var item = styles[i];\r\n			var domStyle = stylesInDom[item.id];\r\n			domStyle.refs--;\r\n			mayRemove.push(domStyle);\r\n		}\r\n		if(newList) {\r\n			var newStyles = listToStyles(newList);\r\n			addStylesToDom(newStyles, options);\r\n		}\r\n		for(var i = 0; i < mayRemove.length; i++) {\r\n			var domStyle = mayRemove[i];\r\n			if(domStyle.refs === 0) {\r\n				for(var j = 0; j < domStyle.parts.length; j++)\r\n					domStyle.parts[j]();\r\n				delete stylesInDom[domStyle.id];\r\n			}\r\n		}\r\n	};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n	for(var i = 0; i < styles.length; i++) {\r\n		var item = styles[i];\r\n		var domStyle = stylesInDom[item.id];\r\n		if(domStyle) {\r\n			domStyle.refs++;\r\n			for(var j = 0; j < domStyle.parts.length; j++) {\r\n				domStyle.parts[j](item.parts[j]);\r\n			}\r\n			for(; j < item.parts.length; j++) {\r\n				domStyle.parts.push(addStyle(item.parts[j], options));\r\n			}\r\n		} else {\r\n			var parts = [];\r\n			for(var j = 0; j < item.parts.length; j++) {\r\n				parts.push(addStyle(item.parts[j], options));\r\n			}\r\n			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n		}\r\n	}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n	var styles = [];\r\n	var newStyles = {};\r\n	for(var i = 0; i < list.length; i++) {\r\n		var item = list[i];\r\n		var id = item[0];\r\n		var css = item[1];\r\n		var media = item[2];\r\n		var sourceMap = item[3];\r\n		var part = {css: css, media: media, sourceMap: sourceMap};\r\n		if(!newStyles[id])\r\n			styles.push(newStyles[id] = {id: id, parts: [part]});\r\n		else\r\n			newStyles[id].parts.push(part);\r\n	}\r\n	return styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n	var head = getHeadElement();\r\n	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n	if (options.insertAt === "top") {\r\n		if(!lastStyleElementInsertedAtTop) {\r\n			head.insertBefore(styleElement, head.firstChild);\r\n		} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n		} else {\r\n			head.appendChild(styleElement);\r\n		}\r\n		styleElementsInsertedAtTop.push(styleElement);\r\n	} else if (options.insertAt === "bottom") {\r\n		head.appendChild(styleElement);\r\n	} else {\r\n		throw new Error("Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.");\r\n	}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n	styleElement.parentNode.removeChild(styleElement);\r\n	var idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n	if(idx >= 0) {\r\n		styleElementsInsertedAtTop.splice(idx, 1);\r\n	}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n	var styleElement = document.createElement("style");\r\n	styleElement.type = "text/css";\r\n	insertStyleElement(options, styleElement);\r\n	return styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n	var linkElement = document.createElement("link");\r\n	linkElement.rel = "stylesheet";\r\n	insertStyleElement(options, linkElement);\r\n	return linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n	var styleElement, update, remove;\r\n\r\n	if (options.singleton) {\r\n		var styleIndex = singletonCounter++;\r\n		styleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n	} else if(obj.sourceMap &&\r\n		typeof URL === "function" &&\r\n		typeof URL.createObjectURL === "function" &&\r\n		typeof URL.revokeObjectURL === "function" &&\r\n		typeof Blob === "function" &&\r\n		typeof btoa === "function") {\r\n		styleElement = createLinkElement(options);\r\n		update = updateLink.bind(null, styleElement);\r\n		remove = function() {\r\n			removeStyleElement(styleElement);\r\n			if(styleElement.href)\r\n				URL.revokeObjectURL(styleElement.href);\r\n		};\r\n	} else {\r\n		styleElement = createStyleElement(options);\r\n		update = applyToTag.bind(null, styleElement);\r\n		remove = function() {\r\n			removeStyleElement(styleElement);\r\n		};\r\n	}\r\n\r\n	update(obj);\r\n\r\n	return function updateStyle(newObj) {\r\n		if(newObj) {\r\n			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n				return;\r\n			update(obj = newObj);\r\n		} else {\r\n			remove();\r\n		}\r\n	};\r\n}\r\n\r\nvar replaceText = (function () {\r\n	var textStore = [];\r\n\r\n	return function (index, replacement) {\r\n		textStore[index] = replacement;\r\n		return textStore.filter(Boolean).join(\'\\n\');\r\n	};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n	var css = remove ? "" : obj.css;\r\n\r\n	if (styleElement.styleSheet) {\r\n		styleElement.styleSheet.cssText = replaceText(index, css);\r\n	} else {\r\n		var cssNode = document.createTextNode(css);\r\n		var childNodes = styleElement.childNodes;\r\n		if (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n		if (childNodes.length) {\r\n			styleElement.insertBefore(cssNode, childNodes[index]);\r\n		} else {\r\n			styleElement.appendChild(cssNode);\r\n		}\r\n	}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n	var css = obj.css;\r\n	var media = obj.media;\r\n\r\n	if(media) {\r\n		styleElement.setAttribute("media", media)\r\n	}\r\n\r\n	if(styleElement.styleSheet) {\r\n		styleElement.styleSheet.cssText = css;\r\n	} else {\r\n		while(styleElement.firstChild) {\r\n			styleElement.removeChild(styleElement.firstChild);\r\n		}\r\n		styleElement.appendChild(document.createTextNode(css));\r\n	}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n	var css = obj.css;\r\n	var sourceMap = obj.sourceMap;\r\n\r\n	if(sourceMap) {\r\n		// http://stackoverflow.com/a/26603875\r\n		css += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\r\n	}\r\n\r\n	var blob = new Blob([css], { type: "text/css" });\r\n\r\n	var oldSrc = linkElement.href;\r\n\r\n	linkElement.href = URL.createObjectURL(blob);\r\n\r\n	if(oldSrc)\r\n		URL.revokeObjectURL(oldSrc);\r\n}\r\n//# sourceMappingURL=data:application/json;base64,')},147:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(4)();\n// imports\n\n\n// module\nexports.push([module.id, "\\n/*!\\n * Inspire Tree v1.2.5\\n * https://github.com/helion3/inspire-tree\\n * \\n * Copyright 2015 Helion3, and other contributors\\n * Licensed under MIT. https://github.com/helion3/inspire-tree/blob/master/LICENSE\\n */.itree-menu{background:#ddd;border:1px solid #c4c4c4;border-radius:3px;font-family:sans-serif;list-style:none;margin:0;min-width:150px;padding:0;position:absolute;z-index:10}.itree-menu a{display:block;padding:3px 8px}.itree-menu a:hover{background:#dafaff;color:#a4eaf5}.inspire-tree:focus{outline:none}.inspire-tree ol{list-style:none;margin:0;padding:0}.inspire-tree ol ol{margin-left:20px}.inspire-tree .collapsed>ol,.inspire-tree .hidden{display:none}.inspire-tree a{cursor:default;display:block;height:100%;line-height:25px}.inspire-tree li>.title-wrap{position:relative;z-index:2}.inspire-tree .toggle{height:25px;left:0;position:absolute;top:0;width:25px;z-index:2}.inspire-tree .toggle:before{display:block;left:50%;position:absolute;top:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.inspire-tree [type=checkbox]{left:18px;position:absolute;top:4px;vertical-align:middle;width:20px;z-index:2}.inspire-tree .title{overflow:hidden;padding-left:30px;position:relative;text-overflow:ellipsis;vertical-align:middle;white-space:nowrap;z-index:1}.inspire-tree .title:before{left:-6px;position:relative;top:-2px;vertical-align:middle}.inspire-tree .dragging{position:fixed;z-index:5000}.inspire-tree.drop-target{border:1px solid #2dadc5}.inspire-tree .icon:before{background-position:0 0;background-repeat:no-repeat;content:\'\';display:inline-block;height:14px;width:14px}.inspire-tree .selected>.title-wrap .icon-folder:before{background-image:url(\\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%232dadc5%22%20d%3D%22M14%204l4%204h14v22h-32v-26z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\\")}.inspire-tree .selected>.title-wrap .icon-file-empty:before{background-image:url(\\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%232dadc5%22%20d%3D%22M28.681%207.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378%200-2.5%201.121-2.5%202.5v27c0%201.378%201.122%202.5%202.5%202.5h23c1.378%200%202.5-1.122%202.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543%205.457c0.959%200.959%201.712%201.825%202.268%202.543h-4.811v-4.811c0.718%200.556%201.584%201.309%202.543%202.268zM28%2029.5c0%200.271-0.229%200.5-0.5%200.5h-23c-0.271%200-0.5-0.229-0.5-0.5v-27c0-0.271%200.229-0.5%200.5-0.5%200%200%2015.499-0%2015.5%200v7c0%200.552%200.448%201%201%201h7v19.5z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\\")}.inspire-tree .icon-folder:before{background-image:url(\\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23ccc%22%20d%3D%22M14%204l4%204h14v22h-32v-26z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\\")}.inspire-tree .icon-caret-down:before,.inspire-tree .icon-caret:before{background-image:url(\\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23222%22%20d%3D%22M6%204l20%2012-20%2012z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\\")}.inspire-tree .icon-caret-down:before{-webkit-transform:translate(-50%,-50%) rotate(90deg);transform:translate(-50%,-50%) rotate(90deg)}.inspire-tree .icon-file-empty:before{background-image:url(\\"data:image/svg+xml;charset=US-ASCII,%3Csvg%20version%3D%221.1%22%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%20width%3D%22100%25%22%20height%3D%22100%25%22%20viewBox%3D%220%200%2032%2032%22%3E%3Cpath%20fill%3D%22%23ccc%22%20d%3D%22M28.681%207.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378%200-2.5%201.121-2.5%202.5v27c0%201.378%201.122%202.5%202.5%202.5h23c1.378%200%202.5-1.122%202.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543%205.457c0.959%200.959%201.712%201.825%202.268%202.543h-4.811v-4.811c0.718%200.556%201.584%201.309%202.543%202.268zM28%2029.5c0%200.271-0.229%200.5-0.5%200.5h-23c-0.271%200-0.5-0.229-0.5-0.5v-27c0-0.271%200.229-0.5%200.5-0.5%200%200%2015.499-0%2015.5%200v7c0%200.552%200.448%201%201%201h7v19.5z%22%3E%3C%2Fpath%3E%3C%2Fsvg%3E\\")}.inspire-tree .loading>.title-wrap .title:before{content:\'\';height:14px;width:14px}.inspire-tree>ol{position:relative}.inspire-tree .wholerow{height:25px;left:0;position:absolute;-webkit-transform:translateY(-100%);transform:translateY(-100%);width:100%;z-index:1}.inspire-tree .focused:not(.selected)>.wholerow,.inspire-tree .title-wrap:hover+.wholerow{background:#dafaff}.inspire-tree .selected>.title-wrap:hover+.wholerow,.inspire-tree .selected>.wholerow{background:#a4eaf5}", ""]);\n\n// exports\n//# sourceMappingURL=data:application/json;base64,');
},148:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(4)();\n// imports\n\n\n// module\nexports.push([module.id, ".model-loader{top:0;left:0;width:315px;height:550px;resize:auto}.model-loader .container{height:calc(100% - 50px);width:100%;padding-top:10px;padding-left:10px;padding-right:10px}.model-loader.minimized{height:34px;min-height:34px}.model-loader .input{height:16px;margin-left:2px;margin-bottom:4px;margin-top:0;border-radius:5px;vertical-align:top}.model-loader .input.token{width:80px}.model-loader .input.urn{width:calc(100% - 210px)}.model-loader .input.numeric{width:84px}.model-loader .input.search{width:180px;margin-right:2px}.model-loader .btn{height:6px;line-height:0;vertical-align:top}.model-loader .btn-load{width:50px}.model-loader .btn-transform{margin-left:2px;width:160px;top:2px;margin-right:2px}.model-loader .btn-clear{width:60px;top:2px}.model-loader .btn-load-gallery{width:62px;top:2px}.model-loader .btn-span{margin-right:4px;line-height:0;top:2px}.all-trees-container{height:calc(100% - 250px)}.model-loader .tree-container{width:calc(100% - 28px);overflow-y:auto}.model-loader .tree-container.gallery{max-height:160px}.model-loader .tree-container.loaded{height:calc(100% - 40px)}.model-loader .v-spacer{border-width:0;margin:2px}.model-loader .v-spacer-large{border-width:0;margin:12px}.model-loader .tree-spacer{margin:5px;width:260px}.model-loader .text-span{color:#fff}.inspire-tree a{cursor:default;display:block;height:25px;line-height:25px;color:cyan;text-decoration:none}.inspire-tree a:hover{color:#000;text-decoration:none}.inspire-tree .focused>div>a,.inspire-tree .selected>div>a{color:#000}.itree-menu a,.itree-menu a:hover{color:#000;text-decoration:none}", ""]);\n\n// exports\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL21vZGVsLWxvYWRlci5jc3M/NzAwNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOzs7QUFHQTtBQUNBLHdDQUF3QyxNQUFNLE9BQU8sWUFBWSxhQUFhLFlBQVkseUJBQXlCLHlCQUF5QixXQUFXLGlCQUFpQixrQkFBa0IsbUJBQW1CLHdCQUF3QixZQUFZLGdCQUFnQixxQkFBcUIsWUFBWSxnQkFBZ0Isa0JBQWtCLGFBQWEsa0JBQWtCLG1CQUFtQiwyQkFBMkIsV0FBVyx5QkFBeUIseUJBQXlCLDZCQUE2QixXQUFXLDRCQUE0QixZQUFZLGlCQUFpQixtQkFBbUIsV0FBVyxjQUFjLG1CQUFtQix3QkFBd0IsV0FBVyw2QkFBNkIsZ0JBQWdCLFlBQVksUUFBUSxpQkFBaUIseUJBQXlCLFdBQVcsUUFBUSxnQ0FBZ0MsV0FBVyxRQUFRLHdCQUF3QixpQkFBaUIsY0FBYyxRQUFRLHFCQUFxQiwwQkFBMEIsOEJBQThCLHdCQUF3QixnQkFBZ0Isc0NBQXNDLGlCQUFpQixxQ0FBcUMseUJBQXlCLHdCQUF3QixlQUFlLFdBQVcsOEJBQThCLGVBQWUsWUFBWSwyQkFBMkIsV0FBVyxZQUFZLHlCQUF5QixXQUFXLGdCQUFnQixlQUFlLGNBQWMsWUFBWSxpQkFBaUIsV0FBVyxxQkFBcUIsc0JBQXNCLFdBQVcscUJBQXFCLDJEQUEyRCxXQUFXLGtDQUFrQyxXQUFXLHFCQUFxQjs7QUFFcGxEIiwiZmlsZSI6IjE0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLm1vZGVsLWxvYWRlcnt0b3A6MDtsZWZ0OjA7d2lkdGg6MzE1cHg7aGVpZ2h0OjU1MHB4O3Jlc2l6ZTphdXRvfS5tb2RlbC1sb2FkZXIgLmNvbnRhaW5lcntoZWlnaHQ6Y2FsYygxMDAlIC0gNTBweCk7d2lkdGg6MTAwJTtwYWRkaW5nLXRvcDoxMHB4O3BhZGRpbmctbGVmdDoxMHB4O3BhZGRpbmctcmlnaHQ6MTBweH0ubW9kZWwtbG9hZGVyLm1pbmltaXplZHtoZWlnaHQ6MzRweDttaW4taGVpZ2h0OjM0cHh9Lm1vZGVsLWxvYWRlciAuaW5wdXR7aGVpZ2h0OjE2cHg7bWFyZ2luLWxlZnQ6MnB4O21hcmdpbi1ib3R0b206NHB4O21hcmdpbi10b3A6MDtib3JkZXItcmFkaXVzOjVweDt2ZXJ0aWNhbC1hbGlnbjp0b3B9Lm1vZGVsLWxvYWRlciAuaW5wdXQudG9rZW57d2lkdGg6ODBweH0ubW9kZWwtbG9hZGVyIC5pbnB1dC51cm57d2lkdGg6Y2FsYygxMDAlIC0gMjEwcHgpfS5tb2RlbC1sb2FkZXIgLmlucHV0Lm51bWVyaWN7d2lkdGg6ODRweH0ubW9kZWwtbG9hZGVyIC5pbnB1dC5zZWFyY2h7d2lkdGg6MTgwcHg7bWFyZ2luLXJpZ2h0OjJweH0ubW9kZWwtbG9hZGVyIC5idG57aGVpZ2h0OjZweDtsaW5lLWhlaWdodDowO3ZlcnRpY2FsLWFsaWduOnRvcH0ubW9kZWwtbG9hZGVyIC5idG4tbG9hZHt3aWR0aDo1MHB4fS5tb2RlbC1sb2FkZXIgLmJ0bi10cmFuc2Zvcm17bWFyZ2luLWxlZnQ6MnB4O3dpZHRoOjE2MHB4O3RvcDoycHg7bWFyZ2luLXJpZ2h0OjJweH0ubW9kZWwtbG9hZGVyIC5idG4tY2xlYXJ7d2lkdGg6NjBweDt0b3A6MnB4fS5tb2RlbC1sb2FkZXIgLmJ0bi1sb2FkLWdhbGxlcnl7d2lkdGg6NjJweDt0b3A6MnB4fS5tb2RlbC1sb2FkZXIgLmJ0bi1zcGFue21hcmdpbi1yaWdodDo0cHg7bGluZS1oZWlnaHQ6MDt0b3A6MnB4fS5hbGwtdHJlZXMtY29udGFpbmVye2hlaWdodDpjYWxjKDEwMCUgLSAyNTBweCl9Lm1vZGVsLWxvYWRlciAudHJlZS1jb250YWluZXJ7d2lkdGg6Y2FsYygxMDAlIC0gMjhweCk7b3ZlcmZsb3cteTphdXRvfS5tb2RlbC1sb2FkZXIgLnRyZWUtY29udGFpbmVyLmdhbGxlcnl7bWF4LWhlaWdodDoxNjBweH0ubW9kZWwtbG9hZGVyIC50cmVlLWNvbnRhaW5lci5sb2FkZWR7aGVpZ2h0OmNhbGMoMTAwJSAtIDQwcHgpfS5tb2RlbC1sb2FkZXIgLnYtc3BhY2Vye2JvcmRlci13aWR0aDowO21hcmdpbjoycHh9Lm1vZGVsLWxvYWRlciAudi1zcGFjZXItbGFyZ2V7Ym9yZGVyLXdpZHRoOjA7bWFyZ2luOjEycHh9Lm1vZGVsLWxvYWRlciAudHJlZS1zcGFjZXJ7bWFyZ2luOjVweDt3aWR0aDoyNjBweH0ubW9kZWwtbG9hZGVyIC50ZXh0LXNwYW57Y29sb3I6I2ZmZn0uaW5zcGlyZS10cmVlIGF7Y3Vyc29yOmRlZmF1bHQ7ZGlzcGxheTpibG9jaztoZWlnaHQ6MjVweDtsaW5lLWhlaWdodDoyNXB4O2NvbG9yOmN5YW47dGV4dC1kZWNvcmF0aW9uOm5vbmV9Lmluc3BpcmUtdHJlZSBhOmhvdmVye2NvbG9yOiMwMDA7dGV4dC1kZWNvcmF0aW9uOm5vbmV9Lmluc3BpcmUtdHJlZSAuZm9jdXNlZD5kaXY+YSwuaW5zcGlyZS10cmVlIC5zZWxlY3RlZD5kaXY+YXtjb2xvcjojMDAwfS5pdHJlZS1tZW51IGEsLml0cmVlLW1lbnUgYTpob3Zlcntjb2xvcjojMDAwO3RleHQtZGVjb3JhdGlvbjpub25lfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL21vZGVsLWxvYWRlci5jc3NcbiAqKiBtb2R1bGUgaWQgPSAxNDhcbiAqKiBtb2R1bGUgY2h1bmtzID0gOVxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=')},187:function(module,exports,__webpack_require__){eval("/*!\n * Inspire Tree v1.6.1\n * https://github.com/helion3/inspire-tree\n * \n * Copyright 2015 Helion3, and other contributors\n * Licensed under MIT. https://github.com/helion3/inspire-tree/blob/master/LICENSE\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n	if(true)\n		module.exports = factory();\n	else if(typeof define === 'function' && define.amd)\n		define([], factory);\n	else if(typeof exports === 'object')\n		exports[\"InspireTree\"] = factory();\n	else\n		root[\"InspireTree\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ 	// The module cache\n/******/ 	var installedModules = {};\n\n/******/ 	// The require function\n/******/ 	function __webpack_require__(moduleId) {\n\n/******/ 		// Check if module is in cache\n/******/ 		if(installedModules[moduleId])\n/******/ 			return installedModules[moduleId].exports;\n\n/******/ 		// Create a new module (and put it into the cache)\n/******/ 		var module = installedModules[moduleId] = {\n/******/ 			exports: {},\n/******/ 			id: moduleId,\n/******/ 			loaded: false\n/******/ 		};\n\n/******/ 		// Execute the module function\n/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ 		// Flag the module as loaded\n/******/ 		module.loaded = true;\n\n/******/ 		// Return the exports of the module\n/******/ 		return module.exports;\n/******/ 	}\n\n\n/******/ 	// expose the modules object (__webpack_modules__)\n/******/ 	__webpack_require__.m = modules;\n\n/******/ 	// expose the module cache\n/******/ 	__webpack_require__.c = installedModules;\n\n/******/ 	// __webpack_public_path__\n/******/ 	__webpack_require__.p = \"\";\n\n/******/ 	// Load entry module and return exports\n/******/ 	return __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	// Libs\n\n	var _difference2 = __webpack_require__(1);\n\n	var _difference3 = _interopRequireDefault(_difference2);\n\n	var _isRegExp2 = __webpack_require__(57);\n\n	var _isRegExp3 = _interopRequireDefault(_isRegExp2);\n\n	var _isEmpty2 = __webpack_require__(58);\n\n	var _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\n	var _isNumber2 = __webpack_require__(75);\n\n	var _isNumber3 = _interopRequireDefault(_isNumber2);\n\n	var _castArray2 = __webpack_require__(76);\n\n	var _castArray3 = _interopRequireDefault(_castArray2);\n\n	var _isString2 = __webpack_require__(66);\n\n	var _isString3 = _interopRequireDefault(_isString2);\n\n	var _tail2 = __webpack_require__(77);\n\n	var _tail3 = _interopRequireDefault(_tail2);\n\n	var _head2 = __webpack_require__(80);\n\n	var _head3 = _interopRequireDefault(_head2);\n\n	var _get2 = __webpack_require__(81);\n\n	var _get3 = _interopRequireDefault(_get2);\n\n	var _transform2 = __webpack_require__(89);\n\n	var _transform3 = _interopRequireDefault(_transform2);\n\n	var _assign2 = __webpack_require__(126);\n\n	var _assign3 = _interopRequireDefault(_assign2);\n\n	var _sortBy2 = __webpack_require__(131);\n\n	var _sortBy3 = _interopRequireDefault(_sortBy2);\n\n	var _sortedIndexBy2 = __webpack_require__(140);\n\n	var _sortedIndexBy3 = _interopRequireDefault(_sortedIndexBy2);\n\n	var _remove2 = __webpack_require__(142);\n\n	var _remove3 = _interopRequireDefault(_remove2);\n\n	var _slice2 = __webpack_require__(146);\n\n	var _slice3 = _interopRequireDefault(_slice2);\n\n	var _findIndex2 = __webpack_require__(147);\n\n	var _findIndex3 = _interopRequireDefault(_findIndex2);\n\n	var _find2 = __webpack_require__(149);\n\n	var _find3 = _interopRequireDefault(_find2);\n\n	var _findLast2 = __webpack_require__(151);\n\n	var _findLast3 = _interopRequireDefault(_findLast2);\n\n	var _indexOf2 = __webpack_require__(155);\n\n	var _indexOf3 = _interopRequireDefault(_indexOf2);\n\n	var _isArrayLike2 = __webpack_require__(46);\n\n	var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);\n\n	var _cloneDeep2 = __webpack_require__(156);\n\n	var _cloneDeep3 = _interopRequireDefault(_cloneDeep2);\n\n	var _each2 = __webpack_require__(178);\n\n	var _each3 = _interopRequireDefault(_each2);\n\n	var _defaults2 = __webpack_require__(180);\n\n	var _defaults3 = _interopRequireDefault(_defaults2);\n\n	var _isObject2 = __webpack_require__(11);\n\n	var _isObject3 = _interopRequireDefault(_isObject2);\n\n	var _isFunction2 = __webpack_require__(10);\n\n	var _isFunction3 = _interopRequireDefault(_isFunction2);\n\n	var _isArray2 = __webpack_require__(51);\n\n	var _isArray3 = _interopRequireDefault(_isArray2);\n\n	var _isBoolean2 = __webpack_require__(187);\n\n	var _isBoolean3 = _interopRequireDefault(_isBoolean2);\n\n	var _defaultsDeep2 = __webpack_require__(188);\n\n	var _defaultsDeep3 = _interopRequireDefault(_defaultsDeep2);\n\n	var _cuid = __webpack_require__(196);\n\n	var _cuid2 = _interopRequireDefault(_cuid);\n\n	var _eventemitter = __webpack_require__(197);\n\n	var _eventemitter2 = _interopRequireDefault(_eventemitter);\n\n	var _es6Promise = __webpack_require__(198);\n\n	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n	// CSS\n	__webpack_require__(202);\n\n	function InspireTree(opts) {\n	    var initialized = false;\n	    var noop = function noop() {};\n	    var tree = this;\n	    var lastSelectedNode;\n	    var muted = false;\n	    var preventDeselection = false;\n\n	    if (!opts.data) {\n	        throw new TypeError('Invalid data loader.');\n	    }\n\n	    // Assign defaults\n	    tree.config = (0, _defaultsDeep3.default)({}, opts, {\n	        allowLoadEvents: [],\n	        contextMenu: false,\n	        dragTargets: false,\n	        nodes: {\n	            resetStateOnRestore: true\n	        },\n	        renderer: false,\n	        search: false,\n	        selection: {\n	            allow: noop,\n	            autoDeselect: true,\n	            autoSelectChildren: false,\n	            mode: 'default',\n	            multiple: false,\n	            require: false\n	        },\n	        showCheckboxes: false,\n	        sort: false,\n	        tabindex: -1\n	    });\n\n	    // If checkbox mode, we must force auto-selecting children\n	    if (tree.config.selection.mode === 'checkbox') {\n	        tree.config.selection.autoSelectChildren = true;\n	        tree.config.selection.autoDeselect = false;\n\n	        if (!(0, _isBoolean3.default)(opts.showCheckboxes)) {\n	            tree.config.showCheckboxes = true;\n	        }\n	    }\n\n	    // If auto-selecting children, we must force multiselect\n	    if (tree.config.selection.autoSelectChildren) {\n	        tree.config.selection.multiple = true;\n	    }\n\n	    // Default node state values\n	    var defaultState = {\n	        collapsed: true,\n	        focused: false,\n	        hidden: false,\n	        indeterminate: false,\n	        loading: false,\n	        removed: false,\n	        selectable: true,\n	        selected: false\n	    };\n\n	    // Cache some configs\n	    var allowsLoadEvents = (0, _isArray3.default)(tree.config.allowLoadEvents) && tree.config.allowLoadEvents.length > 0;\n	    var isDynamic = (0, _isFunction3.default)(tree.config.data);\n\n	    // Rendering\n	    var dom;\n\n	    // Override emitter so we can better control flow\n	    var emit = tree.emit;\n	    tree.emit = function () {\n	        if (!muted) {\n	            emit.apply(tree, arguments);\n	        }\n	    };\n\n	    // Webpack has a DOM boolean that when false,\n	    // allows us to exclude this library from our build.\n	    // For those doing their own rendering, it's useless.\n	    if (true) {\n	        dom = new (__webpack_require__(207))(tree);\n	    }\n\n	    // Validation\n	    if (dom && (!(0, _isObject3.default)(opts) || !opts.target)) {\n	        throw new TypeError('Property \"target\" is required, either an element or a selector.');\n	    }\n\n	    // Load custom/empty renderer\n	    if (!dom) {\n	        var renderer = (0, _isFunction3.default)(tree.config.renderer) ? tree.config.renderer(tree) : {};\n	        dom = (0, _defaults3.default)(renderer, {\n	            applyChanges: noop,\n	            attach: noop,\n	            batch: noop,\n	            end: noop\n	        });\n	    }\n\n	    /**\n	     * Represents a singe node object within the tree.\n	     *\n	     * @category TreeNode\n	     * @param {TreeNode} source TreeNode to copy.\n	     * @return {TreeNode} Tree node object.\n	     */\n	    function TreeNode(source) {\n	        var node = this;\n\n	        (0, _each3.default)(source, function (value, key) {\n	            if ((0, _isObject3.default)(value)) {\n	                if ((0, _isFunction3.default)(value.clone)) {\n	                    node[key] = value.clone();\n	                } else {\n	                    node[key] = (0, _cloneDeep3.default)(value);\n	                }\n	            } else {\n	                node[key] = value;\n	            }\n	        });\n	    };\n\n	    /**\n	     * Add a child to this node.\n	     *\n	     * @category TreeNode\n	     * @param {object} child Node object.\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.addChild = function (child) {\n	        if ((0, _isArray3.default)(this.children) || !(0, _isArrayLike3.default)(this.children)) {\n	            this.children = new TreeNodes();\n	            this.children._context = this;\n	        }\n\n	        return this.children.addNode(child);\n	    };\n\n	    /**\n	     * Get if node available.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If available.\n	     */\n	    TreeNode.prototype.available = function () {\n	        return !this.hidden() && !this.removed();\n	    };\n\n	    /**\n	     * Blur focus from this node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.blur = function () {\n	        return baseStateChange('focused', false, 'blurred', this);\n	    };\n\n	    /**\n	     * Hides parents without any visible children.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.clean = function () {\n	        this.recurseUp(function (node) {\n	            if (node.hasParent()) {\n	                var parent = node.getParent();\n	                if (!parent.hasVisibleChildren()) {\n	                    parent.hide();\n	                }\n	            }\n	        });\n\n	        return this;\n	    };\n\n	    /**\n	     * Clones this node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} New node object.\n	     */\n	    TreeNode.prototype.clone = function () {\n	        var newClone = new TreeNode(this);\n\n	        if (this.hasChildren()) {\n	            newClone.children = this.children.clone();\n	        }\n\n	        return newClone;\n	    };\n\n	    /**\n	     * Collapse this node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.collapse = function () {\n	        return baseStateChange('collapsed', true, 'collapsed', this);\n	    };\n\n	    /**\n	     * Get if node collapsed.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If collapsed.\n	     */\n	    TreeNode.prototype.collapsed = function () {\n	        return this.itree.state.collapsed;\n	    };\n\n	    /**\n	     * Get the containing context. If no parent present, the root context is returned.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNodes} Node array object.\n	     */\n	    TreeNode.prototype.context = function () {\n	        return this.hasParent() ? this.getParent().children : model;\n	    };\n\n	    /**\n	     * Copies node to a new tree instance.\n	     *\n	     * @category TreeNode\n	     * @param {boolean} hierarchy Include necessary ancestors to match hierarchy.\n	     * @return {object} Property \"to\" for defining destination.\n	     */\n	    TreeNode.prototype.copy = function (hierarchy) {\n	        var node = this;\n\n	        if (hierarchy) {\n	            node = node.copyHierarchy();\n	        }\n\n	        return {\n\n	            /**\n	             * Sets a destination.\n	             *\n	             * @category CopyNode\n	             * @param {object} dest Destination Inspire Tree.\n	             * @return {object} New node object.\n	             */\n	            to: function to(dest) {\n	                if (!(0, _isFunction3.default)(dest.addNode)) {\n	                    throw new Error('Destination must be an Inspire Tree instance.');\n	                }\n\n	                return dest.addNode(node.export());\n	            }\n	        };\n	    };\n\n	    /**\n	     * Copies all parents of a node.\n	     *\n	     * @category TreeNode\n	     * @param {boolean} excludeNode Exclude given node from hierarchy.\n	     * @return {TreeNode} Root node object with hierarchy.\n	     */\n	    TreeNode.prototype.copyHierarchy = function (excludeNode) {\n	        var node = this;\n	        var parents = node.getParents();\n\n	        var nodes = [];\n\n	        // Remove old hierarchy data\n	        (0, _each3.default)(parents, function (node) {\n	            var clone = (0, _cloneDeep3.default)(node);\n	            delete clone.itree.parent;\n	            delete clone.children;\n\n	            nodes.push(clone);\n	        });\n\n	        parents = nodes.reverse();\n\n	        if (!excludeNode) {\n	            var clone = (0, _cloneDeep3.default)(node);\n\n	            // Filter out hidden children\n	            if (node.hasChildren()) {\n	                clone.children = node.children.filter(function (n) {\n	                    return !n.itree.state.hidden;\n	                }).clone();\n\n	                clone.children._context = clone;\n	            }\n\n	            nodes.push(clone);\n	        }\n\n	        var hierarchy = nodes[0];\n	        var pointer = hierarchy;\n	        var l = nodes.length;\n	        (0, _each3.default)(nodes, function (parent, key) {\n	            var children = new TreeNodes();\n\n	            if (key + 1 < l) {\n	                children.push(nodes[key + 1]);\n	                pointer.children = children;\n\n	                pointer = pointer.children[0];\n	            }\n	        });\n\n	        return hierarchy;\n	    };\n\n	    /**\n	     * Deselect this node.\n	     *\n	     * If selection.require is true and this is the last selected\n	     * node, the node will remain in a selected state.\n	     *\n	     * @category TreeNode\n	     * @param {boolean} skipParentIndeterminate Skip refreshing parent indeterminate states.\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.deselect = function (skipParentIndeterminate) {\n	        if (this.selected() && (!tree.config.selection.require || tree.selected().length > 1)) {\n	            var node = this;\n	            dom.batch();\n\n	            node.itree.state.indeterminate = false;\n	            baseStateChange('selected', false, 'deselected', this);\n\n	            // If children were auto-selected\n	            if (tree.config.selection.autoSelectChildren) {\n	                // Deselect all children\n	                if (node.hasChildren()) {\n	                    node.children.each(function (child) {\n	                        child.deselect(true);\n	                    });\n	                }\n\n	                if (node.hasParent()) {\n	                    // Set indeterminate state for parent\n	                    if (tree.config.showCheckboxes && !skipParentIndeterminate) {\n	                        node.getParent().refreshIndeterminateState();\n	                    } else {\n	                        // Deselect parent node\n	                        baseStateChange('selected', false, 'deselected', node.getParent());\n	                    }\n	                }\n	            }\n\n	            dom.end();\n	        }\n\n	        return this;\n	    };\n\n	    /**\n	     * Expand this node.\n	     *\n	     * @category TreeNode\n	     * @return {Promise} Promise resolved on successful load and expand of children.\n	     */\n	    TreeNode.prototype.expand = function () {\n	        var node = this;\n\n	        return new _es6Promise.Promise(function (resolve, reject) {\n	            var allow = node.hasChildren() || isDynamic && node.children === true;\n\n	            if (allow && (node.collapsed() || node.hidden())) {\n	                node.itree.state.collapsed = false;\n	                node.itree.state.hidden = false;\n\n	                tree.emit('node.expanded', node);\n\n	                if (isDynamic && node.children === true) {\n	                    node.loadChildren().then(resolve).catch(reject);\n	                } else {\n	                    node.markDirty();\n	                    dom.applyChanges();\n	                    resolve(node);\n	                }\n	            } else {\n	                // Resolve immediately\n	                resolve(node);\n	            }\n	        });\n	    };\n\n	    /**\n	     * Get if node expanded.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If expanded.\n	     */\n	    TreeNode.prototype.expanded = function () {\n	        return !this.collapsed();\n	    };\n\n	    /**\n	     * Expand parent nodes.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.expandParents = function () {\n	        if (this.hasParent()) {\n	            this.getParent().recurseUp(function (node) {\n	                node.expand();\n	            });\n	        }\n\n	        return this;\n	    };\n\n	    /**\n	     * Clones a node, removes itree property, and returns it\n	     * as a native object.\n	     *\n	     * Note: does not use node.clone() because we don't want a\n	     * TreeNode and we need to avoid redundant cloning children.\n	     *\n	     * @category TreeNode\n	     * @return {object} Cloned/modified node object.\n	     */\n	    TreeNode.prototype.export = function () {\n	        var clone = (0, _cloneDeep3.default)(this);\n	        delete clone.itree;\n\n	        if (clone.hasChildren()) {\n	            clone.children = clone.children.export();\n	        }\n\n	        return clone.toObject();\n	    };\n\n	    /**\n	     * Focus a node without changing its selection.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.focus = function () {\n	        var node = this;\n\n	        if (!node.focused()) {\n	            // Batch selection changes\n	            dom.batch();\n	            tree.blurDeep();\n	            node.itree.state.focused = true;\n\n	            // Emit this event\n	            tree.emit('node.focused', node);\n\n	            // Mark hierarchy dirty and apply\n	            node.markDirty();\n	            dom.end();\n	        }\n\n	        return node;\n	    };\n\n	    /**\n	     * Get whether node has focus or not.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If focused.\n	     */\n	    TreeNode.prototype.focused = function () {\n	        return this.itree.state.focused;\n	    };\n\n	    /**\n	     * Get children for this node. If no children exist, an empty TreeNodes\n	     * collection is returned for safe chaining.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNodes} Array of node objects.\n	     */\n	    TreeNode.prototype.getChildren = function () {\n	        return this.hasChildren() ? this.children : new TreeNodes();\n	    };\n\n	    /**\n	     * Get the immediate parent, if any.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.getParent = function () {\n	        return this.itree.parent;\n	    };\n\n	    /**\n	     * Returns parent nodes. Excludes any siblings.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNodes} Node objects.\n	     */\n	    TreeNode.prototype.getParents = function () {\n	        var parents = new TreeNodes();\n\n	        if (this.hasParent()) {\n	            this.getParent().recurseUp(function (node) {\n	                parents.push(node);\n	            });\n	        }\n\n	        return parents;\n	    };\n\n	    /**\n	     * Get a textual hierarchy for a given node. An array\n	     * of text from this node's root ancestor to the given node.\n	     *\n	     * @category TreeNode\n	     * @return {array} Array of node texts.\n	     */\n	    TreeNode.prototype.getTextualHierarchy = function () {\n	        var paths = [];\n\n	        this.recurseUp(function (node) {\n	            paths.unshift(node.text);\n	        });\n\n	        return paths;\n	    };\n\n	    /**\n	     * If node has any children.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If children.\n	     */\n	    TreeNode.prototype.hasChildren = function () {\n	        return (0, _isArrayLike3.default)(this.children) && this.children.length > 0;\n	    };\n\n	    /**\n	     * If node has a parent.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If parent.\n	     */\n	    TreeNode.prototype.hasParent = function () {\n	        return Boolean(this.itree.parent);\n	    };\n\n	    /**\n	     * If node has any visible children.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If visible children.\n	     */\n	    TreeNode.prototype.hasVisibleChildren = function () {\n	        var hasVisibleChildren = false;\n\n	        if (this.hasChildren()) {\n	            hasVisibleChildren = this.children.filter('available').length > 0;\n	        }\n\n	        return hasVisibleChildren;\n	    };\n\n	    /**\n	     * Get if node hidden.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If hidden.\n	     */\n	    TreeNode.prototype.hidden = function () {\n	        return this.itree.state.hidden;\n	    };\n\n	    /**\n	     * Hide this node.\n	     *\n	     * @category TreeNode\n	     * @return {object} Node object.\n	     */\n	    TreeNode.prototype.hide = function () {\n	        var node = baseStateChange('hidden', true, 'hidden', this);\n\n	        // Update children\n	        if (node.hasChildren()) {\n	            node.children.hide();\n	        }\n\n	        return node;\n	    };\n\n	    /**\n	     * Get if node is indeterminately selected.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If indeterminately selected.\n	     */\n	    TreeNode.prototype.indeterminate = function () {\n	        return this.itree.state.indeterminate;\n	    };\n\n	    /**\n	     * Returns a \"path\" of indices, values which map this node's location within all parent contexts.\n	     *\n	     * @category TreeNode\n	     * @return {string} Index path\n	     */\n	    TreeNode.prototype.indexPath = function () {\n	        var indices = [];\n\n	        this.recurseUp(function (node) {\n	            indices.push((0, _indexOf3.default)(node.context(), node));\n	        });\n\n	        return indices.reverse().join('.');\n	    };\n\n	    /**\n	     * Find the last + deepest visible child of the previous sibling.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.lastDeepestVisibleChild = function () {\n	        var found;\n\n	        if (this.hasChildren() && !this.collapsed()) {\n	            found = (0, _findLast3.default)(this.children, function (node) {\n	                return node.visible();\n	            });\n\n	            var res = found.lastDeepestVisibleChild();\n	            if (res) {\n	                found = res;\n	            }\n	        }\n\n	        return found;\n	    };\n\n	    /**\n	     * Initiate a dynamic load of children for a given node.\n	     *\n	     * This requires `tree.config.data` to be a function which accepts\n	     * three arguments: node, resolve, reject.\n	     *\n	     * Use the `node` to filter results.\n	     *\n	     * On load success, pass the result array to `resolve`.\n	     * On error, pass the Error to `reject`.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.loadChildren = function () {\n	        var node = this;\n\n	        return new _es6Promise.Promise(function (resolve, reject) {\n	            if (!isDynamic || node.children !== true) {\n	                reject(new Error('Node does not have or support dynamic children.'));\n	            }\n\n	            node.itree.state.loading = true;\n	            node.markDirty();\n	            dom.applyChanges();\n\n	            var complete = function complete(results) {\n	                dom.batch();\n	                node.itree.state.loading = false;\n	                node.children = collectionToModel(results, node);\n	                node.markDirty();\n	                dom.end();\n\n	                resolve(node.children);\n\n	                tree.emit('children.loaded', node);\n	            };\n\n	            var error = function error(err) {\n	                node.itree.state.loading = false;\n	                node.children = new TreeNodes();\n	                node.children._context = node;\n	                node.markDirty();\n	                dom.applyChanges();\n\n	                reject(err);\n\n	                tree.emit('tree.loaderror', err);\n	            };\n\n	            var loader = tree.config.data(node, complete, error);\n\n	            // Data loader is likely a promise\n	            if ((0, _isObject3.default)(loader)) {\n	                standardizePromise(loader).then(complete).catch(error);\n	            }\n	        });\n	    };\n\n	    /**\n	     * Mark a node as dirty, rebuilding this node in the virtual DOM\n	     * and rerendering to the live DOM, next time applyChanges is called.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.markDirty = function () {\n	        if (!this.itree.dirty) {\n	            this.itree.dirty = true;\n\n	            if (this.hasParent()) {\n	                this.getParent().markDirty();\n	            }\n	        }\n\n	        return this;\n	    };\n\n	    /**\n	     * Find the next visible sibling of our ancestor. Continues\n	     * seeking up the tree until a valid node is found or we\n	     * reach the root node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.nextVisibleAncestralSiblingNode = function () {\n	        var next;\n\n	        if (this.hasParent()) {\n	            var parent = this.getParent();\n	            next = parent.nextVisibleSiblingNode();\n\n	            if (!next) {\n	                next = parent.nextVisibleAncestralSiblingNode();\n	            }\n	        }\n\n	        return next;\n	    };\n\n	    /**\n	     * Find next visible child node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object, if any.\n	     */\n	    TreeNode.prototype.nextVisibleChildNode = function () {\n	        var startingNode = this;\n	        var next;\n\n	        if (startingNode.hasChildren()) {\n	            next = (0, _find3.default)(startingNode.children, function (child) {\n	                return child.visible();\n	            });\n	        }\n\n	        return next;\n	    };\n\n	    /**\n	     * Get the next visible node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object if any.\n	     */\n	    TreeNode.prototype.nextVisibleNode = function () {\n	        var startingNode = this;\n	        var next;\n\n	        // 1. Any visible children\n	        next = startingNode.nextVisibleChildNode();\n\n	        // 2. Any Siblings\n	        if (!next) {\n	            next = startingNode.nextVisibleSiblingNode();\n	        }\n\n	        // 3. Find sibling of ancestor(s)\n	        if (!next) {\n	            next = startingNode.nextVisibleAncestralSiblingNode();\n	        }\n\n	        return next;\n	    };\n\n	    /**\n	     * Find the next visible sibling node.\n	     *\n	     * @category TreeNode\n	     * @return {object} Node object, if any.\n	     */\n	    TreeNode.prototype.nextVisibleSiblingNode = function () {\n	        var startingNode = this;\n	        var context = startingNode.hasParent() ? startingNode.getParent().children : tree.nodes();\n	        var i = (0, _findIndex3.default)(context, { id: startingNode.id });\n\n	        return (0, _find3.default)((0, _slice3.default)(context, i + 1), function (node) {\n	            return node.visible();\n	        });\n	    };\n\n	    /**\n	     * Find the previous visible node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object, if any.\n	     */\n	    TreeNode.prototype.previousVisibleNode = function () {\n	        var startingNode = this;\n	        var prev;\n\n	        // 1. Any Siblings\n	        prev = startingNode.previousVisibleSiblingNode();\n\n	        // 2. If that sibling has children though, go there\n	        if (prev && prev.hasChildren() && !prev.collapsed()) {\n	            prev = prev.lastDeepestVisibleChild();\n	        }\n\n	        // 3. Parent\n	        if (!prev && startingNode.hasParent()) {\n	            prev = startingNode.getParent();\n	        }\n\n	        return prev;\n	    };\n\n	    /**\n	     * Find the previous visible sibling node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object, if any.\n	     */\n	    TreeNode.prototype.previousVisibleSiblingNode = function () {\n	        var context = this.hasParent() ? this.getParent().children : tree.nodes();\n	        var i = (0, _findIndex3.default)(context, { id: this.id });\n	        return (0, _findLast3.default)((0, _slice3.default)(context, 0, i), function (node) {\n	            return node.visible();\n	        });\n	    };\n\n	    /**\n	     * Iterate down node and any children.\n	     *\n	     * @category TreeNode\n	     * @param {function} iteratee Iteratee function.\n	     * @return {TreeNode} Resulting node.\n	     */\n	    TreeNode.prototype.recurseDown = function (iteratee) {\n	        recurseDown(this, iteratee);\n\n	        return this;\n	    };\n\n	    /**\n	     * Iterate up a node and its parents.\n	     *\n	     * @category TreeNode\n	     * @param {function} iteratee Iteratee function.\n	     * @return {TreeNode} Resulting node.\n	     */\n	    TreeNode.prototype.recurseUp = function (iteratee) {\n	        var result = iteratee(this);\n\n	        if (result !== false && this.hasParent()) {\n	            this.getParent().recurseUp(iteratee);\n	        }\n\n	        return this;\n	    };\n\n	    /**\n	     * Updates the indeterminate state of this node.\n	     *\n	     * Only available when checkbox=true.\n	     * True if some, but not all children are selected.\n	     * False if no children are selected.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.refreshIndeterminateState = function () {\n	        var node = this;\n	        var oldValue = node.itree.state.indeterminate;\n	        node.itree.state.indeterminate = false;\n\n	        if (tree.config.showCheckboxes) {\n	            if (node.hasChildren()) {\n	                var childrenCount = node.children.length;\n	                var indeterminate = 0;\n	                var selected = 0;\n\n	                node.children.each(function (n) {\n	                    if (n.selected()) {\n	                        selected++;\n	                    }\n\n	                    if (n.indeterminate()) {\n	                        indeterminate++;\n	                    }\n	                });\n\n	                // Set selected if all children are\n	                node.itree.state.selected = selected === childrenCount;\n\n	                // Set indeterminate if any children are, or some children are selected\n	                if (!node.selected()) {\n	                    node.itree.state.indeterminate = indeterminate > 0 || childrenCount > 0 && selected > 0 && selected < childrenCount;\n	                }\n	            }\n\n	            if (node.hasParent()) {\n	                node.getParent().refreshIndeterminateState();\n	            }\n\n	            if (oldValue !== node.itree.state.indeterminate) {\n	                node.markDirty();\n	            }\n	        }\n\n	        return node;\n	    };\n\n	    /**\n	     * Remove a node from the tree.\n	     *\n	     * @category TreeNode\n	     * @return {object} Removed tree node object.\n	     */\n	    TreeNode.prototype.remove = function () {\n	        var node = this;\n\n	        var parent;\n	        if (node.hasParent()) {\n	            parent = node.getParent();\n	        }\n\n	        var context = parent ? parent.children : model;\n	        (0, _remove3.default)(context, { id: node.id });\n\n	        if (parent) {\n	            parent.refreshIndeterminateState();\n	        }\n\n	        var exported = node.export();\n	        tree.emit('node.removed', exported);\n\n	        dom.applyChanges();\n\n	        return exported;\n	    };\n\n	    /**\n	     * Get if node soft-removed.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If soft-removed.\n	     */\n	    TreeNode.prototype.removed = function () {\n	        return this.itree.state.removed;\n	    };\n\n	    /**\n	     * Restore state if soft-removed.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.restore = function () {\n	        return baseStateChange('removed', false, 'restored', this);\n	    };\n\n	    /**\n	     * Select this node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.select = function () {\n	        var node = this;\n\n	        if (!node.selected() && node.selectable()) {\n	            // Batch selection changes\n	            dom.batch();\n\n	            node.focus();\n\n	            if (tree.canAutoDeselect()) {\n	                var oldVal = tree.config.selection.require;\n	                tree.config.selection.require = false;\n	                tree.deselectDeep();\n	                tree.config.selection.require = oldVal;\n	            }\n\n	            node.itree.state.selected = true;\n\n	            if (tree.config.selection.autoSelectChildren) {\n	                if (node.hasChildren()) {\n	                    node.children.recurseDown(function (child) {\n	                        baseStateChange('selected', true, 'selected', child);\n	                    });\n	                }\n\n	                if (tree.config.showCheckboxes && node.hasParent()) {\n	                    node.getParent().refreshIndeterminateState();\n	                }\n	            }\n\n	            // Cache as the last selected node\n	            lastSelectedNode = node;\n\n	            // Emit this event\n	            tree.emit('node.selected', node);\n\n	            // Mark hierarchy dirty and apply\n	            node.markDirty();\n	            dom.end();\n	        }\n\n	        return node;\n	    };\n\n	    /**\n	     * Get if node selectable.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If node selectable.\n	     */\n	    TreeNode.prototype.selectable = function () {\n	        var allow = tree.config.selection.allow(this);\n	        return typeof allow === 'boolean' ? allow : this.itree.state.selectable;\n	    };\n\n	    /**\n	     * Get if node selected.\n	     *\n	     * @category TreeNode\n	     * @return {boolean} If selected.\n	     */\n	    TreeNode.prototype.selected = function () {\n	        return this.itree.state.selected;\n	    };\n\n	    /**\n	     * Set a root property on this node.\n	     *\n	     * @category TreeNode\n	     * @param {string|number} property Property name.\n	     * @param {*} value New value.\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.set = function (property, value) {\n	        this[property] = value;\n	        this.markDirty();\n\n	        return this;\n	    };\n\n	    /**\n	     * Show this node.\n	     *\n	     * @category TreeNode\n	     * @param {boolean} selectable Selectable state.\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.setSelectable = function (selectable) {\n	        return baseStateChange('selectable', selectable, 'selectability-changed', this);\n	    };\n\n	    /**\n	     * Show this node.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.show = function () {\n	        return baseStateChange('hidden', false, 'shown', this);\n	    };\n\n	    /**\n	     * Mark this node as \"removed\" without actually removing it.\n	     *\n	     * Expand/show methods will never reveal this node until restored.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.softRemove = function () {\n	        return baseStateChange('removed', true, 'softremoved', this, 'softRemove');\n	    };\n\n	    /**\n	     * Toggles collapsed state.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.toggleCollapse = function () {\n	        return this.collapsed() ? this.expand() : this.collapse();\n	    };\n\n	    /**\n	     * Toggles selected state.\n	     *\n	     * @category TreeNode\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNode.prototype.toggleSelect = function () {\n	        return this.selected() ? this.deselect() : this.select();\n	    };\n\n	    /**\n	     * Export this node as a native Object.\n	     *\n	     * @category TreeNode\n	     * @return {object} Node object.\n	     */\n	    TreeNode.prototype.toObject = function () {\n	        var object = {};\n\n	        (0, _each3.default)(this, function (value, property) {\n	            object[property] = value;\n	        });\n\n	        if (this.hasChildren() && (0, _isFunction3.default)(this.children.toArray)) {\n	            object.children = this.children.toArray();\n	        }\n\n	        return object;\n	    };\n\n	    /**\n	     * Checks whether a node is visible to a user. Returns false\n	     * if it's hidden, or if any ancestor is hidden or collapsed.\n	     *\n	     * @category TreeNode\n	     * @param {object} node Node object.\n	     * @return {boolean} Whether visible.\n	     */\n	    TreeNode.prototype.visible = function () {\n	        var node = this;\n\n	        var isVisible = true;\n	        if (node.hidden() || node.removed()) {\n	            isVisible = false;\n	        } else if (node.hasParent()) {\n	            if (node.getParent().collapsed()) {\n	                isVisible = false;\n	            } else {\n	                isVisible = node.getParent().visible();\n	            }\n	        } else {\n	            isVisible = true;\n	        }\n\n	        return isVisible;\n	    };\n\n	    /**\n	     * An Array-like collection of TreeNodes.\n	     *\n	     * @category TreeNodes\n	     * @param {array} array Array of TreeNode objects.\n	     * @return {TreeNodes} Collection of TreeNode\n	     */\n	    function TreeNodes(array) {\n	        var treeNodes = this;\n\n	        if ((0, _isArray3.default)(array)) {\n	            (0, _each3.default)(array, function (node) {\n	                treeNodes.push(node);\n	            });\n	        }\n	    };\n	    TreeNodes.prototype = Object.create(Array.prototype);\n	    TreeNodes.prototype.constructor = TreeNodes;\n\n	    /**\n	     * Adds a new node to this collection. If a sort\n	     * method is configured, the node will be added\n	     * in the appropriate order.\n	     *\n	     * @category TreeNodes\n	     * @param {object} object Node\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNodes.prototype.addNode = function (object) {\n	        // Base insertion index\n	        var index = this.length;\n\n	        // If tree is sorted, insert in correct position\n	        if (tree.config.sort) {\n	            index = (0, _sortedIndexBy3.default)(this, object, tree.config.sort);\n	        }\n\n	        return this.insertAt(index, object);\n	    };\n\n	    /**\n	     * Clones (deep) the array of nodes.\n	     *\n	     * Note: Cloning will *not* clone the context pointer.\n	     *\n	     * @category TreeNodes\n	     * @return {TreeNodes} Array of cloned nodes.\n	     */\n	    TreeNodes.prototype.clone = function () {\n	        var newNodes = new TreeNodes();\n\n	        (0, _each3.default)(this, function (node) {\n	            newNodes.push(node.clone());\n	        });\n\n	        return newNodes;\n	    };\n\n	    /**\n	     * Concat nodes like an Array would.\n	     *\n	     * @category TreeNodes\n	     * @param {TreeNodes} nodes Array of nodes.\n	     * @return {TreeNodes} Resulting node array.\n	     */\n	    TreeNodes.prototype.concat = function (nodes) {\n	        var newNodes = new TreeNodes();\n	        newNodes._context = this._context;\n\n	        var pusher = function pusher(node) {\n	            newNodes.push(node);\n	        };\n\n	        (0, _each3.default)(this, pusher);\n	        (0, _each3.default)(nodes, pusher);\n\n	        return newNodes;\n	    };\n\n	    /**\n	     * Get the context of this collection. If a collection\n	     * of children, context is the parent node. Otherwise\n	     * the context is the tree itself.\n	     *\n	     * @category TreeNodes\n	     * @return {TreeNode|object} Node object or tree instance.\n	     */\n	    TreeNodes.prototype.context = function () {\n	        return this._context || tree;\n	    };\n\n	    /**\n	     * Copies nodes to a new tree instance.\n	     *\n	     * @category TreeNodes\n	     * @param {boolean} hierarchy Include necessary ancestors to match hierarchy.\n	     * @return {object} Methods to perform action on copied nodes.\n	     */\n	    TreeNodes.prototype.copy = function (hierarchy) {\n	        var nodes = this;\n\n	        return {\n\n	            /**\n	             * Sets a destination.\n	             *\n	             * @category CopyNode\n	             * @param {object} dest Destination Inspire Tree.\n	             * @return {array} Array of new nodes.\n	             */\n	            to: function to(dest) {\n	                if (!(0, _isFunction3.default)(dest.addNodes)) {\n	                    throw new Error('Destination must be an Inspire Tree instance.');\n	                }\n\n	                var newNodes = new TreeNodes();\n\n	                (0, _each3.default)(nodes, function (node) {\n	                    newNodes.push(node.copy(hierarchy).to(dest));\n	                });\n\n	                return newNodes;\n	            }\n	        };\n	    };\n\n	    /**\n	     * Returns deepest nodes from this array.\n	     *\n	     * @category TreeNodes\n	     * @return {TreeNodes} Array of node objects.\n	     */\n	    TreeNodes.prototype.deepest = function () {\n	        var matches = new TreeNodes();\n\n	        this.recurseDown(function (node) {\n	            if (!node.children) {\n	                matches.push(node);\n	            }\n	        });\n\n	        return matches;\n	    };\n\n	    /**\n	     * Iterate every TreeNode in this collection.\n	     *\n	     * @category TreeNodes\n	     * @param {function} iteratee Iteratee invoke for each node.\n	     * @return {TreeNodes} Array of node objects.\n	     */\n	    TreeNodes.prototype.each = function (iteratee) {\n	        (0, _each3.default)(this, iteratee);\n\n	        return this;\n	    };\n\n	    /**\n	     * Recursively expands all nodes, loading all dynamic calls.\n	     *\n	     * @category TreeNodes\n	     * @return {Promise} Promise resolved only when all children have loaded and expanded.\n	     */\n	    TreeNodes.prototype.expandDeep = function () {\n	        var nodes = this;\n\n	        return new _es6Promise.Promise(function (resolve) {\n	            var waitCount = 0;\n\n	            var done = function done() {\n	                if (--waitCount === 0) {\n	                    resolve(nodes);\n	                }\n	            };\n\n	            nodes.recurseDown(function (node) {\n	                waitCount++;\n\n	                // Ignore nodes without children\n	                if (node.children) {\n	                    node.expand().catch(done).then(function () {\n	                        // Manually trigger expansion on newly loaded children\n	                        node.children.expandDeep().catch(done).then(done);\n	                    });\n	                } else {\n	                    done();\n	                }\n	            });\n	        });\n	    };\n\n	    /**\n	     * Clones an array of node objects and removes any\n	     * itree instance information/state.\n	     *\n	     * @category TreeNodes\n	     * @return {array} Array of node objects.\n	     */\n	    TreeNodes.prototype.export = function () {\n	        var clones = [];\n\n	        (0, _each3.default)(this, function (node) {\n	            clones.push(node.export());\n	        });\n\n	        return clones;\n	    };\n\n	    /**\n	     * Returns a cloned hierarchy of all nodes matching a predicate.\n	     *\n	     * Because it filters deeply, we must clone all nodes so that we\n	     * don't affect the actual node array.\n	     *\n	     * @category TreeNodes\n	     * @param {string|function} predicate State flag or custom function.\n	     * @return {TreeNodes} Array of node objects.\n	     */\n	    TreeNodes.prototype.extract = function (predicate) {\n	        var flat = this.flatten(predicate);\n	        var matches = new TreeNodes();\n\n	        (0, _each3.default)(flat, function (node) {\n	            matches.push(node.copyHierarchy());\n	        });\n\n	        return matches;\n	    };\n\n	    /**\n	     * Returns nodes which match a predicate.\n	     *\n	     * @category TreeNodes\n	     * @param {string|function} predicate State flag or custom function.\n	     * @return {TreeNodes} Array of node objects.\n	     */\n	    TreeNodes.prototype.filter = function (predicate) {\n	        var fn = getPredicateFunction(predicate);\n	        var matches = new TreeNodes();\n\n	        (0, _each3.default)(this, function (node) {\n	            if (fn(node)) {\n	                matches.push(node);\n	            }\n	        });\n\n	        return matches;\n	    };\n\n	    /**\n	     * Flattens a hierarchy, returning only node(s) matching the\n	     * expected state or predicate function.\n	     *\n	     * @category TreeNodes\n	     * @param {string|function} predicate State property or custom function.\n	     * @return {TreeNodes} Flat array of matching nodes.\n	     */\n	    TreeNodes.prototype.flatten = function (predicate) {\n	        var flat = new TreeNodes();\n\n	        var fn = getPredicateFunction(predicate);\n	        this.recurseDown(function (node) {\n	            if (fn(node)) {\n	                flat.push(node);\n	            }\n	        });\n\n	        return flat;\n	    };\n\n	    /**\n	     * Get a specific node in the collection, or undefined if it doesn't exist.\n	     *\n	     * @category TreeNodes\n	     * @param {int} index Numeric index of requested node.\n	     * @return {TreeNode} Node object. Undefined if invalid index.\n	     */\n	    TreeNodes.prototype.get = function (index) {\n	        return this[index];\n	    };\n\n	    /**\n	     * Insert a new node at a given position.\n	     *\n	     * @category TreeNodes\n	     * @param {integer} index Index at which to insert the node.\n	     * @param {object} object Raw node object or TreeNode.\n	     * @return {TreeNode} Node object.\n	     */\n	    TreeNodes.prototype.insertAt = function (index, object) {\n	        // If node has a pre-existing ID\n	        if (object.id) {\n	            // Is it already in the tree?\n	            var existingNode = tree.node(object.id);\n	            if (existingNode) {\n	                existingNode.restore().show();\n\n	                // Merge children\n	                if ((0, _isArrayLike3.default)(object.children)) {\n	                    // Setup existing node's children property if needed\n	                    if (!(0, _isArrayLike3.default)(existingNode.children)) {\n	                        existingNode.children = new TreeNodes();\n	                        existingNode.children._context = existing;\n	                    }\n\n	                    // Copy each child (using addNode, which uses insertAt)\n	                    (0, _each3.default)(object.children, function (child) {\n	                        existingNode.children.addNode(child);\n	                    });\n	                }\n\n	                // Merge truthy children\n	                else if (object.children) {\n	                        existingNode.children = object.children;\n	                    }\n\n	                existingNode.markDirty();\n	                dom.applyChanges();\n\n	                // Node merged, return it.\n	                return existingNode;\n	            }\n	        }\n\n	        // Node is new, insert at given location.\n	        var node = tree.isNode(object) ? object : objectToModel(object);\n\n	        // Insert\n	        this.splice(index, 0, node);\n\n	        // Refresh parent state and mark dirty\n	        if (this._context) {\n	            node.itree.parent = this._context;\n	            this._context.refreshIndeterminateState().markDirty();\n	        }\n\n	        // Event\n	        tree.emit('node.added', node);\n\n	        node.markDirty();\n	        dom.applyChanges();\n\n	        return node;\n	    };\n\n	    /**\n	     * Iterate down all nodes and any children.\n	     *\n	     * @category TreeNodes\n	     * @param {function} iteratee Iteratee function.\n	     * @return {TreeNodes} Resulting nodes.\n	     */\n	    TreeNodes.prototype.recurseDown = function (iteratee) {\n	        recurseDown(this, iteratee);\n\n	        return this;\n	    };\n\n	    /**\n	     * Sorts all TreeNode objects in this collection.\n	     *\n	     * If no custom sorter given, the configured \"sort\" value will be used.\n	     *\n	     * @category TreeNodes\n	     * @param {string|function} sorter Sort function or property name.\n	     * @return {TreeNodes} Array of node obejcts.\n	     */\n	    TreeNodes.prototype.sort = function (sorter) {\n	        var nodes = this;\n	        sorter = sorter || tree.config.sort;\n\n	        // Only apply sort if one provided\n	        if (sorter) {\n	            var sorted = (0, _sortBy3.default)(nodes, sorter);\n\n	            nodes.length = 0;\n	            (0, _each3.default)(sorted, function (node) {\n	                nodes.push(node);\n	            });\n	        }\n\n	        return nodes;\n	    };\n\n	    /**\n	     * Chained method for returning a chain to the tree context.\n	     *\n	     * @category TreeNodes\n	     * @return {[type]} [description]\n	     */\n	    TreeNodes.prototype.tree = function () {\n	        return tree;\n	    };\n\n	    /**\n	     * Returns a native Array of nodes.\n	     *\n	     * @category TreeNodes\n	     * @return {array} Array of node objects.\n	     */\n	    TreeNodes.prototype.toArray = function () {\n	        var array = [];\n\n	        (0, _each3.default)(this, function (node) {\n	            array.push(node.toObject());\n	        });\n\n	        return array;\n	    };\n\n	    /**\n	     * Map shallow to each TreeNode\n	     *\n	     * @private\n	     * @param {string} method Method name.\n	     * @return {void}\n	     */\n	    function mapToEach(method) {\n	        TreeNodes.prototype[method] = function () {\n	            dom.batch();\n	            (0, _each3.default)(this, function (node) {\n	                node[method]();\n	            });\n	            dom.end();\n\n	            return this;\n	        };\n	    }\n\n	    /**\n	     * Map deeply to all TreeNodes and children\n	     *\n	     * @private\n	     * @param {string} method Method name.\n	     * @return {void}\n	     */\n	    function mapToEachDeeply(method) {\n	        TreeNodes.prototype[method + 'Deep'] = function () {\n	            dom.batch();\n	            this.recurseDown(function (node) {\n	                node[method]();\n	            });\n	            dom.end();\n\n	            return this;\n	        };\n	    }\n\n	    // Methods we can map to each/deeply TreeNode\n	    var mapped = ['blur', 'collapse', 'deselect', 'hide', 'restore', 'select', 'setSelectable', 'show'];\n	    (0, _each3.default)(mapped, function (method) {\n	        mapToEach(method);\n	        mapToEachDeeply(method);\n	    });\n\n	    // Methods we can map to each TreeNode\n	    (0, _each3.default)(['clean', 'expand', 'expandParents', 'softRemove'], mapToEach);\n\n	    // Predicate methods we can map\n	    (0, _each3.default)(['available', 'collapsed', 'expanded', 'focused', 'hidden', 'removed', 'selectable', 'selected', 'visible'], function (state) {\n	        TreeNodes.prototype[state] = function (full) {\n	            if (full) {\n	                return this.extract(state);\n	            }\n\n	            // Cache a state predicate function\n	            var fn = getPredicateFunction(state);\n\n	            return this.flatten(function (node) {\n	                // Never include removed nodes unless specifically requested\n	                if (state !== 'removed' && node.removed()) {\n	                    return false;\n	                }\n\n	                return fn(node);\n	            });\n	        };\n	    });\n\n	    /**\n	     * Stores repetitive state change logic for most state methods.\n	     *\n	     * @private\n	     * @param {string} prop State property name.\n	     * @param {boolean} value New state value.\n	     * @param {string} verb Verb used for events.\n	     * @param {TreeNode} node Node object.\n	     * @param {string} deep Optional name of state method to call recursively.\n	     * @return {TreeNode} Node object.\n	     */\n	    function baseStateChange(prop, value, verb, node, deep) {\n	        if (node.itree.state[prop] !== value) {\n	            if (tree.config.nodes.resetStateOnRestore && verb === 'restored') {\n	                resetState(node);\n	            }\n\n	            node.itree.state[prop] = value;\n\n	            tree.emit('node.' + verb, node);\n\n	            if (deep && node.hasChildren()) {\n	                node.getChildren().recurseDown(function (child) {\n	                    child[deep]();\n	                });\n	            }\n\n	            node.markDirty();\n	            dom.applyChanges();\n	        }\n\n	        return node;\n	    }\n\n	    /**\n	     * Parses a raw collection of objects into a model used\n	     * within a tree. Adds state and other internal properties.\n	     *\n	     * @private\n	     * @param {array|object} array Array of nodes\n	     * @param {object} parent Pointer to parent object\n	     * @return {array|object} Object model.\n	     */\n	    function collectionToModel(array, parent) {\n	        var collection = new TreeNodes();\n\n	        // Sort\n	        if (tree.config.sort) {\n	            array = (0, _sortBy3.default)(array, tree.config.sort);\n	        }\n\n	        (0, _each3.default)(array, function (node) {\n	            collection.push(objectToModel(node, parent));\n	        });\n\n	        collection._context = parent;\n\n	        return collection;\n	    };\n\n	    /**\n	     * Creates a predicate function.\n	     *\n	     * @private\n	     * @param {string|function} predicate Property name or custom function.\n	     * @return {function} Predicate function.\n	     */\n	    function getPredicateFunction(predicate) {\n	        var fn = predicate;\n	        if (typeof predicate === 'string') {\n	            fn = function fn(node) {\n	                return (0, _isFunction3.default)(node[predicate]) ? node[predicate]() : node[predicate];\n	            };\n	        }\n\n	        return fn;\n	    }\n\n	    /**\n	     * Parse a raw object into a model used within a tree.\n	     *\n	     * Note: Uses native js over lodash where performance\n	     * benefits most, since this handles every node.\n	     *\n	     * @private\n	     * @param {object} object Source object\n	     * @param {object} parent Pointer to parent object.\n	     * @return {object} Final object\n	     */\n	    function objectToModel(object, parent) {\n	        // Create or type-ensure ID\n	        object.id = object.id || (0, _cuid2.default)();\n	        if (typeof object.id !== 'string') {\n	            object.id = object.id.toString();\n	        }\n\n	        // High-performance default assignments\n	        var itree = object.itree = object.itree || {};\n	        itree.icon = itree.icon || false;\n\n	        var li = itree.li = itree.li || {};\n	        li.attributes = li.attributes || {};\n\n	        var state = itree.state = itree.state || {};\n\n	        // Enabled by default\n	        state.collapsed = typeof state.collapsed === 'boolean' ? state.collapsed : defaultState.collapsed;\n	        state.selectable = typeof state.selectable === 'boolean' ? state.selectable : defaultState.selectable;\n\n	        // Disabled by default\n	        state.focused = state.focused || defaultState.focused;\n	        state.hidden = state.hidden || defaultState.hidden;\n	        state.indeterminate = state.indeterminate || defaultState.indeterminate;\n	        state.loading = state.loading || defaultState.loading;\n	        state.removed = state.removed || defaultState.removed;\n	        state.selected = state.selected || defaultState.selected;\n\n	        // Save parent, if any.\n	        object.itree.parent = parent;\n\n	        // Wrap\n	        object = (0, _assign3.default)(new TreeNode(), object);\n\n	        if (object.hasChildren()) {\n	            object.children = collectionToModel(object.children, object);\n	        }\n\n	        // Fire events for pre-set states, if enabled\n	        if (allowsLoadEvents) {\n	            (0, _each3.default)(tree.config.allowLoadEvents, function (eventName) {\n	                if (state[eventName]) {\n	                    tree.emit('node.' + eventName, object);\n	                }\n	            });\n	        }\n\n	        return object;\n	    };\n\n	    /**\n	     * Base recursion function for a collection or node.\n	     *\n	     * Returns false if execution should cease.\n	     *\n	     * @private\n	     * @param {TreeNode|TreeNodes} obj Node or collection.\n	     * @param {function} iteratee Iteratee function\n	     * @return {boolean} Cease iteration.\n	     */\n	    function recurseDown(obj, iteratee) {\n	        var res;\n\n	        if ((0, _isArrayLike3.default)(obj)) {\n	            (0, _each3.default)(obj, function (node) {\n	                res = recurseDown(node, iteratee);\n\n	                return res;\n	            });\n	        } else {\n	            res = iteratee(obj);\n\n	            // Recurse children\n	            if (res !== false && obj.hasChildren()) {\n	                res = recurseDown(obj.children, iteratee);\n	            }\n	        }\n\n	        return res;\n	    }\n\n	    /**\n	     * Reset a node's state to the tree default.\n	     *\n	     * @private\n	     * @param {TreeNode} node Node object.\n	     * @returns {TreeNode} Node object.\n	     */\n	    function resetState(node) {\n	        (0, _each3.default)(defaultState, function (val, prop) {\n	            node.itree.state[prop] = val;\n	        });\n\n	        return node;\n	    }\n\n	    var model = new TreeNodes();\n\n	    // Map some model.TreeNodes method to the tree to make life easier for users\n	    for (var method in TreeNodes.prototype) {\n	        if (method !== 'constructor' && !tree[method] && (0, _isFunction3.default)(TreeNodes.prototype[method])) {\n	            (function (methodName) {\n	                tree[methodName] = function () {\n	                    return model[methodName].apply(model, arguments);\n	                };\n	            })(method);\n	        }\n	    }\n\n	    /**\n	     * Resolve promise-like objects consistently.\n	     *\n	     * @private\n	     * @param {object} promise Promise-like object.\n	     * @returns {Promise} Promise\n	     */\n	    function standardizePromise(promise) {\n	        return new _es6Promise.Promise(function (resolve, reject) {\n	            if (!(0, _isObject3.default)(promise)) {\n	                return reject(new Error('Invalid Promise'));\n	            }\n\n	            if ((0, _isFunction3.default)(promise.then)) {\n	                promise.then(resolve);\n	            }\n\n	            // jQuery promises use \"error\"\n	            if ((0, _isFunction3.default)(promise.error)) {\n	                promise.error(reject);\n	            } else if ((0, _isFunction3.default)(promise.catch)) {\n	                promise.catch(reject);\n	            }\n	        });\n	    };\n\n	    /**\n	     * Add nodes.\n	     *\n	     * @category Tree\n	     * @param {array} nodes Array of node objects.\n	     * @return {TreeNodes} Added node objects.\n	     */\n	    tree.addNodes = function (nodes) {\n	        dom.batch();\n\n	        var newNodes = new TreeNodes();\n	        (0, _each3.default)(nodes, function (node) {\n	            newNodes.push(tree.addNode(node));\n	        });\n\n	        dom.end();\n\n	        return newNodes;\n	    };\n\n	    /**\n	     * Compares any number of TreeNode objects and returns\n	     * the minimum and maximum (starting/ending) nodes.\n	     *\n	     * @category Tree\n	     * @return {array} Array with two TreeNode objects.\n	     */\n	    tree.boundingNodes = function () {\n	        var pathMap = (0, _transform3.default)(arguments, function (map, node) {\n	            map[node.indexPath().replace(/\\./g, '')] = node;\n	        }, {});\n\n	        var paths = (0, _sortBy3.default)(Object.keys(pathMap));\n	        return [(0, _get3.default)(pathMap, (0, _head3.default)(paths)), (0, _get3.default)(pathMap, (0, _tail3.default)(paths))];\n	    };\n\n	    /**\n	     * Get if the tree will auto-deselect currently selected nodes\n	     * when a new selection is made.\n	     *\n	     * @category Tree\n	     * @return {boolean} If tree will auto-deselect nodes.\n	     */\n	    tree.canAutoDeselect = function () {\n	        return tree.config.selection.autoDeselect && !preventDeselection;\n	    };\n\n	    /**\n	     * Shows all nodes and collapses parents.\n	     *\n	     * @category Tree\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.clearSearch = function () {\n	        return tree.showDeep().collapseDeep().tree();\n	    };\n\n	    /**\n	     * Disable auto-deselection of currently selected nodes.\n	     *\n	     * @category Tree\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.disableDeselection = function () {\n	        if (tree.config.selection.multiple) {\n	            preventDeselection = true;\n	        }\n\n	        return tree;\n	    };\n\n	    /**\n	     * Enable auto-deselection of currently selected nodes.\n	     *\n	     * @category Tree\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.enableDeselection = function () {\n	        preventDeselection = false;\n\n	        return tree;\n	    };\n\n	    /**\n	     * Check if an object is a TreeNode.\n	     *\n	     * @category Tree\n	     * @param {object} object Object\n	     * @return {boolean} If object is a TreeNode.\n	     */\n	    tree.isNode = function (object) {\n	        if (object.constructor) {\n	            return object.constructor.name === 'TreeNode';\n	        }\n\n	        return false;\n	    };\n\n	    /**\n	     * Get the most recently selected node, if any.\n	     *\n	     * @category Tree\n	     * @return {TreeNode} Last selected node, or undefined.\n	     */\n	    tree.lastSelectedNode = function () {\n	        return lastSelectedNode;\n	    };\n\n	    /**\n	     * Loads tree. Accepts an array or a promise.\n	     *\n	     * @category Tree\n	     * @param {array|function} loader Array of nodes, or promise resolving an array of nodes.\n	     * @return {Promise} Promise resolved upon successful load, rejected on error.\n	     * @example\n	     *\n	     * tree.load($.getJSON('nodes.json'));\n	     */\n	    tree.load = function (loader) {\n	        return new _es6Promise.Promise(function (resolve, reject) {\n	            var complete = function complete(nodes) {\n	                // Delay event for synchronous loader. Otherwise it fires\n	                // before the user has a chance to listen.\n	                if (!initialized && (0, _isArray3.default)(nodes)) {\n	                    setTimeout(function () {\n	                        tree.emit('data.loaded', nodes);\n	                    });\n	                } else {\n	                    tree.emit('data.loaded', nodes);\n	                }\n\n	                // Clear and call rendering on existing data\n	                if (model.length > 0) {\n	                    tree.removeAll();\n	                }\n\n	                model = collectionToModel(nodes);\n\n	                if (tree.config.selection.require && !tree.selected().length) {\n	                    tree.selectFirstAvailableNode();\n	                }\n\n	                // Delay event for synchronous loader\n	                if (!initialized && (0, _isArray3.default)(nodes)) {\n	                    setTimeout(function () {\n	                        tree.emit('model.loaded', model);\n	                    });\n	                } else {\n	                    tree.emit('model.loaded', model);\n	                }\n\n	                resolve(model);\n\n	                dom.applyChanges();\n\n	                if ((0, _isFunction3.default)(dom.scrollSelectedIntoView)) {\n	                    dom.scrollSelectedIntoView();\n	                }\n	            };\n\n	            var error = function error(err) {\n	                tree.emit('data.loaderror', err);\n	                reject(err);\n	            };\n\n	            // Data given already as an array\n	            if ((0, _isArrayLike3.default)(loader)) {\n	                complete(loader);\n	            }\n\n	            // Data loader requires a caller/callback\n	            else if ((0, _isFunction3.default)(loader)) {\n	                    var resp = loader(null, complete, error);\n\n	                    // Loader returned its own object\n	                    if (resp) {\n	                        loader = resp;\n	                    }\n	                }\n\n	            // Data loader is likely a promise\n	            if ((0, _isObject3.default)(loader)) {\n	                standardizePromise(loader).then(complete).catch(error);\n	            } else {\n	                throw new Error('Invalid data loader.');\n	            }\n	        });\n	    };\n\n	    /*\n	     * Pause events.\n	     *\n	     * @category Tree\n	     * @param {array} events Event names to mute.\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.mute = function (events) {\n	        if ((0, _isString3.default)(events) || (0, _isArray3.default)(events)) {\n	            muted = (0, _castArray3.default)(events);\n	        } else {\n	            muted = true;\n	        }\n\n	        return tree;\n	    };\n\n	    /**\n	     * Get current mute settings.\n	     *\n	     * @category Tree\n	     * @return {boolean|array} Muted events. If all, true.\n	     */\n	    tree.muted = function () {\n	        return muted;\n	    };\n\n	    /**\n	     * Get a node.\n	     *\n	     * @category Tree\n	     * @param {string|number} id ID of node.\n	     * @param {TreeNodes} nodes Base collection to search in.\n	     * @return {TreeNode} Node object.\n	     */\n	    tree.node = function (id, nodes) {\n	        var match;\n\n	        if ((0, _isNumber3.default)(id)) {\n	            id = id.toString();\n	        }\n\n	        (nodes || model).recurseDown(function (node) {\n	            if (node.id === id) {\n	                match = node;\n\n	                return false;\n	            }\n	        });\n\n	        return match;\n	    };\n\n	    /**\n	     * Get all nodes in a tree, or nodes for an array of IDs.\n	     *\n	     * @category Tree\n	     * @param {array} refs Array of ID references.\n	     * @return {TreeNodes} Array of node objects.\n	     * @example\n	     *\n	     * var all = tree.nodes()\n	     * var some = tree.nodes([1, 2, 3])\n	     */\n	    tree.nodes = function (refs) {\n	        var nodes = model;\n\n	        if ((0, _isArray3.default)(refs)) {\n	            nodes = new TreeNodes();\n\n	            (0, _each3.default)(refs, function (ref) {\n	                var node = tree.node(ref);\n	                if (node) {\n	                    nodes.push(node);\n	                }\n	            });\n	        }\n\n	        return nodes;\n	    };\n\n	    /**\n	     * Reloads/re-executes the original data loader.\n	     *\n	     * @category Tree\n	     * @return {Promise} Load method promise.\n	     */\n	    tree.reload = function () {\n	        return tree.load(opts.data || tree.config.data);\n	    };\n\n	    /**\n	     * Removes all nodes.\n	     *\n	     * @category Tree\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.removeAll = function () {\n	        model = new TreeNodes();\n	        dom.applyChanges();\n\n	        return tree;\n	    };\n\n	    /**\n	     * Search nodes, showing only those that match and the necessary hierarchy.\n	     *\n	     * @category Tree\n	     * @param {*} query Search string, RegExp, or function.\n	     * @return {TreeNodes} Array of matching node objects.\n	     */\n	    tree.search = function (query) {\n	        var matches = new TreeNodes();\n\n	        var custom = tree.config.search;\n	        if ((0, _isFunction3.default)(custom)) {\n	            return custom(query, function resolver(nodes) {\n	                dom.batch();\n\n	                tree.hideDeep();\n	                (0, _each3.default)(nodes, function (node) {\n	                    tree.addNode(node);\n	                });\n\n	                dom.end();\n	            }, function rejecter(err) {\n	                tree.emit('tree.loaderror', err);\n	            });\n	        }\n\n	        // Don't search if query empty\n	        if (!query || (0, _isString3.default)(query) && (0, _isEmpty3.default)(query)) {\n	            return tree.clearSearch();\n	        }\n\n	        if ((0, _isString3.default)(query)) {\n	            query = new RegExp(query, 'i');\n	        }\n\n	        var predicate;\n	        if ((0, _isRegExp3.default)(query)) {\n	            predicate = function predicate(node) {\n	                return query.test(node.text);\n	            };\n	        } else {\n	            predicate = query;\n	        }\n\n	        dom.batch();\n\n	        model.recurseDown(function (node) {\n	            if (!node.removed()) {\n	                var match = predicate(node);\n	                var wasHidden = node.hidden();\n	                node.itree.state.hidden = !match;\n\n	                // If hidden state will change\n	                if (wasHidden !== node.hidden()) {\n	                    node.markDirty();\n	                }\n\n	                if (match) {\n	                    matches.push(node);\n	                    node.expandParents();\n	                }\n	            }\n	        });\n\n	        dom.end();\n\n	        return matches;\n	    };\n\n	    /**\n	     * Select all nodes between a start and end node.\n	     * Starting node must have a higher index path so we can work down to endNode.\n	     *\n	     * @category Tree\n	     * @param {TreeNode} startNode Starting node\n	     * @param {TreeNode} endNode Ending node\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.selectBetween = function (startNode, endNode) {\n	        dom.batch();\n\n	        var node = startNode.nextVisibleNode();\n	        while (node) {\n	            if (node.id === endNode.id) {\n	                break;\n	            }\n\n	            node.select();\n\n	            node = node.nextVisibleNode();\n	        }\n\n	        dom.end();\n\n	        return tree;\n	    };\n\n	    /**\n	     * Select the first available node at the root level.\n	     *\n	     * @category Tree\n	     * @return {TreeNode} Selected node object.\n	     */\n	    tree.selectFirstAvailableNode = function () {\n	        var node = model.filter('available').get(0);\n	        if (node) {\n	            node.select();\n	        }\n\n	        return node;\n	    };\n\n	    /**\n	     * Resume events.\n	     *\n	     * @category Tree\n	     * @param {array} events Events to unmute.\n	     * @return {Tree} Tree instance.\n	     */\n	    tree.unmute = function (events) {\n	        // Diff array and set to false if we're now empty\n	        if ((0, _isString3.default)(events) || (0, _isArray3.default)(events)) {\n	            muted = (0, _difference3.default)(muted, (0, _castArray3.default)(events));\n	            if (!muted.length) {\n	                muted = false;\n	            }\n	        } else {\n	            muted = false;\n	        }\n\n	        return tree;\n	    };\n\n	    // Connect to our target DOM element\n	    dom.attach(tree.config.target);\n\n	    // Load initial user data\n	    tree.load(tree.config.data);\n\n	    initialized = true;\n\n	    return tree;\n	};\n\n	// Mixin EventEmitter\n	InspireTree.prototype = Object.create(_eventemitter2.default.prototype);\n\n	module.exports = InspireTree;\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseDifference = __webpack_require__(2),\n	    baseFlatten = __webpack_require__(41),\n	    isArrayLikeObject = __webpack_require__(45),\n	    rest = __webpack_require__(52);\n\n	/**\n	 * Creates an array of unique `array` values not included in the other given\n	 * arrays using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n	 * for equality comparisons. The order of result values is determined by the\n	 * order they occur in the first array.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Array\n	 * @param {Array} array The array to inspect.\n	 * @param {...Array} [values] The values to exclude.\n	 * @returns {Array} Returns the new array of filtered values.\n	 * @example\n	 *\n	 * _.difference([3, 2, 1], [4, 2]);\n	 * // => [3, 1]\n	 */\n	var difference = rest(function (array, values) {\n	    return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];\n	});\n\n	module.exports = difference;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var SetCache = __webpack_require__(3),\n	    arrayIncludes = __webpack_require__(34),\n	    arrayIncludesWith = __webpack_require__(37),\n	    arrayMap = __webpack_require__(38),\n	    baseUnary = __webpack_require__(39),\n	    cacheHas = __webpack_require__(40);\n\n	/** Used as the size to enable large array optimizations. */\n	var LARGE_ARRAY_SIZE = 200;\n\n	/**\n	 * The base implementation of methods like `_.difference` without support\n	 * for excluding multiple arrays or iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to inspect.\n	 * @param {Array} values The values to exclude.\n	 * @param {Function} [iteratee] The iteratee invoked per element.\n	 * @param {Function} [comparator] The comparator invoked per element.\n	 * @returns {Array} Returns the new array of filtered values.\n	 */\n	function baseDifference(array, values, iteratee, comparator) {\n	  var index = -1,\n	      includes = arrayIncludes,\n	      isCommon = true,\n	      length = array.length,\n	      result = [],\n	      valuesLength = values.length;\n\n	  if (!length) {\n	    return result;\n	  }\n	  if (iteratee) {\n	    values = arrayMap(values, baseUnary(iteratee));\n	  }\n	  if (comparator) {\n	    includes = arrayIncludesWith;\n	    isCommon = false;\n	  } else if (values.length >= LARGE_ARRAY_SIZE) {\n	    includes = cacheHas;\n	    isCommon = false;\n	    values = new SetCache(values);\n	  }\n	  outer: while (++index < length) {\n	    var value = array[index],\n	        computed = iteratee ? iteratee(value) : value;\n\n	    if (isCommon && computed === computed) {\n	      var valuesIndex = valuesLength;\n	      while (valuesIndex--) {\n	        if (values[valuesIndex] === computed) {\n	          continue outer;\n	        }\n	      }\n	      result.push(value);\n	    } else if (!includes(values, computed, comparator)) {\n	      result.push(value);\n	    }\n	  }\n	  return result;\n	}\n\n	module.exports = baseDifference;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var MapCache = __webpack_require__(4),\n	    cachePush = __webpack_require__(33);\n\n	/**\n	 *\n	 * Creates a set cache object to store unique values.\n	 *\n	 * @private\n	 * @constructor\n	 * @param {Array} [values] The values to cache.\n	 */\n	function SetCache(values) {\n	  var index = -1,\n	      length = values ? values.length : 0;\n\n	  this.__data__ = new MapCache();\n	  while (++index < length) {\n	    this.push(values[index]);\n	  }\n	}\n\n	// Add methods to `SetCache`.\n	SetCache.prototype.push = cachePush;\n\n	module.exports = SetCache;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var mapClear = __webpack_require__(5),\n	    mapDelete = __webpack_require__(18),\n	    mapGet = __webpack_require__(25),\n	    mapHas = __webpack_require__(28),\n	    mapSet = __webpack_require__(30);\n\n	/**\n	 * Creates a map cache object to store key-value pairs.\n	 *\n	 * @private\n	 * @constructor\n	 * @param {Array} [values] The values to cache.\n	 */\n	function MapCache(values) {\n	    var index = -1,\n	        length = values ? values.length : 0;\n\n	    this.clear();\n	    while (++index < length) {\n	        var entry = values[index];\n	        this.set(entry[0], entry[1]);\n	    }\n	}\n\n	// Add methods to `MapCache`.\n	MapCache.prototype.clear = mapClear;\n	MapCache.prototype['delete'] = mapDelete;\n	MapCache.prototype.get = mapGet;\n	MapCache.prototype.has = mapHas;\n	MapCache.prototype.set = mapSet;\n\n	module.exports = MapCache;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Hash = __webpack_require__(6),\n	    Map = __webpack_require__(14);\n\n	/**\n	 * Removes all key-value entries from the map.\n	 *\n	 * @private\n	 * @name clear\n	 * @memberOf MapCache\n	 */\n	function mapClear() {\n	  this.__data__ = {\n	    'hash': new Hash(),\n	    'map': Map ? new Map() : [],\n	    'string': new Hash()\n	  };\n	}\n\n	module.exports = mapClear;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var nativeCreate = __webpack_require__(7);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Creates a hash object.\n	 *\n	 * @private\n	 * @constructor\n	 * @returns {Object} Returns the new hash object.\n	 */\n	function Hash() {}\n\n	// Avoid inheriting from `Object.prototype` when possible.\n	Hash.prototype = nativeCreate ? nativeCreate(null) : objectProto;\n\n	module.exports = Hash;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8);\n\n	/* Built-in method references that are verified to be native. */\n	var nativeCreate = getNative(Object, 'create');\n\n	module.exports = nativeCreate;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isNative = __webpack_require__(9);\n\n	/**\n	 * Gets the native function at `key` of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {string} key The key of the method to get.\n	 * @returns {*} Returns the function if it's native, else `undefined`.\n	 */\n	function getNative(object, key) {\n	  var value = object[key];\n	  return isNative(value) ? value : undefined;\n	}\n\n	module.exports = getNative;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isFunction = __webpack_require__(10),\n	    isHostObject = __webpack_require__(12),\n	    isObject = __webpack_require__(11),\n	    toSource = __webpack_require__(13);\n\n	/**\n	 * Used to match `RegExp`\n	 * [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns).\n	 */\n	var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n	/** Used to detect host constructors (Safari). */\n	var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to resolve the decompiled source of functions. */\n	var funcToString = Function.prototype.toString;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/** Used to detect if a method is native. */\n	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n\n	/**\n	 * Checks if `value` is a native function.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a native function,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isNative(Array.prototype.push);\n	 * // => true\n	 *\n	 * _.isNative(_);\n	 * // => false\n	 */\n	function isNative(value) {\n	  if (!isObject(value)) {\n	    return false;\n	  }\n	  var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;\n	  return pattern.test(toSource(value));\n	}\n\n	module.exports = isNative;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObject = __webpack_require__(11);\n\n	/** `Object#toString` result references. */\n	var funcTag = '[object Function]',\n	    genTag = '[object GeneratorFunction]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a `Function` object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isFunction(_);\n	 * // => true\n	 *\n	 * _.isFunction(/abc/);\n	 * // => false\n	 */\n	function isFunction(value) {\n	  // The use of `Object#toString` avoids issues with the `typeof` operator\n	  // in Safari 8 which returns 'object' for typed array and weak map constructors,\n	  // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.\n	  var tag = isObject(value) ? objectToString.call(value) : '';\n	  return tag == funcTag || tag == genTag;\n	}\n\n	module.exports = isFunction;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	/**\n	 * Checks if `value` is the\n	 * [language type](http://www.ecma-international.org/ecma-262/6.0/#sec-ecmascript-language-types)\n	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n	 * @example\n	 *\n	 * _.isObject({});\n	 * // => true\n	 *\n	 * _.isObject([1, 2, 3]);\n	 * // => true\n	 *\n	 * _.isObject(_.noop);\n	 * // => true\n	 *\n	 * _.isObject(null);\n	 * // => false\n	 */\n	function isObject(value) {\n	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n	  return !!value && (type == 'object' || type == 'function');\n	}\n\n	module.exports = isObject;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/**\n	 * Checks if `value` is a host object in IE < 9.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n	 */\n	function isHostObject(value) {\n	  // Many host objects are `Object` objects that can coerce to strings\n	  // despite having improperly defined `toString` methods.\n	  var result = false;\n	  if (value != null && typeof value.toString != 'function') {\n	    try {\n	      result = !!(value + '');\n	    } catch (e) {}\n	  }\n	  return result;\n	}\n\n	module.exports = isHostObject;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/** Used to resolve the decompiled source of functions. */\n	var funcToString = Function.prototype.toString;\n\n	/**\n	 * Converts `func` to its source code.\n	 *\n	 * @private\n	 * @param {Function} func The function to process.\n	 * @returns {string} Returns the source code.\n	 */\n	function toSource(func) {\n	  if (func != null) {\n	    try {\n	      return funcToString.call(func);\n	    } catch (e) {}\n	    try {\n	      return func + '';\n	    } catch (e) {}\n	  }\n	  return '';\n	}\n\n	module.exports = toSource;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8),\n	    root = __webpack_require__(15);\n\n	/* Built-in method references that are verified to be native. */\n	var Map = getNative(root, 'Map');\n\n	module.exports = Map;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n	/* WEBPACK VAR INJECTION */(function(module, global) {'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var checkGlobal = __webpack_require__(17);\n\n	/** Used to determine if values are of the language type `Object`. */\n	var objectTypes = {\n	  'function': true,\n	  'object': true\n	};\n\n	/** Detect free variable `exports`. */\n	var freeExports = objectTypes[ false ? 'undefined' : _typeof(exports)] && exports && !exports.nodeType ? exports : undefined;\n\n	/** Detect free variable `module`. */\n	var freeModule = objectTypes[ false ? 'undefined' : _typeof(module)] && module && !module.nodeType ? module : undefined;\n\n	/** Detect free variable `global` from Node.js. */\n	var freeGlobal = checkGlobal(freeExports && freeModule && (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global);\n\n	/** Detect free variable `self`. */\n	var freeSelf = checkGlobal(objectTypes[typeof self === 'undefined' ? 'undefined' : _typeof(self)] && self);\n\n	/** Detect free variable `window`. */\n	var freeWindow = checkGlobal(objectTypes[typeof window === 'undefined' ? 'undefined' : _typeof(window)] && window);\n\n	/** Detect `this` as the global object. */\n	var thisGlobal = checkGlobal(objectTypes[_typeof(undefined)] && undefined);\n\n	/**\n	 * Used as a reference to the global object.\n	 *\n	 * The `this` value is used if it's the global object to avoid Greasemonkey's\n	 * restricted `window` object, otherwise the `window` object is used.\n	 */\n	var root = freeGlobal || freeWindow !== (thisGlobal && thisGlobal.window) && freeWindow || freeSelf || thisGlobal || Function('return this')();\n\n	module.exports = root;\n	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)(module), (function() { return this; }())))\n\n/***/ },\n/* 16 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	module.exports = function (module) {\n		if (!module.webpackPolyfill) {\n			module.deprecate = function () {};\n			module.paths = [];\n			// module.parent = undefined by default\n			module.children = [];\n			module.webpackPolyfill = 1;\n		}\n		return module;\n	};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Checks if `value` is a global object.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {null|Object} Returns `value` if it's a global object, else `null`.\n	 */\n	function checkGlobal(value) {\n	  return value && value.Object === Object ? value : null;\n	}\n\n	module.exports = checkGlobal;\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Map = __webpack_require__(14),\n	    assocDelete = __webpack_require__(19),\n	    hashDelete = __webpack_require__(22),\n	    isKeyable = __webpack_require__(24);\n\n	/**\n	 * Removes `key` and its value from the map.\n	 *\n	 * @private\n	 * @name delete\n	 * @memberOf MapCache\n	 * @param {string} key The key of the value to remove.\n	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n	 */\n	function mapDelete(key) {\n	  var data = this.__data__;\n	  if (isKeyable(key)) {\n	    return hashDelete(typeof key == 'string' ? data.string : data.hash, key);\n	  }\n	  return Map ? data.map['delete'](key) : assocDelete(data.map, key);\n	}\n\n	module.exports = mapDelete;\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocIndexOf = __webpack_require__(20);\n\n	/** Used for built-in method references. */\n	var arrayProto = Array.prototype;\n\n	/** Built-in value references. */\n	var splice = arrayProto.splice;\n\n	/**\n	 * Removes `key` and its value from the associative array.\n	 *\n	 * @private\n	 * @param {Array} array The array to modify.\n	 * @param {string} key The key of the value to remove.\n	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n	 */\n	function assocDelete(array, key) {\n	  var index = assocIndexOf(array, key);\n	  if (index < 0) {\n	    return false;\n	  }\n	  var lastIndex = array.length - 1;\n	  if (index == lastIndex) {\n	    array.pop();\n	  } else {\n	    splice.call(array, index, 1);\n	  }\n	  return true;\n	}\n\n	module.exports = assocDelete;\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var eq = __webpack_require__(21);\n\n	/**\n	 * Gets the index at which the `key` is found in `array` of key-value pairs.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {*} key The key to search for.\n	 * @returns {number} Returns the index of the matched value, else `-1`.\n	 */\n	function assocIndexOf(array, key) {\n	  var length = array.length;\n	  while (length--) {\n	    if (eq(array[length][0], key)) {\n	      return length;\n	    }\n	  }\n	  return -1;\n	}\n\n	module.exports = assocIndexOf;\n\n/***/ },\n/* 21 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Performs a\n	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n	 * comparison between two values to determine if they are equivalent.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to compare.\n	 * @param {*} other The other value to compare.\n	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n	 * @example\n	 *\n	 * var object = { 'user': 'fred' };\n	 * var other = { 'user': 'fred' };\n	 *\n	 * _.eq(object, object);\n	 * // => true\n	 *\n	 * _.eq(object, other);\n	 * // => false\n	 *\n	 * _.eq('a', 'a');\n	 * // => true\n	 *\n	 * _.eq('a', Object('a'));\n	 * // => false\n	 *\n	 * _.eq(NaN, NaN);\n	 * // => true\n	 */\n	function eq(value, other) {\n	  return value === other || value !== value && other !== other;\n	}\n\n	module.exports = eq;\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var hashHas = __webpack_require__(23);\n\n	/**\n	 * Removes `key` and its value from the hash.\n	 *\n	 * @private\n	 * @param {Object} hash The hash to modify.\n	 * @param {string} key The key of the value to remove.\n	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n	 */\n	function hashDelete(hash, key) {\n	  return hashHas(hash, key) && delete hash[key];\n	}\n\n	module.exports = hashDelete;\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var nativeCreate = __webpack_require__(7);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Checks if a hash value for `key` exists.\n	 *\n	 * @private\n	 * @param {Object} hash The hash to query.\n	 * @param {string} key The key of the entry to check.\n	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n	 */\n	function hashHas(hash, key) {\n	  return nativeCreate ? hash[key] !== undefined : hasOwnProperty.call(hash, key);\n	}\n\n	module.exports = hashHas;\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	/**\n	 * Checks if `value` is suitable for use as unique object key.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n	 */\n	function isKeyable(value) {\n	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n	  return type == 'number' || type == 'boolean' || type == 'string' && value != '__proto__' || value == null;\n	}\n\n	module.exports = isKeyable;\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Map = __webpack_require__(14),\n	    assocGet = __webpack_require__(26),\n	    hashGet = __webpack_require__(27),\n	    isKeyable = __webpack_require__(24);\n\n	/**\n	 * Gets the map value for `key`.\n	 *\n	 * @private\n	 * @name get\n	 * @memberOf MapCache\n	 * @param {string} key The key of the value to get.\n	 * @returns {*} Returns the entry value.\n	 */\n	function mapGet(key) {\n	  var data = this.__data__;\n	  if (isKeyable(key)) {\n	    return hashGet(typeof key == 'string' ? data.string : data.hash, key);\n	  }\n	  return Map ? data.map.get(key) : assocGet(data.map, key);\n	}\n\n	module.exports = mapGet;\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocIndexOf = __webpack_require__(20);\n\n	/**\n	 * Gets the associative array value for `key`.\n	 *\n	 * @private\n	 * @param {Array} array The array to query.\n	 * @param {string} key The key of the value to get.\n	 * @returns {*} Returns the entry value.\n	 */\n	function assocGet(array, key) {\n	  var index = assocIndexOf(array, key);\n	  return index < 0 ? undefined : array[index][1];\n	}\n\n	module.exports = assocGet;\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var nativeCreate = __webpack_require__(7);\n\n	/** Used to stand-in for `undefined` hash values. */\n	var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Gets the hash value for `key`.\n	 *\n	 * @private\n	 * @param {Object} hash The hash to query.\n	 * @param {string} key The key of the value to get.\n	 * @returns {*} Returns the entry value.\n	 */\n	function hashGet(hash, key) {\n	  if (nativeCreate) {\n	    var result = hash[key];\n	    return result === HASH_UNDEFINED ? undefined : result;\n	  }\n	  return hasOwnProperty.call(hash, key) ? hash[key] : undefined;\n	}\n\n	module.exports = hashGet;\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Map = __webpack_require__(14),\n	    assocHas = __webpack_require__(29),\n	    hashHas = __webpack_require__(23),\n	    isKeyable = __webpack_require__(24);\n\n	/**\n	 * Checks if a map value for `key` exists.\n	 *\n	 * @private\n	 * @name has\n	 * @memberOf MapCache\n	 * @param {string} key The key of the entry to check.\n	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n	 */\n	function mapHas(key) {\n	  var data = this.__data__;\n	  if (isKeyable(key)) {\n	    return hashHas(typeof key == 'string' ? data.string : data.hash, key);\n	  }\n	  return Map ? data.map.has(key) : assocHas(data.map, key);\n	}\n\n	module.exports = mapHas;\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocIndexOf = __webpack_require__(20);\n\n	/**\n	 * Checks if an associative array value for `key` exists.\n	 *\n	 * @private\n	 * @param {Array} array The array to query.\n	 * @param {string} key The key of the entry to check.\n	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n	 */\n	function assocHas(array, key) {\n	  return assocIndexOf(array, key) > -1;\n	}\n\n	module.exports = assocHas;\n\n/***/ },\n/* 30 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Map = __webpack_require__(14),\n	    assocSet = __webpack_require__(31),\n	    hashSet = __webpack_require__(32),\n	    isKeyable = __webpack_require__(24);\n\n	/**\n	 * Sets the map `key` to `value`.\n	 *\n	 * @private\n	 * @name set\n	 * @memberOf MapCache\n	 * @param {string} key The key of the value to set.\n	 * @param {*} value The value to set.\n	 * @returns {Object} Returns the map cache instance.\n	 */\n	function mapSet(key, value) {\n	  var data = this.__data__;\n	  if (isKeyable(key)) {\n	    hashSet(typeof key == 'string' ? data.string : data.hash, key, value);\n	  } else if (Map) {\n	    data.map.set(key, value);\n	  } else {\n	    assocSet(data.map, key, value);\n	  }\n	  return this;\n	}\n\n	module.exports = mapSet;\n\n/***/ },\n/* 31 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocIndexOf = __webpack_require__(20);\n\n	/**\n	 * Sets the associative array `key` to `value`.\n	 *\n	 * @private\n	 * @param {Array} array The array to modify.\n	 * @param {string} key The key of the value to set.\n	 * @param {*} value The value to set.\n	 */\n	function assocSet(array, key, value) {\n	  var index = assocIndexOf(array, key);\n	  if (index < 0) {\n	    array.push([key, value]);\n	  } else {\n	    array[index][1] = value;\n	  }\n	}\n\n	module.exports = assocSet;\n\n/***/ },\n/* 32 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var nativeCreate = __webpack_require__(7);\n\n	/** Used to stand-in for `undefined` hash values. */\n	var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n	/**\n	 * Sets the hash `key` to `value`.\n	 *\n	 * @private\n	 * @param {Object} hash The hash to modify.\n	 * @param {string} key The key of the value to set.\n	 * @param {*} value The value to set.\n	 */\n	function hashSet(hash, key, value) {\n	  hash[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;\n	}\n\n	module.exports = hashSet;\n\n/***/ },\n/* 33 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isKeyable = __webpack_require__(24);\n\n	/** Used to stand-in for `undefined` hash values. */\n	var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n	/**\n	 * Adds `value` to the set cache.\n	 *\n	 * @private\n	 * @name push\n	 * @memberOf SetCache\n	 * @param {*} value The value to cache.\n	 */\n	function cachePush(value) {\n	  var map = this.__data__;\n	  if (isKeyable(value)) {\n	    var data = map.__data__,\n	        hash = typeof value == 'string' ? data.string : data.hash;\n\n	    hash[value] = HASH_UNDEFINED;\n	  } else {\n	    map.set(value, HASH_UNDEFINED);\n	  }\n	}\n\n	module.exports = cachePush;\n\n/***/ },\n/* 34 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIndexOf = __webpack_require__(35);\n\n	/**\n	 * A specialized version of `_.includes` for arrays without support for\n	 * specifying an index to search from.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {*} target The value to search for.\n	 * @returns {boolean} Returns `true` if `target` is found, else `false`.\n	 */\n	function arrayIncludes(array, value) {\n	  return !!array.length && baseIndexOf(array, value, 0) > -1;\n	}\n\n	module.exports = arrayIncludes;\n\n/***/ },\n/* 35 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var indexOfNaN = __webpack_require__(36);\n\n	/**\n	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {*} value The value to search for.\n	 * @param {number} fromIndex The index to search from.\n	 * @returns {number} Returns the index of the matched value, else `-1`.\n	 */\n	function baseIndexOf(array, value, fromIndex) {\n	  if (value !== value) {\n	    return indexOfNaN(array, fromIndex);\n	  }\n	  var index = fromIndex - 1,\n	      length = array.length;\n\n	  while (++index < length) {\n	    if (array[index] === value) {\n	      return index;\n	    }\n	  }\n	  return -1;\n	}\n\n	module.exports = baseIndexOf;\n\n/***/ },\n/* 36 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Gets the index at which the first occurrence of `NaN` is found in `array`.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {number} fromIndex The index to search from.\n	 * @param {boolean} [fromRight] Specify iterating from right to left.\n	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.\n	 */\n	function indexOfNaN(array, fromIndex, fromRight) {\n	  var length = array.length,\n	      index = fromIndex + (fromRight ? 0 : -1);\n\n	  while (fromRight ? index-- : ++index < length) {\n	    var other = array[index];\n	    if (other !== other) {\n	      return index;\n	    }\n	  }\n	  return -1;\n	}\n\n	module.exports = indexOfNaN;\n\n/***/ },\n/* 37 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * This function is like `arrayIncludes` except that it accepts a comparator.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {*} target The value to search for.\n	 * @param {Function} comparator The comparator invoked per element.\n	 * @returns {boolean} Returns `true` if `target` is found, else `false`.\n	 */\n	function arrayIncludesWith(array, value, comparator) {\n	  var index = -1,\n	      length = array.length;\n\n	  while (++index < length) {\n	    if (comparator(value, array[index])) {\n	      return true;\n	    }\n	  }\n	  return false;\n	}\n\n	module.exports = arrayIncludesWith;\n\n/***/ },\n/* 38 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A specialized version of `_.map` for arrays without support for iteratee\n	 * shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array} Returns the new mapped array.\n	 */\n	function arrayMap(array, iteratee) {\n	  var index = -1,\n	      length = array.length,\n	      result = Array(length);\n\n	  while (++index < length) {\n	    result[index] = iteratee(array[index], index, array);\n	  }\n	  return result;\n	}\n\n	module.exports = arrayMap;\n\n/***/ },\n/* 39 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.unary` without support for storing wrapper metadata.\n	 *\n	 * @private\n	 * @param {Function} func The function to cap arguments for.\n	 * @returns {Function} Returns the new function.\n	 */\n	function baseUnary(func) {\n	  return function (value) {\n	    return func(value);\n	  };\n	}\n\n	module.exports = baseUnary;\n\n/***/ },\n/* 40 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isKeyable = __webpack_require__(24);\n\n	/** Used to stand-in for `undefined` hash values. */\n	var HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n	/**\n	 * Checks if `value` is in `cache`.\n	 *\n	 * @private\n	 * @param {Object} cache The set cache to search.\n	 * @param {*} value The value to search for.\n	 * @returns {number} Returns `true` if `value` is found, else `false`.\n	 */\n	function cacheHas(cache, value) {\n	  var map = cache.__data__;\n	  if (isKeyable(value)) {\n	    var data = map.__data__,\n	        hash = typeof value == 'string' ? data.string : data.hash;\n\n	    return hash[value] === HASH_UNDEFINED;\n	  }\n	  return map.has(value);\n	}\n\n	module.exports = cacheHas;\n\n/***/ },\n/* 41 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayPush = __webpack_require__(42),\n	    isFlattenable = __webpack_require__(43);\n\n	/**\n	 * The base implementation of `_.flatten` with support for restricting flattening.\n	 *\n	 * @private\n	 * @param {Array} array The array to flatten.\n	 * @param {number} depth The maximum recursion depth.\n	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n	 * @param {Array} [result=[]] The initial result value.\n	 * @returns {Array} Returns the new flattened array.\n	 */\n	function baseFlatten(array, depth, predicate, isStrict, result) {\n	  var index = -1,\n	      length = array.length;\n\n	  predicate || (predicate = isFlattenable);\n	  result || (result = []);\n\n	  while (++index < length) {\n	    var value = array[index];\n	    if (depth > 0 && predicate(value)) {\n	      if (depth > 1) {\n	        // Recursively flatten arrays (susceptible to call stack limits).\n	        baseFlatten(value, depth - 1, predicate, isStrict, result);\n	      } else {\n	        arrayPush(result, value);\n	      }\n	    } else if (!isStrict) {\n	      result[result.length] = value;\n	    }\n	  }\n	  return result;\n	}\n\n	module.exports = baseFlatten;\n\n/***/ },\n/* 42 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Appends the elements of `values` to `array`.\n	 *\n	 * @private\n	 * @param {Array} array The array to modify.\n	 * @param {Array} values The values to append.\n	 * @returns {Array} Returns `array`.\n	 */\n	function arrayPush(array, values) {\n	  var index = -1,\n	      length = values.length,\n	      offset = array.length;\n\n	  while (++index < length) {\n	    array[offset + index] = values[index];\n	  }\n	  return array;\n	}\n\n	module.exports = arrayPush;\n\n/***/ },\n/* 43 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArguments = __webpack_require__(44),\n	    isArray = __webpack_require__(51),\n	    isArrayLikeObject = __webpack_require__(45);\n\n	/**\n	 * Checks if `value` is a flattenable `arguments` object or array.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n	 */\n	function isFlattenable(value) {\n	  return isArrayLikeObject(value) && (isArray(value) || isArguments(value));\n	}\n\n	module.exports = isFlattenable;\n\n/***/ },\n/* 44 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArrayLikeObject = __webpack_require__(45);\n\n	/** `Object#toString` result references. */\n	var argsTag = '[object Arguments]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/** Built-in value references. */\n	var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n	/**\n	 * Checks if `value` is likely an `arguments` object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isArguments(function() { return arguments; }());\n	 * // => true\n	 *\n	 * _.isArguments([1, 2, 3]);\n	 * // => false\n	 */\n	function isArguments(value) {\n	  // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.\n	  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n	}\n\n	module.exports = isArguments;\n\n/***/ },\n/* 45 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArrayLike = __webpack_require__(46),\n	    isObjectLike = __webpack_require__(50);\n\n	/**\n	 * This method is like `_.isArrayLike` except that it also checks if `value`\n	 * is an object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is an array-like object,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isArrayLikeObject([1, 2, 3]);\n	 * // => true\n	 *\n	 * _.isArrayLikeObject(document.body.children);\n	 * // => true\n	 *\n	 * _.isArrayLikeObject('abc');\n	 * // => false\n	 *\n	 * _.isArrayLikeObject(_.noop);\n	 * // => false\n	 */\n	function isArrayLikeObject(value) {\n	  return isObjectLike(value) && isArrayLike(value);\n	}\n\n	module.exports = isArrayLikeObject;\n\n/***/ },\n/* 46 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getLength = __webpack_require__(47),\n	    isFunction = __webpack_require__(10),\n	    isLength = __webpack_require__(49);\n\n	/**\n	 * Checks if `value` is array-like. A value is considered array-like if it's\n	 * not a function and has a `value.length` that's an integer greater than or\n	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n	 * @example\n	 *\n	 * _.isArrayLike([1, 2, 3]);\n	 * // => true\n	 *\n	 * _.isArrayLike(document.body.children);\n	 * // => true\n	 *\n	 * _.isArrayLike('abc');\n	 * // => true\n	 *\n	 * _.isArrayLike(_.noop);\n	 * // => false\n	 */\n	function isArrayLike(value) {\n	  return value != null && isLength(getLength(value)) && !isFunction(value);\n	}\n\n	module.exports = isArrayLike;\n\n/***/ },\n/* 47 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseProperty = __webpack_require__(48);\n\n	/**\n	 * Gets the \"length\" property value of `object`.\n	 *\n	 * **Note:** This function is used to avoid a\n	 * [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792) that affects\n	 * Safari on at least iOS 8.1-8.3 ARM64.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {*} Returns the \"length\" value.\n	 */\n	var getLength = baseProperty('length');\n\n	module.exports = getLength;\n\n/***/ },\n/* 48 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.property` without support for deep paths.\n	 *\n	 * @private\n	 * @param {string} key The key of the property to get.\n	 * @returns {Function} Returns the new function.\n	 */\n	function baseProperty(key) {\n	  return function (object) {\n	    return object == null ? undefined : object[key];\n	  };\n	}\n\n	module.exports = baseProperty;\n\n/***/ },\n/* 49 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/** Used as references for various `Number` constants. */\n	var MAX_SAFE_INTEGER = 9007199254740991;\n\n	/**\n	 * Checks if `value` is a valid array-like length.\n	 *\n	 * **Note:** This function is loosely based on\n	 * [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a valid length,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isLength(3);\n	 * // => true\n	 *\n	 * _.isLength(Number.MIN_VALUE);\n	 * // => false\n	 *\n	 * _.isLength(Infinity);\n	 * // => false\n	 *\n	 * _.isLength('3');\n	 * // => false\n	 */\n	function isLength(value) {\n	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n	}\n\n	module.exports = isLength;\n\n/***/ },\n/* 50 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	/**\n	 * Checks if `value` is object-like. A value is object-like if it's not `null`\n	 * and has a `typeof` result of \"object\".\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n	 * @example\n	 *\n	 * _.isObjectLike({});\n	 * // => true\n	 *\n	 * _.isObjectLike([1, 2, 3]);\n	 * // => true\n	 *\n	 * _.isObjectLike(_.noop);\n	 * // => false\n	 *\n	 * _.isObjectLike(null);\n	 * // => false\n	 */\n	function isObjectLike(value) {\n	  return !!value && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';\n	}\n\n	module.exports = isObjectLike;\n\n/***/ },\n/* 51 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Checks if `value` is classified as an `Array` object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @type {Function}\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isArray([1, 2, 3]);\n	 * // => true\n	 *\n	 * _.isArray(document.body.children);\n	 * // => false\n	 *\n	 * _.isArray('abc');\n	 * // => false\n	 *\n	 * _.isArray(_.noop);\n	 * // => false\n	 */\n	var isArray = Array.isArray;\n\n	module.exports = isArray;\n\n/***/ },\n/* 52 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var apply = __webpack_require__(53),\n	    toInteger = __webpack_require__(54);\n\n	/** Used as the `TypeError` message for \"Functions\" methods. */\n	var FUNC_ERROR_TEXT = 'Expected a function';\n\n	/* Built-in method references for those with the same name as other `lodash` methods. */\n	var nativeMax = Math.max;\n\n	/**\n	 * Creates a function that invokes `func` with the `this` binding of the\n	 * created function and arguments from `start` and beyond provided as\n	 * an array.\n	 *\n	 * **Note:** This method is based on the\n	 * [rest parameter](https://mdn.io/rest_parameters).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Function\n	 * @param {Function} func The function to apply a rest parameter to.\n	 * @param {number} [start=func.length-1] The start position of the rest parameter.\n	 * @returns {Function} Returns the new function.\n	 * @example\n	 *\n	 * var say = _.rest(function(what, names) {\n	 *   return what + ' ' + _.initial(names).join(', ') +\n	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);\n	 * });\n	 *\n	 * say('hello', 'fred', 'barney', 'pebbles');\n	 * // => 'hello fred, barney, & pebbles'\n	 */\n	function rest(func, start) {\n	  if (typeof func != 'function') {\n	    throw new TypeError(FUNC_ERROR_TEXT);\n	  }\n	  start = nativeMax(start === undefined ? func.length - 1 : toInteger(start), 0);\n	  return function () {\n	    var args = arguments,\n	        index = -1,\n	        length = nativeMax(args.length - start, 0),\n	        array = Array(length);\n\n	    while (++index < length) {\n	      array[index] = args[start + index];\n	    }\n	    switch (start) {\n	      case 0:\n	        return func.call(this, array);\n	      case 1:\n	        return func.call(this, args[0], array);\n	      case 2:\n	        return func.call(this, args[0], args[1], array);\n	    }\n	    var otherArgs = Array(start + 1);\n	    index = -1;\n	    while (++index < start) {\n	      otherArgs[index] = args[index];\n	    }\n	    otherArgs[start] = array;\n	    return apply(func, this, otherArgs);\n	  };\n	}\n\n	module.exports = rest;\n\n/***/ },\n/* 53 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A faster alternative to `Function#apply`, this function invokes `func`\n	 * with the `this` binding of `thisArg` and the arguments of `args`.\n	 *\n	 * @private\n	 * @param {Function} func The function to invoke.\n	 * @param {*} thisArg The `this` binding of `func`.\n	 * @param {Array} args The arguments to invoke `func` with.\n	 * @returns {*} Returns the result of `func`.\n	 */\n	function apply(func, thisArg, args) {\n	  var length = args.length;\n	  switch (length) {\n	    case 0:\n	      return func.call(thisArg);\n	    case 1:\n	      return func.call(thisArg, args[0]);\n	    case 2:\n	      return func.call(thisArg, args[0], args[1]);\n	    case 3:\n	      return func.call(thisArg, args[0], args[1], args[2]);\n	  }\n	  return func.apply(thisArg, args);\n	}\n\n	module.exports = apply;\n\n/***/ },\n/* 54 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var toNumber = __webpack_require__(55);\n\n	/** Used as references for various `Number` constants. */\n	var INFINITY = 1 / 0,\n	    MAX_INTEGER = 1.7976931348623157e+308;\n\n	/**\n	 * Converts `value` to an integer.\n	 *\n	 * **Note:** This function is loosely based on\n	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to convert.\n	 * @returns {number} Returns the converted integer.\n	 * @example\n	 *\n	 * _.toInteger(3);\n	 * // => 3\n	 *\n	 * _.toInteger(Number.MIN_VALUE);\n	 * // => 0\n	 *\n	 * _.toInteger(Infinity);\n	 * // => 1.7976931348623157e+308\n	 *\n	 * _.toInteger('3');\n	 * // => 3\n	 */\n	function toInteger(value) {\n	  if (!value) {\n	    return value === 0 ? value : 0;\n	  }\n	  value = toNumber(value);\n	  if (value === INFINITY || value === -INFINITY) {\n	    var sign = value < 0 ? -1 : 1;\n	    return sign * MAX_INTEGER;\n	  }\n	  var remainder = value % 1;\n	  return value === value ? remainder ? value - remainder : value : 0;\n	}\n\n	module.exports = toInteger;\n\n/***/ },\n/* 55 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isFunction = __webpack_require__(10),\n	    isObject = __webpack_require__(11),\n	    isSymbol = __webpack_require__(56);\n\n	/** Used as references for various `Number` constants. */\n	var NAN = 0 / 0;\n\n	/** Used to match leading and trailing whitespace. */\n	var reTrim = /^\\s+|\\s+$/g;\n\n	/** Used to detect bad signed hexadecimal string values. */\n	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n	/** Used to detect binary string values. */\n	var reIsBinary = /^0b[01]+$/i;\n\n	/** Used to detect octal string values. */\n	var reIsOctal = /^0o[0-7]+$/i;\n\n	/** Built-in method references without a dependency on `root`. */\n	var freeParseInt = parseInt;\n\n	/**\n	 * Converts `value` to a number.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to process.\n	 * @returns {number} Returns the number.\n	 * @example\n	 *\n	 * _.toNumber(3);\n	 * // => 3\n	 *\n	 * _.toNumber(Number.MIN_VALUE);\n	 * // => 5e-324\n	 *\n	 * _.toNumber(Infinity);\n	 * // => Infinity\n	 *\n	 * _.toNumber('3');\n	 * // => 3\n	 */\n	function toNumber(value) {\n	  if (typeof value == 'number') {\n	    return value;\n	  }\n	  if (isSymbol(value)) {\n	    return NAN;\n	  }\n	  if (isObject(value)) {\n	    var other = isFunction(value.valueOf) ? value.valueOf() : value;\n	    value = isObject(other) ? other + '' : other;\n	  }\n	  if (typeof value != 'string') {\n	    return value === 0 ? value : +value;\n	  }\n	  value = value.replace(reTrim, '');\n	  var isBinary = reIsBinary.test(value);\n	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n	}\n\n	module.exports = toNumber;\n\n/***/ },\n/* 56 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var symbolTag = '[object Symbol]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a `Symbol` primitive or object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isSymbol(Symbol.iterator);\n	 * // => true\n	 *\n	 * _.isSymbol('abc');\n	 * // => false\n	 */\n	function isSymbol(value) {\n	  return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n	}\n\n	module.exports = isSymbol;\n\n/***/ },\n/* 57 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObject = __webpack_require__(11);\n\n	/** `Object#toString` result references. */\n	var regexpTag = '[object RegExp]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a `RegExp` object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isRegExp(/abc/);\n	 * // => true\n	 *\n	 * _.isRegExp('/abc/');\n	 * // => false\n	 */\n	function isRegExp(value) {\n	  return isObject(value) && objectToString.call(value) == regexpTag;\n	}\n\n	module.exports = isRegExp;\n\n/***/ },\n/* 58 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getTag = __webpack_require__(59),\n	    isArguments = __webpack_require__(44),\n	    isArray = __webpack_require__(51),\n	    isArrayLike = __webpack_require__(46),\n	    isBuffer = __webpack_require__(64),\n	    isFunction = __webpack_require__(10),\n	    isObjectLike = __webpack_require__(50),\n	    isString = __webpack_require__(66),\n	    keys = __webpack_require__(67);\n\n	/** `Object#toString` result references. */\n	var mapTag = '[object Map]',\n	    setTag = '[object Set]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/** Built-in value references. */\n	var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n	/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n	var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n	/**\n	 * Checks if `value` is an empty object, collection, map, or set.\n	 *\n	 * Objects are considered empty if they have no own enumerable string keyed\n	 * properties.\n	 *\n	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or\n	 * jQuery-like collections are considered empty if they have a `length` of `0`.\n	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.\n	 * @example\n	 *\n	 * _.isEmpty(null);\n	 * // => true\n	 *\n	 * _.isEmpty(true);\n	 * // => true\n	 *\n	 * _.isEmpty(1);\n	 * // => true\n	 *\n	 * _.isEmpty([1, 2, 3]);\n	 * // => false\n	 *\n	 * _.isEmpty({ 'a': 1 });\n	 * // => false\n	 */\n	function isEmpty(value) {\n	  if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice) || isArguments(value) || isBuffer(value))) {\n	    return !value.length;\n	  }\n	  if (isObjectLike(value)) {\n	    var tag = getTag(value);\n	    if (tag == mapTag || tag == setTag) {\n	      return !value.size;\n	    }\n	  }\n	  for (var key in value) {\n	    if (hasOwnProperty.call(value, key)) {\n	      return false;\n	    }\n	  }\n	  return !(nonEnumShadows && keys(value).length);\n	}\n\n	module.exports = isEmpty;\n\n/***/ },\n/* 59 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var DataView = __webpack_require__(60),\n	    Map = __webpack_require__(14),\n	    Promise = __webpack_require__(61),\n	    Set = __webpack_require__(62),\n	    WeakMap = __webpack_require__(63),\n	    toSource = __webpack_require__(13);\n\n	/** `Object#toString` result references. */\n	var mapTag = '[object Map]',\n	    objectTag = '[object Object]',\n	    promiseTag = '[object Promise]',\n	    setTag = '[object Set]',\n	    weakMapTag = '[object WeakMap]';\n\n	var dataViewTag = '[object DataView]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/** Used to detect maps, sets, and weakmaps. */\n	var dataViewCtorString = toSource(DataView),\n	    mapCtorString = toSource(Map),\n	    promiseCtorString = toSource(Promise),\n	    setCtorString = toSource(Set),\n	    weakMapCtorString = toSource(WeakMap);\n\n	/**\n	 * Gets the `toStringTag` of `value`.\n	 *\n	 * @private\n	 * @param {*} value The value to query.\n	 * @returns {string} Returns the `toStringTag`.\n	 */\n	function getTag(value) {\n	  return objectToString.call(value);\n	}\n\n	// Fallback for data views, maps, sets, and weak maps in IE 11,\n	// for data views in Edge, and promises in Node.js.\n	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n	  getTag = function getTag(value) {\n	    var result = objectToString.call(value),\n	        Ctor = result == objectTag ? value.constructor : undefined,\n	        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n	    if (ctorString) {\n	      switch (ctorString) {\n	        case dataViewCtorString:\n	          return dataViewTag;\n	        case mapCtorString:\n	          return mapTag;\n	        case promiseCtorString:\n	          return promiseTag;\n	        case setCtorString:\n	          return setTag;\n	        case weakMapCtorString:\n	          return weakMapTag;\n	      }\n	    }\n	    return result;\n	  };\n	}\n\n	module.exports = getTag;\n\n/***/ },\n/* 60 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8),\n	    root = __webpack_require__(15);\n\n	/* Built-in method references that are verified to be native. */\n	var DataView = getNative(root, 'DataView');\n\n	module.exports = DataView;\n\n/***/ },\n/* 61 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8),\n	    root = __webpack_require__(15);\n\n	/* Built-in method references that are verified to be native. */\n	var Promise = getNative(root, 'Promise');\n\n	module.exports = Promise;\n\n/***/ },\n/* 62 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8),\n	    root = __webpack_require__(15);\n\n	/* Built-in method references that are verified to be native. */\n	var Set = getNative(root, 'Set');\n\n	module.exports = Set;\n\n/***/ },\n/* 63 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getNative = __webpack_require__(8),\n	    root = __webpack_require__(15);\n\n	/* Built-in method references that are verified to be native. */\n	var WeakMap = getNative(root, 'WeakMap');\n\n	module.exports = WeakMap;\n\n/***/ },\n/* 64 */\n/***/ function(module, exports, __webpack_require__) {\n\n	/* WEBPACK VAR INJECTION */(function(module) {'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var constant = __webpack_require__(65),\n	    root = __webpack_require__(15);\n\n	/** Used to determine if values are of the language type `Object`. */\n	var objectTypes = {\n	  'function': true,\n	  'object': true\n	};\n\n	/** Detect free variable `exports`. */\n	var freeExports = objectTypes[ false ? 'undefined' : _typeof(exports)] && exports && !exports.nodeType ? exports : undefined;\n\n	/** Detect free variable `module`. */\n	var freeModule = objectTypes[ false ? 'undefined' : _typeof(module)] && module && !module.nodeType ? module : undefined;\n\n	/** Detect the popular CommonJS extension `module.exports`. */\n	var moduleExports = freeModule && freeModule.exports === freeExports ? freeExports : undefined;\n\n	/** Built-in value references. */\n	var Buffer = moduleExports ? root.Buffer : undefined;\n\n	/**\n	 * Checks if `value` is a buffer.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.3.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n	 * @example\n	 *\n	 * _.isBuffer(new Buffer(2));\n	 * // => true\n	 *\n	 * _.isBuffer(new Uint8Array(2));\n	 * // => false\n	 */\n	var isBuffer = !Buffer ? constant(false) : function (value) {\n	  return value instanceof Buffer;\n	};\n\n	module.exports = isBuffer;\n	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)(module)))\n\n/***/ },\n/* 65 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Creates a function that returns `value`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 2.4.0\n	 * @category Util\n	 * @param {*} value The value to return from the new function.\n	 * @returns {Function} Returns the new function.\n	 * @example\n	 *\n	 * var object = { 'user': 'fred' };\n	 * var getter = _.constant(object);\n	 *\n	 * getter() === object;\n	 * // => true\n	 */\n	function constant(value) {\n	  return function () {\n	    return value;\n	  };\n	}\n\n	module.exports = constant;\n\n/***/ },\n/* 66 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArray = __webpack_require__(51),\n	    isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var stringTag = '[object String]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a `String` primitive or object.\n	 *\n	 * @static\n	 * @since 0.1.0\n	 * @memberOf _\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isString('abc');\n	 * // => true\n	 *\n	 * _.isString(1);\n	 * // => false\n	 */\n	function isString(value) {\n	  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag;\n	}\n\n	module.exports = isString;\n\n/***/ },\n/* 67 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseHas = __webpack_require__(68),\n	    baseKeys = __webpack_require__(70),\n	    indexKeys = __webpack_require__(71),\n	    isArrayLike = __webpack_require__(46),\n	    isIndex = __webpack_require__(73),\n	    isPrototype = __webpack_require__(74);\n\n	/**\n	 * Creates an array of the own enumerable property names of `object`.\n	 *\n	 * **Note:** Non-object values are coerced to objects. See the\n	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)\n	 * for more details.\n	 *\n	 * @static\n	 * @since 0.1.0\n	 * @memberOf _\n	 * @category Object\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of property names.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.a = 1;\n	 *   this.b = 2;\n	 * }\n	 *\n	 * Foo.prototype.c = 3;\n	 *\n	 * _.keys(new Foo);\n	 * // => ['a', 'b'] (iteration order is not guaranteed)\n	 *\n	 * _.keys('hi');\n	 * // => ['0', '1']\n	 */\n	function keys(object) {\n	  var isProto = isPrototype(object);\n	  if (!(isProto || isArrayLike(object))) {\n	    return baseKeys(object);\n	  }\n	  var indexes = indexKeys(object),\n	      skipIndexes = !!indexes,\n	      result = indexes || [],\n	      length = result.length;\n\n	  for (var key in object) {\n	    if (baseHas(object, key) && !(skipIndexes && (key == 'length' || isIndex(key, length))) && !(isProto && key == 'constructor')) {\n	      result.push(key);\n	    }\n	  }\n	  return result;\n	}\n\n	module.exports = keys;\n\n/***/ },\n/* 68 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var getPrototype = __webpack_require__(69);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * The base implementation of `_.has` without support for deep paths.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} key The key to check.\n	 * @returns {boolean} Returns `true` if `key` exists, else `false`.\n	 */\n	function baseHas(object, key) {\n	  // Avoid a bug in IE 10-11 where objects with a [[Prototype]] of `null`,\n	  // that are composed entirely of index properties, return `false` for\n	  // `hasOwnProperty` checks of them.\n	  return hasOwnProperty.call(object, key) || (typeof object === 'undefined' ? 'undefined' : _typeof(object)) == 'object' && key in object && getPrototype(object) === null;\n	}\n\n	module.exports = baseHas;\n\n/***/ },\n/* 69 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/* Built-in method references for those with the same name as other `lodash` methods. */\n	var nativeGetPrototype = Object.getPrototypeOf;\n\n	/**\n	 * Gets the `[[Prototype]]` of `value`.\n	 *\n	 * @private\n	 * @param {*} value The value to query.\n	 * @returns {null|Object} Returns the `[[Prototype]]`.\n	 */\n	function getPrototype(value) {\n	  return nativeGetPrototype(Object(value));\n	}\n\n	module.exports = getPrototype;\n\n/***/ },\n/* 70 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/* Built-in method references for those with the same name as other `lodash` methods. */\n	var nativeKeys = Object.keys;\n\n	/**\n	 * The base implementation of `_.keys` which doesn't skip the constructor\n	 * property of prototypes or treat sparse arrays as dense.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of property names.\n	 */\n	function baseKeys(object) {\n	  return nativeKeys(Object(object));\n	}\n\n	module.exports = baseKeys;\n\n/***/ },\n/* 71 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseTimes = __webpack_require__(72),\n	    isArguments = __webpack_require__(44),\n	    isArray = __webpack_require__(51),\n	    isLength = __webpack_require__(49),\n	    isString = __webpack_require__(66);\n\n	/**\n	 * Creates an array of index keys for `object` values of arrays,\n	 * `arguments` objects, and strings, otherwise `null` is returned.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array|null} Returns index keys, else `null`.\n	 */\n	function indexKeys(object) {\n	  var length = object ? object.length : undefined;\n	  if (isLength(length) && (isArray(object) || isString(object) || isArguments(object))) {\n	    return baseTimes(length, String);\n	  }\n	  return null;\n	}\n\n	module.exports = indexKeys;\n\n/***/ },\n/* 72 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.times` without support for iteratee shorthands\n	 * or max array length checks.\n	 *\n	 * @private\n	 * @param {number} n The number of times to invoke `iteratee`.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array} Returns the array of results.\n	 */\n	function baseTimes(n, iteratee) {\n	  var index = -1,\n	      result = Array(n);\n\n	  while (++index < n) {\n	    result[index] = iteratee(index);\n	  }\n	  return result;\n	}\n\n	module.exports = baseTimes;\n\n/***/ },\n/* 73 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/** Used as references for various `Number` constants. */\n	var MAX_SAFE_INTEGER = 9007199254740991;\n\n	/** Used to detect unsigned integer values. */\n	var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n	/**\n	 * Checks if `value` is a valid array-like index.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n	 */\n	function isIndex(value, length) {\n	  value = typeof value == 'number' || reIsUint.test(value) ? +value : -1;\n	  length = length == null ? MAX_SAFE_INTEGER : length;\n	  return value > -1 && value % 1 == 0 && value < length;\n	}\n\n	module.exports = isIndex;\n\n/***/ },\n/* 74 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Checks if `value` is likely a prototype object.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n	 */\n	function isPrototype(value) {\n	  var Ctor = value && value.constructor,\n	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;\n\n	  return value === proto;\n	}\n\n	module.exports = isPrototype;\n\n/***/ },\n/* 75 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var numberTag = '[object Number]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a `Number` primitive or object.\n	 *\n	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are\n	 * classified as numbers, use the `_.isFinite` method.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isNumber(3);\n	 * // => true\n	 *\n	 * _.isNumber(Number.MIN_VALUE);\n	 * // => true\n	 *\n	 * _.isNumber(Infinity);\n	 * // => true\n	 *\n	 * _.isNumber('3');\n	 * // => false\n	 */\n	function isNumber(value) {\n	  return typeof value == 'number' || isObjectLike(value) && objectToString.call(value) == numberTag;\n	}\n\n	module.exports = isNumber;\n\n/***/ },\n/* 76 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArray = __webpack_require__(51);\n\n	/**\n	 * Casts `value` as an array if it's not one.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.4.0\n	 * @category Lang\n	 * @param {*} value The value to inspect.\n	 * @returns {Array} Returns the cast array.\n	 * @example\n	 *\n	 * _.castArray(1);\n	 * // => [1]\n	 *\n	 * _.castArray({ 'a': 1 });\n	 * // => [{ 'a': 1 }]\n	 *\n	 * _.castArray('abc');\n	 * // => ['abc']\n	 *\n	 * _.castArray(null);\n	 * // => [null]\n	 *\n	 * _.castArray(undefined);\n	 * // => [undefined]\n	 *\n	 * _.castArray();\n	 * // => []\n	 *\n	 * var array = [1, 2, 3];\n	 * console.log(_.castArray(array) === array);\n	 * // => true\n	 */\n	function castArray() {\n	  if (!arguments.length) {\n	    return [];\n	  }\n	  var value = arguments[0];\n	  return isArray(value) ? value : [value];\n	}\n\n	module.exports = castArray;\n\n/***/ },\n/* 77 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var drop = __webpack_require__(78);\n\n	/**\n	 * Gets all but the first element of `array`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Array\n	 * @param {Array} array The array to query.\n	 * @returns {Array} Returns the slice of `array`.\n	 * @example\n	 *\n	 * _.tail([1, 2, 3]);\n	 * // => [2, 3]\n	 */\n	function tail(array) {\n	  return drop(array, 1);\n	}\n\n	module.exports = tail;\n\n/***/ },\n/* 78 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseSlice = __webpack_require__(79),\n	    toInteger = __webpack_require__(54);\n\n	/**\n	 * Creates a slice of `array` with `n` elements dropped from the beginning.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.5.0\n	 * @category Array\n	 * @param {Array} array The array to query.\n	 * @param {number} [n=1] The number of elements to drop.\n	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n	 * @returns {Array} Returns the slice of `array`.\n	 * @example\n	 *\n	 * _.drop([1, 2, 3]);\n	 * // => [2, 3]\n	 *\n	 * _.drop([1, 2, 3], 2);\n	 * // => [3]\n	 *\n	 * _.drop([1, 2, 3], 5);\n	 * // => []\n	 *\n	 * _.drop([1, 2, 3], 0);\n	 * // => [1, 2, 3]\n	 */\n	function drop(array, n, guard) {\n	  var length = array ? array.length : 0;\n	  if (!length) {\n	    return [];\n	  }\n	  n = guard || n === undefined ? 1 : toInteger(n);\n	  return baseSlice(array, n < 0 ? 0 : n, length);\n	}\n\n	module.exports = drop;\n\n/***/ },\n/* 79 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.slice` without an iteratee call guard.\n	 *\n	 * @private\n	 * @param {Array} array The array to slice.\n	 * @param {number} [start=0] The start position.\n	 * @param {number} [end=array.length] The end position.\n	 * @returns {Array} Returns the slice of `array`.\n	 */\n	function baseSlice(array, start, end) {\n	  var index = -1,\n	      length = array.length;\n\n	  if (start < 0) {\n	    start = -start > length ? 0 : length + start;\n	  }\n	  end = end > length ? length : end;\n	  if (end < 0) {\n	    end += length;\n	  }\n	  length = start > end ? 0 : end - start >>> 0;\n	  start >>>= 0;\n\n	  var result = Array(length);\n	  while (++index < length) {\n	    result[index] = array[index + start];\n	  }\n	  return result;\n	}\n\n	module.exports = baseSlice;\n\n/***/ },\n/* 80 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Gets the first element of `array`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @alias first\n	 * @category Array\n	 * @param {Array} array The array to query.\n	 * @returns {*} Returns the first element of `array`.\n	 * @example\n	 *\n	 * _.head([1, 2, 3]);\n	 * // => 1\n	 *\n	 * _.head([]);\n	 * // => undefined\n	 */\n	function head(array) {\n	  return array && array.length ? array[0] : undefined;\n	}\n\n	module.exports = head;\n\n/***/ },\n/* 81 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseGet = __webpack_require__(82);\n\n	/**\n	 * Gets the value at `path` of `object`. If the resolved value is\n	 * `undefined`, the `defaultValue` is used in its place.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.7.0\n	 * @category Object\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} path The path of the property to get.\n	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.\n	 * @returns {*} Returns the resolved value.\n	 * @example\n	 *\n	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n	 *\n	 * _.get(object, 'a[0].b.c');\n	 * // => 3\n	 *\n	 * _.get(object, ['a', '0', 'b', 'c']);\n	 * // => 3\n	 *\n	 * _.get(object, 'a.b.c', 'default');\n	 * // => 'default'\n	 */\n	function get(object, path, defaultValue) {\n	  var result = object == null ? undefined : baseGet(object, path);\n	  return result === undefined ? defaultValue : result;\n	}\n\n	module.exports = get;\n\n/***/ },\n/* 82 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var castPath = __webpack_require__(83),\n	    isKey = __webpack_require__(88);\n\n	/**\n	 * The base implementation of `_.get` without support for default values.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} path The path of the property to get.\n	 * @returns {*} Returns the resolved value.\n	 */\n	function baseGet(object, path) {\n	  path = isKey(path, object) ? [path] : castPath(path);\n\n	  var index = 0,\n	      length = path.length;\n\n	  while (object != null && index < length) {\n	    object = object[path[index++]];\n	  }\n	  return index && index == length ? object : undefined;\n	}\n\n	module.exports = baseGet;\n\n/***/ },\n/* 83 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArray = __webpack_require__(51),\n	    stringToPath = __webpack_require__(84);\n\n	/**\n	 * Casts `value` to a path array if it's not one.\n	 *\n	 * @private\n	 * @param {*} value The value to inspect.\n	 * @returns {Array} Returns the cast property path array.\n	 */\n	function castPath(value) {\n	  return isArray(value) ? value : stringToPath(value);\n	}\n\n	module.exports = castPath;\n\n/***/ },\n/* 84 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var memoize = __webpack_require__(85),\n	    toString = __webpack_require__(86);\n\n	/** Used to match property names within property paths. */\n	var rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]/g;\n\n	/** Used to match backslashes in property paths. */\n	var reEscapeChar = /\\\\(\\\\)?/g;\n\n	/**\n	 * Converts `string` to a property path array.\n	 *\n	 * @private\n	 * @param {string} string The string to convert.\n	 * @returns {Array} Returns the property path array.\n	 */\n	var stringToPath = memoize(function (string) {\n	  var result = [];\n	  toString(string).replace(rePropName, function (match, number, quote, string) {\n	    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\n	  });\n	  return result;\n	});\n\n	module.exports = stringToPath;\n\n/***/ },\n/* 85 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var MapCache = __webpack_require__(4);\n\n	/** Used as the `TypeError` message for \"Functions\" methods. */\n	var FUNC_ERROR_TEXT = 'Expected a function';\n\n	/**\n	 * Creates a function that memoizes the result of `func`. If `resolver` is\n	 * provided, it determines the cache key for storing the result based on the\n	 * arguments provided to the memoized function. By default, the first argument\n	 * provided to the memoized function is used as the map cache key. The `func`\n	 * is invoked with the `this` binding of the memoized function.\n	 *\n	 * **Note:** The cache is exposed as the `cache` property on the memoized\n	 * function. Its creation may be customized by replacing the `_.memoize.Cache`\n	 * constructor with one whose instances implement the\n	 * [`Map`](http://ecma-international.org/ecma-262/6.0/#sec-properties-of-the-map-prototype-object)\n	 * method interface of `delete`, `get`, `has`, and `set`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Function\n	 * @param {Function} func The function to have its output memoized.\n	 * @param {Function} [resolver] The function to resolve the cache key.\n	 * @returns {Function} Returns the new memoizing function.\n	 * @example\n	 *\n	 * var object = { 'a': 1, 'b': 2 };\n	 * var other = { 'c': 3, 'd': 4 };\n	 *\n	 * var values = _.memoize(_.values);\n	 * values(object);\n	 * // => [1, 2]\n	 *\n	 * values(other);\n	 * // => [3, 4]\n	 *\n	 * object.a = 2;\n	 * values(object);\n	 * // => [1, 2]\n	 *\n	 * // Modify the result cache.\n	 * values.cache.set(object, ['a', 'b']);\n	 * values(object);\n	 * // => ['a', 'b']\n	 *\n	 * // Replace `_.memoize.Cache`.\n	 * _.memoize.Cache = WeakMap;\n	 */\n	function memoize(func, resolver) {\n	  if (typeof func != 'function' || resolver && typeof resolver != 'function') {\n	    throw new TypeError(FUNC_ERROR_TEXT);\n	  }\n	  var memoized = function memoized() {\n	    var args = arguments,\n	        key = resolver ? resolver.apply(this, args) : args[0],\n	        cache = memoized.cache;\n\n	    if (cache.has(key)) {\n	      return cache.get(key);\n	    }\n	    var result = func.apply(this, args);\n	    memoized.cache = cache.set(key, result);\n	    return result;\n	  };\n	  memoized.cache = new (memoize.Cache || MapCache)();\n	  return memoized;\n	}\n\n	// Assign cache to `_.memoize`.\n	memoize.Cache = MapCache;\n\n	module.exports = memoize;\n\n/***/ },\n/* 86 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _Symbol = __webpack_require__(87),\n	    isSymbol = __webpack_require__(56);\n\n	/** Used as references for various `Number` constants. */\n	var INFINITY = 1 / 0;\n\n	/** Used to convert symbols to primitives and strings. */\n	var symbolProto = _Symbol ? _Symbol.prototype : undefined,\n	    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n	/**\n	 * Converts `value` to a string. An empty string is returned for `null`\n	 * and `undefined` values. The sign of `-0` is preserved.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Lang\n	 * @param {*} value The value to process.\n	 * @returns {string} Returns the string.\n	 * @example\n	 *\n	 * _.toString(null);\n	 * // => ''\n	 *\n	 * _.toString(-0);\n	 * // => '-0'\n	 *\n	 * _.toString([1, 2, 3]);\n	 * // => '1,2,3'\n	 */\n	function toString(value) {\n	  // Exit early for strings to avoid a performance hit in some environments.\n	  if (typeof value == 'string') {\n	    return value;\n	  }\n	  if (value == null) {\n	    return '';\n	  }\n	  if (isSymbol(value)) {\n	    return symbolToString ? symbolToString.call(value) : '';\n	  }\n	  var result = value + '';\n	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n	}\n\n	module.exports = toString;\n\n/***/ },\n/* 87 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var root = __webpack_require__(15);\n\n	/** Built-in value references. */\n	var _Symbol = root.Symbol;\n\n	module.exports = _Symbol;\n\n/***/ },\n/* 88 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var isArray = __webpack_require__(51),\n	    isSymbol = __webpack_require__(56);\n\n	/** Used to match property names within property paths. */\n	var reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n	    reIsPlainProp = /^\\w*$/;\n\n	/**\n	 * Checks if `value` is a property name and not a property path.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @param {Object} [object] The object to query keys on.\n	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n	 */\n	function isKey(value, object) {\n	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);\n	  if (type == 'number' || type == 'symbol') {\n	    return true;\n	  }\n	  return !isArray(value) && (isSymbol(value) || reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object));\n	}\n\n	module.exports = isKey;\n\n/***/ },\n/* 89 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayEach = __webpack_require__(90),\n	    baseCreate = __webpack_require__(91),\n	    baseForOwn = __webpack_require__(92),\n	    baseIteratee = __webpack_require__(95),\n	    getPrototype = __webpack_require__(69),\n	    isArray = __webpack_require__(51),\n	    isFunction = __webpack_require__(10),\n	    isObject = __webpack_require__(11),\n	    isTypedArray = __webpack_require__(113);\n\n	/**\n	 * An alternative to `_.reduce`; this method transforms `object` to a new\n	 * `accumulator` object which is the result of running each of its own\n	 * enumerable string keyed properties thru `iteratee`, with each invocation\n	 * potentially mutating the `accumulator` object. The iteratee is invoked\n	 * with four arguments: (accumulator, value, key, object). Iteratee functions\n	 * may exit iteration early by explicitly returning `false`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 1.3.0\n	 * @category Object\n	 * @param {Array|Object} object The object to iterate over.\n	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n	 * @param {*} [accumulator] The custom accumulator value.\n	 * @returns {*} Returns the accumulated value.\n	 * @example\n	 *\n	 * _.transform([2, 3, 4], function(result, n) {\n	 *   result.push(n *= n);\n	 *   return n % 2 == 0;\n	 * }, []);\n	 * // => [4, 9]\n	 *\n	 * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n	 *   (result[value] || (result[value] = [])).push(key);\n	 * }, {});\n	 * // => { '1': ['a', 'c'], '2': ['b'] }\n	 */\n	function transform(object, iteratee, accumulator) {\n	  var isArr = isArray(object) || isTypedArray(object);\n	  iteratee = baseIteratee(iteratee, 4);\n\n	  if (accumulator == null) {\n	    if (isArr || isObject(object)) {\n	      var Ctor = object.constructor;\n	      if (isArr) {\n	        accumulator = isArray(object) ? new Ctor() : [];\n	      } else {\n	        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n	      }\n	    } else {\n	      accumulator = {};\n	    }\n	  }\n	  (isArr ? arrayEach : baseForOwn)(object, function (value, index, object) {\n	    return iteratee(accumulator, value, index, object);\n	  });\n	  return accumulator;\n	}\n\n	module.exports = transform;\n\n/***/ },\n/* 90 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A specialized version of `_.forEach` for arrays without support for\n	 * iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array} Returns `array`.\n	 */\n	function arrayEach(array, iteratee) {\n	  var index = -1,\n	      length = array.length;\n\n	  while (++index < length) {\n	    if (iteratee(array[index], index, array) === false) {\n	      break;\n	    }\n	  }\n	  return array;\n	}\n\n	module.exports = arrayEach;\n\n/***/ },\n/* 91 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObject = __webpack_require__(11);\n\n	/** Built-in value references. */\n	var objectCreate = Object.create;\n\n	/**\n	 * The base implementation of `_.create` without support for assigning\n	 * properties to the created object.\n	 *\n	 * @private\n	 * @param {Object} prototype The object to inherit from.\n	 * @returns {Object} Returns the new object.\n	 */\n	function baseCreate(proto) {\n	  return isObject(proto) ? objectCreate(proto) : {};\n	}\n\n	module.exports = baseCreate;\n\n/***/ },\n/* 92 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseFor = __webpack_require__(93),\n	    keys = __webpack_require__(67);\n\n	/**\n	 * The base implementation of `_.forOwn` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Object} object The object to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Object} Returns `object`.\n	 */\n	function baseForOwn(object, iteratee) {\n	  return object && baseFor(object, iteratee, keys);\n	}\n\n	module.exports = baseForOwn;\n\n/***/ },\n/* 93 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var createBaseFor = __webpack_require__(94);\n\n	/**\n	 * The base implementation of `baseForOwn` which iterates over `object`\n	 * properties returned by `keysFunc` and invokes `iteratee` for each property.\n	 * Iteratee functions may exit iteration early by explicitly returning `false`.\n	 *\n	 * @private\n	 * @param {Object} object The object to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @param {Function} keysFunc The function to get the keys of `object`.\n	 * @returns {Object} Returns `object`.\n	 */\n	var baseFor = createBaseFor();\n\n	module.exports = baseFor;\n\n/***/ },\n/* 94 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n	 *\n	 * @private\n	 * @param {boolean} [fromRight] Specify iterating from right to left.\n	 * @returns {Function} Returns the new base function.\n	 */\n	function createBaseFor(fromRight) {\n	  return function (object, iteratee, keysFunc) {\n	    var index = -1,\n	        iterable = Object(object),\n	        props = keysFunc(object),\n	        length = props.length;\n\n	    while (length--) {\n	      var key = props[fromRight ? length : ++index];\n	      if (iteratee(iterable[key], key, iterable) === false) {\n	        break;\n	      }\n	    }\n	    return object;\n	  };\n	}\n\n	module.exports = createBaseFor;\n\n/***/ },\n/* 95 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var baseMatches = __webpack_require__(96),\n	    baseMatchesProperty = __webpack_require__(119),\n	    identity = __webpack_require__(123),\n	    isArray = __webpack_require__(51),\n	    property = __webpack_require__(124);\n\n	/**\n	 * The base implementation of `_.iteratee`.\n	 *\n	 * @private\n	 * @param {*} [value=_.identity] The value to convert to an iteratee.\n	 * @returns {Function} Returns the iteratee.\n	 */\n	function baseIteratee(value) {\n	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n	  if (typeof value == 'function') {\n	    return value;\n	  }\n	  if (value == null) {\n	    return identity;\n	  }\n	  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {\n	    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);\n	  }\n	  return property(value);\n	}\n\n	module.exports = baseIteratee;\n\n/***/ },\n/* 96 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIsMatch = __webpack_require__(97),\n	    getMatchData = __webpack_require__(114),\n	    matchesStrictComparable = __webpack_require__(118);\n\n	/**\n	 * The base implementation of `_.matches` which doesn't clone `source`.\n	 *\n	 * @private\n	 * @param {Object} source The object of property values to match.\n	 * @returns {Function} Returns the new function.\n	 */\n	function baseMatches(source) {\n	  var matchData = getMatchData(source);\n	  if (matchData.length == 1 && matchData[0][2]) {\n	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n	  }\n	  return function (object) {\n	    return object === source || baseIsMatch(object, source, matchData);\n	  };\n	}\n\n	module.exports = baseMatches;\n\n/***/ },\n/* 97 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Stack = __webpack_require__(98),\n	    baseIsEqual = __webpack_require__(104);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var UNORDERED_COMPARE_FLAG = 1,\n	    PARTIAL_COMPARE_FLAG = 2;\n\n	/**\n	 * The base implementation of `_.isMatch` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Object} object The object to inspect.\n	 * @param {Object} source The object of property values to match.\n	 * @param {Array} matchData The property names, values, and compare flags to match.\n	 * @param {Function} [customizer] The function to customize comparisons.\n	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n	 */\n	function baseIsMatch(object, source, matchData, customizer) {\n	  var index = matchData.length,\n	      length = index,\n	      noCustomizer = !customizer;\n\n	  if (object == null) {\n	    return !length;\n	  }\n	  object = Object(object);\n	  while (index--) {\n	    var data = matchData[index];\n	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {\n	      return false;\n	    }\n	  }\n	  while (++index < length) {\n	    data = matchData[index];\n	    var key = data[0],\n	        objValue = object[key],\n	        srcValue = data[1];\n\n	    if (noCustomizer && data[2]) {\n	      if (objValue === undefined && !(key in object)) {\n	        return false;\n	      }\n	    } else {\n	      var stack = new Stack();\n	      if (customizer) {\n	        var result = customizer(objValue, srcValue, key, object, source, stack);\n	      }\n	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG, stack) : result)) {\n	        return false;\n	      }\n	    }\n	  }\n	  return true;\n	}\n\n	module.exports = baseIsMatch;\n\n/***/ },\n/* 98 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var stackClear = __webpack_require__(99),\n	    stackDelete = __webpack_require__(100),\n	    stackGet = __webpack_require__(101),\n	    stackHas = __webpack_require__(102),\n	    stackSet = __webpack_require__(103);\n\n	/**\n	 * Creates a stack cache object to store key-value pairs.\n	 *\n	 * @private\n	 * @constructor\n	 * @param {Array} [values] The values to cache.\n	 */\n	function Stack(values) {\n	    var index = -1,\n	        length = values ? values.length : 0;\n\n	    this.clear();\n	    while (++index < length) {\n	        var entry = values[index];\n	        this.set(entry[0], entry[1]);\n	    }\n	}\n\n	// Add methods to `Stack`.\n	Stack.prototype.clear = stackClear;\n	Stack.prototype['delete'] = stackDelete;\n	Stack.prototype.get = stackGet;\n	Stack.prototype.has = stackHas;\n	Stack.prototype.set = stackSet;\n\n	module.exports = Stack;\n\n/***/ },\n/* 99 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/**\n	 * Removes all key-value entries from the stack.\n	 *\n	 * @private\n	 * @name clear\n	 * @memberOf Stack\n	 */\n	function stackClear() {\n	  this.__data__ = { 'array': [], 'map': null };\n	}\n\n	module.exports = stackClear;\n\n/***/ },\n/* 100 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocDelete = __webpack_require__(19);\n\n	/**\n	 * Removes `key` and its value from the stack.\n	 *\n	 * @private\n	 * @name delete\n	 * @memberOf Stack\n	 * @param {string} key The key of the value to remove.\n	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n	 */\n	function stackDelete(key) {\n	  var data = this.__data__,\n	      array = data.array;\n\n	  return array ? assocDelete(array, key) : data.map['delete'](key);\n	}\n\n	module.exports = stackDelete;\n\n/***/ },\n/* 101 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocGet = __webpack_require__(26);\n\n	/**\n	 * Gets the stack value for `key`.\n	 *\n	 * @private\n	 * @name get\n	 * @memberOf Stack\n	 * @param {string} key The key of the value to get.\n	 * @returns {*} Returns the entry value.\n	 */\n	function stackGet(key) {\n	  var data = this.__data__,\n	      array = data.array;\n\n	  return array ? assocGet(array, key) : data.map.get(key);\n	}\n\n	module.exports = stackGet;\n\n/***/ },\n/* 102 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assocHas = __webpack_require__(29);\n\n	/**\n	 * Checks if a stack value for `key` exists.\n	 *\n	 * @private\n	 * @name has\n	 * @memberOf Stack\n	 * @param {string} key The key of the entry to check.\n	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n	 */\n	function stackHas(key) {\n	  var data = this.__data__,\n	      array = data.array;\n\n	  return array ? assocHas(array, key) : data.map.has(key);\n	}\n\n	module.exports = stackHas;\n\n/***/ },\n/* 103 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var MapCache = __webpack_require__(4),\n	    assocSet = __webpack_require__(31);\n\n	/** Used as the size to enable large array optimizations. */\n	var LARGE_ARRAY_SIZE = 200;\n\n	/**\n	 * Sets the stack `key` to `value`.\n	 *\n	 * @private\n	 * @name set\n	 * @memberOf Stack\n	 * @param {string} key The key of the value to set.\n	 * @param {*} value The value to set.\n	 * @returns {Object} Returns the stack cache instance.\n	 */\n	function stackSet(key, value) {\n	  var data = this.__data__,\n	      array = data.array;\n\n	  if (array) {\n	    if (array.length < LARGE_ARRAY_SIZE - 1) {\n	      assocSet(array, key, value);\n	    } else {\n	      data.array = null;\n	      data.map = new MapCache(array);\n	    }\n	  }\n	  var map = data.map;\n	  if (map) {\n	    map.set(key, value);\n	  }\n	  return this;\n	}\n\n	module.exports = stackSet;\n\n/***/ },\n/* 104 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIsEqualDeep = __webpack_require__(105),\n	    isObject = __webpack_require__(11),\n	    isObjectLike = __webpack_require__(50);\n\n	/**\n	 * The base implementation of `_.isEqual` which supports partial comparisons\n	 * and tracks traversed objects.\n	 *\n	 * @private\n	 * @param {*} value The value to compare.\n	 * @param {*} other The other value to compare.\n	 * @param {Function} [customizer] The function to customize comparisons.\n	 * @param {boolean} [bitmask] The bitmask of comparison flags.\n	 *  The bitmask may be composed of the following flags:\n	 *     1 - Unordered comparison\n	 *     2 - Partial comparison\n	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n	 */\n	function baseIsEqual(value, other, customizer, bitmask, stack) {\n	  if (value === other) {\n	    return true;\n	  }\n	  if (value == null || other == null || !isObject(value) && !isObjectLike(other)) {\n	    return value !== value && other !== other;\n	  }\n	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);\n	}\n\n	module.exports = baseIsEqual;\n\n/***/ },\n/* 105 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Stack = __webpack_require__(98),\n	    equalArrays = __webpack_require__(106),\n	    equalByTag = __webpack_require__(108),\n	    equalObjects = __webpack_require__(112),\n	    getTag = __webpack_require__(59),\n	    isArray = __webpack_require__(51),\n	    isHostObject = __webpack_require__(12),\n	    isTypedArray = __webpack_require__(113);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var PARTIAL_COMPARE_FLAG = 2;\n\n	/** `Object#toString` result references. */\n	var argsTag = '[object Arguments]',\n	    arrayTag = '[object Array]',\n	    objectTag = '[object Object]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * A specialized version of `baseIsEqual` for arrays and objects which performs\n	 * deep comparisons and tracks traversed objects enabling objects with circular\n	 * references to be compared.\n	 *\n	 * @private\n	 * @param {Object} object The object to compare.\n	 * @param {Object} other The other object to compare.\n	 * @param {Function} equalFunc The function to determine equivalents of values.\n	 * @param {Function} [customizer] The function to customize comparisons.\n	 * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual`\n	 *  for more details.\n	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n	 */\n	function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {\n	  var objIsArr = isArray(object),\n	      othIsArr = isArray(other),\n	      objTag = arrayTag,\n	      othTag = arrayTag;\n\n	  if (!objIsArr) {\n	    objTag = getTag(object);\n	    objTag = objTag == argsTag ? objectTag : objTag;\n	  }\n	  if (!othIsArr) {\n	    othTag = getTag(other);\n	    othTag = othTag == argsTag ? objectTag : othTag;\n	  }\n	  var objIsObj = objTag == objectTag && !isHostObject(object),\n	      othIsObj = othTag == objectTag && !isHostObject(other),\n	      isSameTag = objTag == othTag;\n\n	  if (isSameTag && !objIsObj) {\n	    stack || (stack = new Stack());\n	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, equalFunc, customizer, bitmask, stack) : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);\n	  }\n	  if (!(bitmask & PARTIAL_COMPARE_FLAG)) {\n	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n	    if (objIsWrapped || othIsWrapped) {\n	      var objUnwrapped = objIsWrapped ? object.value() : object,\n	          othUnwrapped = othIsWrapped ? other.value() : other;\n\n	      stack || (stack = new Stack());\n	      return equalFunc(objUnwrapped, othUnwrapped, customizer, bitmask, stack);\n	    }\n	  }\n	  if (!isSameTag) {\n	    return false;\n	  }\n	  stack || (stack = new Stack());\n	  return equalObjects(object, other, equalFunc, customizer, bitmask, stack);\n	}\n\n	module.exports = baseIsEqualDeep;\n\n/***/ },\n/* 106 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arraySome = __webpack_require__(107);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var UNORDERED_COMPARE_FLAG = 1,\n	    PARTIAL_COMPARE_FLAG = 2;\n\n	/**\n	 * A specialized version of `baseIsEqualDeep` for arrays with support for\n	 * partial deep comparisons.\n	 *\n	 * @private\n	 * @param {Array} array The array to compare.\n	 * @param {Array} other The other array to compare.\n	 * @param {Function} equalFunc The function to determine equivalents of values.\n	 * @param {Function} customizer The function to customize comparisons.\n	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n	 *  for more details.\n	 * @param {Object} stack Tracks traversed `array` and `other` objects.\n	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n	 */\n	function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {\n	  var index = -1,\n	      isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n	      isUnordered = bitmask & UNORDERED_COMPARE_FLAG,\n	      arrLength = array.length,\n	      othLength = other.length;\n\n	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n	    return false;\n	  }\n	  // Assume cyclic values are equal.\n	  var stacked = stack.get(array);\n	  if (stacked) {\n	    return stacked == other;\n	  }\n	  var result = true;\n	  stack.set(array, other);\n\n	  // Ignore non-index properties.\n	  while (++index < arrLength) {\n	    var arrValue = array[index],\n	        othValue = other[index];\n\n	    if (customizer) {\n	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n	    }\n	    if (compared !== undefined) {\n	      if (compared) {\n	        continue;\n	      }\n	      result = false;\n	      break;\n	    }\n	    // Recursively compare arrays (susceptible to call stack limits).\n	    if (isUnordered) {\n	      if (!arraySome(other, function (othValue) {\n	        return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);\n	      })) {\n	        result = false;\n	        break;\n	      }\n	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {\n	      result = false;\n	      break;\n	    }\n	  }\n	  stack['delete'](array);\n	  return result;\n	}\n\n	module.exports = equalArrays;\n\n/***/ },\n/* 107 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A specialized version of `_.some` for arrays without support for iteratee\n	 * shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to iterate over.\n	 * @param {Function} predicate The function invoked per iteration.\n	 * @returns {boolean} Returns `true` if any element passes the predicate check,\n	 *  else `false`.\n	 */\n	function arraySome(array, predicate) {\n	  var index = -1,\n	      length = array.length;\n\n	  while (++index < length) {\n	    if (predicate(array[index], index, array)) {\n	      return true;\n	    }\n	  }\n	  return false;\n	}\n\n	module.exports = arraySome;\n\n/***/ },\n/* 108 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _Symbol = __webpack_require__(87),\n	    Uint8Array = __webpack_require__(109),\n	    equalArrays = __webpack_require__(106),\n	    mapToArray = __webpack_require__(110),\n	    setToArray = __webpack_require__(111);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var UNORDERED_COMPARE_FLAG = 1,\n	    PARTIAL_COMPARE_FLAG = 2;\n\n	/** `Object#toString` result references. */\n	var boolTag = '[object Boolean]',\n	    dateTag = '[object Date]',\n	    errorTag = '[object Error]',\n	    mapTag = '[object Map]',\n	    numberTag = '[object Number]',\n	    regexpTag = '[object RegExp]',\n	    setTag = '[object Set]',\n	    stringTag = '[object String]',\n	    symbolTag = '[object Symbol]';\n\n	var arrayBufferTag = '[object ArrayBuffer]',\n	    dataViewTag = '[object DataView]';\n\n	/** Used to convert symbols to primitives and strings. */\n	var symbolProto = _Symbol ? _Symbol.prototype : undefined,\n	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n	/**\n	 * A specialized version of `baseIsEqualDeep` for comparing objects of\n	 * the same `toStringTag`.\n	 *\n	 * **Note:** This function only supports comparing values with tags of\n	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n	 *\n	 * @private\n	 * @param {Object} object The object to compare.\n	 * @param {Object} other The other object to compare.\n	 * @param {string} tag The `toStringTag` of the objects to compare.\n	 * @param {Function} equalFunc The function to determine equivalents of values.\n	 * @param {Function} customizer The function to customize comparisons.\n	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n	 *  for more details.\n	 * @param {Object} stack Tracks traversed `object` and `other` objects.\n	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n	 */\n	function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {\n	  switch (tag) {\n	    case dataViewTag:\n	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n	        return false;\n	      }\n	      object = object.buffer;\n	      other = other.buffer;\n\n	    case arrayBufferTag:\n	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n	        return false;\n	      }\n	      return true;\n\n	    case boolTag:\n	    case dateTag:\n	      // Coerce dates and booleans to numbers, dates to milliseconds and\n	      // booleans to `1` or `0` treating invalid dates coerced to `NaN` as\n	      // not equal.\n	      return +object == +other;\n\n	    case errorTag:\n	      return object.name == other.name && object.message == other.message;\n\n	    case numberTag:\n	      // Treat `NaN` vs. `NaN` as equal.\n	      return object != +object ? other != +other : object == +other;\n\n	    case regexpTag:\n	    case stringTag:\n	      // Coerce regexes to strings and treat strings, primitives and objects,\n	      // as equal. See http://www.ecma-international.org/ecma-262/6.0/#sec-regexp.prototype.tostring\n	      // for more details.\n	      return object == other + '';\n\n	    case mapTag:\n	      var convert = mapToArray;\n\n	    case setTag:\n	      var isPartial = bitmask & PARTIAL_COMPARE_FLAG;\n	      convert || (convert = setToArray);\n\n	      if (object.size != other.size && !isPartial) {\n	        return false;\n	      }\n	      // Assume cyclic values are equal.\n	      var stacked = stack.get(object);\n	      if (stacked) {\n	        return stacked == other;\n	      }\n	      bitmask |= UNORDERED_COMPARE_FLAG;\n	      stack.set(object, other);\n\n	      // Recursively compare objects (susceptible to call stack limits).\n	      return equalArrays(convert(object), convert(other), equalFunc, customizer, bitmask, stack);\n\n	    case symbolTag:\n	      if (symbolValueOf) {\n	        return symbolValueOf.call(object) == symbolValueOf.call(other);\n	      }\n	  }\n	  return false;\n	}\n\n	module.exports = equalByTag;\n\n/***/ },\n/* 109 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var root = __webpack_require__(15);\n\n	/** Built-in value references. */\n	var Uint8Array = root.Uint8Array;\n\n	module.exports = Uint8Array;\n\n/***/ },\n/* 110 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Converts `map` to an array.\n	 *\n	 * @private\n	 * @param {Object} map The map to convert.\n	 * @returns {Array} Returns the converted array.\n	 */\n	function mapToArray(map) {\n	  var index = -1,\n	      result = Array(map.size);\n\n	  map.forEach(function (value, key) {\n	    result[++index] = [key, value];\n	  });\n	  return result;\n	}\n\n	module.exports = mapToArray;\n\n/***/ },\n/* 111 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Converts `set` to an array.\n	 *\n	 * @private\n	 * @param {Object} set The set to convert.\n	 * @returns {Array} Returns the converted array.\n	 */\n	function setToArray(set) {\n	  var index = -1,\n	      result = Array(set.size);\n\n	  set.forEach(function (value) {\n	    result[++index] = value;\n	  });\n	  return result;\n	}\n\n	module.exports = setToArray;\n\n/***/ },\n/* 112 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseHas = __webpack_require__(68),\n	    keys = __webpack_require__(67);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var PARTIAL_COMPARE_FLAG = 2;\n\n	/**\n	 * A specialized version of `baseIsEqualDeep` for objects with support for\n	 * partial deep comparisons.\n	 *\n	 * @private\n	 * @param {Object} object The object to compare.\n	 * @param {Object} other The other object to compare.\n	 * @param {Function} equalFunc The function to determine equivalents of values.\n	 * @param {Function} customizer The function to customize comparisons.\n	 * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual`\n	 *  for more details.\n	 * @param {Object} stack Tracks traversed `object` and `other` objects.\n	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n	 */\n	function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {\n	  var isPartial = bitmask & PARTIAL_COMPARE_FLAG,\n	      objProps = keys(object),\n	      objLength = objProps.length,\n	      othProps = keys(other),\n	      othLength = othProps.length;\n\n	  if (objLength != othLength && !isPartial) {\n	    return false;\n	  }\n	  var index = objLength;\n	  while (index--) {\n	    var key = objProps[index];\n	    if (!(isPartial ? key in other : baseHas(other, key))) {\n	      return false;\n	    }\n	  }\n	  // Assume cyclic values are equal.\n	  var stacked = stack.get(object);\n	  if (stacked) {\n	    return stacked == other;\n	  }\n	  var result = true;\n	  stack.set(object, other);\n\n	  var skipCtor = isPartial;\n	  while (++index < objLength) {\n	    key = objProps[index];\n	    var objValue = object[key],\n	        othValue = other[key];\n\n	    if (customizer) {\n	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n	    }\n	    // Recursively compare objects (susceptible to call stack limits).\n	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack) : compared)) {\n	      result = false;\n	      break;\n	    }\n	    skipCtor || (skipCtor = key == 'constructor');\n	  }\n	  if (result && !skipCtor) {\n	    var objCtor = object.constructor,\n	        othCtor = other.constructor;\n\n	    // Non `Object` object instances with different constructors are not equal.\n	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n	      result = false;\n	    }\n	  }\n	  stack['delete'](object);\n	  return result;\n	}\n\n	module.exports = equalObjects;\n\n/***/ },\n/* 113 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isLength = __webpack_require__(49),\n	    isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var argsTag = '[object Arguments]',\n	    arrayTag = '[object Array]',\n	    boolTag = '[object Boolean]',\n	    dateTag = '[object Date]',\n	    errorTag = '[object Error]',\n	    funcTag = '[object Function]',\n	    mapTag = '[object Map]',\n	    numberTag = '[object Number]',\n	    objectTag = '[object Object]',\n	    regexpTag = '[object RegExp]',\n	    setTag = '[object Set]',\n	    stringTag = '[object String]',\n	    weakMapTag = '[object WeakMap]';\n\n	var arrayBufferTag = '[object ArrayBuffer]',\n	    dataViewTag = '[object DataView]',\n	    float32Tag = '[object Float32Array]',\n	    float64Tag = '[object Float64Array]',\n	    int8Tag = '[object Int8Array]',\n	    int16Tag = '[object Int16Array]',\n	    int32Tag = '[object Int32Array]',\n	    uint8Tag = '[object Uint8Array]',\n	    uint8ClampedTag = '[object Uint8ClampedArray]',\n	    uint16Tag = '[object Uint16Array]',\n	    uint32Tag = '[object Uint32Array]';\n\n	/** Used to identify `toStringTag` values of typed arrays. */\n	var typedArrayTags = {};\n	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a typed array.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.0.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isTypedArray(new Uint8Array);\n	 * // => true\n	 *\n	 * _.isTypedArray([]);\n	 * // => false\n	 */\n	function isTypedArray(value) {\n	    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n	}\n\n	module.exports = isTypedArray;\n\n/***/ },\n/* 114 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isStrictComparable = __webpack_require__(115),\n	    toPairs = __webpack_require__(116);\n\n	/**\n	 * Gets the property names, values, and compare flags of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the match data of `object`.\n	 */\n	function getMatchData(object) {\n	  var result = toPairs(object),\n	      length = result.length;\n\n	  while (length--) {\n	    result[length][2] = isStrictComparable(result[length][1]);\n	  }\n	  return result;\n	}\n\n	module.exports = getMatchData;\n\n/***/ },\n/* 115 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObject = __webpack_require__(11);\n\n	/**\n	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` if suitable for strict\n	 *  equality comparisons, else `false`.\n	 */\n	function isStrictComparable(value) {\n	  return value === value && !isObject(value);\n	}\n\n	module.exports = isStrictComparable;\n\n/***/ },\n/* 116 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseToPairs = __webpack_require__(117),\n	    keys = __webpack_require__(67);\n\n	/**\n	 * Creates an array of own enumerable string keyed-value pairs for `object`\n	 * which can be consumed by `_.fromPairs`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @alias entries\n	 * @category Object\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the new array of key-value pairs.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.a = 1;\n	 *   this.b = 2;\n	 * }\n	 *\n	 * Foo.prototype.c = 3;\n	 *\n	 * _.toPairs(new Foo);\n	 * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)\n	 */\n	function toPairs(object) {\n	  return baseToPairs(object, keys(object));\n	}\n\n	module.exports = toPairs;\n\n/***/ },\n/* 117 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayMap = __webpack_require__(38);\n\n	/**\n	 * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array\n	 * of key-value pairs for `object` corresponding to the property names of `props`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array} props The property names to get values for.\n	 * @returns {Object} Returns the new array of key-value pairs.\n	 */\n	function baseToPairs(object, props) {\n	  return arrayMap(props, function (key) {\n	    return [key, object[key]];\n	  });\n	}\n\n	module.exports = baseToPairs;\n\n/***/ },\n/* 118 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A specialized version of `matchesProperty` for source values suitable\n	 * for strict equality comparisons, i.e. `===`.\n	 *\n	 * @private\n	 * @param {string} key The key of the property to get.\n	 * @param {*} srcValue The value to match.\n	 * @returns {Function} Returns the new function.\n	 */\n	function matchesStrictComparable(key, srcValue) {\n	  return function (object) {\n	    if (object == null) {\n	      return false;\n	    }\n	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));\n	  };\n	}\n\n	module.exports = matchesStrictComparable;\n\n/***/ },\n/* 119 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIsEqual = __webpack_require__(104),\n	    get = __webpack_require__(81),\n	    hasIn = __webpack_require__(120),\n	    isKey = __webpack_require__(88),\n	    isStrictComparable = __webpack_require__(115),\n	    matchesStrictComparable = __webpack_require__(118);\n\n	/** Used to compose bitmasks for comparison styles. */\n	var UNORDERED_COMPARE_FLAG = 1,\n	    PARTIAL_COMPARE_FLAG = 2;\n\n	/**\n	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n	 *\n	 * @private\n	 * @param {string} path The path of the property to get.\n	 * @param {*} srcValue The value to match.\n	 * @returns {Function} Returns the new function.\n	 */\n	function baseMatchesProperty(path, srcValue) {\n	  if (isKey(path) && isStrictComparable(srcValue)) {\n	    return matchesStrictComparable(path, srcValue);\n	  }\n	  return function (object) {\n	    var objValue = get(object, path);\n	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG);\n	  };\n	}\n\n	module.exports = baseMatchesProperty;\n\n/***/ },\n/* 120 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseHasIn = __webpack_require__(121),\n	    hasPath = __webpack_require__(122);\n\n	/**\n	 * Checks if `path` is a direct or inherited property of `object`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Object\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} path The path to check.\n	 * @returns {boolean} Returns `true` if `path` exists, else `false`.\n	 * @example\n	 *\n	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n	 *\n	 * _.hasIn(object, 'a');\n	 * // => true\n	 *\n	 * _.hasIn(object, 'a.b');\n	 * // => true\n	 *\n	 * _.hasIn(object, ['a', 'b']);\n	 * // => true\n	 *\n	 * _.hasIn(object, 'b');\n	 * // => false\n	 */\n	function hasIn(object, path) {\n	  return object != null && hasPath(object, path, baseHasIn);\n	}\n\n	module.exports = hasIn;\n\n/***/ },\n/* 121 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.hasIn` without support for deep paths.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} key The key to check.\n	 * @returns {boolean} Returns `true` if `key` exists, else `false`.\n	 */\n	function baseHasIn(object, key) {\n	  return key in Object(object);\n	}\n\n	module.exports = baseHasIn;\n\n/***/ },\n/* 122 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var castPath = __webpack_require__(83),\n	    isArguments = __webpack_require__(44),\n	    isArray = __webpack_require__(51),\n	    isIndex = __webpack_require__(73),\n	    isKey = __webpack_require__(88),\n	    isLength = __webpack_require__(49),\n	    isString = __webpack_require__(66);\n\n	/**\n	 * Checks if `path` exists on `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array|string} path The path to check.\n	 * @param {Function} hasFunc The function to check properties.\n	 * @returns {boolean} Returns `true` if `path` exists, else `false`.\n	 */\n	function hasPath(object, path, hasFunc) {\n	  path = isKey(path, object) ? [path] : castPath(path);\n\n	  var result,\n	      index = -1,\n	      length = path.length;\n\n	  while (++index < length) {\n	    var key = path[index];\n	    if (!(result = object != null && hasFunc(object, key))) {\n	      break;\n	    }\n	    object = object[key];\n	  }\n	  if (result) {\n	    return result;\n	  }\n	  var length = object ? object.length : 0;\n	  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isString(object) || isArguments(object));\n	}\n\n	module.exports = hasPath;\n\n/***/ },\n/* 123 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * This method returns the first argument given to it.\n	 *\n	 * @static\n	 * @since 0.1.0\n	 * @memberOf _\n	 * @category Util\n	 * @param {*} value Any value.\n	 * @returns {*} Returns `value`.\n	 * @example\n	 *\n	 * var object = { 'user': 'fred' };\n	 *\n	 * _.identity(object) === object;\n	 * // => true\n	 */\n	function identity(value) {\n	  return value;\n	}\n\n	module.exports = identity;\n\n/***/ },\n/* 124 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseProperty = __webpack_require__(48),\n	    basePropertyDeep = __webpack_require__(125),\n	    isKey = __webpack_require__(88);\n\n	/**\n	 * Creates a function that returns the value at `path` of a given object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 2.4.0\n	 * @category Util\n	 * @param {Array|string} path The path of the property to get.\n	 * @returns {Function} Returns the new function.\n	 * @example\n	 *\n	 * var objects = [\n	 *   { 'a': { 'b': 2 } },\n	 *   { 'a': { 'b': 1 } }\n	 * ];\n	 *\n	 * _.map(objects, _.property('a.b'));\n	 * // => [2, 1]\n	 *\n	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n	 * // => [1, 2]\n	 */\n	function property(path) {\n	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);\n	}\n\n	module.exports = property;\n\n/***/ },\n/* 125 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseGet = __webpack_require__(82);\n\n	/**\n	 * A specialized version of `baseProperty` which supports deep paths.\n	 *\n	 * @private\n	 * @param {Array|string} path The path of the property to get.\n	 * @returns {Function} Returns the new function.\n	 */\n	function basePropertyDeep(path) {\n	  return function (object) {\n	    return baseGet(object, path);\n	  };\n	}\n\n	module.exports = basePropertyDeep;\n\n/***/ },\n/* 126 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assignValue = __webpack_require__(127),\n	    copyObject = __webpack_require__(128),\n	    createAssigner = __webpack_require__(129),\n	    isArrayLike = __webpack_require__(46),\n	    isPrototype = __webpack_require__(74),\n	    keys = __webpack_require__(67);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/** Built-in value references. */\n	var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n	/** Detect if properties shadowing those on `Object.prototype` are non-enumerable. */\n	var nonEnumShadows = !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf');\n\n	/**\n	 * Assigns own enumerable string keyed properties of source objects to the\n	 * destination object. Source objects are applied from left to right.\n	 * Subsequent sources overwrite property assignments of previous sources.\n	 *\n	 * **Note:** This method mutates `object` and is loosely based on\n	 * [`Object.assign`](https://mdn.io/Object/assign).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.10.0\n	 * @category Object\n	 * @param {Object} object The destination object.\n	 * @param {...Object} [sources] The source objects.\n	 * @returns {Object} Returns `object`.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.c = 3;\n	 * }\n	 *\n	 * function Bar() {\n	 *   this.e = 5;\n	 * }\n	 *\n	 * Foo.prototype.d = 4;\n	 * Bar.prototype.f = 6;\n	 *\n	 * _.assign({ 'a': 1 }, new Foo, new Bar);\n	 * // => { 'a': 1, 'c': 3, 'e': 5 }\n	 */\n	var assign = createAssigner(function (object, source) {\n	  if (nonEnumShadows || isPrototype(source) || isArrayLike(source)) {\n	    copyObject(source, keys(source), object);\n	    return;\n	  }\n	  for (var key in source) {\n	    if (hasOwnProperty.call(source, key)) {\n	      assignValue(object, key, source[key]);\n	    }\n	  }\n	});\n\n	module.exports = assign;\n\n/***/ },\n/* 127 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var eq = __webpack_require__(21);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Assigns `value` to `key` of `object` if the existing value is not equivalent\n	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n	 * for equality comparisons.\n	 *\n	 * @private\n	 * @param {Object} object The object to modify.\n	 * @param {string} key The key of the property to assign.\n	 * @param {*} value The value to assign.\n	 */\n	function assignValue(object, key, value) {\n	  var objValue = object[key];\n	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {\n	    object[key] = value;\n	  }\n	}\n\n	module.exports = assignValue;\n\n/***/ },\n/* 128 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assignValue = __webpack_require__(127);\n\n	/**\n	 * Copies properties of `source` to `object`.\n	 *\n	 * @private\n	 * @param {Object} source The object to copy properties from.\n	 * @param {Array} props The property identifiers to copy.\n	 * @param {Object} [object={}] The object to copy properties to.\n	 * @param {Function} [customizer] The function to customize copied values.\n	 * @returns {Object} Returns `object`.\n	 */\n	function copyObject(source, props, object, customizer) {\n	  object || (object = {});\n\n	  var index = -1,\n	      length = props.length;\n\n	  while (++index < length) {\n	    var key = props[index];\n\n	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : source[key];\n\n	    assignValue(object, key, newValue);\n	  }\n	  return object;\n	}\n\n	module.exports = copyObject;\n\n/***/ },\n/* 129 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isIterateeCall = __webpack_require__(130),\n	    rest = __webpack_require__(52);\n\n	/**\n	 * Creates a function like `_.assign`.\n	 *\n	 * @private\n	 * @param {Function} assigner The function to assign values.\n	 * @returns {Function} Returns the new assigner function.\n	 */\n	function createAssigner(assigner) {\n	  return rest(function (object, sources) {\n	    var index = -1,\n	        length = sources.length,\n	        customizer = length > 1 ? sources[length - 1] : undefined,\n	        guard = length > 2 ? sources[2] : undefined;\n\n	    customizer = typeof customizer == 'function' ? (length--, customizer) : undefined;\n\n	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n	      customizer = length < 3 ? undefined : customizer;\n	      length = 1;\n	    }\n	    object = Object(object);\n	    while (++index < length) {\n	      var source = sources[index];\n	      if (source) {\n	        assigner(object, source, index, customizer);\n	      }\n	    }\n	    return object;\n	  });\n	}\n\n	module.exports = createAssigner;\n\n/***/ },\n/* 130 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	var eq = __webpack_require__(21),\n	    isArrayLike = __webpack_require__(46),\n	    isIndex = __webpack_require__(73),\n	    isObject = __webpack_require__(11);\n\n	/**\n	 * Checks if the given arguments are from an iteratee call.\n	 *\n	 * @private\n	 * @param {*} value The potential iteratee value argument.\n	 * @param {*} index The potential iteratee index or key argument.\n	 * @param {*} object The potential iteratee object argument.\n	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n	 *  else `false`.\n	 */\n	function isIterateeCall(value, index, object) {\n	  if (!isObject(object)) {\n	    return false;\n	  }\n	  var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);\n	  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {\n	    return eq(object[index], value);\n	  }\n	  return false;\n	}\n\n	module.exports = isIterateeCall;\n\n/***/ },\n/* 131 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseFlatten = __webpack_require__(41),\n	    baseOrderBy = __webpack_require__(132),\n	    isArray = __webpack_require__(51),\n	    isFlattenableIteratee = __webpack_require__(139),\n	    isIterateeCall = __webpack_require__(130),\n	    rest = __webpack_require__(52);\n\n	/**\n	 * Creates an array of elements, sorted in ascending order by the results of\n	 * running each element in a collection thru each iteratee. This method\n	 * performs a stable sort, that is, it preserves the original sort order of\n	 * equal elements. The iteratees are invoked with one argument: (value).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Collection\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {...(Array|Array[]|Function|Function[]|Object|Object[]|string|string[])}\n	 *  [iteratees=[_.identity]] The iteratees to sort by.\n	 * @returns {Array} Returns the new sorted array.\n	 * @example\n	 *\n	 * var users = [\n	 *   { 'user': 'fred',   'age': 48 },\n	 *   { 'user': 'barney', 'age': 36 },\n	 *   { 'user': 'fred',   'age': 40 },\n	 *   { 'user': 'barney', 'age': 34 }\n	 * ];\n	 *\n	 * _.sortBy(users, function(o) { return o.user; });\n	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n	 *\n	 * _.sortBy(users, ['user', 'age']);\n	 * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]\n	 *\n	 * _.sortBy(users, 'user', function(o) {\n	 *   return Math.floor(o.age / 10);\n	 * });\n	 * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\n	 */\n	var sortBy = rest(function (collection, iteratees) {\n	  if (collection == null) {\n	    return [];\n	  }\n	  var length = iteratees.length;\n	  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n	    iteratees = [];\n	  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n	    iteratees = [iteratees[0]];\n	  }\n	  iteratees = iteratees.length == 1 && isArray(iteratees[0]) ? iteratees[0] : baseFlatten(iteratees, 1, isFlattenableIteratee);\n\n	  return baseOrderBy(collection, iteratees, []);\n	});\n\n	module.exports = sortBy;\n\n/***/ },\n/* 132 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayMap = __webpack_require__(38),\n	    baseIteratee = __webpack_require__(95),\n	    baseMap = __webpack_require__(133),\n	    baseSortBy = __webpack_require__(136),\n	    baseUnary = __webpack_require__(39),\n	    compareMultiple = __webpack_require__(137),\n	    identity = __webpack_require__(123);\n\n	/**\n	 * The base implementation of `_.orderBy` without param guards.\n	 *\n	 * @private\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n	 * @param {string[]} orders The sort orders of `iteratees`.\n	 * @returns {Array} Returns the new sorted array.\n	 */\n	function baseOrderBy(collection, iteratees, orders) {\n	  var index = -1;\n	  iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(baseIteratee));\n\n	  var result = baseMap(collection, function (value, key, collection) {\n	    var criteria = arrayMap(iteratees, function (iteratee) {\n	      return iteratee(value);\n	    });\n	    return { 'criteria': criteria, 'index': ++index, 'value': value };\n	  });\n\n	  return baseSortBy(result, function (object, other) {\n	    return compareMultiple(object, other, orders);\n	  });\n	}\n\n	module.exports = baseOrderBy;\n\n/***/ },\n/* 133 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseEach = __webpack_require__(134),\n	    isArrayLike = __webpack_require__(46);\n\n	/**\n	 * The base implementation of `_.map` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array} Returns the new mapped array.\n	 */\n	function baseMap(collection, iteratee) {\n	  var index = -1,\n	      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n	  baseEach(collection, function (value, key, collection) {\n	    result[++index] = iteratee(value, key, collection);\n	  });\n	  return result;\n	}\n\n	module.exports = baseMap;\n\n/***/ },\n/* 134 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseForOwn = __webpack_require__(92),\n	    createBaseEach = __webpack_require__(135);\n\n	/**\n	 * The base implementation of `_.forEach` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array|Object} Returns `collection`.\n	 */\n	var baseEach = createBaseEach(baseForOwn);\n\n	module.exports = baseEach;\n\n/***/ },\n/* 135 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArrayLike = __webpack_require__(46);\n\n	/**\n	 * Creates a `baseEach` or `baseEachRight` function.\n	 *\n	 * @private\n	 * @param {Function} eachFunc The function to iterate over a collection.\n	 * @param {boolean} [fromRight] Specify iterating from right to left.\n	 * @returns {Function} Returns the new base function.\n	 */\n	function createBaseEach(eachFunc, fromRight) {\n	  return function (collection, iteratee) {\n	    if (collection == null) {\n	      return collection;\n	    }\n	    if (!isArrayLike(collection)) {\n	      return eachFunc(collection, iteratee);\n	    }\n	    var length = collection.length,\n	        index = fromRight ? length : -1,\n	        iterable = Object(collection);\n\n	    while (fromRight ? index-- : ++index < length) {\n	      if (iteratee(iterable[index], index, iterable) === false) {\n	        break;\n	      }\n	    }\n	    return collection;\n	  };\n	}\n\n	module.exports = createBaseEach;\n\n/***/ },\n/* 136 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.sortBy` which uses `comparer` to define the\n	 * sort order of `array` and replaces criteria objects with their corresponding\n	 * values.\n	 *\n	 * @private\n	 * @param {Array} array The array to sort.\n	 * @param {Function} comparer The function to define sort order.\n	 * @returns {Array} Returns `array`.\n	 */\n	function baseSortBy(array, comparer) {\n	  var length = array.length;\n\n	  array.sort(comparer);\n	  while (length--) {\n	    array[length] = array[length].value;\n	  }\n	  return array;\n	}\n\n	module.exports = baseSortBy;\n\n/***/ },\n/* 137 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var compareAscending = __webpack_require__(138);\n\n	/**\n	 * Used by `_.orderBy` to compare multiple properties of a value to another\n	 * and stable sort them.\n	 *\n	 * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n	 * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n	 * of corresponding values.\n	 *\n	 * @private\n	 * @param {Object} object The object to compare.\n	 * @param {Object} other The other object to compare.\n	 * @param {boolean[]|string[]} orders The order to sort by for each property.\n	 * @returns {number} Returns the sort order indicator for `object`.\n	 */\n	function compareMultiple(object, other, orders) {\n	  var index = -1,\n	      objCriteria = object.criteria,\n	      othCriteria = other.criteria,\n	      length = objCriteria.length,\n	      ordersLength = orders.length;\n\n	  while (++index < length) {\n	    var result = compareAscending(objCriteria[index], othCriteria[index]);\n	    if (result) {\n	      if (index >= ordersLength) {\n	        return result;\n	      }\n	      var order = orders[index];\n	      return result * (order == 'desc' ? -1 : 1);\n	    }\n	  }\n	  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n	  // that causes it, under certain circumstances, to provide the same value for\n	  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n	  // for more details.\n	  //\n	  // This also ensures a stable sort in V8 and other engines.\n	  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n	  return object.index - other.index;\n	}\n\n	module.exports = compareMultiple;\n\n/***/ },\n/* 138 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Compares values to sort them in ascending order.\n	 *\n	 * @private\n	 * @param {*} value The value to compare.\n	 * @param {*} other The other value to compare.\n	 * @returns {number} Returns the sort order indicator for `value`.\n	 */\n	function compareAscending(value, other) {\n	  if (value !== other) {\n	    var valIsNull = value === null,\n	        valIsUndef = value === undefined,\n	        valIsReflexive = value === value;\n\n	    var othIsNull = other === null,\n	        othIsUndef = other === undefined,\n	        othIsReflexive = other === other;\n\n	    if (value > other && !othIsNull || !valIsReflexive || valIsNull && !othIsUndef && othIsReflexive || valIsUndef && othIsReflexive) {\n	      return 1;\n	    }\n	    if (value < other && !valIsNull || !othIsReflexive || othIsNull && !valIsUndef && valIsReflexive || othIsUndef && valIsReflexive) {\n	      return -1;\n	    }\n	  }\n	  return 0;\n	}\n\n	module.exports = compareAscending;\n\n/***/ },\n/* 139 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArray = __webpack_require__(51),\n	    isFunction = __webpack_require__(10);\n\n	/**\n	 * Checks if `value` is a flattenable array and not a `_.matchesProperty`\n	 * iteratee shorthand.\n	 *\n	 * @private\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n	 */\n	function isFlattenableIteratee(value) {\n	  return isArray(value) && !(value.length == 2 && !isFunction(value[0]));\n	}\n\n	module.exports = isFlattenableIteratee;\n\n/***/ },\n/* 140 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIteratee = __webpack_require__(95),\n	    baseSortedIndexBy = __webpack_require__(141);\n\n	/**\n	 * This method is like `_.sortedIndex` except that it accepts `iteratee`\n	 * which is invoked for `value` and each element of `array` to compute their\n	 * sort ranking. The iteratee is invoked with one argument: (value).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Array\n	 * @param {Array} array The sorted array to inspect.\n	 * @param {*} value The value to evaluate.\n	 * @param {Array|Function|Object|string} [iteratee=_.identity]\n	 *  The iteratee invoked per element.\n	 * @returns {number} Returns the index at which `value` should be inserted\n	 *  into `array`.\n	 * @example\n	 *\n	 * var dict = { 'thirty': 30, 'forty': 40, 'fifty': 50 };\n	 *\n	 * _.sortedIndexBy(['thirty', 'fifty'], 'forty', _.propertyOf(dict));\n	 * // => 1\n	 *\n	 * // The `_.property` iteratee shorthand.\n	 * _.sortedIndexBy([{ 'x': 4 }, { 'x': 5 }], { 'x': 4 }, 'x');\n	 * // => 0\n	 */\n	function sortedIndexBy(array, value, iteratee) {\n	  return baseSortedIndexBy(array, value, baseIteratee(iteratee));\n	}\n\n	module.exports = sortedIndexBy;\n\n/***/ },\n/* 141 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/** Used as references for the maximum length and index of an array. */\n	var MAX_ARRAY_LENGTH = 4294967295,\n	    MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1;\n\n	/* Built-in method references for those with the same name as other `lodash` methods. */\n	var nativeFloor = Math.floor,\n	    nativeMin = Math.min;\n\n	/**\n	 * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\n	 * which invokes `iteratee` for `value` and each element of `array` to compute\n	 * their sort ranking. The iteratee is invoked with one argument; (value).\n	 *\n	 * @private\n	 * @param {Array} array The sorted array to inspect.\n	 * @param {*} value The value to evaluate.\n	 * @param {Function} iteratee The iteratee invoked per element.\n	 * @param {boolean} [retHighest] Specify returning the highest qualified index.\n	 * @returns {number} Returns the index at which `value` should be inserted\n	 *  into `array`.\n	 */\n	function baseSortedIndexBy(array, value, iteratee, retHighest) {\n	  value = iteratee(value);\n\n	  var low = 0,\n	      high = array ? array.length : 0,\n	      valIsNaN = value !== value,\n	      valIsNull = value === null,\n	      valIsUndef = value === undefined;\n\n	  while (low < high) {\n	    var mid = nativeFloor((low + high) / 2),\n	        computed = iteratee(array[mid]),\n	        isDef = computed !== undefined,\n	        isReflexive = computed === computed;\n\n	    if (valIsNaN) {\n	      var setLow = isReflexive || retHighest;\n	    } else if (valIsNull) {\n	      setLow = isReflexive && isDef && (retHighest || computed != null);\n	    } else if (valIsUndef) {\n	      setLow = isReflexive && (retHighest || isDef);\n	    } else if (computed == null) {\n	      setLow = false;\n	    } else {\n	      setLow = retHighest ? computed <= value : computed < value;\n	    }\n	    if (setLow) {\n	      low = mid + 1;\n	    } else {\n	      high = mid;\n	    }\n	  }\n	  return nativeMin(high, MAX_ARRAY_INDEX);\n	}\n\n	module.exports = baseSortedIndexBy;\n\n/***/ },\n/* 142 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIteratee = __webpack_require__(95),\n	    basePullAt = __webpack_require__(143);\n\n	/**\n	 * Removes all elements from `array` that `predicate` returns truthy for\n	 * and returns an array of the removed elements. The predicate is invoked\n	 * with three arguments: (value, index, array).\n	 *\n	 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`\n	 * to pull elements from an array by value.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 2.0.0\n	 * @category Array\n	 * @param {Array} array The array to modify.\n	 * @param {Array|Function|Object|string} [predicate=_.identity]\n	 *  The function invoked per iteration.\n	 * @returns {Array} Returns the new array of removed elements.\n	 * @example\n	 *\n	 * var array = [1, 2, 3, 4];\n	 * var evens = _.remove(array, function(n) {\n	 *   return n % 2 == 0;\n	 * });\n	 *\n	 * console.log(array);\n	 * // => [1, 3]\n	 *\n	 * console.log(evens);\n	 * // => [2, 4]\n	 */\n	function remove(array, predicate) {\n	  var result = [];\n	  if (!(array && array.length)) {\n	    return result;\n	  }\n	  var index = -1,\n	      indexes = [],\n	      length = array.length;\n\n	  predicate = baseIteratee(predicate, 3);\n	  while (++index < length) {\n	    var value = array[index];\n	    if (predicate(value, index, array)) {\n	      result.push(value);\n	      indexes.push(index);\n	    }\n	  }\n	  basePullAt(array, indexes);\n	  return result;\n	}\n\n	module.exports = remove;\n\n/***/ },\n/* 143 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var castPath = __webpack_require__(83),\n	    isIndex = __webpack_require__(73),\n	    isKey = __webpack_require__(88),\n	    last = __webpack_require__(144),\n	    parent = __webpack_require__(145);\n\n	/** Used for built-in method references. */\n	var arrayProto = Array.prototype;\n\n	/** Built-in value references. */\n	var splice = arrayProto.splice;\n\n	/**\n	 * The base implementation of `_.pullAt` without support for individual\n	 * indexes or capturing the removed elements.\n	 *\n	 * @private\n	 * @param {Array} array The array to modify.\n	 * @param {number[]} indexes The indexes of elements to remove.\n	 * @returns {Array} Returns `array`.\n	 */\n	function basePullAt(array, indexes) {\n	  var length = array ? indexes.length : 0,\n	      lastIndex = length - 1;\n\n	  while (length--) {\n	    var index = indexes[length];\n	    if (lastIndex == length || index != previous) {\n	      var previous = index;\n	      if (isIndex(index)) {\n	        splice.call(array, index, 1);\n	      } else if (!isKey(index, array)) {\n	        var path = castPath(index),\n	            object = parent(array, path);\n\n	        if (object != null) {\n	          delete object[last(path)];\n	        }\n	      } else {\n	        delete array[index];\n	      }\n	    }\n	  }\n	  return array;\n	}\n\n	module.exports = basePullAt;\n\n/***/ },\n/* 144 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Gets the last element of `array`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Array\n	 * @param {Array} array The array to query.\n	 * @returns {*} Returns the last element of `array`.\n	 * @example\n	 *\n	 * _.last([1, 2, 3]);\n	 * // => 3\n	 */\n	function last(array) {\n	  var length = array ? array.length : 0;\n	  return length ? array[length - 1] : undefined;\n	}\n\n	module.exports = last;\n\n/***/ },\n/* 145 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseGet = __webpack_require__(82),\n	    baseSlice = __webpack_require__(79);\n\n	/**\n	 * Gets the parent value at `path` of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Array} path The path to get the parent value of.\n	 * @returns {*} Returns the parent value.\n	 */\n	function parent(object, path) {\n	  return path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n	}\n\n	module.exports = parent;\n\n/***/ },\n/* 146 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseSlice = __webpack_require__(79),\n	    isIterateeCall = __webpack_require__(130),\n	    toInteger = __webpack_require__(54);\n\n	/**\n	 * Creates a slice of `array` from `start` up to, but not including, `end`.\n	 *\n	 * **Note:** This method is used instead of\n	 * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are\n	 * returned.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.0.0\n	 * @category Array\n	 * @param {Array} array The array to slice.\n	 * @param {number} [start=0] The start position.\n	 * @param {number} [end=array.length] The end position.\n	 * @returns {Array} Returns the slice of `array`.\n	 */\n	function slice(array, start, end) {\n	  var length = array ? array.length : 0;\n	  if (!length) {\n	    return [];\n	  }\n	  if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {\n	    start = 0;\n	    end = length;\n	  } else {\n	    start = start == null ? 0 : toInteger(start);\n	    end = end === undefined ? length : toInteger(end);\n	  }\n	  return baseSlice(array, start, end);\n	}\n\n	module.exports = slice;\n\n/***/ },\n/* 147 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseFindIndex = __webpack_require__(148),\n	    baseIteratee = __webpack_require__(95);\n\n	/**\n	 * This method is like `_.find` except that it returns the index of the first\n	 * element `predicate` returns truthy for instead of the element itself.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 1.1.0\n	 * @category Array\n	 * @param {Array} array The array to search.\n	 * @param {Array|Function|Object|string} [predicate=_.identity]\n	 *  The function invoked per iteration.\n	 * @returns {number} Returns the index of the found element, else `-1`.\n	 * @example\n	 *\n	 * var users = [\n	 *   { 'user': 'barney',  'active': false },\n	 *   { 'user': 'fred',    'active': false },\n	 *   { 'user': 'pebbles', 'active': true }\n	 * ];\n	 *\n	 * _.findIndex(users, function(o) { return o.user == 'barney'; });\n	 * // => 0\n	 *\n	 * // The `_.matches` iteratee shorthand.\n	 * _.findIndex(users, { 'user': 'fred', 'active': false });\n	 * // => 1\n	 *\n	 * // The `_.matchesProperty` iteratee shorthand.\n	 * _.findIndex(users, ['active', false]);\n	 * // => 0\n	 *\n	 * // The `_.property` iteratee shorthand.\n	 * _.findIndex(users, 'active');\n	 * // => 2\n	 */\n	function findIndex(array, predicate) {\n	    return array && array.length ? baseFindIndex(array, baseIteratee(predicate, 3)) : -1;\n	}\n\n	module.exports = findIndex;\n\n/***/ },\n/* 148 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of `_.findIndex` and `_.findLastIndex` without\n	 * support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to search.\n	 * @param {Function} predicate The function invoked per iteration.\n	 * @param {boolean} [fromRight] Specify iterating from right to left.\n	 * @returns {number} Returns the index of the matched value, else `-1`.\n	 */\n	function baseFindIndex(array, predicate, fromRight) {\n	  var length = array.length,\n	      index = fromRight ? length : -1;\n\n	  while (fromRight ? index-- : ++index < length) {\n	    if (predicate(array[index], index, array)) {\n	      return index;\n	    }\n	  }\n	  return -1;\n	}\n\n	module.exports = baseFindIndex;\n\n/***/ },\n/* 149 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseEach = __webpack_require__(134),\n	    baseFind = __webpack_require__(150),\n	    baseFindIndex = __webpack_require__(148),\n	    baseIteratee = __webpack_require__(95),\n	    isArray = __webpack_require__(51);\n\n	/**\n	 * Iterates over elements of `collection`, returning the first element\n	 * `predicate` returns truthy for. The predicate is invoked with three\n	 * arguments: (value, index|key, collection).\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Collection\n	 * @param {Array|Object} collection The collection to search.\n	 * @param {Array|Function|Object|string} [predicate=_.identity]\n	 *  The function invoked per iteration.\n	 * @returns {*} Returns the matched element, else `undefined`.\n	 * @example\n	 *\n	 * var users = [\n	 *   { 'user': 'barney',  'age': 36, 'active': true },\n	 *   { 'user': 'fred',    'age': 40, 'active': false },\n	 *   { 'user': 'pebbles', 'age': 1,  'active': true }\n	 * ];\n	 *\n	 * _.find(users, function(o) { return o.age < 40; });\n	 * // => object for 'barney'\n	 *\n	 * // The `_.matches` iteratee shorthand.\n	 * _.find(users, { 'age': 1, 'active': true });\n	 * // => object for 'pebbles'\n	 *\n	 * // The `_.matchesProperty` iteratee shorthand.\n	 * _.find(users, ['active', false]);\n	 * // => object for 'fred'\n	 *\n	 * // The `_.property` iteratee shorthand.\n	 * _.find(users, 'active');\n	 * // => object for 'barney'\n	 */\n	function find(collection, predicate) {\n	  predicate = baseIteratee(predicate, 3);\n	  if (isArray(collection)) {\n	    var index = baseFindIndex(collection, predicate);\n	    return index > -1 ? collection[index] : undefined;\n	  }\n	  return baseFind(collection, predicate, baseEach);\n	}\n\n	module.exports = find;\n\n/***/ },\n/* 150 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * The base implementation of methods like `_.find` and `_.findKey`, without\n	 * support for iteratee shorthands, which iterates over `collection` using\n	 * `eachFunc`.\n	 *\n	 * @private\n	 * @param {Array|Object} collection The collection to search.\n	 * @param {Function} predicate The function invoked per iteration.\n	 * @param {Function} eachFunc The function to iterate over `collection`.\n	 * @param {boolean} [retKey] Specify returning the key of the found element\n	 *  instead of the element itself.\n	 * @returns {*} Returns the found element or its key, else `undefined`.\n	 */\n	function baseFind(collection, predicate, eachFunc, retKey) {\n	  var result;\n	  eachFunc(collection, function (value, key, collection) {\n	    if (predicate(value, key, collection)) {\n	      result = retKey ? key : value;\n	      return false;\n	    }\n	  });\n	  return result;\n	}\n\n	module.exports = baseFind;\n\n/***/ },\n/* 151 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseEachRight = __webpack_require__(152),\n	    baseFind = __webpack_require__(150),\n	    baseFindIndex = __webpack_require__(148),\n	    baseIteratee = __webpack_require__(95),\n	    isArray = __webpack_require__(51);\n\n	/**\n	 * This method is like `_.find` except that it iterates over elements of\n	 * `collection` from right to left.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 2.0.0\n	 * @category Collection\n	 * @param {Array|Object} collection The collection to search.\n	 * @param {Array|Function|Object|string} [predicate=_.identity]\n	 *  The function invoked per iteration.\n	 * @returns {*} Returns the matched element, else `undefined`.\n	 * @example\n	 *\n	 * _.findLast([1, 2, 3, 4], function(n) {\n	 *   return n % 2 == 1;\n	 * });\n	 * // => 3\n	 */\n	function findLast(collection, predicate) {\n	  predicate = baseIteratee(predicate, 3);\n	  if (isArray(collection)) {\n	    var index = baseFindIndex(collection, predicate, true);\n	    return index > -1 ? collection[index] : undefined;\n	  }\n	  return baseFind(collection, predicate, baseEachRight);\n	}\n\n	module.exports = findLast;\n\n/***/ },\n/* 152 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseForOwnRight = __webpack_require__(153),\n	    createBaseEach = __webpack_require__(135);\n\n	/**\n	 * The base implementation of `_.forEachRight` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Array|Object} Returns `collection`.\n	 */\n	var baseEachRight = createBaseEach(baseForOwnRight, true);\n\n	module.exports = baseEachRight;\n\n/***/ },\n/* 153 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseForRight = __webpack_require__(154),\n	    keys = __webpack_require__(67);\n\n	/**\n	 * The base implementation of `_.forOwnRight` without support for iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Object} object The object to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @returns {Object} Returns `object`.\n	 */\n	function baseForOwnRight(object, iteratee) {\n	  return object && baseForRight(object, iteratee, keys);\n	}\n\n	module.exports = baseForOwnRight;\n\n/***/ },\n/* 154 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var createBaseFor = __webpack_require__(94);\n\n	/**\n	 * This function is like `baseFor` except that it iterates over properties\n	 * in the opposite order.\n	 *\n	 * @private\n	 * @param {Object} object The object to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @param {Function} keysFunc The function to get the keys of `object`.\n	 * @returns {Object} Returns `object`.\n	 */\n	var baseForRight = createBaseFor(true);\n\n	module.exports = baseForRight;\n\n/***/ },\n/* 155 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseIndexOf = __webpack_require__(35),\n	    toInteger = __webpack_require__(54);\n\n	/* Built-in method references for those with the same name as other `lodash` methods. */\n	var nativeMax = Math.max;\n\n	/**\n	 * Gets the index at which the first occurrence of `value` is found in `array`\n	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)\n	 * for equality comparisons. If `fromIndex` is negative, it's used as the\n	 * offset from the end of `array`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Array\n	 * @param {Array} array The array to search.\n	 * @param {*} value The value to search for.\n	 * @param {number} [fromIndex=0] The index to search from.\n	 * @returns {number} Returns the index of the matched value, else `-1`.\n	 * @example\n	 *\n	 * _.indexOf([1, 2, 1, 2], 2);\n	 * // => 1\n	 *\n	 * // Search from the `fromIndex`.\n	 * _.indexOf([1, 2, 1, 2], 2, 2);\n	 * // => 3\n	 */\n	function indexOf(array, value, fromIndex) {\n	  var length = array ? array.length : 0;\n	  if (!length) {\n	    return -1;\n	  }\n	  fromIndex = toInteger(fromIndex);\n	  if (fromIndex < 0) {\n	    fromIndex = nativeMax(length + fromIndex, 0);\n	  }\n	  return baseIndexOf(array, value, fromIndex);\n	}\n\n	module.exports = indexOf;\n\n/***/ },\n/* 156 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseClone = __webpack_require__(157);\n\n	/**\n	 * This method is like `_.clone` except that it recursively clones `value`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 1.0.0\n	 * @category Lang\n	 * @param {*} value The value to recursively clone.\n	 * @returns {*} Returns the deep cloned value.\n	 * @example\n	 *\n	 * var objects = [{ 'a': 1 }, { 'b': 2 }];\n	 *\n	 * var deep = _.cloneDeep(objects);\n	 * console.log(deep[0] === objects[0]);\n	 * // => false\n	 */\n	function cloneDeep(value) {\n	  return baseClone(value, true, true);\n	}\n\n	module.exports = cloneDeep;\n\n/***/ },\n/* 157 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Stack = __webpack_require__(98),\n	    arrayEach = __webpack_require__(90),\n	    assignValue = __webpack_require__(127),\n	    baseAssign = __webpack_require__(158),\n	    cloneBuffer = __webpack_require__(159),\n	    copyArray = __webpack_require__(160),\n	    copySymbols = __webpack_require__(161),\n	    getAllKeys = __webpack_require__(163),\n	    getTag = __webpack_require__(59),\n	    initCloneArray = __webpack_require__(165),\n	    initCloneByTag = __webpack_require__(166),\n	    initCloneObject = __webpack_require__(177),\n	    isArray = __webpack_require__(51),\n	    isBuffer = __webpack_require__(64),\n	    isHostObject = __webpack_require__(12),\n	    isObject = __webpack_require__(11),\n	    keys = __webpack_require__(67);\n\n	/** `Object#toString` result references. */\n	var argsTag = '[object Arguments]',\n	    arrayTag = '[object Array]',\n	    boolTag = '[object Boolean]',\n	    dateTag = '[object Date]',\n	    errorTag = '[object Error]',\n	    funcTag = '[object Function]',\n	    genTag = '[object GeneratorFunction]',\n	    mapTag = '[object Map]',\n	    numberTag = '[object Number]',\n	    objectTag = '[object Object]',\n	    regexpTag = '[object RegExp]',\n	    setTag = '[object Set]',\n	    stringTag = '[object String]',\n	    symbolTag = '[object Symbol]',\n	    weakMapTag = '[object WeakMap]';\n\n	var arrayBufferTag = '[object ArrayBuffer]',\n	    dataViewTag = '[object DataView]',\n	    float32Tag = '[object Float32Array]',\n	    float64Tag = '[object Float64Array]',\n	    int8Tag = '[object Int8Array]',\n	    int16Tag = '[object Int16Array]',\n	    int32Tag = '[object Int32Array]',\n	    uint8Tag = '[object Uint8Array]',\n	    uint8ClampedTag = '[object Uint8ClampedArray]',\n	    uint16Tag = '[object Uint16Array]',\n	    uint32Tag = '[object Uint32Array]';\n\n	/** Used to identify `toStringTag` values supported by `_.clone`. */\n	var cloneableTags = {};\n	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\n	cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;\n\n	/**\n	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n	 * traversed objects.\n	 *\n	 * @private\n	 * @param {*} value The value to clone.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @param {boolean} [isFull] Specify a clone including symbols.\n	 * @param {Function} [customizer] The function to customize cloning.\n	 * @param {string} [key] The key of `value`.\n	 * @param {Object} [object] The parent object of `value`.\n	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n	 * @returns {*} Returns the cloned value.\n	 */\n	function baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n	  var result;\n	  if (customizer) {\n	    result = object ? customizer(value, key, object, stack) : customizer(value);\n	  }\n	  if (result !== undefined) {\n	    return result;\n	  }\n	  if (!isObject(value)) {\n	    return value;\n	  }\n	  var isArr = isArray(value);\n	  if (isArr) {\n	    result = initCloneArray(value);\n	    if (!isDeep) {\n	      return copyArray(value, result);\n	    }\n	  } else {\n	    var tag = getTag(value),\n	        isFunc = tag == funcTag || tag == genTag;\n\n	    if (isBuffer(value)) {\n	      return cloneBuffer(value, isDeep);\n	    }\n	    if (tag == objectTag || tag == argsTag || isFunc && !object) {\n	      if (isHostObject(value)) {\n	        return object ? value : {};\n	      }\n	      result = initCloneObject(isFunc ? {} : value);\n	      if (!isDeep) {\n	        return copySymbols(value, baseAssign(result, value));\n	      }\n	    } else {\n	      if (!cloneableTags[tag]) {\n	        return object ? value : {};\n	      }\n	      result = initCloneByTag(value, tag, baseClone, isDeep);\n	    }\n	  }\n	  // Check for circular references and return its corresponding clone.\n	  stack || (stack = new Stack());\n	  var stacked = stack.get(value);\n	  if (stacked) {\n	    return stacked;\n	  }\n	  stack.set(value, result);\n\n	  if (!isArr) {\n	    var props = isFull ? getAllKeys(value) : keys(value);\n	  }\n	  // Recursively populate clone (susceptible to call stack limits).\n	  arrayEach(props || value, function (subValue, key) {\n	    if (props) {\n	      key = subValue;\n	      subValue = value[key];\n	    }\n	    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n	  });\n	  return result;\n	}\n\n	module.exports = baseClone;\n\n/***/ },\n/* 158 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var copyObject = __webpack_require__(128),\n	    keys = __webpack_require__(67);\n\n	/**\n	 * The base implementation of `_.assign` without support for multiple sources\n	 * or `customizer` functions.\n	 *\n	 * @private\n	 * @param {Object} object The destination object.\n	 * @param {Object} source The source object.\n	 * @returns {Object} Returns `object`.\n	 */\n	function baseAssign(object, source) {\n	  return object && copyObject(source, keys(source), object);\n	}\n\n	module.exports = baseAssign;\n\n/***/ },\n/* 159 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Creates a clone of  `buffer`.\n	 *\n	 * @private\n	 * @param {Buffer} buffer The buffer to clone.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Buffer} Returns the cloned buffer.\n	 */\n	function cloneBuffer(buffer, isDeep) {\n	  if (isDeep) {\n	    return buffer.slice();\n	  }\n	  var result = new buffer.constructor(buffer.length);\n	  buffer.copy(result);\n	  return result;\n	}\n\n	module.exports = cloneBuffer;\n\n/***/ },\n/* 160 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Copies the values of `source` to `array`.\n	 *\n	 * @private\n	 * @param {Array} source The array to copy values from.\n	 * @param {Array} [array=[]] The array to copy values to.\n	 * @returns {Array} Returns `array`.\n	 */\n	function copyArray(source, array) {\n	  var index = -1,\n	      length = source.length;\n\n	  array || (array = Array(length));\n	  while (++index < length) {\n	    array[index] = source[index];\n	  }\n	  return array;\n	}\n\n	module.exports = copyArray;\n\n/***/ },\n/* 161 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var copyObject = __webpack_require__(128),\n	    getSymbols = __webpack_require__(162);\n\n	/**\n	 * Copies own symbol properties of `source` to `object`.\n	 *\n	 * @private\n	 * @param {Object} source The object to copy symbols from.\n	 * @param {Object} [object={}] The object to copy symbols to.\n	 * @returns {Object} Returns `object`.\n	 */\n	function copySymbols(source, object) {\n	  return copyObject(source, getSymbols(source), object);\n	}\n\n	module.exports = copySymbols;\n\n/***/ },\n/* 162 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/** Built-in value references. */\n	var getOwnPropertySymbols = Object.getOwnPropertySymbols;\n\n	/**\n	 * Creates an array of the own enumerable symbol properties of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of symbols.\n	 */\n	function getSymbols(object) {\n	  // Coerce `object` to an object to avoid non-object errors in V8.\n	  // See https://bugs.chromium.org/p/v8/issues/detail?id=3443 for more details.\n	  return getOwnPropertySymbols(Object(object));\n	}\n\n	// Fallback for IE < 11.\n	if (!getOwnPropertySymbols) {\n	  getSymbols = function getSymbols() {\n	    return [];\n	  };\n	}\n\n	module.exports = getSymbols;\n\n/***/ },\n/* 163 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseGetAllKeys = __webpack_require__(164),\n	    getSymbols = __webpack_require__(162),\n	    keys = __webpack_require__(67);\n\n	/**\n	 * Creates an array of own enumerable property names and symbols of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of property names and symbols.\n	 */\n	function getAllKeys(object) {\n	  return baseGetAllKeys(object, keys, getSymbols);\n	}\n\n	module.exports = getAllKeys;\n\n/***/ },\n/* 164 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayPush = __webpack_require__(42),\n	    isArray = __webpack_require__(51);\n\n	/**\n	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n	 * symbols of `object`.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @param {Function} keysFunc The function to get the keys of `object`.\n	 * @param {Function} symbolsFunc The function to get the symbols of `object`.\n	 * @returns {Array} Returns the array of property names and symbols.\n	 */\n	function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n	    var result = keysFunc(object);\n	    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n	}\n\n	module.exports = baseGetAllKeys;\n\n/***/ },\n/* 165 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Initializes an array clone.\n	 *\n	 * @private\n	 * @param {Array} array The array to clone.\n	 * @returns {Array} Returns the initialized clone.\n	 */\n	function initCloneArray(array) {\n	  var length = array.length,\n	      result = array.constructor(length);\n\n	  // Add properties assigned by `RegExp#exec`.\n	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n	    result.index = array.index;\n	    result.input = array.input;\n	  }\n	  return result;\n	}\n\n	module.exports = initCloneArray;\n\n/***/ },\n/* 166 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var cloneArrayBuffer = __webpack_require__(167),\n	    cloneDataView = __webpack_require__(168),\n	    cloneMap = __webpack_require__(169),\n	    cloneRegExp = __webpack_require__(172),\n	    cloneSet = __webpack_require__(173),\n	    cloneSymbol = __webpack_require__(175),\n	    cloneTypedArray = __webpack_require__(176);\n\n	/** `Object#toString` result references. */\n	var boolTag = '[object Boolean]',\n	    dateTag = '[object Date]',\n	    mapTag = '[object Map]',\n	    numberTag = '[object Number]',\n	    regexpTag = '[object RegExp]',\n	    setTag = '[object Set]',\n	    stringTag = '[object String]',\n	    symbolTag = '[object Symbol]';\n\n	var arrayBufferTag = '[object ArrayBuffer]',\n	    dataViewTag = '[object DataView]',\n	    float32Tag = '[object Float32Array]',\n	    float64Tag = '[object Float64Array]',\n	    int8Tag = '[object Int8Array]',\n	    int16Tag = '[object Int16Array]',\n	    int32Tag = '[object Int32Array]',\n	    uint8Tag = '[object Uint8Array]',\n	    uint8ClampedTag = '[object Uint8ClampedArray]',\n	    uint16Tag = '[object Uint16Array]',\n	    uint32Tag = '[object Uint32Array]';\n\n	/**\n	 * Initializes an object clone based on its `toStringTag`.\n	 *\n	 * **Note:** This function only supports cloning values with tags of\n	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n	 *\n	 * @private\n	 * @param {Object} object The object to clone.\n	 * @param {string} tag The `toStringTag` of the object to clone.\n	 * @param {Function} cloneFunc The function to clone values.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Object} Returns the initialized clone.\n	 */\n	function initCloneByTag(object, tag, cloneFunc, isDeep) {\n	  var Ctor = object.constructor;\n	  switch (tag) {\n	    case arrayBufferTag:\n	      return cloneArrayBuffer(object);\n\n	    case boolTag:\n	    case dateTag:\n	      return new Ctor(+object);\n\n	    case dataViewTag:\n	      return cloneDataView(object, isDeep);\n\n	    case float32Tag:case float64Tag:\n	    case int8Tag:case int16Tag:case int32Tag:\n	    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:\n	      return cloneTypedArray(object, isDeep);\n\n	    case mapTag:\n	      return cloneMap(object, isDeep, cloneFunc);\n\n	    case numberTag:\n	    case stringTag:\n	      return new Ctor(object);\n\n	    case regexpTag:\n	      return cloneRegExp(object);\n\n	    case setTag:\n	      return cloneSet(object, isDeep, cloneFunc);\n\n	    case symbolTag:\n	      return cloneSymbol(object);\n	  }\n	}\n\n	module.exports = initCloneByTag;\n\n/***/ },\n/* 167 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Uint8Array = __webpack_require__(109);\n\n	/**\n	 * Creates a clone of `arrayBuffer`.\n	 *\n	 * @private\n	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n	 * @returns {ArrayBuffer} Returns the cloned array buffer.\n	 */\n	function cloneArrayBuffer(arrayBuffer) {\n	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n	  return result;\n	}\n\n	module.exports = cloneArrayBuffer;\n\n/***/ },\n/* 168 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var cloneArrayBuffer = __webpack_require__(167);\n\n	/**\n	 * Creates a clone of `dataView`.\n	 *\n	 * @private\n	 * @param {Object} dataView The data view to clone.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Object} Returns the cloned data view.\n	 */\n	function cloneDataView(dataView, isDeep) {\n	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n	}\n\n	module.exports = cloneDataView;\n\n/***/ },\n/* 169 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var addMapEntry = __webpack_require__(170),\n	    arrayReduce = __webpack_require__(171),\n	    mapToArray = __webpack_require__(110);\n\n	/**\n	 * Creates a clone of `map`.\n	 *\n	 * @private\n	 * @param {Object} map The map to clone.\n	 * @param {Function} cloneFunc The function to clone values.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Object} Returns the cloned map.\n	 */\n	function cloneMap(map, isDeep, cloneFunc) {\n	  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n	  return arrayReduce(array, addMapEntry, new map.constructor());\n	}\n\n	module.exports = cloneMap;\n\n/***/ },\n/* 170 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Adds the key-value `pair` to `map`.\n	 *\n	 * @private\n	 * @param {Object} map The map to modify.\n	 * @param {Array} pair The key-value pair to add.\n	 * @returns {Object} Returns `map`.\n	 */\n	function addMapEntry(map, pair) {\n	  // Don't return `Map#set` because it doesn't return the map instance in IE 11.\n	  map.set(pair[0], pair[1]);\n	  return map;\n	}\n\n	module.exports = addMapEntry;\n\n/***/ },\n/* 171 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * A specialized version of `_.reduce` for arrays without support for\n	 * iteratee shorthands.\n	 *\n	 * @private\n	 * @param {Array} array The array to iterate over.\n	 * @param {Function} iteratee The function invoked per iteration.\n	 * @param {*} [accumulator] The initial value.\n	 * @param {boolean} [initAccum] Specify using the first element of `array` as\n	 *  the initial value.\n	 * @returns {*} Returns the accumulated value.\n	 */\n	function arrayReduce(array, iteratee, accumulator, initAccum) {\n	  var index = -1,\n	      length = array.length;\n\n	  if (initAccum && length) {\n	    accumulator = array[++index];\n	  }\n	  while (++index < length) {\n	    accumulator = iteratee(accumulator, array[index], index, array);\n	  }\n	  return accumulator;\n	}\n\n	module.exports = arrayReduce;\n\n/***/ },\n/* 172 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/** Used to match `RegExp` flags from their coerced string values. */\n	var reFlags = /\\w*$/;\n\n	/**\n	 * Creates a clone of `regexp`.\n	 *\n	 * @private\n	 * @param {Object} regexp The regexp to clone.\n	 * @returns {Object} Returns the cloned regexp.\n	 */\n	function cloneRegExp(regexp) {\n	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n	  result.lastIndex = regexp.lastIndex;\n	  return result;\n	}\n\n	module.exports = cloneRegExp;\n\n/***/ },\n/* 173 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var addSetEntry = __webpack_require__(174),\n	    arrayReduce = __webpack_require__(171),\n	    setToArray = __webpack_require__(111);\n\n	/**\n	 * Creates a clone of `set`.\n	 *\n	 * @private\n	 * @param {Object} set The set to clone.\n	 * @param {Function} cloneFunc The function to clone values.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Object} Returns the cloned set.\n	 */\n	function cloneSet(set, isDeep, cloneFunc) {\n	  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n	  return arrayReduce(array, addSetEntry, new set.constructor());\n	}\n\n	module.exports = cloneSet;\n\n/***/ },\n/* 174 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Adds `value` to `set`.\n	 *\n	 * @private\n	 * @param {Object} set The set to modify.\n	 * @param {*} value The value to add.\n	 * @returns {Object} Returns `set`.\n	 */\n	function addSetEntry(set, value) {\n	  set.add(value);\n	  return set;\n	}\n\n	module.exports = addSetEntry;\n\n/***/ },\n/* 175 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _Symbol = __webpack_require__(87);\n\n	/** Used to convert symbols to primitives and strings. */\n	var symbolProto = _Symbol ? _Symbol.prototype : undefined,\n	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n	/**\n	 * Creates a clone of the `symbol` object.\n	 *\n	 * @private\n	 * @param {Object} symbol The symbol object to clone.\n	 * @returns {Object} Returns the cloned symbol object.\n	 */\n	function cloneSymbol(symbol) {\n	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n	}\n\n	module.exports = cloneSymbol;\n\n/***/ },\n/* 176 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var cloneArrayBuffer = __webpack_require__(167);\n\n	/**\n	 * Creates a clone of `typedArray`.\n	 *\n	 * @private\n	 * @param {Object} typedArray The typed array to clone.\n	 * @param {boolean} [isDeep] Specify a deep clone.\n	 * @returns {Object} Returns the cloned typed array.\n	 */\n	function cloneTypedArray(typedArray, isDeep) {\n	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n	}\n\n	module.exports = cloneTypedArray;\n\n/***/ },\n/* 177 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseCreate = __webpack_require__(91),\n	    getPrototype = __webpack_require__(69),\n	    isPrototype = __webpack_require__(74);\n\n	/**\n	 * Initializes an object clone.\n	 *\n	 * @private\n	 * @param {Object} object The object to clone.\n	 * @returns {Object} Returns the initialized clone.\n	 */\n	function initCloneObject(object) {\n	    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};\n	}\n\n	module.exports = initCloneObject;\n\n/***/ },\n/* 178 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	module.exports = __webpack_require__(179);\n\n/***/ },\n/* 179 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var arrayEach = __webpack_require__(90),\n	    baseEach = __webpack_require__(134),\n	    baseIteratee = __webpack_require__(95),\n	    isArray = __webpack_require__(51);\n\n	/**\n	 * Iterates over elements of `collection` and invokes `iteratee` for each element.\n	 * The iteratee is invoked with three arguments: (value, index|key, collection).\n	 * Iteratee functions may exit iteration early by explicitly returning `false`.\n	 *\n	 * **Note:** As with other \"Collections\" methods, objects with a \"length\"\n	 * property are iterated like arrays. To avoid this behavior use `_.forIn`\n	 * or `_.forOwn` for object iteration.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @alias each\n	 * @category Collection\n	 * @param {Array|Object} collection The collection to iterate over.\n	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n	 * @returns {Array|Object} Returns `collection`.\n	 * @example\n	 *\n	 * _([1, 2]).forEach(function(value) {\n	 *   console.log(value);\n	 * });\n	 * // => Logs `1` then `2`.\n	 *\n	 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {\n	 *   console.log(key);\n	 * });\n	 * // => Logs 'a' then 'b' (iteration order is not guaranteed).\n	 */\n	function forEach(collection, iteratee) {\n	    return typeof iteratee == 'function' && isArray(collection) ? arrayEach(collection, iteratee) : baseEach(collection, baseIteratee(iteratee));\n	}\n\n	module.exports = forEach;\n\n/***/ },\n/* 180 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var apply = __webpack_require__(53),\n	    assignInDefaults = __webpack_require__(181),\n	    assignInWith = __webpack_require__(182),\n	    rest = __webpack_require__(52);\n\n	/**\n	 * Assigns own and inherited enumerable string keyed properties of source\n	 * objects to the destination object for all destination properties that\n	 * resolve to `undefined`. Source objects are applied from left to right.\n	 * Once a property is set, additional values of the same property are ignored.\n	 *\n	 * **Note:** This method mutates `object`.\n	 *\n	 * @static\n	 * @since 0.1.0\n	 * @memberOf _\n	 * @category Object\n	 * @param {Object} object The destination object.\n	 * @param {...Object} [sources] The source objects.\n	 * @returns {Object} Returns `object`.\n	 * @example\n	 *\n	 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });\n	 * // => { 'user': 'barney', 'age': 36 }\n	 */\n	var defaults = rest(function (args) {\n	  args.push(undefined, assignInDefaults);\n	  return apply(assignInWith, undefined, args);\n	});\n\n	module.exports = defaults;\n\n/***/ },\n/* 181 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var eq = __webpack_require__(21);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Used by `_.defaults` to customize its `_.assignIn` use.\n	 *\n	 * @private\n	 * @param {*} objValue The destination value.\n	 * @param {*} srcValue The source value.\n	 * @param {string} key The key of the property to assign.\n	 * @param {Object} object The parent object of `objValue`.\n	 * @returns {*} Returns the value to assign.\n	 */\n	function assignInDefaults(objValue, srcValue, key, object) {\n	  if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {\n	    return srcValue;\n	  }\n	  return objValue;\n	}\n\n	module.exports = assignInDefaults;\n\n/***/ },\n/* 182 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var copyObject = __webpack_require__(128),\n	    createAssigner = __webpack_require__(129),\n	    keysIn = __webpack_require__(183);\n\n	/**\n	 * This method is like `_.assignIn` except that it accepts `customizer`\n	 * which is invoked to produce the assigned values. If `customizer` returns\n	 * `undefined`, assignment is handled by the method instead. The `customizer`\n	 * is invoked with five arguments: (objValue, srcValue, key, object, source).\n	 *\n	 * **Note:** This method mutates `object`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @alias extendWith\n	 * @category Object\n	 * @param {Object} object The destination object.\n	 * @param {...Object} sources The source objects.\n	 * @param {Function} [customizer] The function to customize assigned values.\n	 * @returns {Object} Returns `object`.\n	 * @example\n	 *\n	 * function customizer(objValue, srcValue) {\n	 *   return _.isUndefined(objValue) ? srcValue : objValue;\n	 * }\n	 *\n	 * var defaults = _.partialRight(_.assignInWith, customizer);\n	 *\n	 * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n	 * // => { 'a': 1, 'b': 2 }\n	 */\n	var assignInWith = createAssigner(function (object, source, srcIndex, customizer) {\n	  copyObject(source, keysIn(source), object, customizer);\n	});\n\n	module.exports = assignInWith;\n\n/***/ },\n/* 183 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseKeysIn = __webpack_require__(184),\n	    indexKeys = __webpack_require__(71),\n	    isIndex = __webpack_require__(73),\n	    isPrototype = __webpack_require__(74);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/**\n	 * Creates an array of the own and inherited enumerable property names of `object`.\n	 *\n	 * **Note:** Non-object values are coerced to objects.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.0.0\n	 * @category Object\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of property names.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.a = 1;\n	 *   this.b = 2;\n	 * }\n	 *\n	 * Foo.prototype.c = 3;\n	 *\n	 * _.keysIn(new Foo);\n	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n	 */\n	function keysIn(object) {\n	  var index = -1,\n	      isProto = isPrototype(object),\n	      props = baseKeysIn(object),\n	      propsLength = props.length,\n	      indexes = indexKeys(object),\n	      skipIndexes = !!indexes,\n	      result = indexes || [],\n	      length = result.length;\n\n	  while (++index < propsLength) {\n	    var key = props[index];\n	    if (!(skipIndexes && (key == 'length' || isIndex(key, length))) && !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n	      result.push(key);\n	    }\n	  }\n	  return result;\n	}\n\n	module.exports = keysIn;\n\n/***/ },\n/* 184 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Reflect = __webpack_require__(185),\n	    iteratorToArray = __webpack_require__(186);\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Built-in value references. */\n	var enumerate = Reflect ? Reflect.enumerate : undefined,\n	    propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n	/**\n	 * The base implementation of `_.keysIn` which doesn't skip the constructor\n	 * property of prototypes or treat sparse arrays as dense.\n	 *\n	 * @private\n	 * @param {Object} object The object to query.\n	 * @returns {Array} Returns the array of property names.\n	 */\n	function baseKeysIn(object) {\n	  object = object == null ? object : Object(object);\n\n	  var result = [];\n	  for (var key in object) {\n	    result.push(key);\n	  }\n	  return result;\n	}\n\n	// Fallback for IE < 9 with es6-shim.\n	if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {\n	  baseKeysIn = function baseKeysIn(object) {\n	    return iteratorToArray(enumerate(object));\n	  };\n	}\n\n	module.exports = baseKeysIn;\n\n/***/ },\n/* 185 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var root = __webpack_require__(15);\n\n	/** Built-in value references. */\n	var Reflect = root.Reflect;\n\n	module.exports = Reflect;\n\n/***/ },\n/* 186 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/**\n	 * Converts `iterator` to an array.\n	 *\n	 * @private\n	 * @param {Object} iterator The iterator to convert.\n	 * @returns {Array} Returns the converted array.\n	 */\n	function iteratorToArray(iterator) {\n	  var data,\n	      result = [];\n\n	  while (!(data = iterator.next()).done) {\n	    result.push(data.value);\n	  }\n	  return result;\n	}\n\n	module.exports = iteratorToArray;\n\n/***/ },\n/* 187 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var boolTag = '[object Boolean]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is classified as a boolean primitive or object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.1.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is correctly classified,\n	 *  else `false`.\n	 * @example\n	 *\n	 * _.isBoolean(false);\n	 * // => true\n	 *\n	 * _.isBoolean(null);\n	 * // => false\n	 */\n	function isBoolean(value) {\n	  return value === true || value === false || isObjectLike(value) && objectToString.call(value) == boolTag;\n	}\n\n	module.exports = isBoolean;\n\n/***/ },\n/* 188 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var apply = __webpack_require__(53),\n	    mergeDefaults = __webpack_require__(189),\n	    mergeWith = __webpack_require__(195),\n	    rest = __webpack_require__(52);\n\n	/**\n	 * This method is like `_.defaults` except that it recursively assigns\n	 * default properties.\n	 *\n	 * **Note:** This method mutates `object`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.10.0\n	 * @category Object\n	 * @param {Object} object The destination object.\n	 * @param {...Object} [sources] The source objects.\n	 * @returns {Object} Returns `object`.\n	 * @example\n	 *\n	 * _.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });\n	 * // => { 'user': { 'name': 'barney', 'age': 36 } }\n	 *\n	 */\n	var defaultsDeep = rest(function (args) {\n	  args.push(undefined, mergeDefaults);\n	  return apply(mergeWith, undefined, args);\n	});\n\n	module.exports = defaultsDeep;\n\n/***/ },\n/* 189 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseMerge = __webpack_require__(190),\n	    isObject = __webpack_require__(11);\n\n	/**\n	 * Used by `_.defaultsDeep` to customize its `_.merge` use.\n	 *\n	 * @private\n	 * @param {*} objValue The destination value.\n	 * @param {*} srcValue The source value.\n	 * @param {string} key The key of the property to merge.\n	 * @param {Object} object The parent object of `objValue`.\n	 * @param {Object} source The parent object of `srcValue`.\n	 * @param {Object} [stack] Tracks traversed source values and their merged\n	 *  counterparts.\n	 * @returns {*} Returns the value to assign.\n	 */\n	function mergeDefaults(objValue, srcValue, key, object, source, stack) {\n	  if (isObject(objValue) && isObject(srcValue)) {\n	    baseMerge(objValue, srcValue, undefined, mergeDefaults, stack.set(srcValue, objValue));\n	  }\n	  return objValue;\n	}\n\n	module.exports = mergeDefaults;\n\n/***/ },\n/* 190 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Stack = __webpack_require__(98),\n	    arrayEach = __webpack_require__(90),\n	    assignMergeValue = __webpack_require__(191),\n	    baseMergeDeep = __webpack_require__(192),\n	    isArray = __webpack_require__(51),\n	    isObject = __webpack_require__(11),\n	    isTypedArray = __webpack_require__(113),\n	    keysIn = __webpack_require__(183);\n\n	/**\n	 * The base implementation of `_.merge` without support for multiple sources.\n	 *\n	 * @private\n	 * @param {Object} object The destination object.\n	 * @param {Object} source The source object.\n	 * @param {number} srcIndex The index of `source`.\n	 * @param {Function} [customizer] The function to customize merged values.\n	 * @param {Object} [stack] Tracks traversed source values and their merged\n	 *  counterparts.\n	 */\n	function baseMerge(object, source, srcIndex, customizer, stack) {\n	  if (object === source) {\n	    return;\n	  }\n	  if (!(isArray(source) || isTypedArray(source))) {\n	    var props = keysIn(source);\n	  }\n	  arrayEach(props || source, function (srcValue, key) {\n	    if (props) {\n	      key = srcValue;\n	      srcValue = source[key];\n	    }\n	    if (isObject(srcValue)) {\n	      stack || (stack = new Stack());\n	      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n	    } else {\n	      var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;\n\n	      if (newValue === undefined) {\n	        newValue = srcValue;\n	      }\n	      assignMergeValue(object, key, newValue);\n	    }\n	  });\n	}\n\n	module.exports = baseMerge;\n\n/***/ },\n/* 191 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var eq = __webpack_require__(21);\n\n	/**\n	 * This function is like `assignValue` except that it doesn't assign\n	 * `undefined` values.\n	 *\n	 * @private\n	 * @param {Object} object The object to modify.\n	 * @param {string} key The key of the property to assign.\n	 * @param {*} value The value to assign.\n	 */\n	function assignMergeValue(object, key, value) {\n	  if (value !== undefined && !eq(object[key], value) || typeof key == 'number' && value === undefined && !(key in object)) {\n	    object[key] = value;\n	  }\n	}\n\n	module.exports = assignMergeValue;\n\n/***/ },\n/* 192 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var assignMergeValue = __webpack_require__(191),\n	    baseClone = __webpack_require__(157),\n	    copyArray = __webpack_require__(160),\n	    isArguments = __webpack_require__(44),\n	    isArray = __webpack_require__(51),\n	    isArrayLikeObject = __webpack_require__(45),\n	    isFunction = __webpack_require__(10),\n	    isObject = __webpack_require__(11),\n	    isPlainObject = __webpack_require__(193),\n	    isTypedArray = __webpack_require__(113),\n	    toPlainObject = __webpack_require__(194);\n\n	/**\n	 * A specialized version of `baseMerge` for arrays and objects which performs\n	 * deep merges and tracks traversed objects enabling objects with circular\n	 * references to be merged.\n	 *\n	 * @private\n	 * @param {Object} object The destination object.\n	 * @param {Object} source The source object.\n	 * @param {string} key The key of the value to merge.\n	 * @param {number} srcIndex The index of `source`.\n	 * @param {Function} mergeFunc The function to merge values.\n	 * @param {Function} [customizer] The function to customize assigned values.\n	 * @param {Object} [stack] Tracks traversed source values and their merged\n	 *  counterparts.\n	 */\n	function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n	  var objValue = object[key],\n	      srcValue = source[key],\n	      stacked = stack.get(srcValue);\n\n	  if (stacked) {\n	    assignMergeValue(object, key, stacked);\n	    return;\n	  }\n	  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n\n	  var isCommon = newValue === undefined;\n\n	  if (isCommon) {\n	    newValue = srcValue;\n	    if (isArray(srcValue) || isTypedArray(srcValue)) {\n	      if (isArray(objValue)) {\n	        newValue = objValue;\n	      } else if (isArrayLikeObject(objValue)) {\n	        newValue = copyArray(objValue);\n	      } else {\n	        isCommon = false;\n	        newValue = baseClone(srcValue, true);\n	      }\n	    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n	      if (isArguments(objValue)) {\n	        newValue = toPlainObject(objValue);\n	      } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {\n	        isCommon = false;\n	        newValue = baseClone(srcValue, true);\n	      } else {\n	        newValue = objValue;\n	      }\n	    } else {\n	      isCommon = false;\n	    }\n	  }\n	  stack.set(srcValue, newValue);\n\n	  if (isCommon) {\n	    // Recursively merge objects and arrays (susceptible to call stack limits).\n	    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n	  }\n	  stack['delete'](srcValue);\n	  assignMergeValue(object, key, newValue);\n	}\n\n	module.exports = baseMergeDeep;\n\n/***/ },\n/* 193 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var getPrototype = __webpack_require__(69),\n	    isHostObject = __webpack_require__(12),\n	    isObjectLike = __webpack_require__(50);\n\n	/** `Object#toString` result references. */\n	var objectTag = '[object Object]';\n\n	/** Used for built-in method references. */\n	var objectProto = Object.prototype;\n\n	/** Used to resolve the decompiled source of functions. */\n	var funcToString = Function.prototype.toString;\n\n	/** Used to check objects for own properties. */\n	var hasOwnProperty = objectProto.hasOwnProperty;\n\n	/** Used to infer the `Object` constructor. */\n	var objectCtorString = funcToString.call(Object);\n\n	/**\n	 * Used to resolve the\n	 * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n	 * of values.\n	 */\n	var objectToString = objectProto.toString;\n\n	/**\n	 * Checks if `value` is a plain object, that is, an object created by the\n	 * `Object` constructor or one with a `[[Prototype]]` of `null`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 0.8.0\n	 * @category Lang\n	 * @param {*} value The value to check.\n	 * @returns {boolean} Returns `true` if `value` is a plain object,\n	 *  else `false`.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.a = 1;\n	 * }\n	 *\n	 * _.isPlainObject(new Foo);\n	 * // => false\n	 *\n	 * _.isPlainObject([1, 2, 3]);\n	 * // => false\n	 *\n	 * _.isPlainObject({ 'x': 0, 'y': 0 });\n	 * // => true\n	 *\n	 * _.isPlainObject(Object.create(null));\n	 * // => true\n	 */\n	function isPlainObject(value) {\n	  if (!isObjectLike(value) || objectToString.call(value) != objectTag || isHostObject(value)) {\n	    return false;\n	  }\n	  var proto = getPrototype(value);\n	  if (proto === null) {\n	    return true;\n	  }\n	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;\n	}\n\n	module.exports = isPlainObject;\n\n/***/ },\n/* 194 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var copyObject = __webpack_require__(128),\n	    keysIn = __webpack_require__(183);\n\n	/**\n	 * Converts `value` to a plain object flattening inherited enumerable string\n	 * keyed properties of `value` to own properties of the plain object.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 3.0.0\n	 * @category Lang\n	 * @param {*} value The value to convert.\n	 * @returns {Object} Returns the converted plain object.\n	 * @example\n	 *\n	 * function Foo() {\n	 *   this.b = 2;\n	 * }\n	 *\n	 * Foo.prototype.c = 3;\n	 *\n	 * _.assign({ 'a': 1 }, new Foo);\n	 * // => { 'a': 1, 'b': 2 }\n	 *\n	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n	 * // => { 'a': 1, 'b': 2, 'c': 3 }\n	 */\n	function toPlainObject(value) {\n	  return copyObject(value, keysIn(value));\n	}\n\n	module.exports = toPlainObject;\n\n/***/ },\n/* 195 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var baseMerge = __webpack_require__(190),\n	    createAssigner = __webpack_require__(129);\n\n	/**\n	 * This method is like `_.merge` except that it accepts `customizer` which\n	 * is invoked to produce the merged values of the destination and source\n	 * properties. If `customizer` returns `undefined`, merging is handled by the\n	 * method instead. The `customizer` is invoked with seven arguments:\n	 * (objValue, srcValue, key, object, source, stack).\n	 *\n	 * **Note:** This method mutates `object`.\n	 *\n	 * @static\n	 * @memberOf _\n	 * @since 4.0.0\n	 * @category Object\n	 * @param {Object} object The destination object.\n	 * @param {...Object} sources The source objects.\n	 * @param {Function} customizer The function to customize assigned values.\n	 * @returns {Object} Returns `object`.\n	 * @example\n	 *\n	 * function customizer(objValue, srcValue) {\n	 *   if (_.isArray(objValue)) {\n	 *     return objValue.concat(srcValue);\n	 *   }\n	 * }\n	 *\n	 * var object = {\n	 *   'fruits': ['apple'],\n	 *   'vegetables': ['beet']\n	 * };\n	 *\n	 * var other = {\n	 *   'fruits': ['banana'],\n	 *   'vegetables': ['carrot']\n	 * };\n	 *\n	 * _.mergeWith(object, other, customizer);\n	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }\n	 */\n	var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {\n	  baseMerge(object, source, srcIndex, customizer);\n	});\n\n	module.exports = mergeWith;\n\n/***/ },\n/* 196 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	/**\n	 * cuid.js\n	 * Collision-resistant UID generator for browsers and node.\n	 * Sequential for fast db lookups and recency sorting.\n	 * Safe for element IDs and server-side lookups.\n	 *\n	 * Extracted from CLCTR\n	 *\n	 * Copyright (c) Eric Elliott 2012\n	 * MIT License\n	 */\n\n	/*global window, navigator, document, require, process, module */\n	(function (app) {\n	  'use strict';\n\n	  var namespace = 'cuid',\n	      c = 0,\n	      blockSize = 4,\n	      base = 36,\n	      discreteValues = Math.pow(base, blockSize),\n	      pad = function pad(num, size) {\n	    var s = \"000000000\" + num;\n	    return s.substr(s.length - size);\n	  },\n	      randomBlock = function randomBlock() {\n	    return pad((Math.random() * discreteValues << 0).toString(base), blockSize);\n	  },\n	      safeCounter = function safeCounter() {\n	    c = c < discreteValues ? c : 0;\n	    c++; // this is not subliminal\n	    return c - 1;\n	  },\n	      api = function cuid() {\n	    // Starting with a lowercase letter makes\n	    // it HTML element ID friendly.\n	    var letter = 'c',\n	        // hard-coded allows for sequential access\n\n	    // timestamp\n	    // warning: this exposes the exact date and time\n	    // that the uid was created.\n	    timestamp = new Date().getTime().toString(base),\n\n\n	    // Prevent same-machine collisions.\n	    counter,\n\n\n	    // A few chars to generate distinct ids for different\n	    // clients (so different computers are far less\n	    // likely to generate the same id)\n	    fingerprint = api.fingerprint(),\n\n\n	    // Grab some more chars from Math.random()\n	    random = randomBlock() + randomBlock();\n\n	    counter = pad(safeCounter().toString(base), blockSize);\n\n	    return letter + timestamp + counter + fingerprint + random;\n	  };\n\n	  api.slug = function slug() {\n	    var date = new Date().getTime().toString(36),\n	        counter,\n	        print = api.fingerprint().slice(0, 1) + api.fingerprint().slice(-1),\n	        random = randomBlock().slice(-2);\n\n	    counter = safeCounter().toString(36).slice(-4);\n\n	    return date.slice(-2) + counter + print + random;\n	  };\n\n	  api.globalCount = function globalCount() {\n	    // We want to cache the results of this\n	    var cache = function calc() {\n	      var i,\n	          count = 0;\n\n	      for (i in window) {\n	        count++;\n	      }\n\n	      return count;\n	    }();\n\n	    api.globalCount = function () {\n	      return cache;\n	    };\n	    return cache;\n	  };\n\n	  api.fingerprint = function browserPrint() {\n	    return pad((navigator.mimeTypes.length + navigator.userAgent.length).toString(36) + api.globalCount().toString(36), 4);\n	  };\n\n	  // don't change anything from here down.\n	  if (app && app.register) {\n	    app.register(namespace, api);\n	  } else if (true) {\n	    module.exports = api;\n	  } else {\n	    app[namespace] = api;\n	  }\n	})(undefined);\n\n/***/ },\n/* 197 */\n/***/ function(module, exports, __webpack_require__) {\n\n	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	/*!\r\n	 * EventEmitter2\r\n	 * https://github.com/hij1nx/EventEmitter2\r\n	 *\r\n	 * Copyright (c) 2013 hij1nx\r\n	 * Licensed under the MIT license.\r\n	 */\n	;!function (undefined) {\n\n	  var isArray = Array.isArray ? Array.isArray : function _isArray(obj) {\n	    return Object.prototype.toString.call(obj) === \"[object Array]\";\n	  };\n	  var defaultMaxListeners = 10;\n\n	  function init() {\n	    this._events = {};\n	    if (this._conf) {\n	      configure.call(this, this._conf);\n	    }\n	  }\n\n	  function configure(conf) {\n	    if (conf) {\n\n	      this._conf = conf;\n\n	      conf.delimiter && (this.delimiter = conf.delimiter);\n	      conf.maxListeners && (this._events.maxListeners = conf.maxListeners);\n	      conf.wildcard && (this.wildcard = conf.wildcard);\n	      conf.newListener && (this.newListener = conf.newListener);\n\n	      if (this.wildcard) {\n	        this.listenerTree = {};\n	      }\n	    }\n	  }\n\n	  function EventEmitter(conf) {\n	    this._events = {};\n	    this.newListener = false;\n	    configure.call(this, conf);\n	  }\n	  EventEmitter.EventEmitter2 = EventEmitter; // backwards compatibility for exporting EventEmitter property\n\n	  //\n	  // Attention, function return type now is array, always !\n	  // It has zero elements if no any matches found and one or more\n	  // elements (leafs) if there are matches\n	  //\n	  function searchListenerTree(handlers, type, tree, i) {\n	    if (!tree) {\n	      return [];\n	    }\n	    var listeners = [],\n	        leaf,\n	        len,\n	        branch,\n	        xTree,\n	        xxTree,\n	        isolatedBranch,\n	        endReached,\n	        typeLength = type.length,\n	        currentType = type[i],\n	        nextType = type[i + 1];\n	    if (i === typeLength && tree._listeners) {\n	      //\n	      // If at the end of the event(s) list and the tree has listeners\n	      // invoke those listeners.\n	      //\n	      if (typeof tree._listeners === 'function') {\n	        handlers && handlers.push(tree._listeners);\n	        return [tree];\n	      } else {\n	        for (leaf = 0, len = tree._listeners.length; leaf < len; leaf++) {\n	          handlers && handlers.push(tree._listeners[leaf]);\n	        }\n	        return [tree];\n	      }\n	    }\n\n	    if (currentType === '*' || currentType === '**' || tree[currentType]) {\n	      //\n	      // If the event emitted is '*' at this part\n	      // or there is a concrete match at this patch\n	      //\n	      if (currentType === '*') {\n	        for (branch in tree) {\n	          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n	            listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 1));\n	          }\n	        }\n	        return listeners;\n	      } else if (currentType === '**') {\n	        endReached = i + 1 === typeLength || i + 2 === typeLength && nextType === '*';\n	        if (endReached && tree._listeners) {\n	          // The next element has a _listeners, add it to the handlers.\n	          listeners = listeners.concat(searchListenerTree(handlers, type, tree, typeLength));\n	        }\n\n	        for (branch in tree) {\n	          if (branch !== '_listeners' && tree.hasOwnProperty(branch)) {\n	            if (branch === '*' || branch === '**') {\n	              if (tree[branch]._listeners && !endReached) {\n	                listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], typeLength));\n	              }\n	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n	            } else if (branch === nextType) {\n	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i + 2));\n	            } else {\n	              // No match on this one, shift into the tree but not in the type array.\n	              listeners = listeners.concat(searchListenerTree(handlers, type, tree[branch], i));\n	            }\n	          }\n	        }\n	        return listeners;\n	      }\n\n	      listeners = listeners.concat(searchListenerTree(handlers, type, tree[currentType], i + 1));\n	    }\n\n	    xTree = tree['*'];\n	    if (xTree) {\n	      //\n	      // If the listener tree will allow any match for this part,\n	      // then recursively explore all branches of the tree\n	      //\n	      searchListenerTree(handlers, type, xTree, i + 1);\n	    }\n\n	    xxTree = tree['**'];\n	    if (xxTree) {\n	      if (i < typeLength) {\n	        if (xxTree._listeners) {\n	          // If we have a listener on a '**', it will catch all, so add its handler.\n	          searchListenerTree(handlers, type, xxTree, typeLength);\n	        }\n\n	        // Build arrays of matching next branches and others.\n	        for (branch in xxTree) {\n	          if (branch !== '_listeners' && xxTree.hasOwnProperty(branch)) {\n	            if (branch === nextType) {\n	              // We know the next element will match, so jump twice.\n	              searchListenerTree(handlers, type, xxTree[branch], i + 2);\n	            } else if (branch === currentType) {\n	              // Current node matches, move into the tree.\n	              searchListenerTree(handlers, type, xxTree[branch], i + 1);\n	            } else {\n	              isolatedBranch = {};\n	              isolatedBranch[branch] = xxTree[branch];\n	              searchListenerTree(handlers, type, { '**': isolatedBranch }, i + 1);\n	            }\n	          }\n	        }\n	      } else if (xxTree._listeners) {\n	        // We have reached the end and still on a '**'\n	        searchListenerTree(handlers, type, xxTree, typeLength);\n	      } else if (xxTree['*'] && xxTree['*']._listeners) {\n	        searchListenerTree(handlers, type, xxTree['*'], typeLength);\n	      }\n	    }\n\n	    return listeners;\n	  }\n\n	  function growListenerTree(type, listener) {\n\n	    type = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n\n	    //\n	    // Looks for two consecutive '**', if so, don't add the event at all.\n	    //\n	    for (var i = 0, len = type.length; i + 1 < len; i++) {\n	      if (type[i] === '**' && type[i + 1] === '**') {\n	        return;\n	      }\n	    }\n\n	    var tree = this.listenerTree;\n	    var name = type.shift();\n\n	    while (name) {\n\n	      if (!tree[name]) {\n	        tree[name] = {};\n	      }\n\n	      tree = tree[name];\n\n	      if (type.length === 0) {\n\n	        if (!tree._listeners) {\n	          tree._listeners = listener;\n	        } else if (typeof tree._listeners === 'function') {\n	          tree._listeners = [tree._listeners, listener];\n	        } else if (isArray(tree._listeners)) {\n\n	          tree._listeners.push(listener);\n\n	          if (!tree._listeners.warned) {\n\n	            var m = defaultMaxListeners;\n\n	            if (typeof this._events.maxListeners !== 'undefined') {\n	              m = this._events.maxListeners;\n	            }\n\n	            if (m > 0 && tree._listeners.length > m) {\n\n	              tree._listeners.warned = true;\n	              console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', tree._listeners.length);\n	              if (console.trace) {\n	                console.trace();\n	              }\n	            }\n	          }\n	        }\n	        return true;\n	      }\n	      name = type.shift();\n	    }\n	    return true;\n	  }\n\n	  // By default EventEmitters will print a warning if more than\n	  // 10 listeners are added to it. This is a useful default which\n	  // helps finding memory leaks.\n	  //\n	  // Obviously not all Emitters should be limited to 10. This function allows\n	  // that to be increased. Set to zero for unlimited.\n\n	  EventEmitter.prototype.delimiter = '.';\n\n	  EventEmitter.prototype.setMaxListeners = function (n) {\n	    this._events || init.call(this);\n	    this._events.maxListeners = n;\n	    if (!this._conf) this._conf = {};\n	    this._conf.maxListeners = n;\n	  };\n\n	  EventEmitter.prototype.event = '';\n\n	  EventEmitter.prototype.once = function (event, fn) {\n	    this.many(event, 1, fn);\n	    return this;\n	  };\n\n	  EventEmitter.prototype.many = function (event, ttl, fn) {\n	    var self = this;\n\n	    if (typeof fn !== 'function') {\n	      throw new Error('many only accepts instances of Function');\n	    }\n\n	    function listener() {\n	      if (--ttl === 0) {\n	        self.off(event, listener);\n	      }\n	      fn.apply(this, arguments);\n	    }\n\n	    listener._origin = fn;\n\n	    this.on(event, listener);\n\n	    return self;\n	  };\n\n	  EventEmitter.prototype.emit = function () {\n\n	    this._events || init.call(this);\n\n	    var type = arguments[0];\n\n	    if (type === 'newListener' && !this.newListener) {\n	      if (!this._events.newListener) {\n	        return false;\n	      }\n	    }\n\n	    // Loop through the *_all* functions and invoke them.\n	    if (this._all) {\n	      var l = arguments.length;\n	      var args = new Array(l - 1);\n	      for (var i = 1; i < l; i++) {\n	        args[i - 1] = arguments[i];\n	      }for (i = 0, l = this._all.length; i < l; i++) {\n	        this.event = type;\n	        this._all[i].apply(this, [type].concat(args));\n	      }\n	    }\n\n	    // If there is no 'error' event listener then throw.\n	    if (type === 'error') {\n\n	      if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\n	        if (arguments[1] instanceof Error) {\n	          throw arguments[1]; // Unhandled 'error' event\n	        } else {\n	            throw new Error(\"Uncaught, unspecified 'error' event.\");\n	          }\n	        return false;\n	      }\n	    }\n\n	    var handler;\n\n	    if (this.wildcard) {\n	      handler = [];\n	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n	      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n	    } else {\n	      handler = this._events[type];\n	    }\n\n	    if (typeof handler === 'function') {\n	      this.event = type;\n	      if (arguments.length === 1) {\n	        handler.call(this);\n	      } else if (arguments.length > 1) switch (arguments.length) {\n	        case 2:\n	          handler.call(this, arguments[1]);\n	          break;\n	        case 3:\n	          handler.call(this, arguments[1], arguments[2]);\n	          break;\n	        // slower\n	        default:\n	          var l = arguments.length;\n	          var args = new Array(l - 1);\n	          for (var i = 1; i < l; i++) {\n	            args[i - 1] = arguments[i];\n	          }handler.apply(this, args);\n	      }\n	      return true;\n	    } else if (handler) {\n	      var l = arguments.length;\n	      var args = new Array(l - 1);\n	      for (var i = 1; i < l; i++) {\n	        args[i - 1] = arguments[i];\n	      }var listeners = handler.slice();\n	      for (var i = 0, l = listeners.length; i < l; i++) {\n	        this.event = type;\n	        listeners[i].apply(this, args);\n	      }\n	      return listeners.length > 0 || !!this._all;\n	    } else {\n	      return !!this._all;\n	    }\n	  };\n\n	  EventEmitter.prototype.emitAsync = function () {\n\n	    this._events || init.call(this);\n\n	    var type = arguments[0];\n\n	    if (type === 'newListener' && !this.newListener) {\n	      if (!this._events.newListener) {\n	        return Promise.resolve([false]);\n	      }\n	    }\n\n	    var promises = [];\n\n	    // Loop through the *_all* functions and invoke them.\n	    if (this._all) {\n	      var l = arguments.length;\n	      var args = new Array(l - 1);\n	      for (var i = 1; i < l; i++) {\n	        args[i - 1] = arguments[i];\n	      }for (i = 0, l = this._all.length; i < l; i++) {\n	        this.event = type;\n	        promises.push(this._all[i].apply(this, args));\n	      }\n	    }\n\n	    // If there is no 'error' event listener then throw.\n	    if (type === 'error') {\n\n	      if (!this._all && !this._events.error && !(this.wildcard && this.listenerTree.error)) {\n\n	        if (arguments[1] instanceof Error) {\n	          return Promise.reject(arguments[1]); // Unhandled 'error' event\n	        } else {\n	            return Promise.reject(\"Uncaught, unspecified 'error' event.\");\n	          }\n	      }\n	    }\n\n	    var handler;\n\n	    if (this.wildcard) {\n	      handler = [];\n	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n	      searchListenerTree.call(this, handler, ns, this.listenerTree, 0);\n	    } else {\n	      handler = this._events[type];\n	    }\n\n	    if (typeof handler === 'function') {\n	      this.event = type;\n	      if (arguments.length === 1) {\n	        promises.push(handler.call(this));\n	      } else if (arguments.length > 1) {\n	        switch (arguments.length) {\n	          case 2:\n	            promises.push(handler.call(this, arguments[1]));\n	            break;\n	          case 3:\n	            promises.push(handler.call(this, arguments[1], arguments[2]));\n	            break;\n	          // slower\n	          default:\n	            var l = arguments.length;\n	            var args = new Array(l - 1);\n	            for (var i = 1; i < l; i++) {\n	              args[i - 1] = arguments[i];\n	            }promises.push(handler.apply(this, args));\n	        }\n	      }\n	    } else if (handler) {\n	      var l = arguments.length;\n	      var args = new Array(l - 1);\n	      for (var i = 1; i < l; i++) {\n	        args[i - 1] = arguments[i];\n	      }var listeners = handler.slice();\n	      for (var i = 0, l = listeners.length; i < l; i++) {\n	        this.event = type;\n	        promises.push(listeners[i].apply(this, args));\n	      }\n	    }\n	    return Promise.all(promises);\n	  };\n\n	  EventEmitter.prototype.on = function (type, listener) {\n\n	    if (typeof type === 'function') {\n	      this.onAny(type);\n	      return this;\n	    }\n\n	    if (typeof listener !== 'function') {\n	      throw new Error('on only accepts instances of Function');\n	    }\n	    this._events || init.call(this);\n\n	    // To avoid recursion in the case that type == \"newListeners\"! Before\n	    // adding it to the listeners, first emit \"newListeners\".\n	    this.emit('newListener', type, listener);\n\n	    if (this.wildcard) {\n	      growListenerTree.call(this, type, listener);\n	      return this;\n	    }\n\n	    if (!this._events[type]) {\n	      // Optimize the case of one listener. Don't need the extra array object.\n	      this._events[type] = listener;\n	    } else if (typeof this._events[type] === 'function') {\n	      // Adding the second element, need to change to array.\n	      this._events[type] = [this._events[type], listener];\n	    } else if (isArray(this._events[type])) {\n	      // If we've already got an array, just append.\n	      this._events[type].push(listener);\n\n	      // Check for listener leak\n	      if (!this._events[type].warned) {\n\n	        var m = defaultMaxListeners;\n\n	        if (typeof this._events.maxListeners !== 'undefined') {\n	          m = this._events.maxListeners;\n	        }\n\n	        if (m > 0 && this._events[type].length > m) {\n\n	          this._events[type].warned = true;\n	          console.error('(node) warning: possible EventEmitter memory ' + 'leak detected. %d listeners added. ' + 'Use emitter.setMaxListeners() to increase limit.', this._events[type].length);\n	          if (console.trace) {\n	            console.trace();\n	          }\n	        }\n	      }\n	    }\n	    return this;\n	  };\n\n	  EventEmitter.prototype.onAny = function (fn) {\n\n	    if (typeof fn !== 'function') {\n	      throw new Error('onAny only accepts instances of Function');\n	    }\n\n	    if (!this._all) {\n	      this._all = [];\n	    }\n\n	    // Add the function to the event listener collection.\n	    this._all.push(fn);\n	    return this;\n	  };\n\n	  EventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n	  EventEmitter.prototype.off = function (type, listener) {\n	    if (typeof listener !== 'function') {\n	      throw new Error('removeListener only takes instances of Function');\n	    }\n\n	    var handlers,\n	        leafs = [];\n\n	    if (this.wildcard) {\n	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n	      leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n	    } else {\n	      // does not use listeners(), so no side effect of creating _events[type]\n	      if (!this._events[type]) return this;\n	      handlers = this._events[type];\n	      leafs.push({ _listeners: handlers });\n	    }\n\n	    for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n	      var leaf = leafs[iLeaf];\n	      handlers = leaf._listeners;\n	      if (isArray(handlers)) {\n\n	        var position = -1;\n\n	        for (var i = 0, length = handlers.length; i < length; i++) {\n	          if (handlers[i] === listener || handlers[i].listener && handlers[i].listener === listener || handlers[i]._origin && handlers[i]._origin === listener) {\n	            position = i;\n	            break;\n	          }\n	        }\n\n	        if (position < 0) {\n	          continue;\n	        }\n\n	        if (this.wildcard) {\n	          leaf._listeners.splice(position, 1);\n	        } else {\n	          this._events[type].splice(position, 1);\n	        }\n\n	        if (handlers.length === 0) {\n	          if (this.wildcard) {\n	            delete leaf._listeners;\n	          } else {\n	            delete this._events[type];\n	          }\n	        }\n\n	        this.emit(\"removeListener\", type, listener);\n\n	        return this;\n	      } else if (handlers === listener || handlers.listener && handlers.listener === listener || handlers._origin && handlers._origin === listener) {\n	        if (this.wildcard) {\n	          delete leaf._listeners;\n	        } else {\n	          delete this._events[type];\n	        }\n\n	        this.emit(\"removeListener\", type, listener);\n	      }\n	    }\n\n	    function recursivelyGarbageCollect(root) {\n	      if (root === undefined) {\n	        return;\n	      }\n	      var keys = Object.keys(root);\n	      for (var i in keys) {\n	        var key = keys[i];\n	        var obj = root[key];\n	        if (obj instanceof Function || (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) !== \"object\") continue;\n	        if (Object.keys(obj).length > 0) {\n	          recursivelyGarbageCollect(root[key]);\n	        }\n	        if (Object.keys(obj).length === 0) {\n	          delete root[key];\n	        }\n	      }\n	    }\n	    recursivelyGarbageCollect(this.listenerTree);\n\n	    return this;\n	  };\n\n	  EventEmitter.prototype.offAny = function (fn) {\n	    var i = 0,\n	        l = 0,\n	        fns;\n	    if (fn && this._all && this._all.length > 0) {\n	      fns = this._all;\n	      for (i = 0, l = fns.length; i < l; i++) {\n	        if (fn === fns[i]) {\n	          fns.splice(i, 1);\n	          this.emit(\"removeListenerAny\", fn);\n	          return this;\n	        }\n	      }\n	    } else {\n	      fns = this._all;\n	      for (i = 0, l = fns.length; i < l; i++) {\n	        this.emit(\"removeListenerAny\", fns[i]);\n	      }this._all = [];\n	    }\n	    return this;\n	  };\n\n	  EventEmitter.prototype.removeListener = EventEmitter.prototype.off;\n\n	  EventEmitter.prototype.removeAllListeners = function (type) {\n	    if (arguments.length === 0) {\n	      !this._events || init.call(this);\n	      return this;\n	    }\n\n	    if (this.wildcard) {\n	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n	      var leafs = searchListenerTree.call(this, null, ns, this.listenerTree, 0);\n\n	      for (var iLeaf = 0; iLeaf < leafs.length; iLeaf++) {\n	        var leaf = leafs[iLeaf];\n	        leaf._listeners = null;\n	      }\n	    } else {\n	      if (!this._events || !this._events[type]) return this;\n	      this._events[type] = null;\n	    }\n	    return this;\n	  };\n\n	  EventEmitter.prototype.listeners = function (type) {\n	    if (this.wildcard) {\n	      var handlers = [];\n	      var ns = typeof type === 'string' ? type.split(this.delimiter) : type.slice();\n	      searchListenerTree.call(this, handlers, ns, this.listenerTree, 0);\n	      return handlers;\n	    }\n\n	    this._events || init.call(this);\n\n	    if (!this._events[type]) this._events[type] = [];\n	    if (!isArray(this._events[type])) {\n	      this._events[type] = [this._events[type]];\n	    }\n	    return this._events[type];\n	  };\n\n	  EventEmitter.prototype.listenersAny = function () {\n\n	    if (this._all) {\n	      return this._all;\n	    } else {\n	      return [];\n	    }\n	  };\n\n	  if (true) {\n	    // AMD. Register as an anonymous module.\n	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n	      return EventEmitter;\n	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n	  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {\n	    // CommonJS\n	    module.exports = EventEmitter;\n	  } else {\n	    // Browser global.\n	    window.EventEmitter2 = EventEmitter;\n	  }\n	}();\n\n/***/ },\n/* 198 */\n/***/ function(module, exports, __webpack_require__) {\n\n	var require;var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process, global, module) {'use strict';\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	/*!\n	 * @overview es6-promise - a tiny implementation of Promises/A+.\n	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n	 * @license   Licensed under MIT license\n	 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE\n	 * @version   3.1.2\n	 */\n\n	(function () {\n	  \"use strict\";\n\n	  function lib$es6$promise$utils$$objectOrFunction(x) {\n	    return typeof x === 'function' || (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null;\n	  }\n\n	  function lib$es6$promise$utils$$isFunction(x) {\n	    return typeof x === 'function';\n	  }\n\n	  function lib$es6$promise$utils$$isMaybeThenable(x) {\n	    return (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' && x !== null;\n	  }\n\n	  var lib$es6$promise$utils$$_isArray;\n	  if (!Array.isArray) {\n	    lib$es6$promise$utils$$_isArray = function lib$es6$promise$utils$$_isArray(x) {\n	      return Object.prototype.toString.call(x) === '[object Array]';\n	    };\n	  } else {\n	    lib$es6$promise$utils$$_isArray = Array.isArray;\n	  }\n\n	  var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;\n	  var lib$es6$promise$asap$$len = 0;\n	  var lib$es6$promise$asap$$vertxNext;\n	  var lib$es6$promise$asap$$customSchedulerFn;\n\n	  var lib$es6$promise$asap$$asap = function asap(callback, arg) {\n	    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;\n	    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;\n	    lib$es6$promise$asap$$len += 2;\n	    if (lib$es6$promise$asap$$len === 2) {\n	      // If len is 2, that means that we need to schedule an async flush.\n	      // If additional callbacks are queued before the queue is flushed, they\n	      // will be processed by this flush that we are scheduling.\n	      if (lib$es6$promise$asap$$customSchedulerFn) {\n	        lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);\n	      } else {\n	        lib$es6$promise$asap$$scheduleFlush();\n	      }\n	    }\n	  };\n\n	  function lib$es6$promise$asap$$setScheduler(scheduleFn) {\n	    lib$es6$promise$asap$$customSchedulerFn = scheduleFn;\n	  }\n\n	  function lib$es6$promise$asap$$setAsap(asapFn) {\n	    lib$es6$promise$asap$$asap = asapFn;\n	  }\n\n	  var lib$es6$promise$asap$$browserWindow = typeof window !== 'undefined' ? window : undefined;\n	  var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};\n	  var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n	  var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n	  // test for web worker but not in IE10\n	  var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n	  // node\n	  function lib$es6$promise$asap$$useNextTick() {\n	    // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n	    // see https://github.com/cujojs/when/issues/410 for details\n	    return function () {\n	      process.nextTick(lib$es6$promise$asap$$flush);\n	    };\n	  }\n\n	  // vertx\n	  function lib$es6$promise$asap$$useVertxTimer() {\n	    return function () {\n	      lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);\n	    };\n	  }\n\n	  function lib$es6$promise$asap$$useMutationObserver() {\n	    var iterations = 0;\n	    var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);\n	    var node = document.createTextNode('');\n	    observer.observe(node, { characterData: true });\n\n	    return function () {\n	      node.data = iterations = ++iterations % 2;\n	    };\n	  }\n\n	  // web worker\n	  function lib$es6$promise$asap$$useMessageChannel() {\n	    var channel = new MessageChannel();\n	    channel.port1.onmessage = lib$es6$promise$asap$$flush;\n	    return function () {\n	      channel.port2.postMessage(0);\n	    };\n	  }\n\n	  function lib$es6$promise$asap$$useSetTimeout() {\n	    return function () {\n	      setTimeout(lib$es6$promise$asap$$flush, 1);\n	    };\n	  }\n\n	  var lib$es6$promise$asap$$queue = new Array(1000);\n	  function lib$es6$promise$asap$$flush() {\n	    for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {\n	      var callback = lib$es6$promise$asap$$queue[i];\n	      var arg = lib$es6$promise$asap$$queue[i + 1];\n\n	      callback(arg);\n\n	      lib$es6$promise$asap$$queue[i] = undefined;\n	      lib$es6$promise$asap$$queue[i + 1] = undefined;\n	    }\n\n	    lib$es6$promise$asap$$len = 0;\n	  }\n\n	  function lib$es6$promise$asap$$attemptVertx() {\n	    try {\n	      var r = require;\n	      var vertx = __webpack_require__(200);\n	      lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;\n	      return lib$es6$promise$asap$$useVertxTimer();\n	    } catch (e) {\n	      return lib$es6$promise$asap$$useSetTimeout();\n	    }\n	  }\n\n	  var lib$es6$promise$asap$$scheduleFlush;\n	  // Decide what async method to use to triggering processing of queued callbacks:\n	  if (lib$es6$promise$asap$$isNode) {\n	    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();\n	  } else if (lib$es6$promise$asap$$BrowserMutationObserver) {\n	    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();\n	  } else if (lib$es6$promise$asap$$isWorker) {\n	    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();\n	  } else if (lib$es6$promise$asap$$browserWindow === undefined && \"function\" === 'function') {\n	    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();\n	  } else {\n	    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();\n	  }\n	  function lib$es6$promise$then$$then(onFulfillment, onRejection) {\n	    var parent = this;\n	    var state = parent._state;\n\n	    if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n	      return this;\n	    }\n\n	    var child = new this.constructor(lib$es6$promise$$internal$$noop);\n	    var result = parent._result;\n\n	    if (state) {\n	      var callback = arguments[state - 1];\n	      lib$es6$promise$asap$$asap(function () {\n	        lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);\n	      });\n	    } else {\n	      lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);\n	    }\n\n	    return child;\n	  }\n	  var lib$es6$promise$then$$default = lib$es6$promise$then$$then;\n	  function lib$es6$promise$promise$resolve$$resolve(object) {\n	    /*jshint validthis:true */\n	    var Constructor = this;\n\n	    if (object && (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object.constructor === Constructor) {\n	      return object;\n	    }\n\n	    var promise = new Constructor(lib$es6$promise$$internal$$noop);\n	    lib$es6$promise$$internal$$resolve(promise, object);\n	    return promise;\n	  }\n	  var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;\n\n	  function lib$es6$promise$$internal$$noop() {}\n\n	  var lib$es6$promise$$internal$$PENDING = void 0;\n	  var lib$es6$promise$$internal$$FULFILLED = 1;\n	  var lib$es6$promise$$internal$$REJECTED = 2;\n\n	  var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n	  function lib$es6$promise$$internal$$selfFulfillment() {\n	    return new TypeError(\"You cannot resolve a promise with itself\");\n	  }\n\n	  function lib$es6$promise$$internal$$cannotReturnOwn() {\n	    return new TypeError('A promises callback cannot return that same promise.');\n	  }\n\n	  function lib$es6$promise$$internal$$getThen(promise) {\n	    try {\n	      return promise.then;\n	    } catch (error) {\n	      lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;\n	      return lib$es6$promise$$internal$$GET_THEN_ERROR;\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {\n	    try {\n	      then.call(value, fulfillmentHandler, rejectionHandler);\n	    } catch (e) {\n	      return e;\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {\n	    lib$es6$promise$asap$$asap(function (promise) {\n	      var sealed = false;\n	      var error = lib$es6$promise$$internal$$tryThen(then, thenable, function (value) {\n	        if (sealed) {\n	          return;\n	        }\n	        sealed = true;\n	        if (thenable !== value) {\n	          lib$es6$promise$$internal$$resolve(promise, value);\n	        } else {\n	          lib$es6$promise$$internal$$fulfill(promise, value);\n	        }\n	      }, function (reason) {\n	        if (sealed) {\n	          return;\n	        }\n	        sealed = true;\n\n	        lib$es6$promise$$internal$$reject(promise, reason);\n	      }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n	      if (!sealed && error) {\n	        sealed = true;\n	        lib$es6$promise$$internal$$reject(promise, error);\n	      }\n	    }, promise);\n	  }\n\n	  function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {\n	    if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {\n	      lib$es6$promise$$internal$$fulfill(promise, thenable._result);\n	    } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {\n	      lib$es6$promise$$internal$$reject(promise, thenable._result);\n	    } else {\n	      lib$es6$promise$$internal$$subscribe(thenable, undefined, function (value) {\n	        lib$es6$promise$$internal$$resolve(promise, value);\n	      }, function (reason) {\n	        lib$es6$promise$$internal$$reject(promise, reason);\n	      });\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable, then) {\n	    if (maybeThenable.constructor === promise.constructor && then === lib$es6$promise$then$$default && constructor.resolve === lib$es6$promise$promise$resolve$$default) {\n	      lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);\n	    } else {\n	      if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {\n	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);\n	      } else if (then === undefined) {\n	        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n	      } else if (lib$es6$promise$utils$$isFunction(then)) {\n	        lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);\n	      } else {\n	        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);\n	      }\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$resolve(promise, value) {\n	    if (promise === value) {\n	      lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());\n	    } else if (lib$es6$promise$utils$$objectOrFunction(value)) {\n	      lib$es6$promise$$internal$$handleMaybeThenable(promise, value, lib$es6$promise$$internal$$getThen(value));\n	    } else {\n	      lib$es6$promise$$internal$$fulfill(promise, value);\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$publishRejection(promise) {\n	    if (promise._onerror) {\n	      promise._onerror(promise._result);\n	    }\n\n	    lib$es6$promise$$internal$$publish(promise);\n	  }\n\n	  function lib$es6$promise$$internal$$fulfill(promise, value) {\n	    if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n	      return;\n	    }\n\n	    promise._result = value;\n	    promise._state = lib$es6$promise$$internal$$FULFILLED;\n\n	    if (promise._subscribers.length !== 0) {\n	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$reject(promise, reason) {\n	    if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n	      return;\n	    }\n	    promise._state = lib$es6$promise$$internal$$REJECTED;\n	    promise._result = reason;\n\n	    lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);\n	  }\n\n	  function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {\n	    var subscribers = parent._subscribers;\n	    var length = subscribers.length;\n\n	    parent._onerror = null;\n\n	    subscribers[length] = child;\n	    subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;\n	    subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;\n\n	    if (length === 0 && parent._state) {\n	      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$publish(promise) {\n	    var subscribers = promise._subscribers;\n	    var settled = promise._state;\n\n	    if (subscribers.length === 0) {\n	      return;\n	    }\n\n	    var child,\n	        callback,\n	        detail = promise._result;\n\n	    for (var i = 0; i < subscribers.length; i += 3) {\n	      child = subscribers[i];\n	      callback = subscribers[i + settled];\n\n	      if (child) {\n	        lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);\n	      } else {\n	        callback(detail);\n	      }\n	    }\n\n	    promise._subscribers.length = 0;\n	  }\n\n	  function lib$es6$promise$$internal$$ErrorObject() {\n	    this.error = null;\n	  }\n\n	  var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();\n\n	  function lib$es6$promise$$internal$$tryCatch(callback, detail) {\n	    try {\n	      return callback(detail);\n	    } catch (e) {\n	      lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;\n	      return lib$es6$promise$$internal$$TRY_CATCH_ERROR;\n	    }\n	  }\n\n	  function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {\n	    var hasCallback = lib$es6$promise$utils$$isFunction(callback),\n	        value,\n	        error,\n	        succeeded,\n	        failed;\n\n	    if (hasCallback) {\n	      value = lib$es6$promise$$internal$$tryCatch(callback, detail);\n\n	      if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {\n	        failed = true;\n	        error = value.error;\n	        value = null;\n	      } else {\n	        succeeded = true;\n	      }\n\n	      if (promise === value) {\n	        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());\n	        return;\n	      }\n	    } else {\n	      value = detail;\n	      succeeded = true;\n	    }\n\n	    if (promise._state !== lib$es6$promise$$internal$$PENDING) {\n	      // noop\n	    } else if (hasCallback && succeeded) {\n	        lib$es6$promise$$internal$$resolve(promise, value);\n	      } else if (failed) {\n	        lib$es6$promise$$internal$$reject(promise, error);\n	      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {\n	        lib$es6$promise$$internal$$fulfill(promise, value);\n	      } else if (settled === lib$es6$promise$$internal$$REJECTED) {\n	        lib$es6$promise$$internal$$reject(promise, value);\n	      }\n	  }\n\n	  function lib$es6$promise$$internal$$initializePromise(promise, resolver) {\n	    try {\n	      resolver(function resolvePromise(value) {\n	        lib$es6$promise$$internal$$resolve(promise, value);\n	      }, function rejectPromise(reason) {\n	        lib$es6$promise$$internal$$reject(promise, reason);\n	      });\n	    } catch (e) {\n	      lib$es6$promise$$internal$$reject(promise, e);\n	    }\n	  }\n\n	  function lib$es6$promise$promise$all$$all(entries) {\n	    return new lib$es6$promise$enumerator$$default(this, entries).promise;\n	  }\n	  var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;\n	  function lib$es6$promise$promise$race$$race(entries) {\n	    /*jshint validthis:true */\n	    var Constructor = this;\n\n	    var promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n	    if (!lib$es6$promise$utils$$isArray(entries)) {\n	      lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));\n	      return promise;\n	    }\n\n	    var length = entries.length;\n\n	    function onFulfillment(value) {\n	      lib$es6$promise$$internal$$resolve(promise, value);\n	    }\n\n	    function onRejection(reason) {\n	      lib$es6$promise$$internal$$reject(promise, reason);\n	    }\n\n	    for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n	      lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);\n	    }\n\n	    return promise;\n	  }\n	  var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;\n	  function lib$es6$promise$promise$reject$$reject(reason) {\n	    /*jshint validthis:true */\n	    var Constructor = this;\n	    var promise = new Constructor(lib$es6$promise$$internal$$noop);\n	    lib$es6$promise$$internal$$reject(promise, reason);\n	    return promise;\n	  }\n	  var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;\n\n	  var lib$es6$promise$promise$$counter = 0;\n\n	  function lib$es6$promise$promise$$needsResolver() {\n	    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n	  }\n\n	  function lib$es6$promise$promise$$needsNew() {\n	    throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n	  }\n\n	  var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;\n	  /**\n	    Promise objects represent the eventual result of an asynchronous operation. The\n	    primary way of interacting with a promise is through its `then` method, which\n	    registers callbacks to receive either a promise's eventual value or the reason\n	    why the promise cannot be fulfilled.\n	     Terminology\n	    -----------\n	     - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n	    - `thenable` is an object or function that defines a `then` method.\n	    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n	    - `exception` is a value that is thrown using the throw statement.\n	    - `reason` is a value that indicates why a promise was rejected.\n	    - `settled` the final resting state of a promise, fulfilled or rejected.\n	     A promise can be in one of three states: pending, fulfilled, or rejected.\n	     Promises that are fulfilled have a fulfillment value and are in the fulfilled\n	    state.  Promises that are rejected have a rejection reason and are in the\n	    rejected state.  A fulfillment value is never a thenable.\n	     Promises can also be said to *resolve* a value.  If this value is also a\n	    promise, then the original promise's settled state will match the value's\n	    settled state.  So a promise that *resolves* a promise that rejects will\n	    itself reject, and a promise that *resolves* a promise that fulfills will\n	    itself fulfill.\n	      Basic Usage:\n	    ------------\n	     ```js\n	    var promise = new Promise(function(resolve, reject) {\n	      // on success\n	      resolve(value);\n	       // on failure\n	      reject(reason);\n	    });\n	     promise.then(function(value) {\n	      // on fulfillment\n	    }, function(reason) {\n	      // on rejection\n	    });\n	    ```\n	     Advanced Usage:\n	    ---------------\n	     Promises shine when abstracting away asynchronous interactions such as\n	    `XMLHttpRequest`s.\n	     ```js\n	    function getJSON(url) {\n	      return new Promise(function(resolve, reject){\n	        var xhr = new XMLHttpRequest();\n	         xhr.open('GET', url);\n	        xhr.onreadystatechange = handler;\n	        xhr.responseType = 'json';\n	        xhr.setRequestHeader('Accept', 'application/json');\n	        xhr.send();\n	         function handler() {\n	          if (this.readyState === this.DONE) {\n	            if (this.status === 200) {\n	              resolve(this.response);\n	            } else {\n	              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n	            }\n	          }\n	        };\n	      });\n	    }\n	     getJSON('/posts.json').then(function(json) {\n	      // on fulfillment\n	    }, function(reason) {\n	      // on rejection\n	    });\n	    ```\n	     Unlike callbacks, promises are great composable primitives.\n	     ```js\n	    Promise.all([\n	      getJSON('/posts'),\n	      getJSON('/comments')\n	    ]).then(function(values){\n	      values[0] // => postsJSON\n	      values[1] // => commentsJSON\n	       return values;\n	    });\n	    ```\n	     @class Promise\n	    @param {function} resolver\n	    Useful for tooling.\n	    @constructor\n	  */\n	  function lib$es6$promise$promise$$Promise(resolver) {\n	    this._id = lib$es6$promise$promise$$counter++;\n	    this._state = undefined;\n	    this._result = undefined;\n	    this._subscribers = [];\n\n	    if (lib$es6$promise$$internal$$noop !== resolver) {\n	      typeof resolver !== 'function' && lib$es6$promise$promise$$needsResolver();\n	      this instanceof lib$es6$promise$promise$$Promise ? lib$es6$promise$$internal$$initializePromise(this, resolver) : lib$es6$promise$promise$$needsNew();\n	    }\n	  }\n\n	  lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;\n	  lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;\n	  lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;\n	  lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;\n	  lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;\n	  lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;\n	  lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;\n\n	  lib$es6$promise$promise$$Promise.prototype = {\n	    constructor: lib$es6$promise$promise$$Promise,\n\n	    /**\n	      The primary way of interacting with a promise is through its `then` method,\n	      which registers callbacks to receive either a promise's eventual value or the\n	      reason why the promise cannot be fulfilled.\n	       ```js\n	      findUser().then(function(user){\n	        // user is available\n	      }, function(reason){\n	        // user is unavailable, and you are given the reason why\n	      });\n	      ```\n	       Chaining\n	      --------\n	       The return value of `then` is itself a promise.  This second, 'downstream'\n	      promise is resolved with the return value of the first promise's fulfillment\n	      or rejection handler, or rejected if the handler throws an exception.\n	       ```js\n	      findUser().then(function (user) {\n	        return user.name;\n	      }, function (reason) {\n	        return 'default name';\n	      }).then(function (userName) {\n	        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n	        // will be `'default name'`\n	      });\n	       findUser().then(function (user) {\n	        throw new Error('Found user, but still unhappy');\n	      }, function (reason) {\n	        throw new Error('`findUser` rejected and we're unhappy');\n	      }).then(function (value) {\n	        // never reached\n	      }, function (reason) {\n	        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n	        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n	      });\n	      ```\n	      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n	       ```js\n	      findUser().then(function (user) {\n	        throw new PedagogicalException('Upstream error');\n	      }).then(function (value) {\n	        // never reached\n	      }).then(function (value) {\n	        // never reached\n	      }, function (reason) {\n	        // The `PedgagocialException` is propagated all the way down to here\n	      });\n	      ```\n	       Assimilation\n	      ------------\n	       Sometimes the value you want to propagate to a downstream promise can only be\n	      retrieved asynchronously. This can be achieved by returning a promise in the\n	      fulfillment or rejection handler. The downstream promise will then be pending\n	      until the returned promise is settled. This is called *assimilation*.\n	       ```js\n	      findUser().then(function (user) {\n	        return findCommentsByAuthor(user);\n	      }).then(function (comments) {\n	        // The user's comments are now available\n	      });\n	      ```\n	       If the assimliated promise rejects, then the downstream promise will also reject.\n	       ```js\n	      findUser().then(function (user) {\n	        return findCommentsByAuthor(user);\n	      }).then(function (comments) {\n	        // If `findCommentsByAuthor` fulfills, we'll have the value here\n	      }, function (reason) {\n	        // If `findCommentsByAuthor` rejects, we'll have the reason here\n	      });\n	      ```\n	       Simple Example\n	      --------------\n	       Synchronous Example\n	       ```javascript\n	      var result;\n	       try {\n	        result = findResult();\n	        // success\n	      } catch(reason) {\n	        // failure\n	      }\n	      ```\n	       Errback Example\n	       ```js\n	      findResult(function(result, err){\n	        if (err) {\n	          // failure\n	        } else {\n	          // success\n	        }\n	      });\n	      ```\n	       Promise Example;\n	       ```javascript\n	      findResult().then(function(result){\n	        // success\n	      }, function(reason){\n	        // failure\n	      });\n	      ```\n	       Advanced Example\n	      --------------\n	       Synchronous Example\n	       ```javascript\n	      var author, books;\n	       try {\n	        author = findAuthor();\n	        books  = findBooksByAuthor(author);\n	        // success\n	      } catch(reason) {\n	        // failure\n	      }\n	      ```\n	       Errback Example\n	       ```js\n	       function foundBooks(books) {\n	       }\n	       function failure(reason) {\n	       }\n	       findAuthor(function(author, err){\n	        if (err) {\n	          failure(err);\n	          // failure\n	        } else {\n	          try {\n	            findBoooksByAuthor(author, function(books, err) {\n	              if (err) {\n	                failure(err);\n	              } else {\n	                try {\n	                  foundBooks(books);\n	                } catch(reason) {\n	                  failure(reason);\n	                }\n	              }\n	            });\n	          } catch(error) {\n	            failure(err);\n	          }\n	          // success\n	        }\n	      });\n	      ```\n	       Promise Example;\n	       ```javascript\n	      findAuthor().\n	        then(findBooksByAuthor).\n	        then(function(books){\n	          // found books\n	      }).catch(function(reason){\n	        // something went wrong\n	      });\n	      ```\n	       @method then\n	      @param {Function} onFulfilled\n	      @param {Function} onRejected\n	      Useful for tooling.\n	      @return {Promise}\n	    */\n	    then: lib$es6$promise$then$$default,\n\n	    /**\n	      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n	      as the catch block of a try/catch statement.\n	       ```js\n	      function findAuthor(){\n	        throw new Error('couldn't find that author');\n	      }\n	       // synchronous\n	      try {\n	        findAuthor();\n	      } catch(reason) {\n	        // something went wrong\n	      }\n	       // async with promises\n	      findAuthor().catch(function(reason){\n	        // something went wrong\n	      });\n	      ```\n	       @method catch\n	      @param {Function} onRejection\n	      Useful for tooling.\n	      @return {Promise}\n	    */\n	    'catch': function _catch(onRejection) {\n	      return this.then(null, onRejection);\n	    }\n	  };\n	  var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;\n	  function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {\n	    this._instanceConstructor = Constructor;\n	    this.promise = new Constructor(lib$es6$promise$$internal$$noop);\n\n	    if (Array.isArray(input)) {\n	      this._input = input;\n	      this.length = input.length;\n	      this._remaining = input.length;\n\n	      this._result = new Array(this.length);\n\n	      if (this.length === 0) {\n	        lib$es6$promise$$internal$$fulfill(this.promise, this._result);\n	      } else {\n	        this.length = this.length || 0;\n	        this._enumerate();\n	        if (this._remaining === 0) {\n	          lib$es6$promise$$internal$$fulfill(this.promise, this._result);\n	        }\n	      }\n	    } else {\n	      lib$es6$promise$$internal$$reject(this.promise, this._validationError());\n	    }\n	  }\n\n	  lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function () {\n	    return new Error('Array Methods must be provided an Array');\n	  };\n\n	  lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function () {\n	    var length = this.length;\n	    var input = this._input;\n\n	    for (var i = 0; this._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {\n	      this._eachEntry(input[i], i);\n	    }\n	  };\n\n	  lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function (entry, i) {\n	    var c = this._instanceConstructor;\n	    var resolve = c.resolve;\n\n	    if (resolve === lib$es6$promise$promise$resolve$$default) {\n	      var then = lib$es6$promise$$internal$$getThen(entry);\n\n	      if (then === lib$es6$promise$then$$default && entry._state !== lib$es6$promise$$internal$$PENDING) {\n	        this._settledAt(entry._state, i, entry._result);\n	      } else if (typeof then !== 'function') {\n	        this._remaining--;\n	        this._result[i] = entry;\n	      } else if (c === lib$es6$promise$promise$$default) {\n	        var promise = new c(lib$es6$promise$$internal$$noop);\n	        lib$es6$promise$$internal$$handleMaybeThenable(promise, entry, then);\n	        this._willSettleAt(promise, i);\n	      } else {\n	        this._willSettleAt(new c(function (resolve) {\n	          resolve(entry);\n	        }), i);\n	      }\n	    } else {\n	      this._willSettleAt(resolve(entry), i);\n	    }\n	  };\n\n	  lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function (state, i, value) {\n	    var promise = this.promise;\n\n	    if (promise._state === lib$es6$promise$$internal$$PENDING) {\n	      this._remaining--;\n\n	      if (state === lib$es6$promise$$internal$$REJECTED) {\n	        lib$es6$promise$$internal$$reject(promise, value);\n	      } else {\n	        this._result[i] = value;\n	      }\n	    }\n\n	    if (this._remaining === 0) {\n	      lib$es6$promise$$internal$$fulfill(promise, this._result);\n	    }\n	  };\n\n	  lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function (promise, i) {\n	    var enumerator = this;\n\n	    lib$es6$promise$$internal$$subscribe(promise, undefined, function (value) {\n	      enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);\n	    }, function (reason) {\n	      enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);\n	    });\n	  };\n	  function lib$es6$promise$polyfill$$polyfill() {\n	    var local;\n\n	    if (typeof global !== 'undefined') {\n	      local = global;\n	    } else if (typeof self !== 'undefined') {\n	      local = self;\n	    } else {\n	      try {\n	        local = Function('return this')();\n	      } catch (e) {\n	        throw new Error('polyfill failed because global object is unavailable in this environment');\n	      }\n	    }\n\n	    var P = local.Promise;\n\n	    if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {\n	      return;\n	    }\n\n	    local.Promise = lib$es6$promise$promise$$default;\n	  }\n	  var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;\n\n	  var lib$es6$promise$umd$$ES6Promise = {\n	    'Promise': lib$es6$promise$promise$$default,\n	    'polyfill': lib$es6$promise$polyfill$$default\n	  };\n\n	  /* global define:true module:true window: true */\n	  if (\"function\" === 'function' && __webpack_require__(201)['amd']) {\n	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {\n	      return lib$es6$promise$umd$$ES6Promise;\n	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n	  } else if (typeof module !== 'undefined' && module['exports']) {\n	    module['exports'] = lib$es6$promise$umd$$ES6Promise;\n	  } else if (typeof this !== 'undefined') {\n	    this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;\n	  }\n\n	  lib$es6$promise$polyfill$$default();\n	}).call(undefined);\n	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(199), (function() { return this; }()), __webpack_require__(16)(module)))\n\n/***/ },\n/* 199 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	// shim for using process in browser\n\n	var process = module.exports = {};\n	var queue = [];\n	var draining = false;\n	var currentQueue;\n	var queueIndex = -1;\n\n	function cleanUpNextTick() {\n	    draining = false;\n	    if (currentQueue.length) {\n	        queue = currentQueue.concat(queue);\n	    } else {\n	        queueIndex = -1;\n	    }\n	    if (queue.length) {\n	        drainQueue();\n	    }\n	}\n\n	function drainQueue() {\n	    if (draining) {\n	        return;\n	    }\n	    var timeout = setTimeout(cleanUpNextTick);\n	    draining = true;\n\n	    var len = queue.length;\n	    while (len) {\n	        currentQueue = queue;\n	        queue = [];\n	        while (++queueIndex < len) {\n	            if (currentQueue) {\n	                currentQueue[queueIndex].run();\n	            }\n	        }\n	        queueIndex = -1;\n	        len = queue.length;\n	    }\n	    currentQueue = null;\n	    draining = false;\n	    clearTimeout(timeout);\n	}\n\n	process.nextTick = function (fun) {\n	    var args = new Array(arguments.length - 1);\n	    if (arguments.length > 1) {\n	        for (var i = 1; i < arguments.length; i++) {\n	            args[i - 1] = arguments[i];\n	        }\n	    }\n	    queue.push(new Item(fun, args));\n	    if (queue.length === 1 && !draining) {\n	        setTimeout(drainQueue, 0);\n	    }\n	};\n\n	// v8 likes predictible objects\n	function Item(fun, array) {\n	    this.fun = fun;\n	    this.array = array;\n	}\n	Item.prototype.run = function () {\n	    this.fun.apply(null, this.array);\n	};\n	process.title = 'browser';\n	process.browser = true;\n	process.env = {};\n	process.argv = [];\n	process.version = ''; // empty string to avoid regexp issues\n	process.versions = {};\n\n	function noop() {}\n\n	process.on = noop;\n	process.addListener = noop;\n	process.once = noop;\n	process.off = noop;\n	process.removeListener = noop;\n	process.removeAllListeners = noop;\n	process.emit = noop;\n\n	process.binding = function (name) {\n	    throw new Error('process.binding is not supported');\n	};\n\n	process.cwd = function () {\n	    return '/';\n	};\n	process.chdir = function (dir) {\n	    throw new Error('process.chdir is not supported');\n	};\n	process.umask = function () {\n	    return 0;\n	};\n\n/***/ },\n/* 200 */\n/***/ function(module, exports) {\n\n	/* (ignored) */\n\n/***/ },\n/* 201 */\n/***/ function(module, exports) {\n\n	module.exports = function() { throw new Error(\"define cannot be used indirect\"); };\r\n\n\n/***/ },\n/* 202 */\n/***/ function(module, exports) {\n\n	// removed by extract-text-webpack-plugin\n	\"use strict\";\n\n/***/ },\n/* 203 */,\n/* 204 */,\n/* 205 */,\n/* 206 */,\n/* 207 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	// Libs\n\n	var _isEmpty2 = __webpack_require__(58);\n\n	var _isEmpty3 = _interopRequireDefault(_isEmpty2);\n\n	var _isArrayLike2 = __webpack_require__(46);\n\n	var _isArrayLike3 = _interopRequireDefault(_isArrayLike2);\n\n	var _isString2 = __webpack_require__(66);\n\n	var _isString3 = _interopRequireDefault(_isString2);\n\n	var _isObject2 = __webpack_require__(11);\n\n	var _isObject3 = _interopRequireDefault(_isObject2);\n\n	var _each2 = __webpack_require__(178);\n\n	var _each3 = _interopRequireDefault(_each2);\n\n	var _transform2 = __webpack_require__(89);\n\n	var _transform3 = _interopRequireDefault(_transform2);\n\n	var _isFunction2 = __webpack_require__(10);\n\n	var _isFunction3 = _interopRequireDefault(_isFunction2);\n\n	var _createElement = __webpack_require__(208);\n\n	var _createElement2 = _interopRequireDefault(_createElement);\n\n	var _diff = __webpack_require__(221);\n\n	var _diff2 = _interopRequireDefault(_diff);\n\n	var _h = __webpack_require__(226);\n\n	var _h2 = _interopRequireDefault(_h);\n\n	var _keyCodes = __webpack_require__(237);\n\n	var _keyCodes2 = _interopRequireDefault(_keyCodes);\n\n	var _patch = __webpack_require__(238);\n\n	var _patch2 = _interopRequireDefault(_patch);\n\n	var _VCache = __webpack_require__(243);\n\n	var _VCache2 = _interopRequireDefault(_VCache);\n\n	var _VArrayDirtyCompare = __webpack_require__(244);\n\n	var _VArrayDirtyCompare2 = _interopRequireDefault(_VArrayDirtyCompare);\n\n	var _VDirtyCompare = __webpack_require__(245);\n\n	var _VDirtyCompare2 = _interopRequireDefault(_VDirtyCompare);\n\n	var _VStateCompare = __webpack_require__(246);\n\n	var _VStateCompare2 = _interopRequireDefault(_VStateCompare);\n\n	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n	module.exports = function InspireDOM(tree) {\n	    var $activeDropTarget;\n	    var $dragElement;\n	    var $dragNode;\n	    var $target;\n	    var dragHandleOffset;\n	    var dropTargets = [];\n	    var isDragDropEnabled = false;\n	    var isMouseHeld = false;\n\n	    // Cache because we use in loops\n	    var isDynamic = (0, _isFunction3.default)(tree.config.data);\n	    var contextMenuChoices = tree.config.contextMenu;\n\n	    /**\n	     * Clear page text selection, primarily after a click event which\n	     * nativelt selects a range of text.\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    function clearSelection() {\n	        if (document.selection && document.selection.empty) {\n	            document.selection.empty();\n	        } else if (window.getSelection) {\n	            window.getSelection().removeAllRanges();\n	        }\n	    }\n\n	    /**\n	     * Closes any open context menu.\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    function closeContextMenu() {\n	        if (contextMenuNode) {\n	            contextMenuNode.parentNode.removeChild(contextMenuNode);\n	            contextMenuNode = null;\n	        }\n	    };\n\n	    /**\n	     * Creates a tri-state checkbox input.\n	     *\n	     * @param {TreeNode} node Node object.\n	     * @return {object} Input node element.\n	     */\n	    function createCheckbox(node) {\n	        return new _VCache2.default({\n	            selected: node.selected(),\n	            indeterminate: node.itree.state.indeterminate\n	        }, _VStateCompare2.default, function () {\n	            return (0, _h2.default)('input', {\n	                attributes: {\n	                    type: 'checkbox'\n	                },\n	                checked: node.selected(),\n	                indeterminate: node.itree.state.indeterminate,\n	                onclick: function onclick(event) {\n	                    node.toggleSelect();\n\n	                    // Emit\n	                    tree.emit('node.click', event, node);\n	                }\n	            });\n	        });\n	    }\n\n	    /**\n	     * Creates a context menu unordered list.\n	     *\n	     * @private\n	     * @param {array} choices Array of choice objects.\n	     * @param {object} node Clicked node.\n	     * @return {object} Unordered list node.\n	     */\n	    function createContextMenu(choices, node) {\n	        return (0, _h2.default)('ul.itree-menu', {\n	            onclick: function onclick(event) {\n	                event.stopPropagation();\n	            }\n	        }, (0, _transform3.default)(choices, function (contents, choice) {\n	            contents.push(createContextMenuListItem(choice, node));\n	        }));\n	    }\n\n	    /**\n	     * Creates a context menu list item.\n	     *\n	     * @private\n	     * @param {object} choice Choice object.\n	     * @param {object} node Node object.\n	     * @return {object} List item node.\n	     */\n	    function createContextMenuListItem(choice, node) {\n	        return (0, _h2.default)('li', [[(0, _h2.default)('a', {\n	            onclick: function onclick(event) {\n	                choice.handler(event, node, closeContextMenu);\n	            }\n	        }, choice.text)]]);\n	    }\n\n	    /**\n	     * Creates a draggable element by cloning a target,\n	     * registers a listener for mousemove.\n	     *\n	     * @private\n	     * @param {HTMLElement} element DOM Element.\n	     * @param {Event} event Click event to use.\n	     * @return {void}\n	     */\n	    function createDraggableElement(element, event) {\n	        $dragNode = nodeFromTitleDOMElement(element);\n\n	        var offset = getAbsoluteOffset(element);\n	        var diffX = event.clientX - offset.left;\n	        var diffY = event.clientY - offset.top;\n\n	        dragHandleOffset = { left: diffX, top: diffY };\n\n	        $dragElement = element.cloneNode(true);\n	        $dragElement.className += ' dragging';\n	        $dragElement.style.top = offset.top + 'px';\n	        $dragElement.style.left = offset.left + 'px';\n	        $target.appendChild($dragElement);\n	    }\n\n	    /**\n	     * Creates a list item node when a dynamic node returns no children.\n	     *\n	     * Cannot be clicked or expanded.\n	     *\n	     * @private\n	     * @return {object} List Item node.\n	     */\n	    function createEmptyListItemNode() {\n	        return new _VCache2.default({}, _VStateCompare2.default, function () {\n	            return (0, _h2.default)('ol', [(0, _h2.default)('li', [(0, _h2.default)('span.title.icon.icon-file-empty.empty', ['No Results'])])]);\n	        });\n	    };\n\n	    /**\n	     * Creates a list item node for a specific data node.\n	     *\n	     * @private\n	     * @param {object} node Data node.\n	     * @return {object} List Item node.\n	     */\n	    function createListItemNode(node) {\n	        return new _VCache2.default({\n	            dirty: node.itree.dirty\n	        }, _VDirtyCompare2.default, function () {\n	            node.itree.dirty = false;\n\n	            var contents = [createTitleContainer(node), (0, _h2.default)('div.wholerow')];\n\n	            if (node.hasChildren()) {\n	                contents.push(createOrderedList(node.children));\n	            } else if (isDynamic) {\n	                contents.push(createEmptyListItemNode());\n	            }\n\n	            // Add classes for any enabled states\n	            // http://jsperf.com/object-keys-to-classnames\n	            var classNames = '.';\n	            var state = node.itree.state;\n	            (0, _each3.default)(Object.keys(state), function (key) {\n	                if (state[key]) {\n	                    classNames += '.' + key;\n	                }\n	            });\n\n	            if (!node.hidden() && node.removed()) {\n	                classNames += '.hidden';\n	            }\n\n	            var attributes = node.itree.li.attributes || {};\n\n	            // Force internal-use attributes\n	            attributes['data-uid'] = node.id;\n\n	            return (0, _h2.default)('li' + classNames, { attributes: attributes }, contents);\n	        });\n	    };\n\n	    /**\n	     * Creates list item nodes for an array of data nodes.\n	     *\n	     * @private\n	     * @param {array} nodes Data nodes.\n	     * @return {array} Array of List Item nodes.\n	     */\n	    function createListItemNodes(nodes) {\n	        var domNodes = [];\n\n	        (0, _each3.default)(nodes, function (node) {\n	            // We can't just remove the node if soft-removed\n	            // https://github.com/Matt-Esch/virtual-dom/issues/333\n	            domNodes.push(createListItemNode(node));\n	        });\n\n	        return domNodes;\n	    };\n\n	    /**\n	     * Creates an ordered list containing list item for\n	     * provided data nodes.\n	     *\n	     * @private\n	     * @param {array} nodes Data nodes.\n	     * @return {object} Oredered List node.\n	     */\n	    function createOrderedList(nodes) {\n	        return new _VCache2.default({\n	            nodes: nodes,\n	            nodeCount: nodes.length\n	        }, _VArrayDirtyCompare2.default, function () {\n	            return (0, _h2.default)('ol', createListItemNodes(nodes));\n	        });\n	    };\n\n	    /**\n	     * Creates an anchor around the node title.\n	     *\n	     * @private\n	     * @param {object} node Node object.\n	     * @param {boolean} hasVisibleChildren If this node has visible children.\n	     * @return {object} Anchor node.\n	     */\n	    function createTitleAnchor(node, hasVisibleChildren) {\n	        return new _VCache2.default({\n	            icon: node.itree.icon,\n	            text: node.text,\n	            hasVisibleChildren: hasVisibleChildren\n	        }, _VStateCompare2.default, function (previous, current) {\n	            var classNames = ['title', 'icon'];\n\n	            if (!tree.config.showCheckboxes) {\n	                classNames.push(current.state.icon || (hasVisibleChildren ? 'icon-folder' : 'icon-file-empty'));\n	            }\n\n	            return (0, _h2.default)('a.' + classNames.join('.'), {\n	                attributes: {\n	                    unselectable: 'on'\n	                },\n	                oncontextmenu: function oncontextmenu(event) {\n	                    if (contextMenuChoices) {\n	                        renderContextMenu(event, node);\n\n	                        // Emit\n	                        tree.emit('node.contextmenu', event, node);\n	                    }\n	                },\n	                onclick: function onclick(event) {\n	                    event.preventDefault();\n\n	                    if (event.metaKey || event.ctrlKey || event.shiftKey) {\n	                        tree.disableDeselection();\n	                    }\n\n	                    if (event.shiftKey) {\n	                        clearSelection();\n\n	                        var selected = tree.lastSelectedNode();\n	                        if (selected) {\n	                            tree.selectBetween.apply(tree, tree.boundingNodes(selected, node));\n	                        }\n	                    }\n\n	                    node.toggleSelect();\n	                    tree.enableDeselection();\n\n	                    // Emit\n	                    tree.emit('node.click', event, node);\n	                },\n	                ondblclick: function ondblclick(event) {\n	                    // // Clear text selection which occurs on double click\n	                    clearSelection();\n\n	                    node.toggleCollapse();\n\n	                    // Emit\n	                    tree.emit('node.dblclick', event, node);\n	                },\n	                onmousedown: function onmousedown() {\n	                    if (isDragDropEnabled) {\n	                        isMouseHeld = true;\n	                    }\n	                }\n	            }, [current.state.text]);\n	        });\n	    }\n\n	    /**\n	     * Creates a container element for the title/toggle/icons.\n	     *\n	     * @private\n	     * @param {string} node Node object.\n	     * @return {object} Container node.\n	     */\n	    function createTitleContainer(node) {\n	        var hasVisibleChildren = !isDynamic ? node.hasVisibleChildren() : Boolean(node.children);\n\n	        return new _VCache2.default({\n	            hasVisibleChildren: hasVisibleChildren,\n	            collapsed: node.collapsed(),\n	            selected: node.selected(),\n	            indeterminate: node.itree.state.indeterminate\n	        }, _VStateCompare2.default, function () {\n	            var contents = [];\n\n	            if (hasVisibleChildren) {\n	                contents.push(createToggleAnchor(node));\n	            }\n\n	            if (tree.config.showCheckboxes) {\n	                contents.push(createCheckbox(node));\n	            }\n\n	            contents.push(createTitleAnchor(node, hasVisibleChildren));\n\n	            return (0, _h2.default)('div.title-wrap', contents);\n	        });\n	    };\n\n	    /**\n	     * Creates an anchor used for expanding and collapsing a node.\n	     *\n	     * @private\n	     * @param {object} node Node object.\n	     * @return {object} Anchor node.\n	     */\n	    function createToggleAnchor(node) {\n	        return new _VCache2.default({\n	            collapsed: node.collapsed()\n	        }, _VStateCompare2.default, function (previous, current) {\n	            var caret = current.state.collapsed ? '.icon-caret' : '.icon-caret-down';\n\n	            return (0, _h2.default)('a.toggle.icon' + caret, { onclick: function onclick() {\n	                    node.toggleCollapse();\n	                } });\n	        });\n	    }\n\n	    /**\n	     * Calculcates the absolute offset values of an element.\n	     *\n	     * @private\n	     * @param {HTMLElement} element HTML Element.\n	     * @return {object} Object with top/left values.\n	     */\n	    function getAbsoluteOffset(element) {\n	        var x = 0;\n	        var y = 0;\n\n	        while (element && !isNaN(element.offsetLeft) && !isNaN(element.offsetTop)) {\n	            x += element.offsetLeft - element.scrollLeft;\n	            y += element.offsetTop - element.scrollTop;\n	            element = element.offsetParent;\n	        }\n\n	        // IE10 stores scroll values on documentElement instead.\n	        // Due to unit testing, document may not always exist\n	        if (typeof document !== 'undefined') {\n	            x -= document.documentElement.scrollLeft;\n	            y -= document.documentElement.scrollTop;\n	        }\n\n	        return { top: y, left: x };\n	    }\n\n	    /**\n	     * Get an HTMLElement through various means:\n	     * An element, jquery object, or a selector.\n	     *\n	     * @private\n	     * @param {mixed} target Element, jQuery selector, selector.\n	     * @return {HTMLElement} Matching element.\n	     */\n	    function getElement(target) {\n	        var $element;\n\n	        if (target instanceof HTMLElement) {\n	            $element = target;\n	        } else if ((0, _isObject3.default)(target) && (0, _isObject3.default)(target[0])) {\n	            $element = target[0];\n	        } else if ((0, _isString3.default)(target)) {\n	            var match = document.querySelector(target);\n	            if (match) {\n	                $element = match;\n	            }\n	        }\n\n	        return $element;\n	    }\n\n	    /**\n	     * Helper method for obtaining the data-uid from a DOM element.\n	     *\n	     * @private\n	     * @param {HTMLElement} element HTML Element.\n	     * @return {object} Node object\n	     */\n	    function nodeFromTitleDOMElement(element) {\n	        var uid = element.parentNode.parentNode.getAttribute('data-uid');\n	        return tree.node(uid);\n	    }\n\n	    /**\n	     * Helper method to find a scrollable ancestor element.\n	     *\n	     * @param  {HTMLElement} $element Starting element.\n	     * @return {HTMLElement} Scrollable element.\n	     */\n	    function getScrollableAncestor($element) {\n	        if ($element instanceof Element) {\n	            var style = getComputedStyle($element);\n	            if (style.overflow !== 'auto' && $element.parentNode) {\n	                $element = getScrollableAncestor($element.parentNode);\n	            }\n	        }\n\n	        return $element;\n	    }\n\n	    /**\n	     * Listen to keyboard event for navigation.\n	     *\n	     * @private\n	     * @param {Event} event Keyboard event.\n	     * @return {void}\n	     */\n	    function keyboardListener(event) {\n	        // Navigation\n	        var focusedNode = tree.focused();\n	        if (focusedNode) {\n	            focusedNode = focusedNode[0];\n	            switch (event.which) {\n	                case _keyCodes2.default.DOWN:\n	                    moveFocusDownFrom(focusedNode);\n	                    break;\n	                case _keyCodes2.default.ENTER:\n	                    focusedNode.toggleSelect();\n	                    break;\n	                case _keyCodes2.default.LEFT:\n	                    focusedNode.collapse();\n	                    moveFocusUpFrom(focusedNode);\n	                    break;\n	                case _keyCodes2.default.RIGHT:\n	                    focusedNode.expand();\n	                    moveFocusDownFrom(focusedNode);\n	                    break;\n	                case _keyCodes2.default.UP:\n	                    moveFocusUpFrom(focusedNode);\n	                    break;\n	                default:\n	            }\n	        }\n	    }\n\n	    /**\n	     * Listener for mouse move events for drag and drop.\n	     * Is removed automatically on mouse up.\n	     *\n	     * @private\n	     * @param {Event} event Mouse move event.\n	     * @return {void}\n	     */\n	    function mouseMoveListener(event) {\n	        if (isMouseHeld && !$dragElement) {\n	            createDraggableElement(event.target, event);\n	        } else if ($dragElement) {\n	            event.preventDefault();\n	            event.stopPropagation();\n\n	            var x = event.clientX - dragHandleOffset.left;\n	            var y = event.clientY - dragHandleOffset.top;\n\n	            $dragElement.style.left = x + 'px';\n	            $dragElement.style.top = y + 'px';\n\n	            var validTarget;\n	            (0, _each3.default)(dropTargets, function (target) {\n	                var rect = target.getBoundingClientRect();\n\n	                if (event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom) {\n	                    validTarget = target;\n	                    return false;\n	                }\n	            });\n\n	            // If new target found for the first time\n	            if (!$activeDropTarget && validTarget && validTarget.className.indexOf('drop-target') === -1) {\n	                validTarget.className += ' drop-target';\n	            }\n\n	            $activeDropTarget = validTarget;\n	        }\n	    };\n\n	    /**\n	     * Handle mouse up events for dragged elements.\n	     *\n	     * @return {void}\n	     */\n	    function mouseUpListener() {\n	        isMouseHeld = false;\n\n	        if ($dragElement) {\n	            $dragElement.parentNode.removeChild($dragElement);\n\n	            if ($activeDropTarget && $activeDropTarget.inspireTree) {\n	                var newNode = $activeDropTarget.inspireTree.addNode($dragNode.copyHierarchy().export());\n\n	                tree.emit('node.dropout', $dragNode, $activeDropTarget);\n	                $activeDropTarget.inspireTree.emit('node.dropin', newNode);\n	            }\n	        }\n\n	        if ($activeDropTarget) {\n	            $activeDropTarget.className = $activeDropTarget.className.replace('drop-target', '');\n	        }\n\n	        $dragNode = null;\n	        $dragElement = null;\n	        $activeDropTarget = null;\n	    }\n\n	    /**\n	     * Move select down the visible tree from a starting node.\n	     *\n	     * @private\n	     * @param {object} startingNode Node object.\n	     * @return {void}\n	     */\n	    function moveFocusDownFrom(startingNode) {\n	        var next = startingNode.nextVisibleNode();\n	        if (next) {\n	            next.focus();\n	        }\n	    }\n\n	    /**\n	     * Move select up the visible tree from a starting node.\n	     *\n	     * @private\n	     * @param {object} startingNode Node object.\n	     * @return {void}\n	     */\n	    function moveFocusUpFrom(startingNode) {\n	        var prev = startingNode.previousVisibleNode();\n	        if (prev) {\n	            prev.focus();\n	        }\n	    }\n\n	    var contextMenuNode;\n\n	    /**\n	     * Renders a context menu for a given contextmenu click and node.\n	     *\n	     * @private\n	     * @param {object} event Click event.\n	     * @param {object} node Clicked node object.\n	     * @return {void}\n	     */\n	    function renderContextMenu(event, node) {\n	        var choices = contextMenuChoices;\n\n	        if ((0, _isArrayLike3.default)(choices)) {\n	            event.preventDefault();\n\n	            if (!contextMenuNode) {\n	                var ul = createContextMenu(choices, node);\n	                contextMenuNode = (0, _createElement2.default)(ul);\n	                document.body.appendChild(contextMenuNode);\n	            }\n\n	            contextMenuNode.style.top = event.clientY + 'px';\n	            contextMenuNode.style.left = event.clientX + 'px';\n	        }\n	    }\n\n	    // Cache our root node, so we can patch re-render in the future.\n	    var rootNode;\n	    var ol;\n\n	    /**\n	     * Triggers rendering for the given node array.\n	     *\n	     * @category DOM\n	     * @private\n	     * @param {array} nodes Array of node objects.\n	     * @return {void}\n	     */\n	    function renderNodes(nodes) {\n	        var newOl = createOrderedList(nodes || tree.nodes(), true);\n\n	        if (!rootNode) {\n	            rootNode = (0, _createElement2.default)(newOl);\n	            $target.appendChild(rootNode);\n	        } else {\n	            var patches = (0, _diff2.default)(ol, newOl);\n	            rootNode = (0, _patch2.default)(rootNode, patches);\n	        }\n\n	        ol = newOl;\n	    };\n\n	    var dom = this;\n	    var batching = 0;\n\n	    /**\n	     * Apply pending data changes to the DOM.\n	     *\n	     * Will skip rendering as long as any calls\n	     * to `batch` have yet to be resolved,\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    dom.applyChanges = function () {\n	        // Never rerender when until batch complete\n	        if (batching > 0) {\n	            return;\n	        }\n\n	        renderNodes();\n	    };\n\n	    /**\n	     * Attaches to the DOM element for rendering.\n	     *\n	     * @category DOM\n	     * @private\n	     * @param {HTMLElement} target Element, selector, or jQuery-like object.\n	     * @return {void}\n	     */\n	    dom.attach = function (target) {\n	        $target = getElement(target);\n\n	        if (!$target) {\n	            throw new Error('No valid element to attach to.');\n	        }\n\n	        $target.className += ' inspire-tree';\n	        $target.setAttribute('tabindex', tree.config.tabindex || -1);\n\n	        // Handle keyboard interaction\n	        $target.addEventListener('keyup', keyboardListener);\n\n	        if (contextMenuChoices) {\n	            document.body.addEventListener('click', function () {\n	                closeContextMenu();\n	            });\n	        }\n\n	        var dragTargetSelectors = tree.config.dragTargets;\n	        if (!(0, _isEmpty3.default)(dragTargetSelectors)) {\n	            (0, _each3.default)(dragTargetSelectors, function (selector) {\n	                var dropTarget = getElement(selector);\n\n	                if (dropTarget) {\n	                    dropTargets.push(dropTarget);\n	                } else {\n	                    throw new Error('No valid element found for drop target ' + selector);\n	                }\n	            });\n	        }\n\n	        isDragDropEnabled = dropTargets.length > 0;\n\n	        if (isDragDropEnabled) {\n	            document.addEventListener('mouseup', mouseUpListener);\n	            document.addEventListener('mousemove', mouseMoveListener);\n	        }\n\n	        $target.addEventListener('blur', function () {\n	            tree.focused().blur();\n	        });\n\n	        $target.inspireTree = tree;\n	    };\n\n	    /**\n	     * Disable rendering in preparation for multiple changes.\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    dom.batch = function () {\n	        if (batching < 0) {\n	            batching = 0;\n	        }\n\n	        batching++;\n	    };\n\n	    /**\n	     * Permit rerendering of batched changes.\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    dom.end = function () {\n	        batching--;\n\n	        if (batching === 0) {\n	            dom.applyChanges();\n	        }\n	    };\n\n	    /**\n	     * Scroll the first selected node into view.\n	     *\n	     * @category DOM\n	     * @private\n	     * @return {void}\n	     */\n	    dom.scrollSelectedIntoView = function () {\n	        var $tree = document.querySelector('.inspire-tree');\n	        var $selected = $tree.querySelector('.selected');\n\n	        if ($selected) {\n	            var $container = getScrollableAncestor($tree);\n\n	            if ($container) {\n	                $container.scrollTop = $selected.offsetTop;\n	            }\n	        }\n	    };\n\n	    return dom;\n	};\n\n/***/ },\n/* 208 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var createElement = __webpack_require__(209);\n\n	module.exports = createElement;\n\n/***/ },\n/* 209 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var document = __webpack_require__(210);\n\n	var applyProperties = __webpack_require__(212);\n\n	var isVNode = __webpack_require__(215);\n	var isVText = __webpack_require__(217);\n	var isWidget = __webpack_require__(218);\n	var handleThunk = __webpack_require__(219);\n\n	module.exports = createElement;\n\n	function createElement(vnode, opts) {\n	    var doc = opts ? opts.document || document : document;\n	    var warn = opts ? opts.warn : null;\n\n	    vnode = handleThunk(vnode).a;\n\n	    if (isWidget(vnode)) {\n	        return vnode.init();\n	    } else if (isVText(vnode)) {\n	        return doc.createTextNode(vnode.text);\n	    } else if (!isVNode(vnode)) {\n	        if (warn) {\n	            warn(\"Item is not a valid virtual dom node\", vnode);\n	        }\n	        return null;\n	    }\n\n	    var node = vnode.namespace === null ? doc.createElement(vnode.tagName) : doc.createElementNS(vnode.namespace, vnode.tagName);\n\n	    var props = vnode.properties;\n	    applyProperties(node, props);\n\n	    var children = vnode.children;\n\n	    for (var i = 0; i < children.length; i++) {\n	        var childNode = createElement(children[i], opts);\n	        if (childNode) {\n	            node.appendChild(childNode);\n	        }\n	    }\n\n	    return node;\n	}\n\n/***/ },\n/* 210 */\n/***/ function(module, exports, __webpack_require__) {\n\n	/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n	var topLevel = typeof global !== 'undefined' ? global : typeof window !== 'undefined' ? window : {};\n	var minDoc = __webpack_require__(211);\n\n	if (typeof document !== 'undefined') {\n	    module.exports = document;\n	} else {\n	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];\n\n	    if (!doccy) {\n	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;\n	    }\n\n	    module.exports = doccy;\n	}\n	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 211 */\n/***/ function(module, exports) {\n\n	/* (ignored) */\n\n/***/ },\n/* 212 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var isObject = __webpack_require__(213);\n	var isHook = __webpack_require__(214);\n\n	module.exports = applyProperties;\n\n	function applyProperties(node, props, previous) {\n	    for (var propName in props) {\n	        var propValue = props[propName];\n\n	        if (propValue === undefined) {\n	            removeProperty(node, propName, propValue, previous);\n	        } else if (isHook(propValue)) {\n	            removeProperty(node, propName, propValue, previous);\n	            if (propValue.hook) {\n	                propValue.hook(node, propName, previous ? previous[propName] : undefined);\n	            }\n	        } else {\n	            if (isObject(propValue)) {\n	                patchObject(node, props, previous, propName, propValue);\n	            } else {\n	                node[propName] = propValue;\n	            }\n	        }\n	    }\n	}\n\n	function removeProperty(node, propName, propValue, previous) {\n	    if (previous) {\n	        var previousValue = previous[propName];\n\n	        if (!isHook(previousValue)) {\n	            if (propName === \"attributes\") {\n	                for (var attrName in previousValue) {\n	                    node.removeAttribute(attrName);\n	                }\n	            } else if (propName === \"style\") {\n	                for (var i in previousValue) {\n	                    node.style[i] = \"\";\n	                }\n	            } else if (typeof previousValue === \"string\") {\n	                node[propName] = \"\";\n	            } else {\n	                node[propName] = null;\n	            }\n	        } else if (previousValue.unhook) {\n	            previousValue.unhook(node, propName, propValue);\n	        }\n	    }\n	}\n\n	function patchObject(node, props, previous, propName, propValue) {\n	    var previousValue = previous ? previous[propName] : undefined;\n\n	    // Set attributes\n	    if (propName === \"attributes\") {\n	        for (var attrName in propValue) {\n	            var attrValue = propValue[attrName];\n\n	            if (attrValue === undefined) {\n	                node.removeAttribute(attrName);\n	            } else {\n	                node.setAttribute(attrName, attrValue);\n	            }\n	        }\n\n	        return;\n	    }\n\n	    if (previousValue && isObject(previousValue) && getPrototype(previousValue) !== getPrototype(propValue)) {\n	        node[propName] = propValue;\n	        return;\n	    }\n\n	    if (!isObject(node[propName])) {\n	        node[propName] = {};\n	    }\n\n	    var replacer = propName === \"style\" ? \"\" : undefined;\n\n	    for (var k in propValue) {\n	        var value = propValue[k];\n	        node[propName][k] = value === undefined ? replacer : value;\n	    }\n	}\n\n	function getPrototype(value) {\n	    if (Object.getPrototypeOf) {\n	        return Object.getPrototypeOf(value);\n	    } else if (value.__proto__) {\n	        return value.__proto__;\n	    } else if (value.constructor) {\n	        return value.constructor.prototype;\n	    }\n	}\n\n/***/ },\n/* 213 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\n	module.exports = function isObject(x) {\n		return (typeof x === \"undefined\" ? \"undefined\" : _typeof(x)) === \"object\" && x !== null;\n	};\n\n/***/ },\n/* 214 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	module.exports = isHook;\n\n	function isHook(hook) {\n	  return hook && (typeof hook.hook === \"function\" && !hook.hasOwnProperty(\"hook\") || typeof hook.unhook === \"function\" && !hook.hasOwnProperty(\"unhook\"));\n	}\n\n/***/ },\n/* 215 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var version = __webpack_require__(216);\n\n	module.exports = isVirtualNode;\n\n	function isVirtualNode(x) {\n	    return x && x.type === \"VirtualNode\" && x.version === version;\n	}\n\n/***/ },\n/* 216 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	module.exports = \"2\";\n\n/***/ },\n/* 217 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var version = __webpack_require__(216);\n\n	module.exports = isVirtualText;\n\n	function isVirtualText(x) {\n	    return x && x.type === \"VirtualText\" && x.version === version;\n	}\n\n/***/ },\n/* 218 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	module.exports = isWidget;\n\n	function isWidget(w) {\n	    return w && w.type === \"Widget\";\n	}\n\n/***/ },\n/* 219 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var isVNode = __webpack_require__(215);\n	var isVText = __webpack_require__(217);\n	var isWidget = __webpack_require__(218);\n	var isThunk = __webpack_require__(220);\n\n	module.exports = handleThunk;\n\n	function handleThunk(a, b) {\n	    var renderedA = a;\n	    var renderedB = b;\n\n	    if (isThunk(b)) {\n	        renderedB = renderThunk(b, a);\n	    }\n\n	    if (isThunk(a)) {\n	        renderedA = renderThunk(a, null);\n	    }\n\n	    return {\n	        a: renderedA,\n	        b: renderedB\n	    };\n	}\n\n	function renderThunk(thunk, previous) {\n	    var renderedThunk = thunk.vnode;\n\n	    if (!renderedThunk) {\n	        renderedThunk = thunk.vnode = thunk.render(previous);\n	    }\n\n	    if (!(isVNode(renderedThunk) || isVText(renderedThunk) || isWidget(renderedThunk))) {\n	        throw new Error(\"thunk did not return a valid node\");\n	    }\n\n	    return renderedThunk;\n	}\n\n/***/ },\n/* 220 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	module.exports = isThunk;\n\n	function isThunk(t) {\n	    return t && t.type === \"Thunk\";\n	}\n\n/***/ },\n/* 221 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var diff = __webpack_require__(222);\n\n	module.exports = diff;\n\n/***/ },\n/* 222 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var isArray = __webpack_require__(223);\n\n	var VPatch = __webpack_require__(224);\n	var isVNode = __webpack_require__(215);\n	var isVText = __webpack_require__(217);\n	var isWidget = __webpack_require__(218);\n	var isThunk = __webpack_require__(220);\n	var handleThunk = __webpack_require__(219);\n\n	var diffProps = __webpack_require__(225);\n\n	module.exports = diff;\n\n	function diff(a, b) {\n	    var patch = { a: a };\n	    walk(a, b, patch, 0);\n	    return patch;\n	}\n\n	function walk(a, b, patch, index) {\n	    if (a === b) {\n	        return;\n	    }\n\n	    var apply = patch[index];\n	    var applyClear = false;\n\n	    if (isThunk(a) || isThunk(b)) {\n	        thunks(a, b, patch, index);\n	    } else if (b == null) {\n\n	        // If a is a widget we will add a remove patch for it\n	        // Otherwise any child widgets/hooks must be destroyed.\n	        // This prevents adding two remove patches for a widget.\n	        if (!isWidget(a)) {\n	            clearState(a, patch, index);\n	            apply = patch[index];\n	        }\n\n	        apply = appendPatch(apply, new VPatch(VPatch.REMOVE, a, b));\n	    } else if (isVNode(b)) {\n	        if (isVNode(a)) {\n	            if (a.tagName === b.tagName && a.namespace === b.namespace && a.key === b.key) {\n	                var propsPatch = diffProps(a.properties, b.properties);\n	                if (propsPatch) {\n	                    apply = appendPatch(apply, new VPatch(VPatch.PROPS, a, propsPatch));\n	                }\n	                apply = diffChildren(a, b, patch, apply, index);\n	            } else {\n	                apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n	                applyClear = true;\n	            }\n	        } else {\n	            apply = appendPatch(apply, new VPatch(VPatch.VNODE, a, b));\n	            applyClear = true;\n	        }\n	    } else if (isVText(b)) {\n	        if (!isVText(a)) {\n	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n	            applyClear = true;\n	        } else if (a.text !== b.text) {\n	            apply = appendPatch(apply, new VPatch(VPatch.VTEXT, a, b));\n	        }\n	    } else if (isWidget(b)) {\n	        if (!isWidget(a)) {\n	            applyClear = true;\n	        }\n\n	        apply = appendPatch(apply, new VPatch(VPatch.WIDGET, a, b));\n	    }\n\n	    if (apply) {\n	        patch[index] = apply;\n	    }\n\n	    if (applyClear) {\n	        clearState(a, patch, index);\n	    }\n	}\n\n	function diffChildren(a, b, patch, apply, index) {\n	    var aChildren = a.children;\n	    var orderedSet = reorder(aChildren, b.children);\n	    var bChildren = orderedSet.children;\n\n	    var aLen = aChildren.length;\n	    var bLen = bChildren.length;\n	    var len = aLen > bLen ? aLen : bLen;\n\n	    for (var i = 0; i < len; i++) {\n	        var leftNode = aChildren[i];\n	        var rightNode = bChildren[i];\n	        index += 1;\n\n	        if (!leftNode) {\n	            if (rightNode) {\n	                // Excess nodes in b need to be added\n	                apply = appendPatch(apply, new VPatch(VPatch.INSERT, null, rightNode));\n	            }\n	        } else {\n	            walk(leftNode, rightNode, patch, index);\n	        }\n\n	        if (isVNode(leftNode) && leftNode.count) {\n	            index += leftNode.count;\n	        }\n	    }\n\n	    if (orderedSet.moves) {\n	        // Reorder nodes last\n	        apply = appendPatch(apply, new VPatch(VPatch.ORDER, a, orderedSet.moves));\n	    }\n\n	    return apply;\n	}\n\n	function clearState(vNode, patch, index) {\n	    // TODO: Make this a single walk, not two\n	    unhook(vNode, patch, index);\n	    destroyWidgets(vNode, patch, index);\n	}\n\n	// Patch records for all destroyed widgets must be added because we need\n	// a DOM node reference for the destroy function\n	function destroyWidgets(vNode, patch, index) {\n	    if (isWidget(vNode)) {\n	        if (typeof vNode.destroy === \"function\") {\n	            patch[index] = appendPatch(patch[index], new VPatch(VPatch.REMOVE, vNode, null));\n	        }\n	    } else if (isVNode(vNode) && (vNode.hasWidgets || vNode.hasThunks)) {\n	        var children = vNode.children;\n	        var len = children.length;\n	        for (var i = 0; i < len; i++) {\n	            var child = children[i];\n	            index += 1;\n\n	            destroyWidgets(child, patch, index);\n\n	            if (isVNode(child) && child.count) {\n	                index += child.count;\n	            }\n	        }\n	    } else if (isThunk(vNode)) {\n	        thunks(vNode, null, patch, index);\n	    }\n	}\n\n	// Create a sub-patch for thunks\n	function thunks(a, b, patch, index) {\n	    var nodes = handleThunk(a, b);\n	    var thunkPatch = diff(nodes.a, nodes.b);\n	    if (hasPatches(thunkPatch)) {\n	        patch[index] = new VPatch(VPatch.THUNK, null, thunkPatch);\n	    }\n	}\n\n	function hasPatches(patch) {\n	    for (var index in patch) {\n	        if (index !== \"a\") {\n	            return true;\n	        }\n	    }\n\n	    return false;\n	}\n\n	// Execute hooks when two nodes are identical\n	function unhook(vNode, patch, index) {\n	    if (isVNode(vNode)) {\n	        if (vNode.hooks) {\n	            patch[index] = appendPatch(patch[index], new VPatch(VPatch.PROPS, vNode, undefinedKeys(vNode.hooks)));\n	        }\n\n	        if (vNode.descendantHooks || vNode.hasThunks) {\n	            var children = vNode.children;\n	            var len = children.length;\n	            for (var i = 0; i < len; i++) {\n	                var child = children[i];\n	                index += 1;\n\n	                unhook(child, patch, index);\n\n	                if (isVNode(child) && child.count) {\n	                    index += child.count;\n	                }\n	            }\n	        }\n	    } else if (isThunk(vNode)) {\n	        thunks(vNode, null, patch, index);\n	    }\n	}\n\n	function undefinedKeys(obj) {\n	    var result = {};\n\n	    for (var key in obj) {\n	        result[key] = undefined;\n	    }\n\n	    return result;\n	}\n\n	// List diff, naive left to right reordering\n	function reorder(aChildren, bChildren) {\n	    // O(M) time, O(M) memory\n	    var bChildIndex = keyIndex(bChildren);\n	    var bKeys = bChildIndex.keys;\n	    var bFree = bChildIndex.free;\n\n	    if (bFree.length === bChildren.length) {\n	        return {\n	            children: bChildren,\n	            moves: null\n	        };\n	    }\n\n	    // O(N) time, O(N) memory\n	    var aChildIndex = keyIndex(aChildren);\n	    var aKeys = aChildIndex.keys;\n	    var aFree = aChildIndex.free;\n\n	    if (aFree.length === aChildren.length) {\n	        return {\n	            children: bChildren,\n	            moves: null\n	        };\n	    }\n\n	    // O(MAX(N, M)) memory\n	    var newChildren = [];\n\n	    var freeIndex = 0;\n	    var freeCount = bFree.length;\n	    var deletedItems = 0;\n\n	    // Iterate through a and match a node in b\n	    // O(N) time,\n	    for (var i = 0; i < aChildren.length; i++) {\n	        var aItem = aChildren[i];\n	        var itemIndex;\n\n	        if (aItem.key) {\n	            if (bKeys.hasOwnProperty(aItem.key)) {\n	                // Match up the old keys\n	                itemIndex = bKeys[aItem.key];\n	                newChildren.push(bChildren[itemIndex]);\n	            } else {\n	                // Remove old keyed items\n	                itemIndex = i - deletedItems++;\n	                newChildren.push(null);\n	            }\n	        } else {\n	            // Match the item in a with the next free item in b\n	            if (freeIndex < freeCount) {\n	                itemIndex = bFree[freeIndex++];\n	                newChildren.push(bChildren[itemIndex]);\n	            } else {\n	                // There are no free items in b to match with\n	                // the free items in a, so the extra free nodes\n	                // are deleted.\n	                itemIndex = i - deletedItems++;\n	                newChildren.push(null);\n	            }\n	        }\n	    }\n\n	    var lastFreeIndex = freeIndex >= bFree.length ? bChildren.length : bFree[freeIndex];\n\n	    // Iterate through b and append any new keys\n	    // O(M) time\n	    for (var j = 0; j < bChildren.length; j++) {\n	        var newItem = bChildren[j];\n\n	        if (newItem.key) {\n	            if (!aKeys.hasOwnProperty(newItem.key)) {\n	                // Add any new keyed items\n	                // We are adding new items to the end and then sorting them\n	                // in place. In future we should insert new items in place.\n	                newChildren.push(newItem);\n	            }\n	        } else if (j >= lastFreeIndex) {\n	            // Add any leftover non-keyed items\n	            newChildren.push(newItem);\n	        }\n	    }\n\n	    var simulate = newChildren.slice();\n	    var simulateIndex = 0;\n	    var removes = [];\n	    var inserts = [];\n	    var simulateItem;\n\n	    for (var k = 0; k < bChildren.length;) {\n	        var wantedItem = bChildren[k];\n	        simulateItem = simulate[simulateIndex];\n\n	        // remove items\n	        while (simulateItem === null && simulate.length) {\n	            removes.push(remove(simulate, simulateIndex, null));\n	            simulateItem = simulate[simulateIndex];\n	        }\n\n	        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n	            // if we need a key in this position...\n	            if (wantedItem.key) {\n	                if (simulateItem && simulateItem.key) {\n	                    // if an insert doesn't put this key in place, it needs to move\n	                    if (bKeys[simulateItem.key] !== k + 1) {\n	                        removes.push(remove(simulate, simulateIndex, simulateItem.key));\n	                        simulateItem = simulate[simulateIndex];\n	                        // if the remove didn't put the wanted item in place, we need to insert it\n	                        if (!simulateItem || simulateItem.key !== wantedItem.key) {\n	                            inserts.push({ key: wantedItem.key, to: k });\n	                        }\n	                        // items are matching, so skip ahead\n	                        else {\n	                                simulateIndex++;\n	                            }\n	                    } else {\n	                        inserts.push({ key: wantedItem.key, to: k });\n	                    }\n	                } else {\n	                    inserts.push({ key: wantedItem.key, to: k });\n	                }\n	                k++;\n	            }\n	            // a key in simulate has no matching wanted key, remove it\n	            else if (simulateItem && simulateItem.key) {\n	                    removes.push(remove(simulate, simulateIndex, simulateItem.key));\n	                }\n	        } else {\n	            simulateIndex++;\n	            k++;\n	        }\n	    }\n\n	    // remove all the remaining nodes from simulate\n	    while (simulateIndex < simulate.length) {\n	        simulateItem = simulate[simulateIndex];\n	        removes.push(remove(simulate, simulateIndex, simulateItem && simulateItem.key));\n	    }\n\n	    // If the only moves we have are deletes then we can just\n	    // let the delete patch remove these items.\n	    if (removes.length === deletedItems && !inserts.length) {\n	        return {\n	            children: newChildren,\n	            moves: null\n	        };\n	    }\n\n	    return {\n	        children: newChildren,\n	        moves: {\n	            removes: removes,\n	            inserts: inserts\n	        }\n	    };\n	}\n\n	function remove(arr, index, key) {\n	    arr.splice(index, 1);\n\n	    return {\n	        from: index,\n	        key: key\n	    };\n	}\n\n	function keyIndex(children) {\n	    var keys = {};\n	    var free = [];\n	    var length = children.length;\n\n	    for (var i = 0; i < length; i++) {\n	        var child = children[i];\n\n	        if (child.key) {\n	            keys[child.key] = i;\n	        } else {\n	            free.push(i);\n	        }\n	    }\n\n	    return {\n	        keys: keys, // A hash of key name to index\n	        free: free // An array of unkeyed item indices\n	    };\n	}\n\n	function appendPatch(apply, patch) {\n	    if (apply) {\n	        if (isArray(apply)) {\n	            apply.push(patch);\n	        } else {\n	            apply = [apply, patch];\n	        }\n\n	        return apply;\n	    } else {\n	        return patch;\n	    }\n	}\n\n/***/ },\n/* 223 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	var nativeIsArray = Array.isArray;\n	var toString = Object.prototype.toString;\n\n	module.exports = nativeIsArray || isArray;\n\n	function isArray(obj) {\n	    return toString.call(obj) === \"[object Array]\";\n	}\n\n/***/ },\n/* 224 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var version = __webpack_require__(216);\n\n	VirtualPatch.NONE = 0;\n	VirtualPatch.VTEXT = 1;\n	VirtualPatch.VNODE = 2;\n	VirtualPatch.WIDGET = 3;\n	VirtualPatch.PROPS = 4;\n	VirtualPatch.ORDER = 5;\n	VirtualPatch.INSERT = 6;\n	VirtualPatch.REMOVE = 7;\n	VirtualPatch.THUNK = 8;\n\n	module.exports = VirtualPatch;\n\n	function VirtualPatch(type, vNode, patch) {\n	    this.type = Number(type);\n	    this.vNode = vNode;\n	    this.patch = patch;\n	}\n\n	VirtualPatch.prototype.version = version;\n	VirtualPatch.prototype.type = \"VirtualPatch\";\n\n/***/ },\n/* 225 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var isObject = __webpack_require__(213);\n	var isHook = __webpack_require__(214);\n\n	module.exports = diffProps;\n\n	function diffProps(a, b) {\n	    var diff;\n\n	    for (var aKey in a) {\n	        if (!(aKey in b)) {\n	            diff = diff || {};\n	            diff[aKey] = undefined;\n	        }\n\n	        var aValue = a[aKey];\n	        var bValue = b[aKey];\n\n	        if (aValue === bValue) {\n	            continue;\n	        } else if (isObject(aValue) && isObject(bValue)) {\n	            if (getPrototype(bValue) !== getPrototype(aValue)) {\n	                diff = diff || {};\n	                diff[aKey] = bValue;\n	            } else if (isHook(bValue)) {\n	                diff = diff || {};\n	                diff[aKey] = bValue;\n	            } else {\n	                var objectDiff = diffProps(aValue, bValue);\n	                if (objectDiff) {\n	                    diff = diff || {};\n	                    diff[aKey] = objectDiff;\n	                }\n	            }\n	        } else {\n	            diff = diff || {};\n	            diff[aKey] = bValue;\n	        }\n	    }\n\n	    for (var bKey in b) {\n	        if (!(bKey in a)) {\n	            diff = diff || {};\n	            diff[bKey] = b[bKey];\n	        }\n	    }\n\n	    return diff;\n	}\n\n	function getPrototype(value) {\n	    if (Object.getPrototypeOf) {\n	        return Object.getPrototypeOf(value);\n	    } else if (value.__proto__) {\n	        return value.__proto__;\n	    } else if (value.constructor) {\n	        return value.constructor.prototype;\n	    }\n	}\n\n/***/ },\n/* 226 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var h = __webpack_require__(227);\n\n	module.exports = h;\n\n/***/ },\n/* 227 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var isArray = __webpack_require__(223);\n\n	var VNode = __webpack_require__(228);\n	var VText = __webpack_require__(229);\n	var isVNode = __webpack_require__(215);\n	var isVText = __webpack_require__(217);\n	var isWidget = __webpack_require__(218);\n	var isHook = __webpack_require__(214);\n	var isVThunk = __webpack_require__(220);\n\n	var parseTag = __webpack_require__(230);\n	var softSetHook = __webpack_require__(232);\n	var evHook = __webpack_require__(233);\n\n	module.exports = h;\n\n	function h(tagName, properties, children) {\n	    var childNodes = [];\n	    var tag, props, key, namespace;\n\n	    if (!children && isChildren(properties)) {\n	        children = properties;\n	        props = {};\n	    }\n\n	    props = props || properties || {};\n	    tag = parseTag(tagName, props);\n\n	    // support keys\n	    if (props.hasOwnProperty('key')) {\n	        key = props.key;\n	        props.key = undefined;\n	    }\n\n	    // support namespace\n	    if (props.hasOwnProperty('namespace')) {\n	        namespace = props.namespace;\n	        props.namespace = undefined;\n	    }\n\n	    // fix cursor bug\n	    if (tag === 'INPUT' && !namespace && props.hasOwnProperty('value') && props.value !== undefined && !isHook(props.value)) {\n	        props.value = softSetHook(props.value);\n	    }\n\n	    transformProperties(props);\n\n	    if (children !== undefined && children !== null) {\n	        addChild(children, childNodes, tag, props);\n	    }\n\n	    return new VNode(tag, props, childNodes, key, namespace);\n	}\n\n	function addChild(c, childNodes, tag, props) {\n	    if (typeof c === 'string') {\n	        childNodes.push(new VText(c));\n	    } else if (typeof c === 'number') {\n	        childNodes.push(new VText(String(c)));\n	    } else if (isChild(c)) {\n	        childNodes.push(c);\n	    } else if (isArray(c)) {\n	        for (var i = 0; i < c.length; i++) {\n	            addChild(c[i], childNodes, tag, props);\n	        }\n	    } else if (c === null || c === undefined) {\n	        return;\n	    } else {\n	        throw UnexpectedVirtualElement({\n	            foreignObject: c,\n	            parentVnode: {\n	                tagName: tag,\n	                properties: props\n	            }\n	        });\n	    }\n	}\n\n	function transformProperties(props) {\n	    for (var propName in props) {\n	        if (props.hasOwnProperty(propName)) {\n	            var value = props[propName];\n\n	            if (isHook(value)) {\n	                continue;\n	            }\n\n	            if (propName.substr(0, 3) === 'ev-') {\n	                // add ev-foo support\n	                props[propName] = evHook(value);\n	            }\n	        }\n	    }\n	}\n\n	function isChild(x) {\n	    return isVNode(x) || isVText(x) || isWidget(x) || isVThunk(x);\n	}\n\n	function isChildren(x) {\n	    return typeof x === 'string' || isArray(x) || isChild(x);\n	}\n\n	function UnexpectedVirtualElement(data) {\n	    var err = new Error();\n\n	    err.type = 'virtual-hyperscript.unexpected.virtual-element';\n	    err.message = 'Unexpected virtual child passed to h().\\n' + 'Expected a VNode / Vthunk / VWidget / string but:\\n' + 'got:\\n' + errorString(data.foreignObject) + '.\\n' + 'The parent vnode is:\\n' + errorString(data.parentVnode);\n	    '\\n' + 'Suggested fix: change your `h(..., [ ... ])` callsite.';\n	    err.foreignObject = data.foreignObject;\n	    err.parentVnode = data.parentVnode;\n\n	    return err;\n	}\n\n	function errorString(obj) {\n	    try {\n	        return JSON.stringify(obj, null, '    ');\n	    } catch (e) {\n	        return String(obj);\n	    }\n	}\n\n/***/ },\n/* 228 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var version = __webpack_require__(216);\n	var isVNode = __webpack_require__(215);\n	var isWidget = __webpack_require__(218);\n	var isThunk = __webpack_require__(220);\n	var isVHook = __webpack_require__(214);\n\n	module.exports = VirtualNode;\n\n	var noProperties = {};\n	var noChildren = [];\n\n	function VirtualNode(tagName, properties, children, key, namespace) {\n	    this.tagName = tagName;\n	    this.properties = properties || noProperties;\n	    this.children = children || noChildren;\n	    this.key = key != null ? String(key) : undefined;\n	    this.namespace = typeof namespace === \"string\" ? namespace : null;\n\n	    var count = children && children.length || 0;\n	    var descendants = 0;\n	    var hasWidgets = false;\n	    var hasThunks = false;\n	    var descendantHooks = false;\n	    var hooks;\n\n	    for (var propName in properties) {\n	        if (properties.hasOwnProperty(propName)) {\n	            var property = properties[propName];\n	            if (isVHook(property) && property.unhook) {\n	                if (!hooks) {\n	                    hooks = {};\n	                }\n\n	                hooks[propName] = property;\n	            }\n	        }\n	    }\n\n	    for (var i = 0; i < count; i++) {\n	        var child = children[i];\n	        if (isVNode(child)) {\n	            descendants += child.count || 0;\n\n	            if (!hasWidgets && child.hasWidgets) {\n	                hasWidgets = true;\n	            }\n\n	            if (!hasThunks && child.hasThunks) {\n	                hasThunks = true;\n	            }\n\n	            if (!descendantHooks && (child.hooks || child.descendantHooks)) {\n	                descendantHooks = true;\n	            }\n	        } else if (!hasWidgets && isWidget(child)) {\n	            if (typeof child.destroy === \"function\") {\n	                hasWidgets = true;\n	            }\n	        } else if (!hasThunks && isThunk(child)) {\n	            hasThunks = true;\n	        }\n	    }\n\n	    this.count = count + descendants;\n	    this.hasWidgets = hasWidgets;\n	    this.hasThunks = hasThunks;\n	    this.hooks = hooks;\n	    this.descendantHooks = descendantHooks;\n	}\n\n	VirtualNode.prototype.version = version;\n	VirtualNode.prototype.type = \"VirtualNode\";\n\n/***/ },\n/* 229 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var version = __webpack_require__(216);\n\n	module.exports = VirtualText;\n\n	function VirtualText(text) {\n	    this.text = String(text);\n	}\n\n	VirtualText.prototype.version = version;\n	VirtualText.prototype.type = \"VirtualText\";\n\n/***/ },\n/* 230 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var split = __webpack_require__(231);\n\n	var classIdSplit = /([\\.#]?[a-zA-Z0-9\\u007F-\\uFFFF_:-]+)/;\n	var notClassId = /^\\.|#/;\n\n	module.exports = parseTag;\n\n	function parseTag(tag, props) {\n	    if (!tag) {\n	        return 'DIV';\n	    }\n\n	    var noId = !props.hasOwnProperty('id');\n\n	    var tagParts = split(tag, classIdSplit);\n	    var tagName = null;\n\n	    if (notClassId.test(tagParts[1])) {\n	        tagName = 'DIV';\n	    }\n\n	    var classes, part, type, i;\n\n	    for (i = 0; i < tagParts.length; i++) {\n	        part = tagParts[i];\n\n	        if (!part) {\n	            continue;\n	        }\n\n	        type = part.charAt(0);\n\n	        if (!tagName) {\n	            tagName = part;\n	        } else if (type === '.') {\n	            classes = classes || [];\n	            classes.push(part.substring(1, part.length));\n	        } else if (type === '#' && noId) {\n	            props.id = part.substring(1, part.length);\n	        }\n	    }\n\n	    if (classes) {\n	        if (props.className) {\n	            classes.push(props.className);\n	        }\n\n	        props.className = classes.join(' ');\n	    }\n\n	    return props.namespace ? tagName : tagName.toUpperCase();\n	}\n\n/***/ },\n/* 231 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	/*!\n	 * Cross-Browser Split 1.1.1\n	 * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n	 * Available under the MIT License\n	 * ECMAScript compliant, uniform cross-browser split method\n	 */\n\n	/**\n	 * Splits a string into an array of strings using a regex or string separator. Matches of the\n	 * separator are not included in the result array. However, if `separator` is a regex that contains\n	 * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n	 * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n	 * cross-browser.\n	 * @param {String} str String to split.\n	 * @param {RegExp|String} separator Regex or string to use for separating the string.\n	 * @param {Number} [limit] Maximum number of items to include in the result array.\n	 * @returns {Array} Array of substrings.\n	 * @example\n	 *\n	 * // Basic use\n	 * split('a b c d', ' ');\n	 * // -> ['a', 'b', 'c', 'd']\n	 *\n	 * // With limit\n	 * split('a b c d', ' ', 2);\n	 * // -> ['a', 'b']\n	 *\n	 * // Backreferences in result array\n	 * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n	 * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n	 */\n	module.exports = function split(undef) {\n\n	  var nativeSplit = String.prototype.split,\n	      compliantExecNpcg = /()??/.exec(\"\")[1] === undef,\n\n	  // NPCG: nonparticipating capturing group\n	  self;\n\n	  self = function self(str, separator, limit) {\n	    // If `separator` is not a regex, use `nativeSplit`\n	    if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n	      return nativeSplit.call(str, separator, limit);\n	    }\n	    var output = [],\n	        flags = (separator.ignoreCase ? \"i\" : \"\") + (separator.multiline ? \"m\" : \"\") + (separator.extended ? \"x\" : \"\") + ( // Proposed for ES6\n	    separator.sticky ? \"y\" : \"\"),\n\n	    // Firefox 3+\n	    lastLastIndex = 0,\n\n	    // Make `global` and avoid `lastIndex` issues by working with a copy\n	    separator = new RegExp(separator.source, flags + \"g\"),\n	        separator2,\n	        match,\n	        lastIndex,\n	        lastLength;\n	    str += \"\"; // Type-convert\n	    if (!compliantExecNpcg) {\n	      // Doesn't need flags gy, but they don't hurt\n	      separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n	    }\n	    /* Values for `limit`, per the spec:\n	     * If undefined: 4294967295 // Math.pow(2, 32) - 1\n	     * If 0, Infinity, or NaN: 0\n	     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n	     * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n	     * If other: Type-convert, then use the above rules\n	     */\n	    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1\n	    limit >>> 0; // ToUint32(limit)\n	    while (match = separator.exec(str)) {\n	      // `separator.lastIndex` is not reliable cross-browser\n	      lastIndex = match.index + match[0].length;\n	      if (lastIndex > lastLastIndex) {\n	        output.push(str.slice(lastLastIndex, match.index));\n	        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n	        // nonparticipating capturing groups\n	        if (!compliantExecNpcg && match.length > 1) {\n	          match[0].replace(separator2, function () {\n	            for (var i = 1; i < arguments.length - 2; i++) {\n	              if (arguments[i] === undef) {\n	                match[i] = undef;\n	              }\n	            }\n	          });\n	        }\n	        if (match.length > 1 && match.index < str.length) {\n	          Array.prototype.push.apply(output, match.slice(1));\n	        }\n	        lastLength = match[0].length;\n	        lastLastIndex = lastIndex;\n	        if (output.length >= limit) {\n	          break;\n	        }\n	      }\n	      if (separator.lastIndex === match.index) {\n	        separator.lastIndex++; // Avoid an infinite loop\n	      }\n	    }\n	    if (lastLastIndex === str.length) {\n	      if (lastLength || !separator.test(\"\")) {\n	        output.push(\"\");\n	      }\n	    } else {\n	      output.push(str.slice(lastLastIndex));\n	    }\n	    return output.length > limit ? output.slice(0, limit) : output;\n	  };\n\n	  return self;\n	}();\n\n/***/ },\n/* 232 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	module.exports = SoftSetHook;\n\n	function SoftSetHook(value) {\n	    if (!(this instanceof SoftSetHook)) {\n	        return new SoftSetHook(value);\n	    }\n\n	    this.value = value;\n	}\n\n	SoftSetHook.prototype.hook = function (node, propertyName) {\n	    if (node[propertyName] !== this.value) {\n	        node[propertyName] = this.value;\n	    }\n	};\n\n/***/ },\n/* 233 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var EvStore = __webpack_require__(234);\n\n	module.exports = EvHook;\n\n	function EvHook(value) {\n	    if (!(this instanceof EvHook)) {\n	        return new EvHook(value);\n	    }\n\n	    this.value = value;\n	}\n\n	EvHook.prototype.hook = function (node, propertyName) {\n	    var es = EvStore(node);\n	    var propName = propertyName.substr(3);\n\n	    es[propName] = this.value;\n	};\n\n	EvHook.prototype.unhook = function (node, propertyName) {\n	    var es = EvStore(node);\n	    var propName = propertyName.substr(3);\n\n	    es[propName] = undefined;\n	};\n\n/***/ },\n/* 234 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var OneVersionConstraint = __webpack_require__(235);\n\n	var MY_VERSION = '7';\n	OneVersionConstraint('ev-store', MY_VERSION);\n\n	var hashKey = '__EV_STORE_KEY@' + MY_VERSION;\n\n	module.exports = EvStore;\n\n	function EvStore(elem) {\n	    var hash = elem[hashKey];\n\n	    if (!hash) {\n	        hash = elem[hashKey] = {};\n	    }\n\n	    return hash;\n	}\n\n/***/ },\n/* 235 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var Individual = __webpack_require__(236);\n\n	module.exports = OneVersion;\n\n	function OneVersion(moduleName, version, defaultValue) {\n	    var key = '__INDIVIDUAL_ONE_VERSION_' + moduleName;\n	    var enforceKey = key + '_ENFORCE_SINGLETON';\n\n	    var versionValue = Individual(enforceKey, version);\n\n	    if (versionValue !== version) {\n	        throw new Error('Can only have one copy of ' + moduleName + '.\\n' + 'You already have version ' + versionValue + ' installed.\\n' + 'This means you cannot install version ' + version);\n	    }\n\n	    return Individual(key, defaultValue);\n	}\n\n/***/ },\n/* 236 */\n/***/ function(module, exports) {\n\n	/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\n	/*global window, global*/\n\n	var root = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {};\n\n	module.exports = Individual;\n\n	function Individual(key, value) {\n	    if (key in root) {\n	        return root[key];\n	    }\n\n	    root[key] = value;\n\n	    return value;\n	}\n	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 237 */\n/***/ function(module, exports, __webpack_require__) {\n\n	var __WEBPACK_AMD_DEFINE_RESULT__;\"use strict\";\n\n	!function () {\n	  \"use strict\";\n	  var E = __webpack_require__(201);!(__WEBPACK_AMD_DEFINE_RESULT__ = function (E) {\n	    var N = function N(E, _N, U) {\n	      Object.defineProperty(E, _N, { value: U, enumerable: !1, configurable: !1, writable: !1 });\n	    },\n	        U = {};return N(U, \"BACKSPACE\", 8), N(U, \"TAB\", 9), N(U, \"NUM_CENTER\", 12), N(U, \"ENTER\", 13), N(U, \"RETURN\", 13), N(U, \"SHIFT\", 16), N(U, \"CTRL\", 17), N(U, \"ALT\", 18), N(U, \"PAUSE\", 19), N(U, \"CAPS_LOCK\", 20), N(U, \"ESC\", 27), N(U, \"SPACE\", 32), N(U, \"PAGE_UP\", 33), N(U, \"PAGE_DOWN\", 34), N(U, \"END\", 35), N(U, \"HOME\", 36), N(U, \"LEFT\", 37), N(U, \"UP\", 38), N(U, \"RIGHT\", 39), N(U, \"DOWN\", 40), N(U, \"PRINT_SCREEN\", 44), N(U, \"INSERT\", 45), N(U, \"DELETE\", 46), N(U, \"ZERO\", 48), N(U, \"ONE\", 49), N(U, \"TWO\", 50), N(U, \"THREE\", 51), N(U, \"FOUR\", 52), N(U, \"FIVE\", 53), N(U, \"SIX\", 54), N(U, \"SEVEN\", 55), N(U, \"EIGHT\", 56), N(U, \"NINE\", 57), N(U, \"A\", 65), N(U, \"B\", 66), N(U, \"C\", 67), N(U, \"D\", 68), N(U, \"E\", 69), N(U, \"F\", 70), N(U, \"G\", 71), N(U, \"H\", 72), N(U, \"I\", 73), N(U, \"J\", 74), N(U, \"K\", 75), N(U, \"L\", 76), N(U, \"M\", 77), N(U, \"N\", 78), N(U, \"O\", 79), N(U, \"P\", 80), N(U, \"Q\", 81), N(U, \"R\", 82), N(U, \"S\", 83), N(U, \"T\", 84), N(U, \"U\", 85), N(U, \"V\", 86), N(U, \"W\", 87), N(U, \"X\", 88), N(U, \"Y\", 89), N(U, \"Z\", 90), N(U, \"CONTEXT_MENU\", 93), N(U, \"NUM_ZERO\", 96), N(U, \"NUM_ONE\", 97), N(U, \"NUM_TWO\", 98), N(U, \"NUM_THREE\", 99), N(U, \"NUM_FOUR\", 100), N(U, \"NUM_FIVE\", 101), N(U, \"NUM_SIX\", 102), N(U, \"NUM_SEVEN\", 103), N(U, \"NUM_EIGHT\", 104), N(U, \"NUM_NINE\", 105), N(U, \"NUM_MULTIPLY\", 106), N(U, \"NUM_PLUS\", 107), N(U, \"NUM_MINUS\", 109), N(U, \"NUM_PERIOD\", 110), N(U, \"NUM_DIVISION\", 111), N(U, \"F1\", 112), N(U, \"F2\", 113), N(U, \"F3\", 114), N(U, \"F4\", 115), N(U, \"F5\", 116), N(U, \"F6\", 117), N(U, \"F7\", 118), N(U, \"F8\", 119), N(U, \"F9\", 120), N(U, \"F10\", 121), N(U, \"F11\", 122), N(U, \"F12\", 123), U;\n	  }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n	}();\n\n/***/ },\n/* 238 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var patch = __webpack_require__(239);\n\n	module.exports = patch;\n\n/***/ },\n/* 239 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var document = __webpack_require__(210);\n	var isArray = __webpack_require__(223);\n\n	var render = __webpack_require__(209);\n	var domIndex = __webpack_require__(240);\n	var patchOp = __webpack_require__(241);\n	module.exports = patch;\n\n	function patch(rootNode, patches, renderOptions) {\n	    renderOptions = renderOptions || {};\n	    renderOptions.patch = renderOptions.patch && renderOptions.patch !== patch ? renderOptions.patch : patchRecursive;\n	    renderOptions.render = renderOptions.render || render;\n\n	    return renderOptions.patch(rootNode, patches, renderOptions);\n	}\n\n	function patchRecursive(rootNode, patches, renderOptions) {\n	    var indices = patchIndices(patches);\n\n	    if (indices.length === 0) {\n	        return rootNode;\n	    }\n\n	    var index = domIndex(rootNode, patches.a, indices);\n	    var ownerDocument = rootNode.ownerDocument;\n\n	    if (!renderOptions.document && ownerDocument !== document) {\n	        renderOptions.document = ownerDocument;\n	    }\n\n	    for (var i = 0; i < indices.length; i++) {\n	        var nodeIndex = indices[i];\n	        rootNode = applyPatch(rootNode, index[nodeIndex], patches[nodeIndex], renderOptions);\n	    }\n\n	    return rootNode;\n	}\n\n	function applyPatch(rootNode, domNode, patchList, renderOptions) {\n	    if (!domNode) {\n	        return rootNode;\n	    }\n\n	    var newNode;\n\n	    if (isArray(patchList)) {\n	        for (var i = 0; i < patchList.length; i++) {\n	            newNode = patchOp(patchList[i], domNode, renderOptions);\n\n	            if (domNode === rootNode) {\n	                rootNode = newNode;\n	            }\n	        }\n	    } else {\n	        newNode = patchOp(patchList, domNode, renderOptions);\n\n	        if (domNode === rootNode) {\n	            rootNode = newNode;\n	        }\n	    }\n\n	    return rootNode;\n	}\n\n	function patchIndices(patches) {\n	    var indices = [];\n\n	    for (var key in patches) {\n	        if (key !== \"a\") {\n	            indices.push(Number(key));\n	        }\n	    }\n\n	    return indices;\n	}\n\n/***/ },\n/* 240 */\n/***/ function(module, exports) {\n\n	\"use strict\";\n\n	// Maps a virtual DOM tree onto a real DOM tree in an efficient manner.\n	// We don't want to read all of the DOM nodes in the tree so we use\n	// the in-order tree indexing to eliminate recursion down certain branches.\n	// We only recurse into a DOM node if we know that it contains a child of\n	// interest.\n\n	var noChild = {};\n\n	module.exports = domIndex;\n\n	function domIndex(rootNode, tree, indices, nodes) {\n	    if (!indices || indices.length === 0) {\n	        return {};\n	    } else {\n	        indices.sort(ascending);\n	        return recurse(rootNode, tree, indices, nodes, 0);\n	    }\n	}\n\n	function recurse(rootNode, tree, indices, nodes, rootIndex) {\n	    nodes = nodes || {};\n\n	    if (rootNode) {\n	        if (indexInRange(indices, rootIndex, rootIndex)) {\n	            nodes[rootIndex] = rootNode;\n	        }\n\n	        var vChildren = tree.children;\n\n	        if (vChildren) {\n\n	            var childNodes = rootNode.childNodes;\n\n	            for (var i = 0; i < tree.children.length; i++) {\n	                rootIndex += 1;\n\n	                var vChild = vChildren[i] || noChild;\n	                var nextIndex = rootIndex + (vChild.count || 0);\n\n	                // skip recursion down the tree if there are no nodes down here\n	                if (indexInRange(indices, rootIndex, nextIndex)) {\n	                    recurse(childNodes[i], vChild, indices, nodes, rootIndex);\n	                }\n\n	                rootIndex = nextIndex;\n	            }\n	        }\n	    }\n\n	    return nodes;\n	}\n\n	// Binary search for an index in the interval [left, right]\n	function indexInRange(indices, left, right) {\n	    if (indices.length === 0) {\n	        return false;\n	    }\n\n	    var minIndex = 0;\n	    var maxIndex = indices.length - 1;\n	    var currentIndex;\n	    var currentItem;\n\n	    while (minIndex <= maxIndex) {\n	        currentIndex = (maxIndex + minIndex) / 2 >> 0;\n	        currentItem = indices[currentIndex];\n\n	        if (minIndex === maxIndex) {\n	            return currentItem >= left && currentItem <= right;\n	        } else if (currentItem < left) {\n	            minIndex = currentIndex + 1;\n	        } else if (currentItem > right) {\n	            maxIndex = currentIndex - 1;\n	        } else {\n	            return true;\n	        }\n	    }\n\n	    return false;\n	}\n\n	function ascending(a, b) {\n	    return a > b ? 1 : -1;\n	}\n\n/***/ },\n/* 241 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var applyProperties = __webpack_require__(212);\n\n	var isWidget = __webpack_require__(218);\n	var VPatch = __webpack_require__(224);\n\n	var updateWidget = __webpack_require__(242);\n\n	module.exports = applyPatch;\n\n	function applyPatch(vpatch, domNode, renderOptions) {\n	    var type = vpatch.type;\n	    var vNode = vpatch.vNode;\n	    var patch = vpatch.patch;\n\n	    switch (type) {\n	        case VPatch.REMOVE:\n	            return removeNode(domNode, vNode);\n	        case VPatch.INSERT:\n	            return insertNode(domNode, patch, renderOptions);\n	        case VPatch.VTEXT:\n	            return stringPatch(domNode, vNode, patch, renderOptions);\n	        case VPatch.WIDGET:\n	            return widgetPatch(domNode, vNode, patch, renderOptions);\n	        case VPatch.VNODE:\n	            return vNodePatch(domNode, vNode, patch, renderOptions);\n	        case VPatch.ORDER:\n	            reorderChildren(domNode, patch);\n	            return domNode;\n	        case VPatch.PROPS:\n	            applyProperties(domNode, patch, vNode.properties);\n	            return domNode;\n	        case VPatch.THUNK:\n	            return replaceRoot(domNode, renderOptions.patch(domNode, patch, renderOptions));\n	        default:\n	            return domNode;\n	    }\n	}\n\n	function removeNode(domNode, vNode) {\n	    var parentNode = domNode.parentNode;\n\n	    if (parentNode) {\n	        parentNode.removeChild(domNode);\n	    }\n\n	    destroyWidget(domNode, vNode);\n\n	    return null;\n	}\n\n	function insertNode(parentNode, vNode, renderOptions) {\n	    var newNode = renderOptions.render(vNode, renderOptions);\n\n	    if (parentNode) {\n	        parentNode.appendChild(newNode);\n	    }\n\n	    return parentNode;\n	}\n\n	function stringPatch(domNode, leftVNode, vText, renderOptions) {\n	    var newNode;\n\n	    if (domNode.nodeType === 3) {\n	        domNode.replaceData(0, domNode.length, vText.text);\n	        newNode = domNode;\n	    } else {\n	        var parentNode = domNode.parentNode;\n	        newNode = renderOptions.render(vText, renderOptions);\n\n	        if (parentNode && newNode !== domNode) {\n	            parentNode.replaceChild(newNode, domNode);\n	        }\n	    }\n\n	    return newNode;\n	}\n\n	function widgetPatch(domNode, leftVNode, widget, renderOptions) {\n	    var updating = updateWidget(leftVNode, widget);\n	    var newNode;\n\n	    if (updating) {\n	        newNode = widget.update(leftVNode, domNode) || domNode;\n	    } else {\n	        newNode = renderOptions.render(widget, renderOptions);\n	    }\n\n	    var parentNode = domNode.parentNode;\n\n	    if (parentNode && newNode !== domNode) {\n	        parentNode.replaceChild(newNode, domNode);\n	    }\n\n	    if (!updating) {\n	        destroyWidget(domNode, leftVNode);\n	    }\n\n	    return newNode;\n	}\n\n	function vNodePatch(domNode, leftVNode, vNode, renderOptions) {\n	    var parentNode = domNode.parentNode;\n	    var newNode = renderOptions.render(vNode, renderOptions);\n\n	    if (parentNode && newNode !== domNode) {\n	        parentNode.replaceChild(newNode, domNode);\n	    }\n\n	    return newNode;\n	}\n\n	function destroyWidget(domNode, w) {\n	    if (typeof w.destroy === \"function\" && isWidget(w)) {\n	        w.destroy(domNode);\n	    }\n	}\n\n	function reorderChildren(domNode, moves) {\n	    var childNodes = domNode.childNodes;\n	    var keyMap = {};\n	    var node;\n	    var remove;\n	    var insert;\n\n	    for (var i = 0; i < moves.removes.length; i++) {\n	        remove = moves.removes[i];\n	        node = childNodes[remove.from];\n	        if (remove.key) {\n	            keyMap[remove.key] = node;\n	        }\n	        domNode.removeChild(node);\n	    }\n\n	    var length = childNodes.length;\n	    for (var j = 0; j < moves.inserts.length; j++) {\n	        insert = moves.inserts[j];\n	        node = keyMap[insert.key];\n	        // this is the weirdest bug i've ever seen in webkit\n	        domNode.insertBefore(node, insert.to >= length++ ? null : childNodes[insert.to]);\n	    }\n	}\n\n	function replaceRoot(oldRoot, newRoot) {\n	    if (oldRoot && newRoot && oldRoot !== newRoot && oldRoot.parentNode) {\n	        oldRoot.parentNode.replaceChild(newRoot, oldRoot);\n	    }\n\n	    return newRoot;\n	}\n\n/***/ },\n/* 242 */\n/***/ function(module, exports, __webpack_require__) {\n\n	\"use strict\";\n\n	var isWidget = __webpack_require__(218);\n\n	module.exports = updateWidget;\n\n	function updateWidget(a, b) {\n	    if (isWidget(a) && isWidget(b)) {\n	        if (\"name\" in a && \"name\" in b) {\n	            return a.id === b.id;\n	        } else {\n	            return a.init === b.init;\n	        }\n	    }\n\n	    return false;\n	}\n\n/***/ },\n/* 243 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/**\n	 * Used for caching VNodes.\n	 *\n	 * If a given state fails comparison with the previous state,\n	 * the node will be created via the provided rendering method.\n	 *\n	 * @param {object} state State object.\n	 * @param {function} cmpFn Comparison function.\n	 * @param {function} renderFn Rendering function. Must return a VNode.\n	 * @return {VNode} New or cached node.\n	 */\n\n	var VCache = function VCache(state, cmpFn, renderFn) {\n	    this.renderFn = renderFn;\n	    this.cmpFn = cmpFn;\n	    this.state = state;\n	};\n\n	VCache.prototype.type = 'Thunk';\n\n	VCache.prototype.render = function (previous) {\n	    // The first time the Thunk renders, there will be no previous state\n	    var previousState = previous ? previous.state : null;\n\n	    // We run the comparison function to see if the state has changed enough\n	    // for us to re-render. If it returns truthy, then we call the render\n	    // function to give us a new VNode\n	    if (!previousState || !this.state || this.cmpFn(previousState, this.state)) {\n	        return this.renderFn(previous, this);\n	    } else {\n	        // vnode will be set automatically when a thunk has been created\n	        // it contains the VNode, VText, Thunk, or Widget generated by\n	        // our render function.\n	        return previous.vnode;\n	    }\n	};\n\n	module.exports = VCache;\n\n/***/ },\n/* 244 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _find2 = __webpack_require__(149);\n\n	var _find3 = _interopRequireDefault(_find2);\n\n	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n	/**\n	 * Returns whether or not a state is marked as dirty in\n	 * any object inside the given currentState.nodes collection.\n	 *\n	 * @private\n	 * @category DOM\n	 * @param {object} previousState Previous state.\n	 * @param {object} currentState  Current state.\n	 * @return {boolean} Any state is dirty.\n	 */\n	module.exports = function VDirtyCompare(previousState, currentState) {\n	    var diff = false;\n\n	    if (previousState.nodeCount !== currentState.nodeCount) {\n	        diff = true;\n	    } else {\n	        diff = (0, _find3.default)(currentState.nodes, 'itree.dirty', true);\n	    }\n\n	    return diff;\n	};\n\n/***/ },\n/* 245 */\n/***/ function(module, exports) {\n\n	'use strict';\n\n	/**\n	 * Returns whether or not a state is marked as dirty.\n	 *\n	 * @private\n	 * @category DOM\n	 * @param {object} previousState Previous state.\n	 * @param {object} currentState  Current state.\n	 * @return {boolean} State is dirty.\n	 */\n\n	module.exports = function VDirtyCompare(previousState, currentState) {\n	  return currentState.dirty;\n	};\n\n/***/ },\n/* 246 */\n/***/ function(module, exports, __webpack_require__) {\n\n	'use strict';\n\n	var _each2 = __webpack_require__(178);\n\n	var _each3 = _interopRequireDefault(_each2);\n\n	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n	/**\n	 * Compares all keys on the given state. Returns true if any difference exists.\n	 *\n	 * @private\n	 * @category DOM\n	 * @param {object} previousState Previous state.\n	 * @param {object} currentState  Current state.\n	 * @return {boolean} Difference was found.\n	 */\n	module.exports = function VStateCompare(previousState, currentState) {\n	    var isDirty = false;\n\n	    (0, _each3.default)(currentState, function (val, key) {\n	        if (val !== previousState[key]) {\n	            isDirty = true;\n	            return false;\n	        }\n	    });\n\n	    return isDirty;\n	};\n\n/***/ }\n/******/ ])\n});\n;//# sourceMappingURL=data:application/json;base64,");
},250:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(147);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(6)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n	// When the styles change, update the <style> tags\n	if(!content.locals) {\n		module.hot.accept(\"!!./../../node_modules/css-loader/index.js!./inspire-tree.css\", function() {\n			var newContent = require(\"!!./../../node_modules/css-loader/index.js!./inspire-tree.css\");\n			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n			update(newContent);\n		});\n	}\n	// When the module is disposed, remove the <style> tags\n	module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL2luc3BpcmUtdHJlZS5jc3M/NTdhMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUFtRjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbnNwaXJlLXRyZWUuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL2luc3BpcmUtdHJlZS5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9pbnNwaXJlLXRyZWUuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL0F1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci9pbnNwaXJlLXRyZWUuY3NzXG4gKiogbW9kdWxlIGlkID0gMjUwXG4gKiogbW9kdWxlIGNodW5rcyA9IDlcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9")},251:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(148);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(6)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n	// When the styles change, update the <style> tags\n	if(!content.locals) {\n		module.hot.accept(\"!!./../../node_modules/css-loader/index.js!./model-loader.css\", function() {\n			var newContent = require(\"!!./../../node_modules/css-loader/index.js!./model-loader.css\");\n			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n			update(newContent);\n		});\n	}\n	// When the module is disposed, remove the <style> tags\n	module.hot.dispose(function() { update(); });\n}//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXV0b2Rlc2suQUROLlZpZXdpbmcuRXh0ZW5zaW9uLk1vZGVsTG9hZGVyL21vZGVsLWxvYWRlci5jc3M/MjU1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUFtRjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLGdDQUFnQyxVQUFVLEVBQUU7QUFDNUMiLCJmaWxlIjoiMjUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tb2RlbC1sb2FkZXIuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL21vZGVsLWxvYWRlci5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tb2RlbC1sb2FkZXIuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL0F1dG9kZXNrLkFETi5WaWV3aW5nLkV4dGVuc2lvbi5Nb2RlbExvYWRlci9tb2RlbC1sb2FkZXIuY3NzXG4gKiogbW9kdWxlIGlkID0gMjUxXG4gKiogbW9kdWxlIGNodW5rcyA9IDlcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9")}})});