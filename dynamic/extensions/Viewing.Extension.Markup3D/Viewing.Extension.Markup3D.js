(function webpackUniversalModuleDefinition(root,factory){if(typeof exports==="object"&&typeof module==="object")module.exports=factory();else if(typeof define==="function"&&define.amd)define([],factory);else if(typeof exports==="object")exports["Viewing.Extension.Markup3D"]=factory();else root["Viewing.Extension.Markup3D"]=factory()})(this,function(){return function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:false};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.loaded=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.p="";return __webpack_require__(0)}({0:function(module,exports,__webpack_require__){eval("'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _snapSvg = __webpack_require__(144);\n\nvar _snapSvg2 = _interopRequireDefault(_snapSvg);\n\nvar _ViewingExtensionMarkup3D = __webpack_require__(108);\n\nvar _ViewingExtensionMarkup3D2 = _interopRequireDefault(_ViewingExtensionMarkup3D);\n\nvar _ExtensionBase2 = __webpack_require__(25);\n\nvar _ExtensionBase3 = _interopRequireDefault(_ExtensionBase2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////////////\n// Viewing.Extension.Markup3D\n// by Philippe Leefsma, April 2016\n//\n/////////////////////////////////////////////////////////////////////\n\n\nvar Markup3DExtension = function (_ExtensionBase) {\n  _inherits(Markup3DExtension, _ExtensionBase);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function Markup3DExtension(viewer, options) {\n    _classCallCheck(this, Markup3DExtension);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Markup3DExtension).call(this, viewer, options));\n\n    _this.markup3DTool = new _ViewingExtensionMarkup3D2.default(viewer);\n\n    _this._viewer.toolController.registerTool(_this.markup3DTool);\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(Markup3DExtension, [{\n    key: 'load',\n\n\n    /////////////////////////////////////////////////////////////////\n    // Load callback\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function load() {\n\n      this._viewer.toolController.activateTool(this.markup3DTool.getName());\n\n      console.log('Viewing.Extension.Markup3D loaded');\n\n      return true;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Unload callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'unload',\n    value: function unload() {\n\n      this._viewer.toolController.deactivateTool(this.markup3DTool.getName());\n\n      console.log('Viewing.Extension.Markup3D unloaded');\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //  Allow extensions to inject their state data\n    //\n    //  for (var extensionName in viewer.loadedExtensions) {\n    //    viewer.loadedExtensions[extensionName].getState(\n    //      viewerState);\n    //  }\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getState',\n    value: function getState(viewerState) {\n\n      this.markup3DTool.getState(viewerState);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //    Allow extensions to restore their data\n    //\n    //    for (var extensionName in viewer.loadedExtensions) {\n    //      viewer.loadedExtensions[extensionName].restoreState(\n    //        viewerState, immediate);\n    //    }\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'restoreState',\n    value: function restoreState(viewerState, immediate) {\n\n      this.markup3DTool.restoreState(viewerState, immediate);\n    }\n  }], [{\n    key: 'ExtensionId',\n    get: function get() {\n\n      return 'Viewing.Extension.Markup3D';\n    }\n  }]);\n\n  return Markup3DExtension;\n}(_ExtensionBase3.default);\n\nAutodesk.Viewing.theExtensionManager.registerExtension(Markup3DExtension.ExtensionId, Markup3DExtension);//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QuanM/MjQzNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBS0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7OztJQUVNOzs7Ozs7OztBQU1KLFdBTkksaUJBTUosQ0FBWSxNQUFaLEVBQW9CLE9BQXBCLEVBQTZCOzBCQU56QixtQkFNeUI7O3VFQU56Qiw4QkFRSSxRQUFRLFVBRmE7O0FBSTNCLFVBQUssWUFBTCxHQUFvQix1Q0FBaUIsTUFBakIsQ0FBcEIsQ0FKMkI7O0FBTTNCLFVBQUssT0FBTCxDQUFhLGNBQWIsQ0FBNEIsWUFBNUIsQ0FDRSxNQUFLLFlBQUwsQ0FERixDQU4yQjs7R0FBN0I7Ozs7Ozs7O2VBTkk7Ozs7Ozs7OzJCQTZCRzs7QUFFTCxXQUFLLE9BQUwsQ0FBYSxjQUFiLENBQTRCLFlBQTVCLENBQ0UsS0FBSyxZQUFMLENBQWtCLE9BQWxCLEVBREYsRUFGSzs7QUFLTCxjQUFRLEdBQVIsQ0FBWSxtQ0FBWixFQUxLOztBQU9MLGFBQU8sSUFBUCxDQVBLOzs7Ozs7Ozs7OzZCQWNFOztBQUVQLFdBQUssT0FBTCxDQUFhLGNBQWIsQ0FBNEIsY0FBNUIsQ0FDRSxLQUFLLFlBQUwsQ0FBa0IsT0FBbEIsRUFERixFQUZPOztBQUtQLGNBQVEsR0FBUixDQUFZLHFDQUFaLEVBTE87Ozs7Ozs7Ozs7Ozs7Ozs2QkFpQkEsYUFBYTs7QUFFcEIsV0FBSyxZQUFMLENBQWtCLFFBQWxCLENBQ0UsV0FERixFQUZvQjs7Ozs7Ozs7Ozs7Ozs7O2lDQWVULGFBQWEsV0FBVzs7QUFFbkMsV0FBSyxZQUFMLENBQWtCLFlBQWxCLENBQ0UsV0FERixFQUNlLFNBRGYsRUFGbUM7Ozs7d0JBdkRaOztBQUV2QixhQUFPLDRCQUFQLENBRnVCOzs7O1NBcEJyQjs7O0FBa0ZOLFNBQVMsT0FBVCxDQUFpQixtQkFBakIsQ0FBcUMsaUJBQXJDLENBQ0Usa0JBQWtCLFdBQWxCLEVBQ0EsaUJBRkYiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0Rcbi8vIGJ5IFBoaWxpcHBlIExlZWZzbWEsIEFwcmlsIDIwMTZcbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmltcG9ydCBTbmFwIGZyb20gJ2ltcG9ydHMtbG9hZGVyP3RoaXM9PndpbmRvdyxmaXg9Pm1vZHVsZS5leHBvcnRzPTAhc25hcHN2Zy9kaXN0L3NuYXAuc3ZnLmpzJztcbmltcG9ydCBNYXJrdXAzRFRvb2wgZnJvbSAnLi9WaWV3aW5nLkV4dGVuc2lvbi5NYXJrdXAzRC5Ub29sJ1xuaW1wb3J0IEV4dGVuc2lvbkJhc2UgZnJvbSAnRXh0ZW5zaW9uQmFzZSdcblxuY2xhc3MgTWFya3VwM0RFeHRlbnNpb24gZXh0ZW5kcyBFeHRlbnNpb25CYXNlIHtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBDbGFzcyBjb25zdHJ1Y3RvclxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBjb25zdHJ1Y3Rvcih2aWV3ZXIsIG9wdGlvbnMpIHtcblxuICAgIHN1cGVyKHZpZXdlciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLm1hcmt1cDNEVG9vbCA9IG5ldyBNYXJrdXAzRFRvb2wodmlld2VyKTtcblxuICAgIHRoaXMuX3ZpZXdlci50b29sQ29udHJvbGxlci5yZWdpc3RlclRvb2woXG4gICAgICB0aGlzLm1hcmt1cDNEVG9vbCk7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBFeHRlbnNpb24gSWRcbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgc3RhdGljIGdldCBFeHRlbnNpb25JZCgpIHtcblxuICAgIHJldHVybiAnVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QnO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gTG9hZCBjYWxsYmFja1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBsb2FkKCkge1xuXG4gICAgdGhpcy5fdmlld2VyLnRvb2xDb250cm9sbGVyLmFjdGl2YXRlVG9vbChcbiAgICAgIHRoaXMubWFya3VwM0RUb29sLmdldE5hbWUoKSk7XG5cbiAgICBjb25zb2xlLmxvZygnVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QgbG9hZGVkJyk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVubG9hZCBjYWxsYmFja1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB1bmxvYWQoKSB7XG5cbiAgICB0aGlzLl92aWV3ZXIudG9vbENvbnRyb2xsZXIuZGVhY3RpdmF0ZVRvb2woXG4gICAgICB0aGlzLm1hcmt1cDNEVG9vbC5nZXROYW1lKCkpO1xuXG4gICAgY29uc29sZS5sb2coJ1ZpZXdpbmcuRXh0ZW5zaW9uLk1hcmt1cDNEIHVubG9hZGVkJyk7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvLyAgQWxsb3cgZXh0ZW5zaW9ucyB0byBpbmplY3QgdGhlaXIgc3RhdGUgZGF0YVxuICAvL1xuICAvLyAgZm9yICh2YXIgZXh0ZW5zaW9uTmFtZSBpbiB2aWV3ZXIubG9hZGVkRXh0ZW5zaW9ucykge1xuICAvLyAgICB2aWV3ZXIubG9hZGVkRXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXS5nZXRTdGF0ZShcbiAgLy8gICAgICB2aWV3ZXJTdGF0ZSk7XG4gIC8vICB9XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGdldFN0YXRlKHZpZXdlclN0YXRlKSB7XG5cbiAgICB0aGlzLm1hcmt1cDNEVG9vbC5nZXRTdGF0ZShcbiAgICAgIHZpZXdlclN0YXRlKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vICAgIEFsbG93IGV4dGVuc2lvbnMgdG8gcmVzdG9yZSB0aGVpciBkYXRhXG4gIC8vXG4gIC8vICAgIGZvciAodmFyIGV4dGVuc2lvbk5hbWUgaW4gdmlld2VyLmxvYWRlZEV4dGVuc2lvbnMpIHtcbiAgLy8gICAgICB2aWV3ZXIubG9hZGVkRXh0ZW5zaW9uc1tleHRlbnNpb25OYW1lXS5yZXN0b3JlU3RhdGUoXG4gIC8vICAgICAgICB2aWV3ZXJTdGF0ZSwgaW1tZWRpYXRlKTtcbiAgLy8gICAgfVxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICByZXN0b3JlU3RhdGUodmlld2VyU3RhdGUsIGltbWVkaWF0ZSkge1xuXG4gICAgdGhpcy5tYXJrdXAzRFRvb2wucmVzdG9yZVN0YXRlKFxuICAgICAgdmlld2VyU3RhdGUsIGltbWVkaWF0ZSk7XG4gIH1cbn1cblxuQXV0b2Rlc2suVmlld2luZy50aGVFeHRlbnNpb25NYW5hZ2VyLnJlZ2lzdGVyRXh0ZW5zaW9uKFxuICBNYXJrdXAzREV4dGVuc2lvbi5FeHRlbnNpb25JZCxcbiAgTWFya3VwM0RFeHRlbnNpb24pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL1ZpZXdpbmcuRXh0ZW5zaW9uLk1hcmt1cDNEL1ZpZXdpbmcuRXh0ZW5zaW9uLk1hcmt1cDNELmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==")},2:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v2.2.2\n * http://jquery.com/\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2016-03-17T17:51Z\n */\n\n(function( global, factory ) {\n\n	if ( typeof module === "object" && typeof module.exports === "object" ) {\n		// For CommonJS and CommonJS-like environments where a proper `window`\n		// is present, execute the factory and get jQuery.\n		// For environments that do not have a `window` with a `document`\n		// (such as Node.js), expose a factory as module.exports.\n		// This accentuates the need for the creation of a real `window`.\n		// e.g. var jQuery = require("jquery")(window);\n		// See ticket #14549 for more info.\n		module.exports = global.document ?\n			factory( global, true ) :\n			function( w ) {\n				if ( !w.document ) {\n					throw new Error( "jQuery requires a window with a document" );\n				}\n				return factory( w );\n			};\n	} else {\n		factory( global );\n	}\n\n// Pass this if window is not defined yet\n}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {\n\n// Support: Firefox 18+\n// Can\'t be in strict mode, several libs including ASP.NET trace\n// the stack via arguments.caller.callee and Firefox dies if\n// you try to trace through "use strict" call chains. (#13335)\n//"use strict";\nvar arr = [];\n\nvar document = window.document;\n\nvar slice = arr.slice;\n\nvar concat = arr.concat;\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar support = {};\n\n\n\nvar\n	version = "2.2.2",\n\n	// Define a local copy of jQuery\n	jQuery = function( selector, context ) {\n\n		// The jQuery object is actually just the init constructor \'enhanced\'\n		// Need init if jQuery is called (just allow error to be thrown if not included)\n		return new jQuery.fn.init( selector, context );\n	},\n\n	// Support: Android<4.1\n	// Make sure we trim BOM and NBSP\n	rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g,\n\n	// Matches dashed string for camelizing\n	rmsPrefix = /^-ms-/,\n	rdashAlpha = /-([\\da-z])/gi,\n\n	// Used by jQuery.camelCase as callback to replace()\n	fcamelCase = function( all, letter ) {\n		return letter.toUpperCase();\n	};\n\njQuery.fn = jQuery.prototype = {\n\n	// The current version of jQuery being used\n	jquery: version,\n\n	constructor: jQuery,\n\n	// Start with an empty selector\n	selector: "",\n\n	// The default length of a jQuery object is 0\n	length: 0,\n\n	toArray: function() {\n		return slice.call( this );\n	},\n\n	// Get the Nth element in the matched element set OR\n	// Get the whole matched element set as a clean array\n	get: function( num ) {\n		return num != null ?\n\n			// Return just the one element from the set\n			( num < 0 ? this[ num + this.length ] : this[ num ] ) :\n\n			// Return all the elements in a clean array\n			slice.call( this );\n	},\n\n	// Take an array of elements and push it onto the stack\n	// (returning the new matched element set)\n	pushStack: function( elems ) {\n\n		// Build a new jQuery matched element set\n		var ret = jQuery.merge( this.constructor(), elems );\n\n		// Add the old object onto the stack (as a reference)\n		ret.prevObject = this;\n		ret.context = this.context;\n\n		// Return the newly-formed element set\n		return ret;\n	},\n\n	// Execute a callback for every element in the matched set.\n	each: function( callback ) {\n		return jQuery.each( this, callback );\n	},\n\n	map: function( callback ) {\n		return this.pushStack( jQuery.map( this, function( elem, i ) {\n			return callback.call( elem, i, elem );\n		} ) );\n	},\n\n	slice: function() {\n		return this.pushStack( slice.apply( this, arguments ) );\n	},\n\n	first: function() {\n		return this.eq( 0 );\n	},\n\n	last: function() {\n		return this.eq( -1 );\n	},\n\n	eq: function( i ) {\n		var len = this.length,\n			j = +i + ( i < 0 ? len : 0 );\n		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n	},\n\n	end: function() {\n		return this.prevObject || this.constructor();\n	},\n\n	// For internal use only.\n	// Behaves like an Array\'s method, not like a jQuery method.\n	push: push,\n	sort: arr.sort,\n	splice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n	var options, name, src, copy, copyIsArray, clone,\n		target = arguments[ 0 ] || {},\n		i = 1,\n		length = arguments.length,\n		deep = false;\n\n	// Handle a deep copy situation\n	if ( typeof target === "boolean" ) {\n		deep = target;\n\n		// Skip the boolean and the target\n		target = arguments[ i ] || {};\n		i++;\n	}\n\n	// Handle case when target is a string or something (possible in deep copy)\n	if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {\n		target = {};\n	}\n\n	// Extend jQuery itself if only one argument is passed\n	if ( i === length ) {\n		target = this;\n		i--;\n	}\n\n	for ( ; i < length; i++ ) {\n\n		// Only deal with non-null/undefined values\n		if ( ( options = arguments[ i ] ) != null ) {\n\n			// Extend the base object\n			for ( name in options ) {\n				src = target[ name ];\n				copy = options[ name ];\n\n				// Prevent never-ending loop\n				if ( target === copy ) {\n					continue;\n				}\n\n				// Recurse if we\'re merging plain objects or arrays\n				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n					( copyIsArray = jQuery.isArray( copy ) ) ) ) {\n\n					if ( copyIsArray ) {\n						copyIsArray = false;\n						clone = src && jQuery.isArray( src ) ? src : [];\n\n					} else {\n						clone = src && jQuery.isPlainObject( src ) ? src : {};\n					}\n\n					// Never move original objects, clone them\n					target[ name ] = jQuery.extend( deep, clone, copy );\n\n				// Don\'t bring in undefined values\n				} else if ( copy !== undefined ) {\n					target[ name ] = copy;\n				}\n			}\n		}\n	}\n\n	// Return the modified object\n	return target;\n};\n\njQuery.extend( {\n\n	// Unique for each copy of jQuery on the page\n	expando: "jQuery" + ( version + Math.random() ).replace( /\\D/g, "" ),\n\n	// Assume jQuery is ready without the ready module\n	isReady: true,\n\n	error: function( msg ) {\n		throw new Error( msg );\n	},\n\n	noop: function() {},\n\n	isFunction: function( obj ) {\n		return jQuery.type( obj ) === "function";\n	},\n\n	isArray: Array.isArray,\n\n	isWindow: function( obj ) {\n		return obj != null && obj === obj.window;\n	},\n\n	isNumeric: function( obj ) {\n\n		// parseFloat NaNs numeric-cast false positives (null|true|false|"")\n		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")\n		// subtraction forces infinities to NaN\n		// adding 1 corrects loss of precision from parseFloat (#15100)\n		var realStringObj = obj && obj.toString();\n		return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;\n	},\n\n	isPlainObject: function( obj ) {\n		var key;\n\n		// Not plain objects:\n		// - Any object or value whose internal [[Class]] property is not "[object Object]"\n		// - DOM nodes\n		// - window\n		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {\n			return false;\n		}\n\n		// Not own constructor property must be Object\n		if ( obj.constructor &&\n				!hasOwn.call( obj, "constructor" ) &&\n				!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {\n			return false;\n		}\n\n		// Own properties are enumerated firstly, so to speed up,\n		// if last one is own, then all properties are own\n		for ( key in obj ) {}\n\n		return key === undefined || hasOwn.call( obj, key );\n	},\n\n	isEmptyObject: function( obj ) {\n		var name;\n		for ( name in obj ) {\n			return false;\n		}\n		return true;\n	},\n\n	type: function( obj ) {\n		if ( obj == null ) {\n			return obj + "";\n		}\n\n		// Support: Android<4.0, iOS<6 (functionish RegExp)\n		return typeof obj === "object" || typeof obj === "function" ?\n			class2type[ toString.call( obj ) ] || "object" :\n			typeof obj;\n	},\n\n	// Evaluates a script in a global context\n	globalEval: function( code ) {\n		var script,\n			indirect = eval;\n\n		code = jQuery.trim( code );\n\n		if ( code ) {\n\n			// If the code includes a valid, prologue position\n			// strict mode pragma, execute code by injecting a\n			// script tag into the document.\n			if ( code.indexOf( "use strict" ) === 1 ) {\n				script = document.createElement( "script" );\n				script.text = code;\n				document.head.appendChild( script ).parentNode.removeChild( script );\n			} else {\n\n				// Otherwise, avoid the DOM node creation, insertion\n				// and removal by using an indirect global eval\n\n				indirect( code );\n			}\n		}\n	},\n\n	// Convert dashed to camelCase; used by the css and data modules\n	// Support: IE9-11+\n	// Microsoft forgot to hump their vendor prefix (#9572)\n	camelCase: function( string ) {\n		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );\n	},\n\n	nodeName: function( elem, name ) {\n		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n	},\n\n	each: function( obj, callback ) {\n		var length, i = 0;\n\n		if ( isArrayLike( obj ) ) {\n			length = obj.length;\n			for ( ; i < length; i++ ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		} else {\n			for ( i in obj ) {\n				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n					break;\n				}\n			}\n		}\n\n		return obj;\n	},\n\n	// Support: Android<4.1\n	trim: function( text ) {\n		return text == null ?\n			"" :\n			( text + "" ).replace( rtrim, "" );\n	},\n\n	// results is for internal usage only\n	makeArray: function( arr, results ) {\n		var ret = results || [];\n\n		if ( arr != null ) {\n			if ( isArrayLike( Object( arr ) ) ) {\n				jQuery.merge( ret,\n					typeof arr === "string" ?\n					[ arr ] : arr\n				);\n			} else {\n				push.call( ret, arr );\n			}\n		}\n\n		return ret;\n	},\n\n	inArray: function( elem, arr, i ) {\n		return arr == null ? -1 : indexOf.call( arr, elem, i );\n	},\n\n	merge: function( first, second ) {\n		var len = +second.length,\n			j = 0,\n			i = first.length;\n\n		for ( ; j < len; j++ ) {\n			first[ i++ ] = second[ j ];\n		}\n\n		first.length = i;\n\n		return first;\n	},\n\n	grep: function( elems, callback, invert ) {\n		var callbackInverse,\n			matches = [],\n			i = 0,\n			length = elems.length,\n			callbackExpect = !invert;\n\n		// Go through the array, only saving the items\n		// that pass the validator function\n		for ( ; i < length; i++ ) {\n			callbackInverse = !callback( elems[ i ], i );\n			if ( callbackInverse !== callbackExpect ) {\n				matches.push( elems[ i ] );\n			}\n		}\n\n		return matches;\n	},\n\n	// arg is for internal usage only\n	map: function( elems, callback, arg ) {\n		var length, value,\n			i = 0,\n			ret = [];\n\n		// Go through the array, translating each of the items to their new values\n		if ( isArrayLike( elems ) ) {\n			length = elems.length;\n			for ( ; i < length; i++ ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n\n		// Go through every key on the object,\n		} else {\n			for ( i in elems ) {\n				value = callback( elems[ i ], i, arg );\n\n				if ( value != null ) {\n					ret.push( value );\n				}\n			}\n		}\n\n		// Flatten any nested arrays\n		return concat.apply( [], ret );\n	},\n\n	// A global GUID counter for objects\n	guid: 1,\n\n	// Bind a function to a context, optionally partially applying any\n	// arguments.\n	proxy: function( fn, context ) {\n		var tmp, args, proxy;\n\n		if ( typeof context === "string" ) {\n			tmp = fn[ context ];\n			context = fn;\n			fn = tmp;\n		}\n\n		// Quick check to determine if target is callable, in the spec\n		// this throws a TypeError, but we will just return undefined.\n		if ( !jQuery.isFunction( fn ) ) {\n			return undefined;\n		}\n\n		// Simulated bind\n		args = slice.call( arguments, 2 );\n		proxy = function() {\n			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n		};\n\n		// Set the guid of unique handler to the same of original handler, so it can be removed\n		proxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n		return proxy;\n	},\n\n	now: Date.now,\n\n	// jQuery.support is not used in Core but other projects attach their\n	// properties to it so it needs to exist.\n	support: support\n} );\n\n// JSHint would error on this code due to the Symbol not being defined in ES5.\n// Defining this global in .jshintrc would create a danger of using the global\n// unguarded in another place, it seems safer to just disable JSHint for these\n// three lines.\n/* jshint ignore: start */\nif ( typeof Symbol === "function" ) {\n	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n/* jshint ignore: end */\n\n// Populate the class2type map\njQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),\nfunction( i, name ) {\n	class2type[ "[object " + name + "]" ] = name.toLowerCase();\n} );\n\nfunction isArrayLike( obj ) {\n\n	// Support: iOS 8.2 (not reproducible in simulator)\n	// `in` check used to prevent JIT error (gh-2145)\n	// hasOwn isn\'t used here due to false negatives\n	// regarding Nodelist length in IE\n	var length = !!obj && "length" in obj && obj.length,\n		type = jQuery.type( obj );\n\n	if ( type === "function" || jQuery.isWindow( obj ) ) {\n		return false;\n	}\n\n	return type === "array" || length === 0 ||\n		typeof length === "number" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.2.1\n * http://sizzlejs.com/\n *\n * Copyright jQuery Foundation and other contributors\n * Released under the MIT license\n * http://jquery.org/license\n *\n * Date: 2015-10-17\n */\n(function( window ) {\n\nvar i,\n	support,\n	Expr,\n	getText,\n	isXML,\n	tokenize,\n	compile,\n	select,\n	outermostContext,\n	sortInput,\n	hasDuplicate,\n\n	// Local document vars\n	setDocument,\n	document,\n	docElem,\n	documentIsHTML,\n	rbuggyQSA,\n	rbuggyMatches,\n	matches,\n	contains,\n\n	// Instance-specific data\n	expando = "sizzle" + 1 * new Date(),\n	preferredDoc = window.document,\n	dirruns = 0,\n	done = 0,\n	classCache = createCache(),\n	tokenCache = createCache(),\n	compilerCache = createCache(),\n	sortOrder = function( a, b ) {\n		if ( a === b ) {\n			hasDuplicate = true;\n		}\n		return 0;\n	},\n\n	// General-purpose constants\n	MAX_NEGATIVE = 1 << 31,\n\n	// Instance methods\n	hasOwn = ({}).hasOwnProperty,\n	arr = [],\n	pop = arr.pop,\n	push_native = arr.push,\n	push = arr.push,\n	slice = arr.slice,\n	// Use a stripped-down indexOf as it\'s faster than native\n	// http://jsperf.com/thor-indexof-vs-for/5\n	indexOf = function( list, elem ) {\n		var i = 0,\n			len = list.length;\n		for ( ; i < len; i++ ) {\n			if ( list[i] === elem ) {\n				return i;\n			}\n		}\n		return -1;\n	},\n\n	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",\n\n	// Regular expressions\n\n	// http://www.w3.org/TR/css3-selectors/#whitespace\n	whitespace = "[\\\\x20\\\\t\\\\r\\\\n\\\\f]",\n\n	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n	identifier = "(?:\\\\\\\\.|[\\\\w-]|[^\\\\x00-\\\\xa0])+",\n\n	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n	attributes = "\\\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +\n		// Operator (capture 2)\n		"*([*^$|!~]?=)" + whitespace +\n		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"\n		"*(?:\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\"|(" + identifier + "))|)" + whitespace +\n		"*\\\\]",\n\n	pseudos = ":(" + identifier + ")(?:\\\\((" +\n		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n		// 1. quoted (capture 3; capture 4 or capture 5)\n		"(\'((?:\\\\\\\\.|[^\\\\\\\\\'])*)\'|\\"((?:\\\\\\\\.|[^\\\\\\\\\\"])*)\\")|" +\n		// 2. simple (capture 6)\n		"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|" + attributes + ")*)|" +\n		// 3. anything else (capture 2)\n		".*" +\n		")\\\\)|)",\n\n	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n	rwhitespace = new RegExp( whitespace + "+", "g" ),\n	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)" + whitespace + "+$", "g" ),\n\n	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),\n	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),\n\n	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\\\]\'\\"]*?)" + whitespace + "*\\\\]", "g" ),\n\n	rpseudo = new RegExp( pseudos ),\n	ridentifier = new RegExp( "^" + identifier + "$" ),\n\n	matchExpr = {\n		"ID": new RegExp( "^#(" + identifier + ")" ),\n		"CLASS": new RegExp( "^\\\\.(" + identifier + ")" ),\n		"TAG": new RegExp( "^(" + identifier + "|[*])" ),\n		"ATTR": new RegExp( "^" + attributes ),\n		"PSEUDO": new RegExp( "^" + pseudos ),\n		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(" + whitespace +\n			"*(even|odd|(([+-]|)(\\\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +\n			"*(\\\\d+)|))" + whitespace + "*\\\\)|)", "i" ),\n		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),\n		// For use in libraries implementing .is()\n		// We use this for POS matching in `select`\n		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(" +\n			whitespace + "*((?:-\\\\d)?\\\\d*)" + whitespace + "*\\\\)|)(?=[^-]|$)", "i" )\n	},\n\n	rinputs = /^(?:input|select|textarea|button)$/i,\n	rheader = /^h\\d$/i,\n\n	rnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n	// Easily-parseable/retrievable ID or TAG or CLASS selectors\n	rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n	rsibling = /[+~]/,\n	rescape = /\'|\\\\/g,\n\n	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n	runescape = new RegExp( "\\\\\\\\([\\\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),\n	funescape = function( _, escaped, escapedWhitespace ) {\n		var high = "0x" + escaped - 0x10000;\n		// NaN means non-codepoint\n		// Support: Firefox<24\n		// Workaround erroneous numeric interpretation of +"0x"\n		return high !== high || escapedWhitespace ?\n			escaped :\n			high < 0 ?\n				// BMP codepoint\n				String.fromCharCode( high + 0x10000 ) :\n				// Supplemental Plane codepoint (surrogate pair)\n				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n	},\n\n	// Used for iframes\n	// See setDocument()\n	// Removing the function wrapper causes a "Permission Denied"\n	// error in IE\n	unloadHandler = function() {\n		setDocument();\n	};\n\n// Optimize for push.apply( _, NodeList )\ntry {\n	push.apply(\n		(arr = slice.call( preferredDoc.childNodes )),\n		preferredDoc.childNodes\n	);\n	// Support: Android<4.0\n	// Detect silently failing push.apply\n	arr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n	push = { apply: arr.length ?\n\n		// Leverage slice if possible\n		function( target, els ) {\n			push_native.apply( target, slice.call(els) );\n		} :\n\n		// Support: IE<9\n		// Otherwise append directly\n		function( target, els ) {\n			var j = target.length,\n				i = 0;\n			// Can\'t trust NodeList.length\n			while ( (target[j++] = els[i++]) ) {}\n			target.length = j - 1;\n		}\n	};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n	var m, i, elem, nid, nidselect, match, groups, newSelector,\n		newContext = context && context.ownerDocument,\n\n		// nodeType defaults to 9, since context defaults to document\n		nodeType = context ? context.nodeType : 9;\n\n	results = results || [];\n\n	// Return early from calls with invalid selector or context\n	if ( typeof selector !== "string" || !selector ||\n		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n		return results;\n	}\n\n	// Try to shortcut find operations (as opposed to filters) in HTML documents\n	if ( !seed ) {\n\n		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {\n			setDocument( context );\n		}\n		context = context || document;\n\n		if ( documentIsHTML ) {\n\n			// If the selector is sufficiently simple, try using a "get*By*" DOM method\n			// (excepting DocumentFragment context, where the methods don\'t exist)\n			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {\n\n				// ID selector\n				if ( (m = match[1]) ) {\n\n					// Document context\n					if ( nodeType === 9 ) {\n						if ( (elem = context.getElementById( m )) ) {\n\n							// Support: IE, Opera, Webkit\n							// TODO: identify versions\n							// getElementById can match elements by name instead of ID\n							if ( elem.id === m ) {\n								results.push( elem );\n								return results;\n							}\n						} else {\n							return results;\n						}\n\n					// Element context\n					} else {\n\n						// Support: IE, Opera, Webkit\n						// TODO: identify versions\n						// getElementById can match elements by name instead of ID\n						if ( newContext && (elem = newContext.getElementById( m )) &&\n							contains( context, elem ) &&\n							elem.id === m ) {\n\n							results.push( elem );\n							return results;\n						}\n					}\n\n				// Type selector\n				} else if ( match[2] ) {\n					push.apply( results, context.getElementsByTagName( selector ) );\n					return results;\n\n				// Class selector\n				} else if ( (m = match[3]) && support.getElementsByClassName &&\n					context.getElementsByClassName ) {\n\n					push.apply( results, context.getElementsByClassName( m ) );\n					return results;\n				}\n			}\n\n			// Take advantage of querySelectorAll\n			if ( support.qsa &&\n				!compilerCache[ selector + " " ] &&\n				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {\n\n				if ( nodeType !== 1 ) {\n					newContext = context;\n					newSelector = selector;\n\n				// qSA looks outside Element context, which is not what we want\n				// Thanks to Andrew Dupont for this workaround technique\n				// Support: IE <=8\n				// Exclude object elements\n				} else if ( context.nodeName.toLowerCase() !== "object" ) {\n\n					// Capture the context ID, setting it first if necessary\n					if ( (nid = context.getAttribute( "id" )) ) {\n						nid = nid.replace( rescape, "\\\\$&" );\n					} else {\n						context.setAttribute( "id", (nid = expando) );\n					}\n\n					// Prefix every selector in the list\n					groups = tokenize( selector );\n					i = groups.length;\n					nidselect = ridentifier.test( nid ) ? "#" + nid : "[id=\'" + nid + "\']";\n					while ( i-- ) {\n						groups[i] = nidselect + " " + toSelector( groups[i] );\n					}\n					newSelector = groups.join( "," );\n\n					// Expand context for sibling selectors\n					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n						context;\n				}\n\n				if ( newSelector ) {\n					try {\n						push.apply( results,\n							newContext.querySelectorAll( newSelector )\n						);\n						return results;\n					} catch ( qsaError ) {\n					} finally {\n						if ( nid === expando ) {\n							context.removeAttribute( "id" );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	// All others\n	return select( selector.replace( rtrim, "$1" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *	deleting the oldest entry\n */\nfunction createCache() {\n	var keys = [];\n\n	function cache( key, value ) {\n		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)\n		if ( keys.push( key + " " ) > Expr.cacheLength ) {\n			// Only keep the most recent entries\n			delete cache[ keys.shift() ];\n		}\n		return (cache[ key + " " ] = value);\n	}\n	return cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n	fn[ expando ] = true;\n	return fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created div and expects a boolean result\n */\nfunction assert( fn ) {\n	var div = document.createElement("div");\n\n	try {\n		return !!fn( div );\n	} catch (e) {\n		return false;\n	} finally {\n		// Remove from its parent by default\n		if ( div.parentNode ) {\n			div.parentNode.removeChild( div );\n		}\n		// release memory in IE\n		div = null;\n	}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n	var arr = attrs.split("|"),\n		i = arr.length;\n\n	while ( i-- ) {\n		Expr.attrHandle[ arr[i] ] = handler;\n	}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n	var cur = b && a,\n		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n			( ~b.sourceIndex || MAX_NEGATIVE ) -\n			( ~a.sourceIndex || MAX_NEGATIVE );\n\n	// Use IE sourceIndex if available on both nodes\n	if ( diff ) {\n		return diff;\n	}\n\n	// Check if b follows a\n	if ( cur ) {\n		while ( (cur = cur.nextSibling) ) {\n			if ( cur === b ) {\n				return -1;\n			}\n		}\n	}\n\n	return a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return name === "input" && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n	return function( elem ) {\n		var name = elem.nodeName.toLowerCase();\n		return (name === "input" || name === "button") && elem.type === type;\n	};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n	return markFunction(function( argument ) {\n		argument = +argument;\n		return markFunction(function( seed, matches ) {\n			var j,\n				matchIndexes = fn( [], seed.length, argument ),\n				i = matchIndexes.length;\n\n			// Match elements found at the specified indexes\n			while ( i-- ) {\n				if ( seed[ (j = matchIndexes[i]) ] ) {\n					seed[j] = !(matches[j] = seed[j]);\n				}\n			}\n		});\n	});\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n	return context && typeof context.getElementsByTagName !== "undefined" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n	// documentElement is verified for cases where it doesn\'t yet exist\n	// (such as loading iframes in IE - #4833)\n	var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n	return documentElement ? documentElement.nodeName !== "HTML" : false;\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n	var hasCompare, parent,\n		doc = node ? node.ownerDocument || node : preferredDoc;\n\n	// Return early if doc is invalid or already selected\n	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {\n		return document;\n	}\n\n	// Update global variables\n	document = doc;\n	docElem = document.documentElement;\n	documentIsHTML = !isXML( document );\n\n	// Support: IE 9-11, Edge\n	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)\n	if ( (parent = document.defaultView) && parent.top !== parent ) {\n		// Support: IE 11\n		if ( parent.addEventListener ) {\n			parent.addEventListener( "unload", unloadHandler, false );\n\n		// Support: IE 9 - 10 only\n		} else if ( parent.attachEvent ) {\n			parent.attachEvent( "onunload", unloadHandler );\n		}\n	}\n\n	/* Attributes\n	---------------------------------------------------------------------- */\n\n	// Support: IE<8\n	// Verify that getAttribute really returns attributes and not properties\n	// (excepting IE8 booleans)\n	support.attributes = assert(function( div ) {\n		div.className = "i";\n		return !div.getAttribute("className");\n	});\n\n	/* getElement(s)By*\n	---------------------------------------------------------------------- */\n\n	// Check if getElementsByTagName("*") returns only elements\n	support.getElementsByTagName = assert(function( div ) {\n		div.appendChild( document.createComment("") );\n		return !div.getElementsByTagName("*").length;\n	});\n\n	// Support: IE<9\n	support.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n	// Support: IE<10\n	// Check if getElementById returns elements by name\n	// The broken getElementById methods don\'t pick up programatically-set names,\n	// so use a roundabout getElementsByName test\n	support.getById = assert(function( div ) {\n		docElem.appendChild( div ).id = expando;\n		return !document.getElementsByName || !document.getElementsByName( expando ).length;\n	});\n\n	// ID find and filter\n	if ( support.getById ) {\n		Expr.find["ID"] = function( id, context ) {\n			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {\n				var m = context.getElementById( id );\n				return m ? [ m ] : [];\n			}\n		};\n		Expr.filter["ID"] = function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				return elem.getAttribute("id") === attrId;\n			};\n		};\n	} else {\n		// Support: IE6/7\n		// getElementById is not reliable as a find shortcut\n		delete Expr.find["ID"];\n\n		Expr.filter["ID"] =  function( id ) {\n			var attrId = id.replace( runescape, funescape );\n			return function( elem ) {\n				var node = typeof elem.getAttributeNode !== "undefined" &&\n					elem.getAttributeNode("id");\n				return node && node.value === attrId;\n			};\n		};\n	}\n\n	// Tag\n	Expr.find["TAG"] = support.getElementsByTagName ?\n		function( tag, context ) {\n			if ( typeof context.getElementsByTagName !== "undefined" ) {\n				return context.getElementsByTagName( tag );\n\n			// DocumentFragment nodes don\'t have gEBTN\n			} else if ( support.qsa ) {\n				return context.querySelectorAll( tag );\n			}\n		} :\n\n		function( tag, context ) {\n			var elem,\n				tmp = [],\n				i = 0,\n				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n				results = context.getElementsByTagName( tag );\n\n			// Filter out possible comments\n			if ( tag === "*" ) {\n				while ( (elem = results[i++]) ) {\n					if ( elem.nodeType === 1 ) {\n						tmp.push( elem );\n					}\n				}\n\n				return tmp;\n			}\n			return results;\n		};\n\n	// Class\n	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {\n		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {\n			return context.getElementsByClassName( className );\n		}\n	};\n\n	/* QSA/matchesSelector\n	---------------------------------------------------------------------- */\n\n	// QSA and matchesSelector support\n\n	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n	rbuggyMatches = [];\n\n	// qSa(:focus) reports false when true (Chrome 21)\n	// We allow this because of a bug in IE8/9 that throws an error\n	// whenever `document.activeElement` is accessed on an iframe\n	// So, we allow :focus to pass through QSA all the time to avoid the IE error\n	// See http://bugs.jquery.com/ticket/13378\n	rbuggyQSA = [];\n\n	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {\n		// Build QSA regex\n		// Regex strategy adopted from Diego Perini\n		assert(function( div ) {\n			// Select is set to empty string on purpose\n			// This is to test IE\'s treatment of not explicitly\n			// setting a boolean content attribute,\n			// since its presence should be enough\n			// http://bugs.jquery.com/ticket/12359\n			docElem.appendChild( div ).innerHTML = "<a id=\'" + expando + "\'></a>" +\n				"<select id=\'" + expando + "-\\r\\\\\' msallowcapture=\'\'>" +\n				"<option selected=\'\'></option></select>";\n\n			// Support: IE8, Opera 11-12.16\n			// Nothing should be selected when empty strings follow ^= or $= or *=\n			// The test attribute must be unknown in Opera but "safe" for WinRT\n			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n			if ( div.querySelectorAll("[msallowcapture^=\'\']").length ) {\n				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\'\'|\\"\\")" );\n			}\n\n			// Support: IE8\n			// Boolean attributes and "value" are not treated correctly\n			if ( !div.querySelectorAll("[selected]").length ) {\n				rbuggyQSA.push( "\\\\[" + whitespace + "*(?:value|" + booleans + ")" );\n			}\n\n			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {\n				rbuggyQSA.push("~=");\n			}\n\n			// Webkit/Opera - :checked should return selected option elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			// IE8 throws error here and will not see later tests\n			if ( !div.querySelectorAll(":checked").length ) {\n				rbuggyQSA.push(":checked");\n			}\n\n			// Support: Safari 8+, iOS 8+\n			// https://bugs.webkit.org/show_bug.cgi?id=136851\n			// In-page `selector#id sibing-combinator selector` fails\n			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {\n				rbuggyQSA.push(".#.+[+~]");\n			}\n		});\n\n		assert(function( div ) {\n			// Support: Windows 8 Native Apps\n			// The type and name attributes are restricted during .innerHTML assignment\n			var input = document.createElement("input");\n			input.setAttribute( "type", "hidden" );\n			div.appendChild( input ).setAttribute( "name", "D" );\n\n			// Support: IE8\n			// Enforce case-sensitivity of name attribute\n			if ( div.querySelectorAll("[name=d]").length ) {\n				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );\n			}\n\n			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n			// IE8 throws error here and will not see later tests\n			if ( !div.querySelectorAll(":enabled").length ) {\n				rbuggyQSA.push( ":enabled", ":disabled" );\n			}\n\n			// Opera 10-11 does not throw on post-comma invalid pseudos\n			div.querySelectorAll("*,:x");\n			rbuggyQSA.push(",.*:");\n		});\n	}\n\n	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||\n		docElem.webkitMatchesSelector ||\n		docElem.mozMatchesSelector ||\n		docElem.oMatchesSelector ||\n		docElem.msMatchesSelector) )) ) {\n\n		assert(function( div ) {\n			// Check to see if it\'s possible to do matchesSelector\n			// on a disconnected node (IE 9)\n			support.disconnectedMatch = matches.call( div, "div" );\n\n			// This should fail with an exception\n			// Gecko does not error, returns false instead\n			matches.call( div, "[s!=\'\']:x" );\n			rbuggyMatches.push( "!=", pseudos );\n		});\n	}\n\n	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );\n	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );\n\n	/* Contains\n	---------------------------------------------------------------------- */\n	hasCompare = rnative.test( docElem.compareDocumentPosition );\n\n	// Element contains another\n	// Purposefully self-exclusive\n	// As in, an element does not contain itself\n	contains = hasCompare || rnative.test( docElem.contains ) ?\n		function( a, b ) {\n			var adown = a.nodeType === 9 ? a.documentElement : a,\n				bup = b && b.parentNode;\n			return a === bup || !!( bup && bup.nodeType === 1 && (\n				adown.contains ?\n					adown.contains( bup ) :\n					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n			));\n		} :\n		function( a, b ) {\n			if ( b ) {\n				while ( (b = b.parentNode) ) {\n					if ( b === a ) {\n						return true;\n					}\n				}\n			}\n			return false;\n		};\n\n	/* Sorting\n	---------------------------------------------------------------------- */\n\n	// Document order sorting\n	sortOrder = hasCompare ?\n	function( a, b ) {\n\n		// Flag for duplicate removal\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		// Sort on method existence if only one input has compareDocumentPosition\n		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n		if ( compare ) {\n			return compare;\n		}\n\n		// Calculate position if both inputs belong to the same document\n		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?\n			a.compareDocumentPosition( b ) :\n\n			// Otherwise we know they are disconnected\n			1;\n\n		// Disconnected nodes\n		if ( compare & 1 ||\n			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {\n\n			// Choose the first element that is related to our preferred document\n			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {\n				return -1;\n			}\n			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {\n				return 1;\n			}\n\n			// Maintain original order\n			return sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n		}\n\n		return compare & 4 ? -1 : 1;\n	} :\n	function( a, b ) {\n		// Exit early if the nodes are identical\n		if ( a === b ) {\n			hasDuplicate = true;\n			return 0;\n		}\n\n		var cur,\n			i = 0,\n			aup = a.parentNode,\n			bup = b.parentNode,\n			ap = [ a ],\n			bp = [ b ];\n\n		// Parentless nodes are either documents or disconnected\n		if ( !aup || !bup ) {\n			return a === document ? -1 :\n				b === document ? 1 :\n				aup ? -1 :\n				bup ? 1 :\n				sortInput ?\n				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n				0;\n\n		// If the nodes are siblings, we can do a quick check\n		} else if ( aup === bup ) {\n			return siblingCheck( a, b );\n		}\n\n		// Otherwise we need full lists of their ancestors for comparison\n		cur = a;\n		while ( (cur = cur.parentNode) ) {\n			ap.unshift( cur );\n		}\n		cur = b;\n		while ( (cur = cur.parentNode) ) {\n			bp.unshift( cur );\n		}\n\n		// Walk down the tree looking for a discrepancy\n		while ( ap[i] === bp[i] ) {\n			i++;\n		}\n\n		return i ?\n			// Do a sibling check if the nodes have a common ancestor\n			siblingCheck( ap[i], bp[i] ) :\n\n			// Otherwise nodes in our document sort first\n			ap[i] === preferredDoc ? -1 :\n			bp[i] === preferredDoc ? 1 :\n			0;\n	};\n\n	return document;\n};\n\nSizzle.matches = function( expr, elements ) {\n	return Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	// Make sure that attribute selectors are quoted\n	expr = expr.replace( rattributeQuotes, "=\'$1\']" );\n\n	if ( support.matchesSelector && documentIsHTML &&\n		!compilerCache[ expr + " " ] &&\n		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n		try {\n			var ret = matches.call( elem, expr );\n\n			// IE 9\'s matchesSelector returns false on disconnected nodes\n			if ( ret || support.disconnectedMatch ||\n					// As well, disconnected nodes are said to be in a document\n					// fragment in IE 9\n					elem.document && elem.document.nodeType !== 11 ) {\n				return ret;\n			}\n		} catch (e) {}\n	}\n\n	return Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n	// Set document vars if needed\n	if ( ( context.ownerDocument || context ) !== document ) {\n		setDocument( context );\n	}\n	return contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n	// Set document vars if needed\n	if ( ( elem.ownerDocument || elem ) !== document ) {\n		setDocument( elem );\n	}\n\n	var fn = Expr.attrHandle[ name.toLowerCase() ],\n		// Don\'t get fooled by Object.prototype properties (jQuery #13807)\n		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n			fn( elem, name, !documentIsHTML ) :\n			undefined;\n\n	return val !== undefined ?\n		val :\n		support.attributes || !documentIsHTML ?\n			elem.getAttribute( name ) :\n			(val = elem.getAttributeNode(name)) && val.specified ?\n				val.value :\n				null;\n};\n\nSizzle.error = function( msg ) {\n	throw new Error( "Syntax error, unrecognized expression: " + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n	var elem,\n		duplicates = [],\n		j = 0,\n		i = 0;\n\n	// Unless we *know* we can detect duplicates, assume their presence\n	hasDuplicate = !support.detectDuplicates;\n	sortInput = !support.sortStable && results.slice( 0 );\n	results.sort( sortOrder );\n\n	if ( hasDuplicate ) {\n		while ( (elem = results[i++]) ) {\n			if ( elem === results[ i ] ) {\n				j = duplicates.push( i );\n			}\n		}\n		while ( j-- ) {\n			results.splice( duplicates[ j ], 1 );\n		}\n	}\n\n	// Clear input after sorting to release objects\n	// See https://github.com/jquery/sizzle/pull/225\n	sortInput = null;\n\n	return results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n	var node,\n		ret = "",\n		i = 0,\n		nodeType = elem.nodeType;\n\n	if ( !nodeType ) {\n		// If no nodeType, this is expected to be an array\n		while ( (node = elem[i++]) ) {\n			// Do not traverse comment nodes\n			ret += getText( node );\n		}\n	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n		// Use textContent for elements\n		// innerText usage removed for consistency of new lines (jQuery #11153)\n		if ( typeof elem.textContent === "string" ) {\n			return elem.textContent;\n		} else {\n			// Traverse its children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				ret += getText( elem );\n			}\n		}\n	} else if ( nodeType === 3 || nodeType === 4 ) {\n		return elem.nodeValue;\n	}\n	// Do not include comment or processing instruction nodes\n\n	return ret;\n};\n\nExpr = Sizzle.selectors = {\n\n	// Can be adjusted by the user\n	cacheLength: 50,\n\n	createPseudo: markFunction,\n\n	match: matchExpr,\n\n	attrHandle: {},\n\n	find: {},\n\n	relative: {\n		">": { dir: "parentNode", first: true },\n		" ": { dir: "parentNode" },\n		"+": { dir: "previousSibling", first: true },\n		"~": { dir: "previousSibling" }\n	},\n\n	preFilter: {\n		"ATTR": function( match ) {\n			match[1] = match[1].replace( runescape, funescape );\n\n			// Move the given value to match[3] whether quoted or unquoted\n			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );\n\n			if ( match[2] === "~=" ) {\n				match[3] = " " + match[3] + " ";\n			}\n\n			return match.slice( 0, 4 );\n		},\n\n		"CHILD": function( match ) {\n			/* matches from matchExpr["CHILD"]\n				1 type (only|nth|...)\n				2 what (child|of-type)\n				3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n				4 xn-component of xn+y argument ([+-]?\\d*n|)\n				5 sign of xn-component\n				6 x of xn-component\n				7 sign of y-component\n				8 y of y-component\n			*/\n			match[1] = match[1].toLowerCase();\n\n			if ( match[1].slice( 0, 3 ) === "nth" ) {\n				// nth-* requires argument\n				if ( !match[3] ) {\n					Sizzle.error( match[0] );\n				}\n\n				// numeric x and y parameters for Expr.filter.CHILD\n				// remember that false/true cast respectively to 0/1\n				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );\n				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );\n\n			// other types prohibit arguments\n			} else if ( match[3] ) {\n				Sizzle.error( match[0] );\n			}\n\n			return match;\n		},\n\n		"PSEUDO": function( match ) {\n			var excess,\n				unquoted = !match[6] && match[2];\n\n			if ( matchExpr["CHILD"].test( match[0] ) ) {\n				return null;\n			}\n\n			// Accept quoted arguments as-is\n			if ( match[3] ) {\n				match[2] = match[4] || match[5] || "";\n\n			// Strip excess characters from unquoted arguments\n			} else if ( unquoted && rpseudo.test( unquoted ) &&\n				// Get excess from tokenize (recursively)\n				(excess = tokenize( unquoted, true )) &&\n				// advance to the next closing parenthesis\n				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {\n\n				// excess is a negative index\n				match[0] = match[0].slice( 0, excess );\n				match[2] = unquoted.slice( 0, excess );\n			}\n\n			// Return only captures needed by the pseudo filter method (type and argument)\n			return match.slice( 0, 3 );\n		}\n	},\n\n	filter: {\n\n		"TAG": function( nodeNameSelector ) {\n			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n			return nodeNameSelector === "*" ?\n				function() { return true; } :\n				function( elem ) {\n					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n				};\n		},\n\n		"CLASS": function( className ) {\n			var pattern = classCache[ className + " " ];\n\n			return pattern ||\n				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&\n				classCache( className, function( elem ) {\n					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );\n				});\n		},\n\n		"ATTR": function( name, operator, check ) {\n			return function( elem ) {\n				var result = Sizzle.attr( elem, name );\n\n				if ( result == null ) {\n					return operator === "!=";\n				}\n				if ( !operator ) {\n					return true;\n				}\n\n				result += "";\n\n				return operator === "=" ? result === check :\n					operator === "!=" ? result !== check :\n					operator === "^=" ? check && result.indexOf( check ) === 0 :\n					operator === "*=" ? check && result.indexOf( check ) > -1 :\n					operator === "$=" ? check && result.slice( -check.length ) === check :\n					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :\n					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :\n					false;\n			};\n		},\n\n		"CHILD": function( type, what, argument, first, last ) {\n			var simple = type.slice( 0, 3 ) !== "nth",\n				forward = type.slice( -4 ) !== "last",\n				ofType = what === "of-type";\n\n			return first === 1 && last === 0 ?\n\n				// Shortcut for :nth-*(n)\n				function( elem ) {\n					return !!elem.parentNode;\n				} :\n\n				function( elem, context, xml ) {\n					var cache, uniqueCache, outerCache, node, nodeIndex, start,\n						dir = simple !== forward ? "nextSibling" : "previousSibling",\n						parent = elem.parentNode,\n						name = ofType && elem.nodeName.toLowerCase(),\n						useCache = !xml && !ofType,\n						diff = false;\n\n					if ( parent ) {\n\n						// :(first|last|only)-(child|of-type)\n						if ( simple ) {\n							while ( dir ) {\n								node = elem;\n								while ( (node = node[ dir ]) ) {\n									if ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) {\n\n										return false;\n									}\n								}\n								// Reverse direction for :only-* (if we haven\'t yet done so)\n								start = dir = type === "only" && !start && "nextSibling";\n							}\n							return true;\n						}\n\n						start = [ forward ? parent.firstChild : parent.lastChild ];\n\n						// non-xml :nth-child(...) stores cache data on `parent`\n						if ( forward && useCache ) {\n\n							// Seek `elem` from a previously-cached index\n\n							// ...in a gzip-friendly way\n							node = parent;\n							outerCache = node[ expando ] || (node[ expando ] = {});\n\n							// Support: IE <9 only\n							// Defend against cloned attroperties (jQuery gh-1709)\n							uniqueCache = outerCache[ node.uniqueID ] ||\n								(outerCache[ node.uniqueID ] = {});\n\n							cache = uniqueCache[ type ] || [];\n							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n							diff = nodeIndex && cache[ 2 ];\n							node = nodeIndex && parent.childNodes[ nodeIndex ];\n\n							while ( (node = ++nodeIndex && node && node[ dir ] ||\n\n								// Fallback to seeking `elem` from the start\n								(diff = nodeIndex = 0) || start.pop()) ) {\n\n								// When found, cache indexes on `parent` and break\n								if ( node.nodeType === 1 && ++diff && node === elem ) {\n									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n									break;\n								}\n							}\n\n						} else {\n							// Use previously-cached element index if available\n							if ( useCache ) {\n								// ...in a gzip-friendly way\n								node = elem;\n								outerCache = node[ expando ] || (node[ expando ] = {});\n\n								// Support: IE <9 only\n								// Defend against cloned attroperties (jQuery gh-1709)\n								uniqueCache = outerCache[ node.uniqueID ] ||\n									(outerCache[ node.uniqueID ] = {});\n\n								cache = uniqueCache[ type ] || [];\n								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n								diff = nodeIndex;\n							}\n\n							// xml :nth-child(...)\n							// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n							if ( diff === false ) {\n								// Use the same loop as above to seek `elem` from the start\n								while ( (node = ++nodeIndex && node && node[ dir ] ||\n									(diff = nodeIndex = 0) || start.pop()) ) {\n\n									if ( ( ofType ?\n										node.nodeName.toLowerCase() === name :\n										node.nodeType === 1 ) &&\n										++diff ) {\n\n										// Cache the index of each encountered element\n										if ( useCache ) {\n											outerCache = node[ expando ] || (node[ expando ] = {});\n\n											// Support: IE <9 only\n											// Defend against cloned attroperties (jQuery gh-1709)\n											uniqueCache = outerCache[ node.uniqueID ] ||\n												(outerCache[ node.uniqueID ] = {});\n\n											uniqueCache[ type ] = [ dirruns, diff ];\n										}\n\n										if ( node === elem ) {\n											break;\n										}\n									}\n								}\n							}\n						}\n\n						// Incorporate the offset, then check against cycle size\n						diff -= last;\n						return diff === first || ( diff % first === 0 && diff / first >= 0 );\n					}\n				};\n		},\n\n		"PSEUDO": function( pseudo, argument ) {\n			// pseudo-class names are case-insensitive\n			// http://www.w3.org/TR/selectors/#pseudo-classes\n			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n			// Remember that setFilters inherits from pseudos\n			var args,\n				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n					Sizzle.error( "unsupported pseudo: " + pseudo );\n\n			// The user may use createPseudo to indicate that\n			// arguments are needed to create the filter function\n			// just as Sizzle does\n			if ( fn[ expando ] ) {\n				return fn( argument );\n			}\n\n			// But maintain support for old signatures\n			if ( fn.length > 1 ) {\n				args = [ pseudo, pseudo, "", argument ];\n				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n					markFunction(function( seed, matches ) {\n						var idx,\n							matched = fn( seed, argument ),\n							i = matched.length;\n						while ( i-- ) {\n							idx = indexOf( seed, matched[i] );\n							seed[ idx ] = !( matches[ idx ] = matched[i] );\n						}\n					}) :\n					function( elem ) {\n						return fn( elem, 0, args );\n					};\n			}\n\n			return fn;\n		}\n	},\n\n	pseudos: {\n		// Potentially complex pseudos\n		"not": markFunction(function( selector ) {\n			// Trim the selector passed to compile\n			// to avoid treating leading and trailing\n			// spaces as combinators\n			var input = [],\n				results = [],\n				matcher = compile( selector.replace( rtrim, "$1" ) );\n\n			return matcher[ expando ] ?\n				markFunction(function( seed, matches, context, xml ) {\n					var elem,\n						unmatched = matcher( seed, null, xml, [] ),\n						i = seed.length;\n\n					// Match elements unmatched by `matcher`\n					while ( i-- ) {\n						if ( (elem = unmatched[i]) ) {\n							seed[i] = !(matches[i] = elem);\n						}\n					}\n				}) :\n				function( elem, context, xml ) {\n					input[0] = elem;\n					matcher( input, null, xml, results );\n					// Don\'t keep the element (issue #299)\n					input[0] = null;\n					return !results.pop();\n				};\n		}),\n\n		"has": markFunction(function( selector ) {\n			return function( elem ) {\n				return Sizzle( selector, elem ).length > 0;\n			};\n		}),\n\n		"contains": markFunction(function( text ) {\n			text = text.replace( runescape, funescape );\n			return function( elem ) {\n				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;\n			};\n		}),\n\n		// "Whether an element is represented by a :lang() selector\n		// is based solely on the element\'s language value\n		// being equal to the identifier C,\n		// or beginning with the identifier C immediately followed by "-".\n		// The matching of C against the element\'s language value is performed case-insensitively.\n		// The identifier C does not have to be a valid language name."\n		// http://www.w3.org/TR/selectors/#lang-pseudo\n		"lang": markFunction( function( lang ) {\n			// lang value must be a valid identifier\n			if ( !ridentifier.test(lang || "") ) {\n				Sizzle.error( "unsupported lang: " + lang );\n			}\n			lang = lang.replace( runescape, funescape ).toLowerCase();\n			return function( elem ) {\n				var elemLang;\n				do {\n					if ( (elemLang = documentIsHTML ?\n						elem.lang :\n						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {\n\n						elemLang = elemLang.toLowerCase();\n						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;\n					}\n				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );\n				return false;\n			};\n		}),\n\n		// Miscellaneous\n		"target": function( elem ) {\n			var hash = window.location && window.location.hash;\n			return hash && hash.slice( 1 ) === elem.id;\n		},\n\n		"root": function( elem ) {\n			return elem === docElem;\n		},\n\n		"focus": function( elem ) {\n			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n		},\n\n		// Boolean properties\n		"enabled": function( elem ) {\n			return elem.disabled === false;\n		},\n\n		"disabled": function( elem ) {\n			return elem.disabled === true;\n		},\n\n		"checked": function( elem ) {\n			// In CSS3, :checked should return both checked and selected elements\n			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n			var nodeName = elem.nodeName.toLowerCase();\n			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);\n		},\n\n		"selected": function( elem ) {\n			// Accessing this property makes selected-by-default\n			// options in Safari work properly\n			if ( elem.parentNode ) {\n				elem.parentNode.selectedIndex;\n			}\n\n			return elem.selected === true;\n		},\n\n		// Contents\n		"empty": function( elem ) {\n			// http://www.w3.org/TR/selectors/#empty-pseudo\n			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n			//   but not by others (comment: 8; processing instruction: 7; etc.)\n			// nodeType < 6 works because attributes (2) do not appear as children\n			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n				if ( elem.nodeType < 6 ) {\n					return false;\n				}\n			}\n			return true;\n		},\n\n		"parent": function( elem ) {\n			return !Expr.pseudos["empty"]( elem );\n		},\n\n		// Element/input types\n		"header": function( elem ) {\n			return rheader.test( elem.nodeName );\n		},\n\n		"input": function( elem ) {\n			return rinputs.test( elem.nodeName );\n		},\n\n		"button": function( elem ) {\n			var name = elem.nodeName.toLowerCase();\n			return name === "input" && elem.type === "button" || name === "button";\n		},\n\n		"text": function( elem ) {\n			var attr;\n			return elem.nodeName.toLowerCase() === "input" &&\n				elem.type === "text" &&\n\n				// Support: IE<8\n				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"\n				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );\n		},\n\n		// Position-in-collection\n		"first": createPositionalPseudo(function() {\n			return [ 0 ];\n		}),\n\n		"last": createPositionalPseudo(function( matchIndexes, length ) {\n			return [ length - 1 ];\n		}),\n\n		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			return [ argument < 0 ? argument + length : argument ];\n		}),\n\n		"even": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 0;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"odd": createPositionalPseudo(function( matchIndexes, length ) {\n			var i = 1;\n			for ( ; i < length; i += 2 ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; --i >= 0; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		}),\n\n		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {\n			var i = argument < 0 ? argument + length : argument;\n			for ( ; ++i < length; ) {\n				matchIndexes.push( i );\n			}\n			return matchIndexes;\n		})\n	}\n};\n\nExpr.pseudos["nth"] = Expr.pseudos["eq"];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n	Expr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n	Expr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n	var matched, match, tokens, type,\n		soFar, groups, preFilters,\n		cached = tokenCache[ selector + " " ];\n\n	if ( cached ) {\n		return parseOnly ? 0 : cached.slice( 0 );\n	}\n\n	soFar = selector;\n	groups = [];\n	preFilters = Expr.preFilter;\n\n	while ( soFar ) {\n\n		// Comma and first run\n		if ( !matched || (match = rcomma.exec( soFar )) ) {\n			if ( match ) {\n				// Don\'t consume trailing commas as valid\n				soFar = soFar.slice( match[0].length ) || soFar;\n			}\n			groups.push( (tokens = []) );\n		}\n\n		matched = false;\n\n		// Combinators\n		if ( (match = rcombinators.exec( soFar )) ) {\n			matched = match.shift();\n			tokens.push({\n				value: matched,\n				// Cast descendant combinators to space\n				type: match[0].replace( rtrim, " " )\n			});\n			soFar = soFar.slice( matched.length );\n		}\n\n		// Filters\n		for ( type in Expr.filter ) {\n			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||\n				(match = preFilters[ type ]( match ))) ) {\n				matched = match.shift();\n				tokens.push({\n					value: matched,\n					type: type,\n					matches: match\n				});\n				soFar = soFar.slice( matched.length );\n			}\n		}\n\n		if ( !matched ) {\n			break;\n		}\n	}\n\n	// Return the length of the invalid excess\n	// if we\'re just parsing\n	// Otherwise, throw an error or return tokens\n	return parseOnly ?\n		soFar.length :\n		soFar ?\n			Sizzle.error( selector ) :\n			// Cache the tokens\n			tokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n	var i = 0,\n		len = tokens.length,\n		selector = "";\n	for ( ; i < len; i++ ) {\n		selector += tokens[i].value;\n	}\n	return selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n	var dir = combinator.dir,\n		checkNonElements = base && dir === "parentNode",\n		doneName = done++;\n\n	return combinator.first ?\n		// Check against closest ancestor/preceding element\n		function( elem, context, xml ) {\n			while ( (elem = elem[ dir ]) ) {\n				if ( elem.nodeType === 1 || checkNonElements ) {\n					return matcher( elem, context, xml );\n				}\n			}\n		} :\n\n		// Check against all ancestor/preceding elements\n		function( elem, context, xml ) {\n			var oldCache, uniqueCache, outerCache,\n				newCache = [ dirruns, doneName ];\n\n			// We can\'t set arbitrary data on XML nodes, so they don\'t benefit from combinator caching\n			if ( xml ) {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						if ( matcher( elem, context, xml ) ) {\n							return true;\n						}\n					}\n				}\n			} else {\n				while ( (elem = elem[ dir ]) ) {\n					if ( elem.nodeType === 1 || checkNonElements ) {\n						outerCache = elem[ expando ] || (elem[ expando ] = {});\n\n						// Support: IE <9 only\n						// Defend against cloned attroperties (jQuery gh-1709)\n						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});\n\n						if ( (oldCache = uniqueCache[ dir ]) &&\n							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n							// Assign to newCache so results back-propagate to previous elements\n							return (newCache[ 2 ] = oldCache[ 2 ]);\n						} else {\n							// Reuse newcache so results back-propagate to previous elements\n							uniqueCache[ dir ] = newCache;\n\n							// A match means we\'re done; a fail means we have to keep checking\n							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {\n								return true;\n							}\n						}\n					}\n				}\n			}\n		};\n}\n\nfunction elementMatcher( matchers ) {\n	return matchers.length > 1 ?\n		function( elem, context, xml ) {\n			var i = matchers.length;\n			while ( i-- ) {\n				if ( !matchers[i]( elem, context, xml ) ) {\n					return false;\n				}\n			}\n			return true;\n		} :\n		matchers[0];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n	var i = 0,\n		len = contexts.length;\n	for ( ; i < len; i++ ) {\n		Sizzle( selector, contexts[i], results );\n	}\n	return results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n	var elem,\n		newUnmatched = [],\n		i = 0,\n		len = unmatched.length,\n		mapped = map != null;\n\n	for ( ; i < len; i++ ) {\n		if ( (elem = unmatched[i]) ) {\n			if ( !filter || filter( elem, context, xml ) ) {\n				newUnmatched.push( elem );\n				if ( mapped ) {\n					map.push( i );\n				}\n			}\n		}\n	}\n\n	return newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n	if ( postFilter && !postFilter[ expando ] ) {\n		postFilter = setMatcher( postFilter );\n	}\n	if ( postFinder && !postFinder[ expando ] ) {\n		postFinder = setMatcher( postFinder, postSelector );\n	}\n	return markFunction(function( seed, results, context, xml ) {\n		var temp, i, elem,\n			preMap = [],\n			postMap = [],\n			preexisting = results.length,\n\n			// Get initial elements from seed or context\n			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),\n\n			// Prefilter to get matcher input, preserving a map for seed-results synchronization\n			matcherIn = preFilter && ( seed || !selector ) ?\n				condense( elems, preMap, preFilter, context, xml ) :\n				elems,\n\n			matcherOut = matcher ?\n				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n					// ...intermediate processing is necessary\n					[] :\n\n					// ...otherwise use results directly\n					results :\n				matcherIn;\n\n		// Find primary matches\n		if ( matcher ) {\n			matcher( matcherIn, matcherOut, context, xml );\n		}\n\n		// Apply postFilter\n		if ( postFilter ) {\n			temp = condense( matcherOut, postMap );\n			postFilter( temp, [], context, xml );\n\n			// Un-match failing elements by moving them back to matcherIn\n			i = temp.length;\n			while ( i-- ) {\n				if ( (elem = temp[i]) ) {\n					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);\n				}\n			}\n		}\n\n		if ( seed ) {\n			if ( postFinder || preFilter ) {\n				if ( postFinder ) {\n					// Get the final matcherOut by condensing this intermediate into postFinder contexts\n					temp = [];\n					i = matcherOut.length;\n					while ( i-- ) {\n						if ( (elem = matcherOut[i]) ) {\n							// Restore matcherIn since elem is not yet a final match\n							temp.push( (matcherIn[i] = elem) );\n						}\n					}\n					postFinder( null, (matcherOut = []), temp, xml );\n				}\n\n				// Move matched elements from seed to results to keep them synchronized\n				i = matcherOut.length;\n				while ( i-- ) {\n					if ( (elem = matcherOut[i]) &&\n						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {\n\n						seed[temp] = !(results[temp] = elem);\n					}\n				}\n			}\n\n		// Add elements to results, through postFinder if defined\n		} else {\n			matcherOut = condense(\n				matcherOut === results ?\n					matcherOut.splice( preexisting, matcherOut.length ) :\n					matcherOut\n			);\n			if ( postFinder ) {\n				postFinder( null, results, matcherOut, xml );\n			} else {\n				push.apply( results, matcherOut );\n			}\n		}\n	});\n}\n\nfunction matcherFromTokens( tokens ) {\n	var checkContext, matcher, j,\n		len = tokens.length,\n		leadingRelative = Expr.relative[ tokens[0].type ],\n		implicitRelative = leadingRelative || Expr.relative[" "],\n		i = leadingRelative ? 1 : 0,\n\n		// The foundational matcher ensures that elements are reachable from top-level context(s)\n		matchContext = addCombinator( function( elem ) {\n			return elem === checkContext;\n		}, implicitRelative, true ),\n		matchAnyContext = addCombinator( function( elem ) {\n			return indexOf( checkContext, elem ) > -1;\n		}, implicitRelative, true ),\n		matchers = [ function( elem, context, xml ) {\n			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n				(checkContext = context).nodeType ?\n					matchContext( elem, context, xml ) :\n					matchAnyContext( elem, context, xml ) );\n			// Avoid hanging onto element (issue #299)\n			checkContext = null;\n			return ret;\n		} ];\n\n	for ( ; i < len; i++ ) {\n		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {\n			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];\n		} else {\n			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );\n\n			// Return special upon seeing a positional matcher\n			if ( matcher[ expando ] ) {\n				// Find the next relative operator (if any) for proper handling\n				j = ++i;\n				for ( ; j < len; j++ ) {\n					if ( Expr.relative[ tokens[j].type ] ) {\n						break;\n					}\n				}\n				return setMatcher(\n					i > 1 && elementMatcher( matchers ),\n					i > 1 && toSelector(\n						// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })\n					).replace( rtrim, "$1" ),\n					matcher,\n					i < j && matcherFromTokens( tokens.slice( i, j ) ),\n					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),\n					j < len && toSelector( tokens )\n				);\n			}\n			matchers.push( matcher );\n		}\n	}\n\n	return elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n	var bySet = setMatchers.length > 0,\n		byElement = elementMatchers.length > 0,\n		superMatcher = function( seed, context, xml, results, outermost ) {\n			var elem, j, matcher,\n				matchedCount = 0,\n				i = "0",\n				unmatched = seed && [],\n				setMatched = [],\n				contextBackup = outermostContext,\n				// We must always have either seed elements or outermost context\n				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),\n				// Use integer dirruns iff this is the outermost matcher\n				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),\n				len = elems.length;\n\n			if ( outermost ) {\n				outermostContext = context === document || context || outermost;\n			}\n\n			// Add elements passing elementMatchers directly to results\n			// Support: IE<9, Safari\n			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id\n			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {\n				if ( byElement && elem ) {\n					j = 0;\n					if ( !context && elem.ownerDocument !== document ) {\n						setDocument( elem );\n						xml = !documentIsHTML;\n					}\n					while ( (matcher = elementMatchers[j++]) ) {\n						if ( matcher( elem, context || document, xml) ) {\n							results.push( elem );\n							break;\n						}\n					}\n					if ( outermost ) {\n						dirruns = dirrunsUnique;\n					}\n				}\n\n				// Track unmatched elements for set filters\n				if ( bySet ) {\n					// They will have gone through all possible matchers\n					if ( (elem = !matcher && elem) ) {\n						matchedCount--;\n					}\n\n					// Lengthen the array for every element, matched or not\n					if ( seed ) {\n						unmatched.push( elem );\n					}\n				}\n			}\n\n			// `i` is now the count of elements visited above, and adding it to `matchedCount`\n			// makes the latter nonnegative.\n			matchedCount += i;\n\n			// Apply set filters to unmatched elements\n			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n			// equals `i`), unless we didn\'t visit _any_ elements in the above loop because we have\n			// no element matchers and no seed.\n			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that\n			// case, which will result in a "00" `matchedCount` that differs from `i` but is also\n			// numerically zero.\n			if ( bySet && i !== matchedCount ) {\n				j = 0;\n				while ( (matcher = setMatchers[j++]) ) {\n					matcher( unmatched, setMatched, context, xml );\n				}\n\n				if ( seed ) {\n					// Reintegrate element matches to eliminate the need for sorting\n					if ( matchedCount > 0 ) {\n						while ( i-- ) {\n							if ( !(unmatched[i] || setMatched[i]) ) {\n								setMatched[i] = pop.call( results );\n							}\n						}\n					}\n\n					// Discard index placeholder values to get only actual matches\n					setMatched = condense( setMatched );\n				}\n\n				// Add matches to results\n				push.apply( results, setMatched );\n\n				// Seedless set matches succeeding multiple successful matchers stipulate sorting\n				if ( outermost && !seed && setMatched.length > 0 &&\n					( matchedCount + setMatchers.length ) > 1 ) {\n\n					Sizzle.uniqueSort( results );\n				}\n			}\n\n			// Override manipulation of globals by nested matchers\n			if ( outermost ) {\n				dirruns = dirrunsUnique;\n				outermostContext = contextBackup;\n			}\n\n			return unmatched;\n		};\n\n	return bySet ?\n		markFunction( superMatcher ) :\n		superMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n	var i,\n		setMatchers = [],\n		elementMatchers = [],\n		cached = compilerCache[ selector + " " ];\n\n	if ( !cached ) {\n		// Generate a function of recursive functions that can be used to check each element\n		if ( !match ) {\n			match = tokenize( selector );\n		}\n		i = match.length;\n		while ( i-- ) {\n			cached = matcherFromTokens( match[i] );\n			if ( cached[ expando ] ) {\n				setMatchers.push( cached );\n			} else {\n				elementMatchers.push( cached );\n			}\n		}\n\n		// Cache the compiled function\n		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );\n\n		// Save selector and tokenization\n		cached.selector = selector;\n	}\n	return cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle\'s compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n	var i, tokens, token, type, find,\n		compiled = typeof selector === "function" && selector,\n		match = !seed && tokenize( (selector = compiled.selector || selector) );\n\n	results = results || [];\n\n	// Try to minimize operations if there is only one selector in the list and no seed\n	// (the latter of which guarantees us context)\n	if ( match.length === 1 ) {\n\n		// Reduce context if the leading compound selector is an ID\n		tokens = match[0] = match[0].slice( 0 );\n		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&\n				support.getById && context.nodeType === 9 && documentIsHTML &&\n				Expr.relative[ tokens[1].type ] ) {\n\n			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];\n			if ( !context ) {\n				return results;\n\n			// Precompiled matchers will still verify ancestry, so step up a level\n			} else if ( compiled ) {\n				context = context.parentNode;\n			}\n\n			selector = selector.slice( tokens.shift().value.length );\n		}\n\n		// Fetch a seed set for right-to-left matching\n		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;\n		while ( i-- ) {\n			token = tokens[i];\n\n			// Abort if we hit a combinator\n			if ( Expr.relative[ (type = token.type) ] ) {\n				break;\n			}\n			if ( (find = Expr.find[ type ]) ) {\n				// Search, expanding context for leading sibling combinators\n				if ( (seed = find(\n					token.matches[0].replace( runescape, funescape ),\n					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context\n				)) ) {\n\n					// If seed is empty or no tokens remain, we can return early\n					tokens.splice( i, 1 );\n					selector = seed.length && toSelector( tokens );\n					if ( !selector ) {\n						push.apply( results, seed );\n						return results;\n					}\n\n					break;\n				}\n			}\n		}\n	}\n\n	// Compile and execute a filtering function if one is not provided\n	// Provide `match` to avoid retokenization if we modified the selector above\n	( compiled || compile( selector, match ) )(\n		seed,\n		context,\n		!documentIsHTML,\n		results,\n		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n	);\n	return results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split("").sort( sortOrder ).join("") === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren\'t passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert(function( div1 ) {\n	// Should return 1, but returns 4 (following)\n	return div1.compareDocumentPosition( document.createElement("div") ) & 1;\n});\n\n// Support: IE<8\n// Prevent attribute/property "interpolation"\n// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert(function( div ) {\n	div.innerHTML = "<a href=\'#\'></a>";\n	return div.firstChild.getAttribute("href") === "#" ;\n}) ) {\n	addHandle( "type|href|height|width", function( elem, name, isXML ) {\n		if ( !isXML ) {\n			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );\n		}\n	});\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute("value")\nif ( !support.attributes || !assert(function( div ) {\n	div.innerHTML = "<input/>";\n	div.firstChild.setAttribute( "value", "" );\n	return div.firstChild.getAttribute( "value" ) === "";\n}) ) {\n	addHandle( "value", function( elem, name, isXML ) {\n		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {\n			return elem.defaultValue;\n		}\n	});\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert(function( div ) {\n	return div.getAttribute("disabled") == null;\n}) ) {\n	addHandle( booleans, function( elem, name, isXML ) {\n		var val;\n		if ( !isXML ) {\n			return elem[ name ] === true ? name.toLowerCase() :\n					(val = elem.getAttributeNode( name )) && val.specified ?\n					val.value :\n				null;\n		}\n	});\n}\n\nreturn Sizzle;\n\n})( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\njQuery.expr[ ":" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\n\n\n\nvar dir = function( elem, dir, until ) {\n	var matched = [],\n		truncate = until !== undefined;\n\n	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n		if ( elem.nodeType === 1 ) {\n			if ( truncate && jQuery( elem ).is( until ) ) {\n				break;\n			}\n			matched.push( elem );\n		}\n	}\n	return matched;\n};\n\n\nvar siblings = function( n, elem ) {\n	var matched = [];\n\n	for ( ; n; n = n.nextSibling ) {\n		if ( n.nodeType === 1 && n !== elem ) {\n			matched.push( n );\n		}\n	}\n\n	return matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\nvar rsingleTag = ( /^<([\\w-]+)\\s*\\/?>(?:<\\/\\1>|)$/ );\n\n\n\nvar risSimple = /^.[^:#\\[\\.,]*$/;\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n	if ( jQuery.isFunction( qualifier ) ) {\n		return jQuery.grep( elements, function( elem, i ) {\n			/* jshint -W018 */\n			return !!qualifier.call( elem, i, elem ) !== not;\n		} );\n\n	}\n\n	if ( qualifier.nodeType ) {\n		return jQuery.grep( elements, function( elem ) {\n			return ( elem === qualifier ) !== not;\n		} );\n\n	}\n\n	if ( typeof qualifier === "string" ) {\n		if ( risSimple.test( qualifier ) ) {\n			return jQuery.filter( qualifier, elements, not );\n		}\n\n		qualifier = jQuery.filter( qualifier, elements );\n	}\n\n	return jQuery.grep( elements, function( elem ) {\n		return ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n	} );\n}\n\njQuery.filter = function( expr, elems, not ) {\n	var elem = elems[ 0 ];\n\n	if ( not ) {\n		expr = ":not(" + expr + ")";\n	}\n\n	return elems.length === 1 && elem.nodeType === 1 ?\n		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :\n		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n			return elem.nodeType === 1;\n		} ) );\n};\n\njQuery.fn.extend( {\n	find: function( selector ) {\n		var i,\n			len = this.length,\n			ret = [],\n			self = this;\n\n		if ( typeof selector !== "string" ) {\n			return this.pushStack( jQuery( selector ).filter( function() {\n				for ( i = 0; i < len; i++ ) {\n					if ( jQuery.contains( self[ i ], this ) ) {\n						return true;\n					}\n				}\n			} ) );\n		}\n\n		for ( i = 0; i < len; i++ ) {\n			jQuery.find( selector, self[ i ], ret );\n		}\n\n		// Needed because $( selector, context ) becomes $( context ).find( selector )\n		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );\n		ret.selector = this.selector ? this.selector + " " + selector : selector;\n		return ret;\n	},\n	filter: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], false ) );\n	},\n	not: function( selector ) {\n		return this.pushStack( winnow( this, selector || [], true ) );\n	},\n	is: function( selector ) {\n		return !!winnow(\n			this,\n\n			// If this is a positional/relative selector, check membership in the returned set\n			// so $("p:first").is("p:last") won\'t return true for a doc with two "p".\n			typeof selector === "string" && rneedsContext.test( selector ) ?\n				jQuery( selector ) :\n				selector || [],\n			false\n		).length;\n	}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n	// A simple way to check for HTML strings\n	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)\n	// Strict HTML recognition (#11290: must start with <)\n	rquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]*))$/,\n\n	init = jQuery.fn.init = function( selector, context, root ) {\n		var match, elem;\n\n		// HANDLE: $(""), $(null), $(undefined), $(false)\n		if ( !selector ) {\n			return this;\n		}\n\n		// Method init() accepts an alternate rootjQuery\n		// so migrate can support jQuery.sub (gh-2101)\n		root = root || rootjQuery;\n\n		// Handle HTML strings\n		if ( typeof selector === "string" ) {\n			if ( selector[ 0 ] === "<" &&\n				selector[ selector.length - 1 ] === ">" &&\n				selector.length >= 3 ) {\n\n				// Assume that strings that start and end with <> are HTML and skip the regex check\n				match = [ null, selector, null ];\n\n			} else {\n				match = rquickExpr.exec( selector );\n			}\n\n			// Match html or make sure no context is specified for #id\n			if ( match && ( match[ 1 ] || !context ) ) {\n\n				// HANDLE: $(html) -> $(array)\n				if ( match[ 1 ] ) {\n					context = context instanceof jQuery ? context[ 0 ] : context;\n\n					// Option to run scripts is true for back-compat\n					// Intentionally let the error be thrown if parseHTML is not present\n					jQuery.merge( this, jQuery.parseHTML(\n						match[ 1 ],\n						context && context.nodeType ? context.ownerDocument || context : document,\n						true\n					) );\n\n					// HANDLE: $(html, props)\n					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n						for ( match in context ) {\n\n							// Properties of context are called as methods if possible\n							if ( jQuery.isFunction( this[ match ] ) ) {\n								this[ match ]( context[ match ] );\n\n							// ...and otherwise set as attributes\n							} else {\n								this.attr( match, context[ match ] );\n							}\n						}\n					}\n\n					return this;\n\n				// HANDLE: $(#id)\n				} else {\n					elem = document.getElementById( match[ 2 ] );\n\n					// Support: Blackberry 4.6\n					// gEBID returns nodes no longer in the document (#6963)\n					if ( elem && elem.parentNode ) {\n\n						// Inject the element directly into the jQuery object\n						this.length = 1;\n						this[ 0 ] = elem;\n					}\n\n					this.context = document;\n					this.selector = selector;\n					return this;\n				}\n\n			// HANDLE: $(expr, $(...))\n			} else if ( !context || context.jquery ) {\n				return ( context || root ).find( selector );\n\n			// HANDLE: $(expr, context)\n			// (which is just equivalent to: $(context).find(expr)\n			} else {\n				return this.constructor( context ).find( selector );\n			}\n\n		// HANDLE: $(DOMElement)\n		} else if ( selector.nodeType ) {\n			this.context = this[ 0 ] = selector;\n			this.length = 1;\n			return this;\n\n		// HANDLE: $(function)\n		// Shortcut for document ready\n		} else if ( jQuery.isFunction( selector ) ) {\n			return root.ready !== undefined ?\n				root.ready( selector ) :\n\n				// Execute immediately if ready is not present\n				selector( jQuery );\n		}\n\n		if ( selector.selector !== undefined ) {\n			this.selector = selector.selector;\n			this.context = selector.context;\n		}\n\n		return jQuery.makeArray( selector, this );\n	};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n	// Methods guaranteed to produce a unique set when starting from a unique set\n	guaranteedUnique = {\n		children: true,\n		contents: true,\n		next: true,\n		prev: true\n	};\n\njQuery.fn.extend( {\n	has: function( target ) {\n		var targets = jQuery( target, this ),\n			l = targets.length;\n\n		return this.filter( function() {\n			var i = 0;\n			for ( ; i < l; i++ ) {\n				if ( jQuery.contains( this, targets[ i ] ) ) {\n					return true;\n				}\n			}\n		} );\n	},\n\n	closest: function( selectors, context ) {\n		var cur,\n			i = 0,\n			l = this.length,\n			matched = [],\n			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?\n				jQuery( selectors, context || this.context ) :\n				0;\n\n		for ( ; i < l; i++ ) {\n			for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n				// Always skip document fragments\n				if ( cur.nodeType < 11 && ( pos ?\n					pos.index( cur ) > -1 :\n\n					// Don\'t pass non-elements to Sizzle\n					cur.nodeType === 1 &&\n						jQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n					matched.push( cur );\n					break;\n				}\n			}\n		}\n\n		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n	},\n\n	// Determine the position of an element within the set\n	index: function( elem ) {\n\n		// No argument, return index in parent\n		if ( !elem ) {\n			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n		}\n\n		// Index in selector\n		if ( typeof elem === "string" ) {\n			return indexOf.call( jQuery( elem ), this[ 0 ] );\n		}\n\n		// Locate the position of the desired element\n		return indexOf.call( this,\n\n			// If it receives a jQuery object, the first element is used\n			elem.jquery ? elem[ 0 ] : elem\n		);\n	},\n\n	add: function( selector, context ) {\n		return this.pushStack(\n			jQuery.uniqueSort(\n				jQuery.merge( this.get(), jQuery( selector, context ) )\n			)\n		);\n	},\n\n	addBack: function( selector ) {\n		return this.add( selector == null ?\n			this.prevObject : this.prevObject.filter( selector )\n		);\n	}\n} );\n\nfunction sibling( cur, dir ) {\n	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n	return cur;\n}\n\njQuery.each( {\n	parent: function( elem ) {\n		var parent = elem.parentNode;\n		return parent && parent.nodeType !== 11 ? parent : null;\n	},\n	parents: function( elem ) {\n		return dir( elem, "parentNode" );\n	},\n	parentsUntil: function( elem, i, until ) {\n		return dir( elem, "parentNode", until );\n	},\n	next: function( elem ) {\n		return sibling( elem, "nextSibling" );\n	},\n	prev: function( elem ) {\n		return sibling( elem, "previousSibling" );\n	},\n	nextAll: function( elem ) {\n		return dir( elem, "nextSibling" );\n	},\n	prevAll: function( elem ) {\n		return dir( elem, "previousSibling" );\n	},\n	nextUntil: function( elem, i, until ) {\n		return dir( elem, "nextSibling", until );\n	},\n	prevUntil: function( elem, i, until ) {\n		return dir( elem, "previousSibling", until );\n	},\n	siblings: function( elem ) {\n		return siblings( ( elem.parentNode || {} ).firstChild, elem );\n	},\n	children: function( elem ) {\n		return siblings( elem.firstChild );\n	},\n	contents: function( elem ) {\n		return elem.contentDocument || jQuery.merge( [], elem.childNodes );\n	}\n}, function( name, fn ) {\n	jQuery.fn[ name ] = function( until, selector ) {\n		var matched = jQuery.map( this, fn, until );\n\n		if ( name.slice( -5 ) !== "Until" ) {\n			selector = until;\n		}\n\n		if ( selector && typeof selector === "string" ) {\n			matched = jQuery.filter( selector, matched );\n		}\n\n		if ( this.length > 1 ) {\n\n			// Remove duplicates\n			if ( !guaranteedUnique[ name ] ) {\n				jQuery.uniqueSort( matched );\n			}\n\n			// Reverse order for parents* and prev-derivatives\n			if ( rparentsprev.test( name ) ) {\n				matched.reverse();\n			}\n		}\n\n		return this.pushStack( matched );\n	};\n} );\nvar rnotwhite = ( /\\S+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n	var object = {};\n	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {\n		object[ flag ] = true;\n	} );\n	return object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *	options: an optional list of space-separated options that will change how\n *			the callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * "fired" multiple times.\n *\n * Possible options:\n *\n *	once:			will ensure the callback list can only be fired once (like a Deferred)\n *\n *	memory:			will keep track of previous values and will call any callback added\n *					after the list has been fired right away with the latest "memorized"\n *					values (like a Deferred)\n *\n *	unique:			will ensure a callback can only be added once (no duplicate in the list)\n *\n *	stopOnFalse:	interrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n	// Convert options from String-formatted to Object-formatted if needed\n	// (we check in cache first)\n	options = typeof options === "string" ?\n		createOptions( options ) :\n		jQuery.extend( {}, options );\n\n	var // Flag to know if list is currently firing\n		firing,\n\n		// Last fire value for non-forgettable lists\n		memory,\n\n		// Flag to know if list was already fired\n		fired,\n\n		// Flag to prevent firing\n		locked,\n\n		// Actual callback list\n		list = [],\n\n		// Queue of execution data for repeatable lists\n		queue = [],\n\n		// Index of currently firing callback (modified by add/remove as needed)\n		firingIndex = -1,\n\n		// Fire callbacks\n		fire = function() {\n\n			// Enforce single-firing\n			locked = options.once;\n\n			// Execute callbacks for all pending executions,\n			// respecting firingIndex overrides and runtime changes\n			fired = firing = true;\n			for ( ; queue.length; firingIndex = -1 ) {\n				memory = queue.shift();\n				while ( ++firingIndex < list.length ) {\n\n					// Run callback and check for early termination\n					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n						options.stopOnFalse ) {\n\n						// Jump to end and forget the data so .add doesn\'t re-fire\n						firingIndex = list.length;\n						memory = false;\n					}\n				}\n			}\n\n			// Forget the data if we\'re done with it\n			if ( !options.memory ) {\n				memory = false;\n			}\n\n			firing = false;\n\n			// Clean up if we\'re done firing for good\n			if ( locked ) {\n\n				// Keep an empty list if we have data for future add calls\n				if ( memory ) {\n					list = [];\n\n				// Otherwise, this object is spent\n				} else {\n					list = "";\n				}\n			}\n		},\n\n		// Actual Callbacks object\n		self = {\n\n			// Add a callback or a collection of callbacks to the list\n			add: function() {\n				if ( list ) {\n\n					// If we have memory from a past run, we should fire after adding\n					if ( memory && !firing ) {\n						firingIndex = list.length - 1;\n						queue.push( memory );\n					}\n\n					( function add( args ) {\n						jQuery.each( args, function( _, arg ) {\n							if ( jQuery.isFunction( arg ) ) {\n								if ( !options.unique || !self.has( arg ) ) {\n									list.push( arg );\n								}\n							} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {\n\n								// Inspect recursively\n								add( arg );\n							}\n						} );\n					} )( arguments );\n\n					if ( memory && !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Remove a callback from the list\n			remove: function() {\n				jQuery.each( arguments, function( _, arg ) {\n					var index;\n					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n						list.splice( index, 1 );\n\n						// Handle firing indexes\n						if ( index <= firingIndex ) {\n							firingIndex--;\n						}\n					}\n				} );\n				return this;\n			},\n\n			// Check if a given callback is in the list.\n			// If no argument is given, return whether or not list has callbacks attached.\n			has: function( fn ) {\n				return fn ?\n					jQuery.inArray( fn, list ) > -1 :\n					list.length > 0;\n			},\n\n			// Remove all callbacks from the list\n			empty: function() {\n				if ( list ) {\n					list = [];\n				}\n				return this;\n			},\n\n			// Disable .fire and .add\n			// Abort any current/pending executions\n			// Clear all callbacks and values\n			disable: function() {\n				locked = queue = [];\n				list = memory = "";\n				return this;\n			},\n			disabled: function() {\n				return !list;\n			},\n\n			// Disable .fire\n			// Also disable .add unless we have memory (since it would have no effect)\n			// Abort any pending executions\n			lock: function() {\n				locked = queue = [];\n				if ( !memory ) {\n					list = memory = "";\n				}\n				return this;\n			},\n			locked: function() {\n				return !!locked;\n			},\n\n			// Call all callbacks with the given context and arguments\n			fireWith: function( context, args ) {\n				if ( !locked ) {\n					args = args || [];\n					args = [ context, args.slice ? args.slice() : args ];\n					queue.push( args );\n					if ( !firing ) {\n						fire();\n					}\n				}\n				return this;\n			},\n\n			// Call all the callbacks with the given arguments\n			fire: function() {\n				self.fireWith( this, arguments );\n				return this;\n			},\n\n			// To know if the callbacks have already been called at least once\n			fired: function() {\n				return !!fired;\n			}\n		};\n\n	return self;\n};\n\n\njQuery.extend( {\n\n	Deferred: function( func ) {\n		var tuples = [\n\n				// action, add listener, listener list, final state\n				[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],\n				[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],\n				[ "notify", "progress", jQuery.Callbacks( "memory" ) ]\n			],\n			state = "pending",\n			promise = {\n				state: function() {\n					return state;\n				},\n				always: function() {\n					deferred.done( arguments ).fail( arguments );\n					return this;\n				},\n				then: function( /* fnDone, fnFail, fnProgress */ ) {\n					var fns = arguments;\n					return jQuery.Deferred( function( newDefer ) {\n						jQuery.each( tuples, function( i, tuple ) {\n							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];\n\n							// deferred[ done | fail | progress ] for forwarding actions to newDefer\n							deferred[ tuple[ 1 ] ]( function() {\n								var returned = fn && fn.apply( this, arguments );\n								if ( returned && jQuery.isFunction( returned.promise ) ) {\n									returned.promise()\n										.progress( newDefer.notify )\n										.done( newDefer.resolve )\n										.fail( newDefer.reject );\n								} else {\n									newDefer[ tuple[ 0 ] + "With" ](\n										this === promise ? newDefer.promise() : this,\n										fn ? [ returned ] : arguments\n									);\n								}\n							} );\n						} );\n						fns = null;\n					} ).promise();\n				},\n\n				// Get a promise for this deferred\n				// If obj is provided, the promise aspect is added to the object\n				promise: function( obj ) {\n					return obj != null ? jQuery.extend( obj, promise ) : promise;\n				}\n			},\n			deferred = {};\n\n		// Keep pipe for back-compat\n		promise.pipe = promise.then;\n\n		// Add list-specific methods\n		jQuery.each( tuples, function( i, tuple ) {\n			var list = tuple[ 2 ],\n				stateString = tuple[ 3 ];\n\n			// promise[ done | fail | progress ] = list.add\n			promise[ tuple[ 1 ] ] = list.add;\n\n			// Handle state\n			if ( stateString ) {\n				list.add( function() {\n\n					// state = [ resolved | rejected ]\n					state = stateString;\n\n				// [ reject_list | resolve_list ].disable; progress_list.lock\n				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );\n			}\n\n			// deferred[ resolve | reject | notify ]\n			deferred[ tuple[ 0 ] ] = function() {\n				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );\n				return this;\n			};\n			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;\n		} );\n\n		// Make the deferred a promise\n		promise.promise( deferred );\n\n		// Call given func if any\n		if ( func ) {\n			func.call( deferred, deferred );\n		}\n\n		// All done!\n		return deferred;\n	},\n\n	// Deferred helper\n	when: function( subordinate /* , ..., subordinateN */ ) {\n		var i = 0,\n			resolveValues = slice.call( arguments ),\n			length = resolveValues.length,\n\n			// the count of uncompleted subordinates\n			remaining = length !== 1 ||\n				( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,\n\n			// the master Deferred.\n			// If resolveValues consist of only a single Deferred, just use that.\n			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),\n\n			// Update function for both resolve and progress values\n			updateFunc = function( i, contexts, values ) {\n				return function( value ) {\n					contexts[ i ] = this;\n					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n					if ( values === progressValues ) {\n						deferred.notifyWith( contexts, values );\n					} else if ( !( --remaining ) ) {\n						deferred.resolveWith( contexts, values );\n					}\n				};\n			},\n\n			progressValues, progressContexts, resolveContexts;\n\n		// Add listeners to Deferred subordinates; treat others as resolved\n		if ( length > 1 ) {\n			progressValues = new Array( length );\n			progressContexts = new Array( length );\n			resolveContexts = new Array( length );\n			for ( ; i < length; i++ ) {\n				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {\n					resolveValues[ i ].promise()\n						.progress( updateFunc( i, progressContexts, progressValues ) )\n						.done( updateFunc( i, resolveContexts, resolveValues ) )\n						.fail( deferred.reject );\n				} else {\n					--remaining;\n				}\n			}\n		}\n\n		// If we\'re not waiting on anything, resolve the master\n		if ( !remaining ) {\n			deferred.resolveWith( resolveContexts, resolveValues );\n		}\n\n		return deferred.promise();\n	}\n} );\n\n\n// The deferred used on DOM ready\nvar readyList;\n\njQuery.fn.ready = function( fn ) {\n\n	// Add the callback\n	jQuery.ready.promise().done( fn );\n\n	return this;\n};\n\njQuery.extend( {\n\n	// Is the DOM ready to be used? Set to true once it occurs.\n	isReady: false,\n\n	// A counter to track how many items to wait for before\n	// the ready event fires. See #6781\n	readyWait: 1,\n\n	// Hold (or release) the ready event\n	holdReady: function( hold ) {\n		if ( hold ) {\n			jQuery.readyWait++;\n		} else {\n			jQuery.ready( true );\n		}\n	},\n\n	// Handle when the DOM is ready\n	ready: function( wait ) {\n\n		// Abort if there are pending holds or we\'re already ready\n		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n			return;\n		}\n\n		// Remember that the DOM is ready\n		jQuery.isReady = true;\n\n		// If a normal DOM Ready event fired, decrement, and wait if need be\n		if ( wait !== true && --jQuery.readyWait > 0 ) {\n			return;\n		}\n\n		// If there are functions bound, to execute\n		readyList.resolveWith( document, [ jQuery ] );\n\n		// Trigger any bound ready events\n		if ( jQuery.fn.triggerHandler ) {\n			jQuery( document ).triggerHandler( "ready" );\n			jQuery( document ).off( "ready" );\n		}\n	}\n} );\n\n/**\n * The ready event handler and self cleanup method\n */\nfunction completed() {\n	document.removeEventListener( "DOMContentLoaded", completed );\n	window.removeEventListener( "load", completed );\n	jQuery.ready();\n}\n\njQuery.ready.promise = function( obj ) {\n	if ( !readyList ) {\n\n		readyList = jQuery.Deferred();\n\n		// Catch cases where $(document).ready() is called\n		// after the browser event has already occurred.\n		// Support: IE9-10 only\n		// Older IE sometimes signals "interactive" too soon\n		if ( document.readyState === "complete" ||\n			( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {\n\n			// Handle it asynchronously to allow scripts the opportunity to delay ready\n			window.setTimeout( jQuery.ready );\n\n		} else {\n\n			// Use the handy event callback\n			document.addEventListener( "DOMContentLoaded", completed );\n\n			// A fallback to window.onload, that will always work\n			window.addEventListener( "load", completed );\n		}\n	}\n	return readyList.promise( obj );\n};\n\n// Kick off the DOM ready check even if the user does not\njQuery.ready.promise();\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it\'s a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n	var i = 0,\n		len = elems.length,\n		bulk = key == null;\n\n	// Sets many values\n	if ( jQuery.type( key ) === "object" ) {\n		chainable = true;\n		for ( i in key ) {\n			access( elems, fn, i, key[ i ], true, emptyGet, raw );\n		}\n\n	// Sets one value\n	} else if ( value !== undefined ) {\n		chainable = true;\n\n		if ( !jQuery.isFunction( value ) ) {\n			raw = true;\n		}\n\n		if ( bulk ) {\n\n			// Bulk operations run against the entire set\n			if ( raw ) {\n				fn.call( elems, value );\n				fn = null;\n\n			// ...except when executing function values\n			} else {\n				bulk = fn;\n				fn = function( elem, key, value ) {\n					return bulk.call( jQuery( elem ), value );\n				};\n			}\n		}\n\n		if ( fn ) {\n			for ( ; i < len; i++ ) {\n				fn(\n					elems[ i ], key, raw ?\n					value :\n					value.call( elems[ i ], i, fn( elems[ i ], key ) )\n				);\n			}\n		}\n	}\n\n	return chainable ?\n		elems :\n\n		// Gets\n		bulk ?\n			fn.call( elems ) :\n			len ? fn( elems[ 0 ], key ) : emptyGet;\n};\nvar acceptData = function( owner ) {\n\n	// Accepts only:\n	//  - Node\n	//    - Node.ELEMENT_NODE\n	//    - Node.DOCUMENT_NODE\n	//  - Object\n	//    - Any\n	/* jshint -W018 */\n	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n	this.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n	register: function( owner, initial ) {\n		var value = initial || {};\n\n		// If it is a node unlikely to be stringify-ed or looped over\n		// use plain assignment\n		if ( owner.nodeType ) {\n			owner[ this.expando ] = value;\n\n		// Otherwise secure it in a non-enumerable, non-writable property\n		// configurability must be true to allow the property to be\n		// deleted with the delete operator\n		} else {\n			Object.defineProperty( owner, this.expando, {\n				value: value,\n				writable: true,\n				configurable: true\n			} );\n		}\n		return owner[ this.expando ];\n	},\n	cache: function( owner ) {\n\n		// We can accept data for non-element nodes in modern browsers,\n		// but we should not, see #8335.\n		// Always return an empty object.\n		if ( !acceptData( owner ) ) {\n			return {};\n		}\n\n		// Check if the owner object already has a cache\n		var value = owner[ this.expando ];\n\n		// If not, create one\n		if ( !value ) {\n			value = {};\n\n			// We can accept data for non-element nodes in modern browsers,\n			// but we should not, see #8335.\n			// Always return an empty object.\n			if ( acceptData( owner ) ) {\n\n				// If it is a node unlikely to be stringify-ed or looped over\n				// use plain assignment\n				if ( owner.nodeType ) {\n					owner[ this.expando ] = value;\n\n				// Otherwise secure it in a non-enumerable property\n				// configurable must be true to allow the property to be\n				// deleted when data is removed\n				} else {\n					Object.defineProperty( owner, this.expando, {\n						value: value,\n						configurable: true\n					} );\n				}\n			}\n		}\n\n		return value;\n	},\n	set: function( owner, data, value ) {\n		var prop,\n			cache = this.cache( owner );\n\n		// Handle: [ owner, key, value ] args\n		if ( typeof data === "string" ) {\n			cache[ data ] = value;\n\n		// Handle: [ owner, { properties } ] args\n		} else {\n\n			// Copy the properties one-by-one to the cache object\n			for ( prop in data ) {\n				cache[ prop ] = data[ prop ];\n			}\n		}\n		return cache;\n	},\n	get: function( owner, key ) {\n		return key === undefined ?\n			this.cache( owner ) :\n			owner[ this.expando ] && owner[ this.expando ][ key ];\n	},\n	access: function( owner, key, value ) {\n		var stored;\n\n		// In cases where either:\n		//\n		//   1. No key was specified\n		//   2. A string key was specified, but no value provided\n		//\n		// Take the "read" path and allow the get method to determine\n		// which value to return, respectively either:\n		//\n		//   1. The entire cache object\n		//   2. The data stored at the key\n		//\n		if ( key === undefined ||\n				( ( key && typeof key === "string" ) && value === undefined ) ) {\n\n			stored = this.get( owner, key );\n\n			return stored !== undefined ?\n				stored : this.get( owner, jQuery.camelCase( key ) );\n		}\n\n		// When the key is not a string, or both a key and value\n		// are specified, set or extend (existing objects) with either:\n		//\n		//   1. An object of properties\n		//   2. A key and value\n		//\n		this.set( owner, key, value );\n\n		// Since the "set" path can have two possible entry points\n		// return the expected data based on which path was taken[*]\n		return value !== undefined ? value : key;\n	},\n	remove: function( owner, key ) {\n		var i, name, camel,\n			cache = owner[ this.expando ];\n\n		if ( cache === undefined ) {\n			return;\n		}\n\n		if ( key === undefined ) {\n			this.register( owner );\n\n		} else {\n\n			// Support array or space separated string of keys\n			if ( jQuery.isArray( key ) ) {\n\n				// If "name" is an array of keys...\n				// When data is initially created, via ("key", "val") signature,\n				// keys will be converted to camelCase.\n				// Since there is no way to tell _how_ a key was added, remove\n				// both plain key and camelCase key. #12786\n				// This will only penalize the array argument path.\n				name = key.concat( key.map( jQuery.camelCase ) );\n			} else {\n				camel = jQuery.camelCase( key );\n\n				// Try the string as a key before any manipulation\n				if ( key in cache ) {\n					name = [ key, camel ];\n				} else {\n\n					// If a key with the spaces exists, use it.\n					// Otherwise, create an array by matching non-whitespace\n					name = camel;\n					name = name in cache ?\n						[ name ] : ( name.match( rnotwhite ) || [] );\n				}\n			}\n\n			i = name.length;\n\n			while ( i-- ) {\n				delete cache[ name[ i ] ];\n			}\n		}\n\n		// Remove the expando if there\'s no more data\n		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n			// Support: Chrome <= 35-45+\n			// Webkit & Blink performance suffers when deleting properties\n			// from DOM nodes, so set to undefined instead\n			// https://code.google.com/p/chromium/issues/detail?id=378607\n			if ( owner.nodeType ) {\n				owner[ this.expando ] = undefined;\n			} else {\n				delete owner[ this.expando ];\n			}\n		}\n	},\n	hasData: function( owner ) {\n		var cache = owner[ this.expando ];\n		return cache !== undefined && !jQuery.isEmptyObject( cache );\n	}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//	Implementation Summary\n//\n//	1. Enforce API surface and semantic compatibility with 1.9.x branch\n//	2. Improve the module\'s maintainability by reducing the storage\n//		paths to a single mechanism.\n//	3. Use the same single mechanism to support "private" and "user" data.\n//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)\n//	5. Avoid exposing implementation details on user objects (eg. expando properties)\n//	6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n	rmultiDash = /[A-Z]/g;\n\nfunction dataAttr( elem, key, data ) {\n	var name;\n\n	// If nothing was found internally, try to fetch any\n	// data from the HTML5 data-* attribute\n	if ( data === undefined && elem.nodeType === 1 ) {\n		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();\n		data = elem.getAttribute( name );\n\n		if ( typeof data === "string" ) {\n			try {\n				data = data === "true" ? true :\n					data === "false" ? false :\n					data === "null" ? null :\n\n					// Only convert to a number if it doesn\'t change the string\n					+data + "" === data ? +data :\n					rbrace.test( data ) ? jQuery.parseJSON( data ) :\n					data;\n			} catch ( e ) {}\n\n			// Make sure we set the data so it isn\'t changed later\n			dataUser.set( elem, key, data );\n		} else {\n			data = undefined;\n		}\n	}\n	return data;\n}\n\njQuery.extend( {\n	hasData: function( elem ) {\n		return dataUser.hasData( elem ) || dataPriv.hasData( elem );\n	},\n\n	data: function( elem, name, data ) {\n		return dataUser.access( elem, name, data );\n	},\n\n	removeData: function( elem, name ) {\n		dataUser.remove( elem, name );\n	},\n\n	// TODO: Now that all calls to _data and _removeData have been replaced\n	// with direct calls to dataPriv methods, these can be deprecated.\n	_data: function( elem, name, data ) {\n		return dataPriv.access( elem, name, data );\n	},\n\n	_removeData: function( elem, name ) {\n		dataPriv.remove( elem, name );\n	}\n} );\n\njQuery.fn.extend( {\n	data: function( key, value ) {\n		var i, name, data,\n			elem = this[ 0 ],\n			attrs = elem && elem.attributes;\n\n		// Gets all values\n		if ( key === undefined ) {\n			if ( this.length ) {\n				data = dataUser.get( elem );\n\n				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {\n					i = attrs.length;\n					while ( i-- ) {\n\n						// Support: IE11+\n						// The attrs elements can be null (#14894)\n						if ( attrs[ i ] ) {\n							name = attrs[ i ].name;\n							if ( name.indexOf( "data-" ) === 0 ) {\n								name = jQuery.camelCase( name.slice( 5 ) );\n								dataAttr( elem, name, data[ name ] );\n							}\n						}\n					}\n					dataPriv.set( elem, "hasDataAttrs", true );\n				}\n			}\n\n			return data;\n		}\n\n		// Sets multiple values\n		if ( typeof key === "object" ) {\n			return this.each( function() {\n				dataUser.set( this, key );\n			} );\n		}\n\n		return access( this, function( value ) {\n			var data, camelKey;\n\n			// The calling jQuery object (element matches) is not empty\n			// (and therefore has an element appears at this[ 0 ]) and the\n			// `value` parameter was not undefined. An empty jQuery object\n			// will result in `undefined` for elem = this[ 0 ] which will\n			// throw an exception if an attempt to read a data cache is made.\n			if ( elem && value === undefined ) {\n\n				// Attempt to get data from the cache\n				// with the key as-is\n				data = dataUser.get( elem, key ) ||\n\n					// Try to find dashed key if it exists (gh-2779)\n					// This is for 2.2.x only\n					dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );\n\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				camelKey = jQuery.camelCase( key );\n\n				// Attempt to get data from the cache\n				// with the key camelized\n				data = dataUser.get( elem, camelKey );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// Attempt to "discover" the data in\n				// HTML5 custom data-* attrs\n				data = dataAttr( elem, camelKey, undefined );\n				if ( data !== undefined ) {\n					return data;\n				}\n\n				// We tried really hard, but the data doesn\'t exist.\n				return;\n			}\n\n			// Set the data...\n			camelKey = jQuery.camelCase( key );\n			this.each( function() {\n\n				// First, attempt to store a copy or reference of any\n				// data that might\'ve been store with a camelCased key.\n				var data = dataUser.get( this, camelKey );\n\n				// For HTML5 data-* attribute interop, we have to\n				// store property names with dashes in a camelCase form.\n				// This might not apply to all properties...*\n				dataUser.set( this, camelKey, value );\n\n				// *... In the case of properties that might _actually_\n				// have dashes, we need to also store a copy of that\n				// unchanged property.\n				if ( key.indexOf( "-" ) > -1 && data !== undefined ) {\n					dataUser.set( this, key, value );\n				}\n			} );\n		}, null, value, arguments.length > 1, null, true );\n	},\n\n	removeData: function( key ) {\n		return this.each( function() {\n			dataUser.remove( this, key );\n		} );\n	}\n} );\n\n\njQuery.extend( {\n	queue: function( elem, type, data ) {\n		var queue;\n\n		if ( elem ) {\n			type = ( type || "fx" ) + "queue";\n			queue = dataPriv.get( elem, type );\n\n			// Speed up dequeue by getting out quickly if this is just a lookup\n			if ( data ) {\n				if ( !queue || jQuery.isArray( data ) ) {\n					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n				} else {\n					queue.push( data );\n				}\n			}\n			return queue || [];\n		}\n	},\n\n	dequeue: function( elem, type ) {\n		type = type || "fx";\n\n		var queue = jQuery.queue( elem, type ),\n			startLength = queue.length,\n			fn = queue.shift(),\n			hooks = jQuery._queueHooks( elem, type ),\n			next = function() {\n				jQuery.dequeue( elem, type );\n			};\n\n		// If the fx queue is dequeued, always remove the progress sentinel\n		if ( fn === "inprogress" ) {\n			fn = queue.shift();\n			startLength--;\n		}\n\n		if ( fn ) {\n\n			// Add a progress sentinel to prevent the fx queue from being\n			// automatically dequeued\n			if ( type === "fx" ) {\n				queue.unshift( "inprogress" );\n			}\n\n			// Clear up the last queue stop function\n			delete hooks.stop;\n			fn.call( elem, next, hooks );\n		}\n\n		if ( !startLength && hooks ) {\n			hooks.empty.fire();\n		}\n	},\n\n	// Not public - generate a queueHooks object, or return the current one\n	_queueHooks: function( elem, type ) {\n		var key = type + "queueHooks";\n		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n			empty: jQuery.Callbacks( "once memory" ).add( function() {\n				dataPriv.remove( elem, [ type + "queue", key ] );\n			} )\n		} );\n	}\n} );\n\njQuery.fn.extend( {\n	queue: function( type, data ) {\n		var setter = 2;\n\n		if ( typeof type !== "string" ) {\n			data = type;\n			type = "fx";\n			setter--;\n		}\n\n		if ( arguments.length < setter ) {\n			return jQuery.queue( this[ 0 ], type );\n		}\n\n		return data === undefined ?\n			this :\n			this.each( function() {\n				var queue = jQuery.queue( this, type, data );\n\n				// Ensure a hooks for this queue\n				jQuery._queueHooks( this, type );\n\n				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {\n					jQuery.dequeue( this, type );\n				}\n			} );\n	},\n	dequeue: function( type ) {\n		return this.each( function() {\n			jQuery.dequeue( this, type );\n		} );\n	},\n	clearQueue: function( type ) {\n		return this.queue( type || "fx", [] );\n	},\n\n	// Get a promise resolved when queues of a certain type\n	// are emptied (fx is the type by default)\n	promise: function( type, obj ) {\n		var tmp,\n			count = 1,\n			defer = jQuery.Deferred(),\n			elements = this,\n			i = this.length,\n			resolve = function() {\n				if ( !( --count ) ) {\n					defer.resolveWith( elements, [ elements ] );\n				}\n			};\n\n		if ( typeof type !== "string" ) {\n			obj = type;\n			type = undefined;\n		}\n		type = type || "fx";\n\n		while ( i-- ) {\n			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );\n			if ( tmp && tmp.empty ) {\n				count++;\n				tmp.empty.add( resolve );\n			}\n		}\n		resolve();\n		return defer.promise( obj );\n	}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );\n\n\nvar cssExpand = [ "Top", "Right", "Bottom", "Left" ];\n\nvar isHidden = function( elem, el ) {\n\n		// isHidden might be called from jQuery#filter function;\n		// in that case, element will be second argument\n		elem = el || elem;\n		return jQuery.css( elem, "display" ) === "none" ||\n			!jQuery.contains( elem.ownerDocument, elem );\n	};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n	var adjusted,\n		scale = 1,\n		maxIterations = 20,\n		currentValue = tween ?\n			function() { return tween.cur(); } :\n			function() { return jQuery.css( elem, prop, "" ); },\n		initial = currentValue(),\n		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),\n\n		// Starting value computation is required for potential unit mismatches\n		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&\n			rcssNum.exec( jQuery.css( elem, prop ) );\n\n	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n		// Trust units reported by jQuery.css\n		unit = unit || initialInUnit[ 3 ];\n\n		// Make sure we update the tween properties later on\n		valueParts = valueParts || [];\n\n		// Iteratively approximate from a nonzero starting point\n		initialInUnit = +initial || 1;\n\n		do {\n\n			// If previous iteration zeroed out, double until we get *something*.\n			// Use string for doubling so we don\'t accidentally see scale as unchanged below\n			scale = scale || ".5";\n\n			// Adjust and apply\n			initialInUnit = initialInUnit / scale;\n			jQuery.style( elem, prop, initialInUnit + unit );\n\n		// Update scale, tolerating zero or NaN from tween.cur()\n		// Break the loop if scale is unchanged or perfect, or if we\'ve just had enough.\n		} while (\n			scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations\n		);\n	}\n\n	if ( valueParts ) {\n		initialInUnit = +initialInUnit || +initial || 0;\n\n		// Apply relative offset (+=/-=) if specified\n		adjusted = valueParts[ 1 ] ?\n			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n			+valueParts[ 2 ];\n		if ( tween ) {\n			tween.unit = unit;\n			tween.start = initialInUnit;\n			tween.end = adjusted;\n		}\n	}\n	return adjusted;\n}\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([\\w:-]+)/ );\n\nvar rscriptType = ( /^$|\\/(?:java|ecma)script/i );\n\n\n\n// We have to close these tags to support XHTML (#13200)\nvar wrapMap = {\n\n	// Support: IE9\n	option: [ 1, "<select multiple=\'multiple\'>", "</select>" ],\n\n	// XHTML parsers do not magically insert elements in the\n	// same way that tag soup parsers do. So we cannot shorten\n	// this by omitting <tbody> or other required elements.\n	thead: [ 1, "<table>", "</table>" ],\n	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],\n	tr: [ 2, "<table><tbody>", "</tbody></table>" ],\n	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],\n\n	_default: [ 0, "", "" ]\n};\n\n// Support: IE9\nwrapMap.optgroup = wrapMap.option;\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n\nfunction getAll( context, tag ) {\n\n	// Support: IE9-11+\n	// Use typeof to avoid zero-argument method invocation on host objects (#15151)\n	var ret = typeof context.getElementsByTagName !== "undefined" ?\n			context.getElementsByTagName( tag || "*" ) :\n			typeof context.querySelectorAll !== "undefined" ?\n				context.querySelectorAll( tag || "*" ) :\n			[];\n\n	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?\n		jQuery.merge( [ context ], ret ) :\n		ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n	var i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		dataPriv.set(\n			elems[ i ],\n			"globalEval",\n			!refElements || dataPriv.get( refElements[ i ], "globalEval" )\n		);\n	}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n	var elem, tmp, tag, wrap, contains, j,\n		fragment = context.createDocumentFragment(),\n		nodes = [],\n		i = 0,\n		l = elems.length;\n\n	for ( ; i < l; i++ ) {\n		elem = elems[ i ];\n\n		if ( elem || elem === 0 ) {\n\n			// Add nodes directly\n			if ( jQuery.type( elem ) === "object" ) {\n\n				// Support: Android<4.1, PhantomJS<2\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n			// Convert non-html into a text node\n			} else if ( !rhtml.test( elem ) ) {\n				nodes.push( context.createTextNode( elem ) );\n\n			// Convert html into DOM nodes\n			} else {\n				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );\n\n				// Deserialize a standard representation\n				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();\n				wrap = wrapMap[ tag ] || wrapMap._default;\n				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n				// Descend through wrappers to the right content\n				j = wrap[ 0 ];\n				while ( j-- ) {\n					tmp = tmp.lastChild;\n				}\n\n				// Support: Android<4.1, PhantomJS<2\n				// push.apply(_, arraylike) throws on ancient WebKit\n				jQuery.merge( nodes, tmp.childNodes );\n\n				// Remember the top-level container\n				tmp = fragment.firstChild;\n\n				// Ensure the created nodes are orphaned (#12392)\n				tmp.textContent = "";\n			}\n		}\n	}\n\n	// Remove wrapper from fragment\n	fragment.textContent = "";\n\n	i = 0;\n	while ( ( elem = nodes[ i++ ] ) ) {\n\n		// Skip elements already in the context collection (trac-4087)\n		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n			if ( ignored ) {\n				ignored.push( elem );\n			}\n			continue;\n		}\n\n		contains = jQuery.contains( elem.ownerDocument, elem );\n\n		// Append to fragment\n		tmp = getAll( fragment.appendChild( elem ), "script" );\n\n		// Preserve script evaluation history\n		if ( contains ) {\n			setGlobalEval( tmp );\n		}\n\n		// Capture executables\n		if ( scripts ) {\n			j = 0;\n			while ( ( elem = tmp[ j++ ] ) ) {\n				if ( rscriptType.test( elem.type || "" ) ) {\n					scripts.push( elem );\n				}\n			}\n		}\n	}\n\n	return fragment;\n}\n\n\n( function() {\n	var fragment = document.createDocumentFragment(),\n		div = fragment.appendChild( document.createElement( "div" ) ),\n		input = document.createElement( "input" );\n\n	// Support: Android 4.0-4.3, Safari<=5.1\n	// Check state lost if the name is set (#11217)\n	// Support: Windows Web Apps (WWA)\n	// `name` and `type` must use .setAttribute for WWA (#14901)\n	input.setAttribute( "type", "radio" );\n	input.setAttribute( "checked", "checked" );\n	input.setAttribute( "name", "t" );\n\n	div.appendChild( input );\n\n	// Support: Safari<=5.1, Android<4.2\n	// Older WebKit doesn\'t clone checked state correctly in fragments\n	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n	// Support: IE<=11+\n	// Make sure textarea (and checkbox) defaultValue is properly cloned\n	div.innerHTML = "<textarea>x</textarea>";\n	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n} )();\n\n\nvar\n	rkeyEvent = /^key/,\n	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,\n	rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n	return true;\n}\n\nfunction returnFalse() {\n	return false;\n}\n\n// Support: IE9\n// See #13393 for more info\nfunction safeActiveElement() {\n	try {\n		return document.activeElement;\n	} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n	var origFn, type;\n\n	// Types can be a map of types/handlers\n	if ( typeof types === "object" ) {\n\n		// ( types-Object, selector, data )\n		if ( typeof selector !== "string" ) {\n\n			// ( types-Object, data )\n			data = data || selector;\n			selector = undefined;\n		}\n		for ( type in types ) {\n			on( elem, type, selector, data, types[ type ], one );\n		}\n		return elem;\n	}\n\n	if ( data == null && fn == null ) {\n\n		// ( types, fn )\n		fn = selector;\n		data = selector = undefined;\n	} else if ( fn == null ) {\n		if ( typeof selector === "string" ) {\n\n			// ( types, selector, fn )\n			fn = data;\n			data = undefined;\n		} else {\n\n			// ( types, data, fn )\n			fn = data;\n			data = selector;\n			selector = undefined;\n		}\n	}\n	if ( fn === false ) {\n		fn = returnFalse;\n	} else if ( !fn ) {\n		return elem;\n	}\n\n	if ( one === 1 ) {\n		origFn = fn;\n		fn = function( event ) {\n\n			// Can use an empty set, since event contains the info\n			jQuery().off( event );\n			return origFn.apply( this, arguments );\n		};\n\n		// Use same guid so caller can remove using origFn\n		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n	}\n	return elem.each( function() {\n		jQuery.event.add( this, types, fn, data, selector );\n	} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards\' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n	global: {},\n\n	add: function( elem, types, handler, data, selector ) {\n\n		var handleObjIn, eventHandle, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.get( elem );\n\n		// Don\'t attach events to noData or text/comment nodes (but allow plain objects)\n		if ( !elemData ) {\n			return;\n		}\n\n		// Caller can pass in an object of custom data in lieu of the handler\n		if ( handler.handler ) {\n			handleObjIn = handler;\n			handler = handleObjIn.handler;\n			selector = handleObjIn.selector;\n		}\n\n		// Make sure that the handler has a unique ID, used to find/remove it later\n		if ( !handler.guid ) {\n			handler.guid = jQuery.guid++;\n		}\n\n		// Init the element\'s event structure and main handler, if this is the first\n		if ( !( events = elemData.events ) ) {\n			events = elemData.events = {};\n		}\n		if ( !( eventHandle = elemData.handle ) ) {\n			eventHandle = elemData.handle = function( e ) {\n\n				// Discard the second event of a jQuery.event.trigger() and\n				// when an event is called after a page has unloaded\n				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?\n					jQuery.event.dispatch.apply( elem, arguments ) : undefined;\n			};\n		}\n\n		// Handle multiple events separated by a space\n		types = ( types || "" ).match( rnotwhite ) || [ "" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n			// There *must* be a type, no attaching namespace-only handlers\n			if ( !type ) {\n				continue;\n			}\n\n			// If event changes its type, use the special event handlers for the changed type\n			special = jQuery.event.special[ type ] || {};\n\n			// If selector defined, determine special event api type, otherwise given type\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n\n			// Update special based on newly reset type\n			special = jQuery.event.special[ type ] || {};\n\n			// handleObj is passed to all event handlers\n			handleObj = jQuery.extend( {\n				type: type,\n				origType: origType,\n				data: data,\n				handler: handler,\n				guid: handler.guid,\n				selector: selector,\n				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n				namespace: namespaces.join( "." )\n			}, handleObjIn );\n\n			// Init the event handler queue if we\'re the first\n			if ( !( handlers = events[ type ] ) ) {\n				handlers = events[ type ] = [];\n				handlers.delegateCount = 0;\n\n				// Only use addEventListener if the special events handler returns false\n				if ( !special.setup ||\n					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n					if ( elem.addEventListener ) {\n						elem.addEventListener( type, eventHandle );\n					}\n				}\n			}\n\n			if ( special.add ) {\n				special.add.call( elem, handleObj );\n\n				if ( !handleObj.handler.guid ) {\n					handleObj.handler.guid = handler.guid;\n				}\n			}\n\n			// Add to the element\'s handler list, delegates in front\n			if ( selector ) {\n				handlers.splice( handlers.delegateCount++, 0, handleObj );\n			} else {\n				handlers.push( handleObj );\n			}\n\n			// Keep track of which events have ever been used, for event optimization\n			jQuery.event.global[ type ] = true;\n		}\n\n	},\n\n	// Detach an event or set of events from an element\n	remove: function( elem, types, handler, selector, mappedTypes ) {\n\n		var j, origCount, tmp,\n			events, t, handleObj,\n			special, handlers, type, namespaces, origType,\n			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n		if ( !elemData || !( events = elemData.events ) ) {\n			return;\n		}\n\n		// Once for each type.namespace in types; type may be omitted\n		types = ( types || "" ).match( rnotwhite ) || [ "" ];\n		t = types.length;\n		while ( t-- ) {\n			tmp = rtypenamespace.exec( types[ t ] ) || [];\n			type = origType = tmp[ 1 ];\n			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();\n\n			// Unbind all events (on this namespace, if provided) for the element\n			if ( !type ) {\n				for ( type in events ) {\n					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n				}\n				continue;\n			}\n\n			special = jQuery.event.special[ type ] || {};\n			type = ( selector ? special.delegateType : special.bindType ) || type;\n			handlers = events[ type ] || [];\n			tmp = tmp[ 2 ] &&\n				new RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" );\n\n			// Remove matching events\n			origCount = j = handlers.length;\n			while ( j-- ) {\n				handleObj = handlers[ j ];\n\n				if ( ( mappedTypes || origType === handleObj.origType ) &&\n					( !handler || handler.guid === handleObj.guid ) &&\n					( !tmp || tmp.test( handleObj.namespace ) ) &&\n					( !selector || selector === handleObj.selector ||\n						selector === "**" && handleObj.selector ) ) {\n					handlers.splice( j, 1 );\n\n					if ( handleObj.selector ) {\n						handlers.delegateCount--;\n					}\n					if ( special.remove ) {\n						special.remove.call( elem, handleObj );\n					}\n				}\n			}\n\n			// Remove generic event handler if we removed something and no more handlers exist\n			// (avoids potential for endless recursion during removal of special event handlers)\n			if ( origCount && !handlers.length ) {\n				if ( !special.teardown ||\n					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n					jQuery.removeEvent( elem, type, elemData.handle );\n				}\n\n				delete events[ type ];\n			}\n		}\n\n		// Remove data and the expando if it\'s no longer used\n		if ( jQuery.isEmptyObject( events ) ) {\n			dataPriv.remove( elem, "handle events" );\n		}\n	},\n\n	dispatch: function( event ) {\n\n		// Make a writable jQuery.Event from the native event object\n		event = jQuery.event.fix( event );\n\n		var i, j, ret, matched, handleObj,\n			handlerQueue = [],\n			args = slice.call( arguments ),\n			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],\n			special = jQuery.event.special[ event.type ] || {};\n\n		// Use the fix-ed jQuery.Event rather than the (read-only) native event\n		args[ 0 ] = event;\n		event.delegateTarget = this;\n\n		// Call the preDispatch hook for the mapped type, and let it bail if desired\n		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n			return;\n		}\n\n		// Determine handlers\n		handlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n		// Run delegates first; they may want to stop propagation beneath us\n		i = 0;\n		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n			event.currentTarget = matched.elem;\n\n			j = 0;\n			while ( ( handleObj = matched.handlers[ j++ ] ) &&\n				!event.isImmediatePropagationStopped() ) {\n\n				// Triggered event must either 1) have no namespace, or 2) have namespace(s)\n				// a subset or equal to those in the bound event (both can have no namespace).\n				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {\n\n					event.handleObj = handleObj;\n					event.data = handleObj.data;\n\n					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n						handleObj.handler ).apply( matched.elem, args );\n\n					if ( ret !== undefined ) {\n						if ( ( event.result = ret ) === false ) {\n							event.preventDefault();\n							event.stopPropagation();\n						}\n					}\n				}\n			}\n		}\n\n		// Call the postDispatch hook for the mapped type\n		if ( special.postDispatch ) {\n			special.postDispatch.call( this, event );\n		}\n\n		return event.result;\n	},\n\n	handlers: function( event, handlers ) {\n		var i, matches, sel, handleObj,\n			handlerQueue = [],\n			delegateCount = handlers.delegateCount,\n			cur = event.target;\n\n		// Support (at least): Chrome, IE9\n		// Find delegate handlers\n		// Black-hole SVG <use> instance trees (#13180)\n		//\n		// Support: Firefox<=42+\n		// Avoid non-left-click in FF but don\'t block IE radio events (#3861, gh-2343)\n		if ( delegateCount && cur.nodeType &&\n			( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {\n\n			for ( ; cur !== this; cur = cur.parentNode || this ) {\n\n				// Don\'t check non-elements (#13208)\n				// Don\'t process clicks on disabled elements (#6911, #8165, #11382, #11764)\n				if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {\n					matches = [];\n					for ( i = 0; i < delegateCount; i++ ) {\n						handleObj = handlers[ i ];\n\n						// Don\'t conflict with Object.prototype properties (#13203)\n						sel = handleObj.selector + " ";\n\n						if ( matches[ sel ] === undefined ) {\n							matches[ sel ] = handleObj.needsContext ?\n								jQuery( sel, this ).index( cur ) > -1 :\n								jQuery.find( sel, this, null, [ cur ] ).length;\n						}\n						if ( matches[ sel ] ) {\n							matches.push( handleObj );\n						}\n					}\n					if ( matches.length ) {\n						handlerQueue.push( { elem: cur, handlers: matches } );\n					}\n				}\n			}\n		}\n\n		// Add the remaining (directly-bound) handlers\n		if ( delegateCount < handlers.length ) {\n			handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );\n		}\n\n		return handlerQueue;\n	},\n\n	// Includes some event props shared by KeyEvent and MouseEvent\n	props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +\n		"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),\n\n	fixHooks: {},\n\n	keyHooks: {\n		props: "char charCode key keyCode".split( " " ),\n		filter: function( event, original ) {\n\n			// Add which for key events\n			if ( event.which == null ) {\n				event.which = original.charCode != null ? original.charCode : original.keyCode;\n			}\n\n			return event;\n		}\n	},\n\n	mouseHooks: {\n		props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +\n			"screenX screenY toElement" ).split( " " ),\n		filter: function( event, original ) {\n			var eventDoc, doc, body,\n				button = original.button;\n\n			// Calculate pageX/Y if missing and clientX/Y available\n			if ( event.pageX == null && original.clientX != null ) {\n				eventDoc = event.target.ownerDocument || document;\n				doc = eventDoc.documentElement;\n				body = eventDoc.body;\n\n				event.pageX = original.clientX +\n					( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -\n					( doc && doc.clientLeft || body && body.clientLeft || 0 );\n				event.pageY = original.clientY +\n					( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -\n					( doc && doc.clientTop  || body && body.clientTop  || 0 );\n			}\n\n			// Add which for click: 1 === left; 2 === middle; 3 === right\n			// Note: button is not normalized, so don\'t use it\n			if ( !event.which && button !== undefined ) {\n				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );\n			}\n\n			return event;\n		}\n	},\n\n	fix: function( event ) {\n		if ( event[ jQuery.expando ] ) {\n			return event;\n		}\n\n		// Create a writable copy of the event object and normalize some properties\n		var i, prop, copy,\n			type = event.type,\n			originalEvent = event,\n			fixHook = this.fixHooks[ type ];\n\n		if ( !fixHook ) {\n			this.fixHooks[ type ] = fixHook =\n				rmouseEvent.test( type ) ? this.mouseHooks :\n				rkeyEvent.test( type ) ? this.keyHooks :\n				{};\n		}\n		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;\n\n		event = new jQuery.Event( originalEvent );\n\n		i = copy.length;\n		while ( i-- ) {\n			prop = copy[ i ];\n			event[ prop ] = originalEvent[ prop ];\n		}\n\n		// Support: Cordova 2.5 (WebKit) (#13255)\n		// All events should have a target; Cordova deviceready doesn\'t\n		if ( !event.target ) {\n			event.target = document;\n		}\n\n		// Support: Safari 6.0+, Chrome<28\n		// Target should not be a text node (#504, #13143)\n		if ( event.target.nodeType === 3 ) {\n			event.target = event.target.parentNode;\n		}\n\n		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;\n	},\n\n	special: {\n		load: {\n\n			// Prevent triggered image.load events from bubbling to window.load\n			noBubble: true\n		},\n		focus: {\n\n			// Fire native event if possible so blur/focus sequence is correct\n			trigger: function() {\n				if ( this !== safeActiveElement() && this.focus ) {\n					this.focus();\n					return false;\n				}\n			},\n			delegateType: "focusin"\n		},\n		blur: {\n			trigger: function() {\n				if ( this === safeActiveElement() && this.blur ) {\n					this.blur();\n					return false;\n				}\n			},\n			delegateType: "focusout"\n		},\n		click: {\n\n			// For checkbox, fire native event so checked state will be right\n			trigger: function() {\n				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {\n					this.click();\n					return false;\n				}\n			},\n\n			// For cross-browser consistency, don\'t fire native .click() on links\n			_default: function( event ) {\n				return jQuery.nodeName( event.target, "a" );\n			}\n		},\n\n		beforeunload: {\n			postDispatch: function( event ) {\n\n				// Support: Firefox 20+\n				// Firefox doesn\'t alert if the returnValue field is not set.\n				if ( event.result !== undefined && event.originalEvent ) {\n					event.originalEvent.returnValue = event.result;\n				}\n			}\n		}\n	}\n};\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n	// This "if" is needed for plain objects\n	if ( elem.removeEventListener ) {\n		elem.removeEventListener( type, handle );\n	}\n};\n\njQuery.Event = function( src, props ) {\n\n	// Allow instantiation without the \'new\' keyword\n	if ( !( this instanceof jQuery.Event ) ) {\n		return new jQuery.Event( src, props );\n	}\n\n	// Event object\n	if ( src && src.type ) {\n		this.originalEvent = src;\n		this.type = src.type;\n\n		// Events bubbling up the document may have been marked as prevented\n		// by a handler lower down the tree; reflect the correct value.\n		this.isDefaultPrevented = src.defaultPrevented ||\n				src.defaultPrevented === undefined &&\n\n				// Support: Android<4.0\n				src.returnValue === false ?\n			returnTrue :\n			returnFalse;\n\n	// Event type\n	} else {\n		this.type = src;\n	}\n\n	// Put explicitly provided properties onto the event object\n	if ( props ) {\n		jQuery.extend( this, props );\n	}\n\n	// Create a timestamp if incoming event doesn\'t have one\n	this.timeStamp = src && src.timeStamp || jQuery.now();\n\n	// Mark it as fixed\n	this[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n	constructor: jQuery.Event,\n	isDefaultPrevented: returnFalse,\n	isPropagationStopped: returnFalse,\n	isImmediatePropagationStopped: returnFalse,\n\n	preventDefault: function() {\n		var e = this.originalEvent;\n\n		this.isDefaultPrevented = returnTrue;\n\n		if ( e ) {\n			e.preventDefault();\n		}\n	},\n	stopPropagation: function() {\n		var e = this.originalEvent;\n\n		this.isPropagationStopped = returnTrue;\n\n		if ( e ) {\n			e.stopPropagation();\n		}\n	},\n	stopImmediatePropagation: function() {\n		var e = this.originalEvent;\n\n		this.isImmediatePropagationStopped = returnTrue;\n\n		if ( e ) {\n			e.stopImmediatePropagation();\n		}\n\n		this.stopPropagation();\n	}\n};\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://code.google.com/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n	mouseenter: "mouseover",\n	mouseleave: "mouseout",\n	pointerenter: "pointerover",\n	pointerleave: "pointerout"\n}, function( orig, fix ) {\n	jQuery.event.special[ orig ] = {\n		delegateType: fix,\n		bindType: fix,\n\n		handle: function( event ) {\n			var ret,\n				target = this,\n				related = event.relatedTarget,\n				handleObj = event.handleObj;\n\n			// For mouseenter/leave call the handler if related is outside the target.\n			// NB: No relatedTarget if the mouse left/entered the browser window\n			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n				event.type = handleObj.origType;\n				ret = handleObj.handler.apply( this, arguments );\n				event.type = fix;\n			}\n			return ret;\n		}\n	};\n} );\n\njQuery.fn.extend( {\n	on: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn );\n	},\n	one: function( types, selector, data, fn ) {\n		return on( this, types, selector, data, fn, 1 );\n	},\n	off: function( types, selector, fn ) {\n		var handleObj, type;\n		if ( types && types.preventDefault && types.handleObj ) {\n\n			// ( event )  dispatched jQuery.Event\n			handleObj = types.handleObj;\n			jQuery( types.delegateTarget ).off(\n				handleObj.namespace ?\n					handleObj.origType + "." + handleObj.namespace :\n					handleObj.origType,\n				handleObj.selector,\n				handleObj.handler\n			);\n			return this;\n		}\n		if ( typeof types === "object" ) {\n\n			// ( types-object [, selector] )\n			for ( type in types ) {\n				this.off( type, selector, types[ type ] );\n			}\n			return this;\n		}\n		if ( selector === false || typeof selector === "function" ) {\n\n			// ( types [, fn] )\n			fn = selector;\n			selector = undefined;\n		}\n		if ( fn === false ) {\n			fn = returnFalse;\n		}\n		return this.each( function() {\n			jQuery.event.remove( this, types, fn, selector );\n		} );\n	}\n} );\n\n\nvar\n	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\\w:-]+)[^>]*)\\/>/gi,\n\n	// Support: IE 10-11, Edge 10240+\n	// In IE/Edge using regex groups here causes severe slowdowns.\n	// See https://connect.microsoft.com/IE/feedback/details/1736512/\n	rnoInnerhtml = /<script|<style|<link/i,\n\n	// checked="checked" or checked\n	rchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n	rscriptTypeMasked = /^true\\/(.*)/,\n	rcleanScript = /^\\s*<!(?:\\[CDATA\\[|--)|(?:\\]\\]|--)>\\s*$/g;\n\n// Manipulating tables requires a tbody\nfunction manipulationTarget( elem, content ) {\n	return jQuery.nodeName( elem, "table" ) &&\n		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?\n\n		elem.getElementsByTagName( "tbody" )[ 0 ] ||\n			elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :\n		elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;\n	return elem;\n}\nfunction restoreScript( elem ) {\n	var match = rscriptTypeMasked.exec( elem.type );\n\n	if ( match ) {\n		elem.type = match[ 1 ];\n	} else {\n		elem.removeAttribute( "type" );\n	}\n\n	return elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;\n\n	if ( dest.nodeType !== 1 ) {\n		return;\n	}\n\n	// 1. Copy private data: events, handlers, etc.\n	if ( dataPriv.hasData( src ) ) {\n		pdataOld = dataPriv.access( src );\n		pdataCur = dataPriv.set( dest, pdataOld );\n		events = pdataOld.events;\n\n		if ( events ) {\n			delete pdataCur.handle;\n			pdataCur.events = {};\n\n			for ( type in events ) {\n				for ( i = 0, l = events[ type ].length; i < l; i++ ) {\n					jQuery.event.add( dest, type, events[ type ][ i ] );\n				}\n			}\n		}\n	}\n\n	// 2. Copy user data\n	if ( dataUser.hasData( src ) ) {\n		udataOld = dataUser.access( src );\n		udataCur = jQuery.extend( {}, udataOld );\n\n		dataUser.set( dest, udataCur );\n	}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n	var nodeName = dest.nodeName.toLowerCase();\n\n	// Fails to persist the checked state of a cloned checkbox or radio button.\n	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {\n		dest.checked = src.checked;\n\n	// Fails to return the selected option to the default selected state when cloning options\n	} else if ( nodeName === "input" || nodeName === "textarea" ) {\n		dest.defaultValue = src.defaultValue;\n	}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n	// Flatten any nested arrays\n	args = concat.apply( [], args );\n\n	var fragment, first, scripts, hasScripts, node, doc,\n		i = 0,\n		l = collection.length,\n		iNoClone = l - 1,\n		value = args[ 0 ],\n		isFunction = jQuery.isFunction( value );\n\n	// We can\'t cloneNode fragments that contain checked, in WebKit\n	if ( isFunction ||\n			( l > 1 && typeof value === "string" &&\n				!support.checkClone && rchecked.test( value ) ) ) {\n		return collection.each( function( index ) {\n			var self = collection.eq( index );\n			if ( isFunction ) {\n				args[ 0 ] = value.call( this, index, self.html() );\n			}\n			domManip( self, args, callback, ignored );\n		} );\n	}\n\n	if ( l ) {\n		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n		first = fragment.firstChild;\n\n		if ( fragment.childNodes.length === 1 ) {\n			fragment = first;\n		}\n\n		// Require either new content or an interest in ignored elements to invoke the callback\n		if ( first || ignored ) {\n			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );\n			hasScripts = scripts.length;\n\n			// Use the original fragment for the last item\n			// instead of the first because it can end up\n			// being emptied incorrectly in certain situations (#8070).\n			for ( ; i < l; i++ ) {\n				node = fragment;\n\n				if ( i !== iNoClone ) {\n					node = jQuery.clone( node, true, true );\n\n					// Keep references to cloned scripts for later restoration\n					if ( hasScripts ) {\n\n						// Support: Android<4.1, PhantomJS<2\n						// push.apply(_, arraylike) throws on ancient WebKit\n						jQuery.merge( scripts, getAll( node, "script" ) );\n					}\n				}\n\n				callback.call( collection[ i ], node, i );\n			}\n\n			if ( hasScripts ) {\n				doc = scripts[ scripts.length - 1 ].ownerDocument;\n\n				// Reenable scripts\n				jQuery.map( scripts, restoreScript );\n\n				// Evaluate executable scripts on first document insertion\n				for ( i = 0; i < hasScripts; i++ ) {\n					node = scripts[ i ];\n					if ( rscriptType.test( node.type || "" ) &&\n						!dataPriv.access( node, "globalEval" ) &&\n						jQuery.contains( doc, node ) ) {\n\n						if ( node.src ) {\n\n							// Optional AJAX dependency, but won\'t run scripts if not present\n							if ( jQuery._evalUrl ) {\n								jQuery._evalUrl( node.src );\n							}\n						} else {\n							jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n	var node,\n		nodes = selector ? jQuery.filter( selector, elem ) : elem,\n		i = 0;\n\n	for ( ; ( node = nodes[ i ] ) != null; i++ ) {\n		if ( !keepData && node.nodeType === 1 ) {\n			jQuery.cleanData( getAll( node ) );\n		}\n\n		if ( node.parentNode ) {\n			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {\n				setGlobalEval( getAll( node, "script" ) );\n			}\n			node.parentNode.removeChild( node );\n		}\n	}\n\n	return elem;\n}\n\njQuery.extend( {\n	htmlPrefilter: function( html ) {\n		return html.replace( rxhtmlTag, "<$1></$2>" );\n	},\n\n	clone: function( elem, dataAndEvents, deepDataAndEvents ) {\n		var i, l, srcElements, destElements,\n			clone = elem.cloneNode( true ),\n			inPage = jQuery.contains( elem.ownerDocument, elem );\n\n		// Fix IE cloning issues\n		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n				!jQuery.isXMLDoc( elem ) ) {\n\n			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2\n			destElements = getAll( clone );\n			srcElements = getAll( elem );\n\n			for ( i = 0, l = srcElements.length; i < l; i++ ) {\n				fixInput( srcElements[ i ], destElements[ i ] );\n			}\n		}\n\n		// Copy the events from the original to the clone\n		if ( dataAndEvents ) {\n			if ( deepDataAndEvents ) {\n				srcElements = srcElements || getAll( elem );\n				destElements = destElements || getAll( clone );\n\n				for ( i = 0, l = srcElements.length; i < l; i++ ) {\n					cloneCopyEvent( srcElements[ i ], destElements[ i ] );\n				}\n			} else {\n				cloneCopyEvent( elem, clone );\n			}\n		}\n\n		// Preserve script evaluation history\n		destElements = getAll( clone, "script" );\n		if ( destElements.length > 0 ) {\n			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );\n		}\n\n		// Return the cloned set\n		return clone;\n	},\n\n	cleanData: function( elems ) {\n		var data, elem, type,\n			special = jQuery.event.special,\n			i = 0;\n\n		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n			if ( acceptData( elem ) ) {\n				if ( ( data = elem[ dataPriv.expando ] ) ) {\n					if ( data.events ) {\n						for ( type in data.events ) {\n							if ( special[ type ] ) {\n								jQuery.event.remove( elem, type );\n\n							// This is a shortcut to avoid jQuery.event.remove\'s overhead\n							} else {\n								jQuery.removeEvent( elem, type, data.handle );\n							}\n						}\n					}\n\n					// Support: Chrome <= 35-45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataPriv.expando ] = undefined;\n				}\n				if ( elem[ dataUser.expando ] ) {\n\n					// Support: Chrome <= 35-45+\n					// Assign undefined instead of using delete, see Data#remove\n					elem[ dataUser.expando ] = undefined;\n				}\n			}\n		}\n	}\n} );\n\njQuery.fn.extend( {\n\n	// Keep domManip exposed until 3.0 (gh-2225)\n	domManip: domManip,\n\n	detach: function( selector ) {\n		return remove( this, selector, true );\n	},\n\n	remove: function( selector ) {\n		return remove( this, selector );\n	},\n\n	text: function( value ) {\n		return access( this, function( value ) {\n			return value === undefined ?\n				jQuery.text( this ) :\n				this.empty().each( function() {\n					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n						this.textContent = value;\n					}\n				} );\n		}, null, value, arguments.length );\n	},\n\n	append: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.appendChild( elem );\n			}\n		} );\n	},\n\n	prepend: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n				var target = manipulationTarget( this, elem );\n				target.insertBefore( elem, target.firstChild );\n			}\n		} );\n	},\n\n	before: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this );\n			}\n		} );\n	},\n\n	after: function() {\n		return domManip( this, arguments, function( elem ) {\n			if ( this.parentNode ) {\n				this.parentNode.insertBefore( elem, this.nextSibling );\n			}\n		} );\n	},\n\n	empty: function() {\n		var elem,\n			i = 0;\n\n		for ( ; ( elem = this[ i ] ) != null; i++ ) {\n			if ( elem.nodeType === 1 ) {\n\n				// Prevent memory leaks\n				jQuery.cleanData( getAll( elem, false ) );\n\n				// Remove any remaining nodes\n				elem.textContent = "";\n			}\n		}\n\n		return this;\n	},\n\n	clone: function( dataAndEvents, deepDataAndEvents ) {\n		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n		return this.map( function() {\n			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n		} );\n	},\n\n	html: function( value ) {\n		return access( this, function( value ) {\n			var elem = this[ 0 ] || {},\n				i = 0,\n				l = this.length;\n\n			if ( value === undefined && elem.nodeType === 1 ) {\n				return elem.innerHTML;\n			}\n\n			// See if we can take a shortcut and just use innerHTML\n			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&\n				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {\n\n				value = jQuery.htmlPrefilter( value );\n\n				try {\n					for ( ; i < l; i++ ) {\n						elem = this[ i ] || {};\n\n						// Remove element nodes and prevent memory leaks\n						if ( elem.nodeType === 1 ) {\n							jQuery.cleanData( getAll( elem, false ) );\n							elem.innerHTML = value;\n						}\n					}\n\n					elem = 0;\n\n				// If using innerHTML throws an exception, use the fallback method\n				} catch ( e ) {}\n			}\n\n			if ( elem ) {\n				this.empty().append( value );\n			}\n		}, null, value, arguments.length );\n	},\n\n	replaceWith: function() {\n		var ignored = [];\n\n		// Make the changes, replacing each non-ignored context element with the new content\n		return domManip( this, arguments, function( elem ) {\n			var parent = this.parentNode;\n\n			if ( jQuery.inArray( this, ignored ) < 0 ) {\n				jQuery.cleanData( getAll( this ) );\n				if ( parent ) {\n					parent.replaceChild( elem, this );\n				}\n			}\n\n		// Force callback invocation\n		}, ignored );\n	}\n} );\n\njQuery.each( {\n	appendTo: "append",\n	prependTo: "prepend",\n	insertBefore: "before",\n	insertAfter: "after",\n	replaceAll: "replaceWith"\n}, function( name, original ) {\n	jQuery.fn[ name ] = function( selector ) {\n		var elems,\n			ret = [],\n			insert = jQuery( selector ),\n			last = insert.length - 1,\n			i = 0;\n\n		for ( ; i <= last; i++ ) {\n			elems = i === last ? this : this.clone( true );\n			jQuery( insert[ i ] )[ original ]( elems );\n\n			// Support: QtWebKit\n			// .get() because push.apply(_, arraylike) throws\n			push.apply( ret, elems.get() );\n		}\n\n		return this.pushStack( ret );\n	};\n} );\n\n\nvar iframe,\n	elemdisplay = {\n\n		// Support: Firefox\n		// We have to pre-define these values for FF (#10227)\n		HTML: "block",\n		BODY: "block"\n	};\n\n/**\n * Retrieve the actual display of a element\n * @param {String} name nodeName of the element\n * @param {Object} doc Document object\n */\n\n// Called only from within defaultDisplay\nfunction actualDisplay( name, doc ) {\n	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),\n\n		display = jQuery.css( elem[ 0 ], "display" );\n\n	// We don\'t have any data stored on the element,\n	// so use "detach" method as fast way to get rid of the element\n	elem.detach();\n\n	return display;\n}\n\n/**\n * Try to determine the default display value of an element\n * @param {String} nodeName\n */\nfunction defaultDisplay( nodeName ) {\n	var doc = document,\n		display = elemdisplay[ nodeName ];\n\n	if ( !display ) {\n		display = actualDisplay( nodeName, doc );\n\n		// If the simple way fails, read from inside an iframe\n		if ( display === "none" || !display ) {\n\n			// Use the already-created iframe if possible\n			iframe = ( iframe || jQuery( "<iframe frameborder=\'0\' width=\'0\' height=\'0\'/>" ) )\n				.appendTo( doc.documentElement );\n\n			// Always write a new HTML skeleton so Webkit and Firefox don\'t choke on reuse\n			doc = iframe[ 0 ].contentDocument;\n\n			// Support: IE\n			doc.write();\n			doc.close();\n\n			display = actualDisplay( nodeName, doc );\n			iframe.detach();\n		}\n\n		// Store the correct default display\n		elemdisplay[ nodeName ] = display;\n	}\n\n	return display;\n}\nvar rmargin = ( /^margin/ );\n\nvar rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );\n\nvar getStyles = function( elem ) {\n\n		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)\n		// IE throws on elements created in popups\n		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"\n		var view = elem.ownerDocument.defaultView;\n\n		if ( !view || !view.opener ) {\n			view = window;\n		}\n\n		return view.getComputedStyle( elem );\n	};\n\nvar swap = function( elem, options, callback, args ) {\n	var ret, name,\n		old = {};\n\n	// Remember the old values, and insert the new ones\n	for ( name in options ) {\n		old[ name ] = elem.style[ name ];\n		elem.style[ name ] = options[ name ];\n	}\n\n	ret = callback.apply( elem, args || [] );\n\n	// Revert the old values\n	for ( name in options ) {\n		elem.style[ name ] = old[ name ];\n	}\n\n	return ret;\n};\n\n\nvar documentElement = document.documentElement;\n\n\n\n( function() {\n	var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,\n		container = document.createElement( "div" ),\n		div = document.createElement( "div" );\n\n	// Finish early in limited (non-browser) environments\n	if ( !div.style ) {\n		return;\n	}\n\n	// Support: IE9-11+\n	// Style of cloned element affects source element cloned (#8908)\n	div.style.backgroundClip = "content-box";\n	div.cloneNode( true ).style.backgroundClip = "";\n	support.clearCloneStyle = div.style.backgroundClip === "content-box";\n\n	container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +\n		"padding:0;margin-top:1px;position:absolute";\n	container.appendChild( div );\n\n	// Executing both pixelPosition & boxSizingReliable tests require only one layout\n	// so they\'re executed at the same time to save the second computation.\n	function computeStyleTests() {\n		div.style.cssText =\n\n			// Support: Firefox<29, Android 2.3\n			// Vendor-prefix box-sizing\n			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +\n			"position:relative;display:block;" +\n			"margin:auto;border:1px;padding:1px;" +\n			"top:1%;width:50%";\n		div.innerHTML = "";\n		documentElement.appendChild( container );\n\n		var divStyle = window.getComputedStyle( div );\n		pixelPositionVal = divStyle.top !== "1%";\n		reliableMarginLeftVal = divStyle.marginLeft === "2px";\n		boxSizingReliableVal = divStyle.width === "4px";\n\n		// Support: Android 4.0 - 4.3 only\n		// Some styles come back with percentage values, even though they shouldn\'t\n		div.style.marginRight = "50%";\n		pixelMarginRightVal = divStyle.marginRight === "4px";\n\n		documentElement.removeChild( container );\n	}\n\n	jQuery.extend( support, {\n		pixelPosition: function() {\n\n			// This test is executed only once but we still do memoizing\n			// since we can use the boxSizingReliable pre-computing.\n			// No need to check if the test was already performed, though.\n			computeStyleTests();\n			return pixelPositionVal;\n		},\n		boxSizingReliable: function() {\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return boxSizingReliableVal;\n		},\n		pixelMarginRight: function() {\n\n			// Support: Android 4.0-4.3\n			// We\'re checking for boxSizingReliableVal here instead of pixelMarginRightVal\n			// since that compresses better and they\'re computed together anyway.\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return pixelMarginRightVal;\n		},\n		reliableMarginLeft: function() {\n\n			// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37\n			if ( boxSizingReliableVal == null ) {\n				computeStyleTests();\n			}\n			return reliableMarginLeftVal;\n		},\n		reliableMarginRight: function() {\n\n			// Support: Android 2.3\n			// Check if div with explicit width and no margin-right incorrectly\n			// gets computed margin-right based on width of container. (#3333)\n			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right\n			// This support function is only executed once so no memoizing is needed.\n			var ret,\n				marginDiv = div.appendChild( document.createElement( "div" ) );\n\n			// Reset CSS: box-sizing; display; margin; border; padding\n			marginDiv.style.cssText = div.style.cssText =\n\n				// Support: Android 2.3\n				// Vendor-prefix box-sizing\n				"-webkit-box-sizing:content-box;box-sizing:content-box;" +\n				"display:block;margin:0;border:0;padding:0";\n			marginDiv.style.marginRight = marginDiv.style.width = "0";\n			div.style.width = "1px";\n			documentElement.appendChild( container );\n\n			ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );\n\n			documentElement.removeChild( container );\n			div.removeChild( marginDiv );\n\n			return ret;\n		}\n	} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n	var width, minWidth, maxWidth, ret,\n		style = elem.style;\n\n	computed = computed || getStyles( elem );\n	ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;\n\n	// Support: Opera 12.1x only\n	// Fall back to style even without computed\n	// computed is undefined for elems on document fragments\n	if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {\n		ret = jQuery.style( elem, name );\n	}\n\n	// Support: IE9\n	// getPropertyValue is only needed for .css(\'filter\') (#12537)\n	if ( computed ) {\n\n		// A tribute to the "awesome hack by Dean Edwards"\n		// Android Browser returns percentage for some values,\n		// but width seems to be reliably pixels.\n		// This is against the CSSOM draft spec:\n		// http://dev.w3.org/csswg/cssom/#resolved-values\n		if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {\n\n			// Remember the original values\n			width = style.width;\n			minWidth = style.minWidth;\n			maxWidth = style.maxWidth;\n\n			// Put in the new values to get a computed value out\n			style.minWidth = style.maxWidth = style.width = ret;\n			ret = computed.width;\n\n			// Revert the changed values\n			style.width = width;\n			style.minWidth = minWidth;\n			style.maxWidth = maxWidth;\n		}\n	}\n\n	return ret !== undefined ?\n\n		// Support: IE9-11+\n		// IE returns zIndex value as an integer.\n		ret + "" :\n		ret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n	// Define the hook, we\'ll check on the first run if it\'s really needed.\n	return {\n		get: function() {\n			if ( conditionFn() ) {\n\n				// Hook not needed (or it\'s not possible to use it due\n				// to missing dependency), remove it.\n				delete this.get;\n				return;\n			}\n\n			// Hook needed; redefine it so that the support test is not executed again.\n			return ( this.get = hookFn ).apply( this, arguments );\n		}\n	};\n}\n\n\nvar\n\n	// Swappable if display is none or starts with table\n	// except "table", "table-cell", or "table-caption"\n	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n	rdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\n	cssShow = { position: "absolute", visibility: "hidden", display: "block" },\n	cssNormalTransform = {\n		letterSpacing: "0",\n		fontWeight: "400"\n	},\n\n	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],\n	emptyStyle = document.createElement( "div" ).style;\n\n// Return a css property mapped to a potentially vendor prefixed property\nfunction vendorPropName( name ) {\n\n	// Shortcut for names that are not vendor prefixed\n	if ( name in emptyStyle ) {\n		return name;\n	}\n\n	// Check for vendor prefixed names\n	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n		i = cssPrefixes.length;\n\n	while ( i-- ) {\n		name = cssPrefixes[ i ] + capName;\n		if ( name in emptyStyle ) {\n			return name;\n		}\n	}\n}\n\nfunction setPositiveNumber( elem, value, subtract ) {\n\n	// Any relative (+/-) values have already been\n	// normalized at this point\n	var matches = rcssNum.exec( value );\n	return matches ?\n\n		// Guard against undefined "subtract", e.g., when used as in cssHooks\n		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :\n		value;\n}\n\nfunction augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {\n	var i = extra === ( isBorderBox ? "border" : "content" ) ?\n\n		// If we already have the right measurement, avoid augmentation\n		4 :\n\n		// Otherwise initialize for horizontal or vertical properties\n		name === "width" ? 1 : 0,\n\n		val = 0;\n\n	for ( ; i < 4; i += 2 ) {\n\n		// Both box models exclude margin, so add it if we want it\n		if ( extra === "margin" ) {\n			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );\n		}\n\n		if ( isBorderBox ) {\n\n			// border-box includes padding, so remove it if we want content\n			if ( extra === "content" ) {\n				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n			}\n\n			// At this point, extra isn\'t border nor margin, so remove border\n			if ( extra !== "margin" ) {\n				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n			}\n		} else {\n\n			// At this point, extra isn\'t content, so add padding\n			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );\n\n			// At this point, extra isn\'t content nor padding, so add border\n			if ( extra !== "padding" ) {\n				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );\n			}\n		}\n	}\n\n	return val;\n}\n\nfunction getWidthOrHeight( elem, name, extra ) {\n\n	// Start with offset property, which is equivalent to the border-box value\n	var valueIsBorderBox = true,\n		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,\n		styles = getStyles( elem ),\n		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";\n\n	// Support: IE11 only\n	// In IE 11 fullscreen elements inside of an iframe have\n	// 100x too small dimensions (gh-1764).\n	if ( document.msFullscreenElement && window.top !== window ) {\n\n		// Support: IE11 only\n		// Running getBoundingClientRect on a disconnected node\n		// in IE throws an error.\n		if ( elem.getClientRects().length ) {\n			val = Math.round( elem.getBoundingClientRect()[ name ] * 100 );\n		}\n	}\n\n	// Some non-html elements return undefined for offsetWidth, so check for null/undefined\n	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285\n	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668\n	if ( val <= 0 || val == null ) {\n\n		// Fall back to computed then uncomputed css if necessary\n		val = curCSS( elem, name, styles );\n		if ( val < 0 || val == null ) {\n			val = elem.style[ name ];\n		}\n\n		// Computed unit is not pixels. Stop here and return.\n		if ( rnumnonpx.test( val ) ) {\n			return val;\n		}\n\n		// Check for style in case a browser which returns unreliable values\n		// for getComputedStyle silently falls back to the reliable elem.style\n		valueIsBorderBox = isBorderBox &&\n			( support.boxSizingReliable() || val === elem.style[ name ] );\n\n		// Normalize "", auto, and prepare for extra\n		val = parseFloat( val ) || 0;\n	}\n\n	// Use the active box-sizing model to add/subtract irrelevant styles\n	return ( val +\n		augmentWidthOrHeight(\n			elem,\n			name,\n			extra || ( isBorderBox ? "border" : "content" ),\n			valueIsBorderBox,\n			styles\n		)\n	) + "px";\n}\n\nfunction showHide( elements, show ) {\n	var display, elem, hidden,\n		values = [],\n		index = 0,\n		length = elements.length;\n\n	for ( ; index < length; index++ ) {\n		elem = elements[ index ];\n		if ( !elem.style ) {\n			continue;\n		}\n\n		values[ index ] = dataPriv.get( elem, "olddisplay" );\n		display = elem.style.display;\n		if ( show ) {\n\n			// Reset the inline display of this element to learn if it is\n			// being hidden by cascaded rules or not\n			if ( !values[ index ] && display === "none" ) {\n				elem.style.display = "";\n			}\n\n			// Set elements which have been overridden with display: none\n			// in a stylesheet to whatever the default browser style is\n			// for such an element\n			if ( elem.style.display === "" && isHidden( elem ) ) {\n				values[ index ] = dataPriv.access(\n					elem,\n					"olddisplay",\n					defaultDisplay( elem.nodeName )\n				);\n			}\n		} else {\n			hidden = isHidden( elem );\n\n			if ( display !== "none" || !hidden ) {\n				dataPriv.set(\n					elem,\n					"olddisplay",\n					hidden ? display : jQuery.css( elem, "display" )\n				);\n			}\n		}\n	}\n\n	// Set the display of most of the elements in a second loop\n	// to avoid the constant reflow\n	for ( index = 0; index < length; index++ ) {\n		elem = elements[ index ];\n		if ( !elem.style ) {\n			continue;\n		}\n		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {\n			elem.style.display = show ? values[ index ] || "" : "none";\n		}\n	}\n\n	return elements;\n}\n\njQuery.extend( {\n\n	// Add in style property hooks for overriding the default\n	// behavior of getting and setting a style property\n	cssHooks: {\n		opacity: {\n			get: function( elem, computed ) {\n				if ( computed ) {\n\n					// We should always get a number back from opacity\n					var ret = curCSS( elem, "opacity" );\n					return ret === "" ? "1" : ret;\n				}\n			}\n		}\n	},\n\n	// Don\'t automatically add "px" to these possibly-unitless properties\n	cssNumber: {\n		"animationIterationCount": true,\n		"columnCount": true,\n		"fillOpacity": true,\n		"flexGrow": true,\n		"flexShrink": true,\n		"fontWeight": true,\n		"lineHeight": true,\n		"opacity": true,\n		"order": true,\n		"orphans": true,\n		"widows": true,\n		"zIndex": true,\n		"zoom": true\n	},\n\n	// Add in properties whose names you wish to fix before\n	// setting or getting the value\n	cssProps: {\n		"float": "cssFloat"\n	},\n\n	// Get and set the style property on a DOM Node\n	style: function( elem, name, value, extra ) {\n\n		// Don\'t set styles on text and comment nodes\n		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n			return;\n		}\n\n		// Make sure that we\'re working with the right name\n		var ret, type, hooks,\n			origName = jQuery.camelCase( name ),\n			style = elem.style;\n\n		name = jQuery.cssProps[ origName ] ||\n			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n		// Gets hook for the prefixed version, then unprefixed version\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// Check if we\'re setting a value\n		if ( value !== undefined ) {\n			type = typeof value;\n\n			// Convert "+=" or "-=" to relative numbers (#7345)\n			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n				value = adjustCSS( elem, name, ret );\n\n				// Fixes bug #9237\n				type = "number";\n			}\n\n			// Make sure that null and NaN values aren\'t set (#7116)\n			if ( value == null || value !== value ) {\n				return;\n			}\n\n			// If a number was passed in, add the unit (except for certain CSS properties)\n			if ( type === "number" ) {\n				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );\n			}\n\n			// Support: IE9-11+\n			// background-* props affect original clone\'s values\n			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {\n				style[ name ] = "inherit";\n			}\n\n			// If a hook was provided, use that value, otherwise just set the specified value\n			if ( !hooks || !( "set" in hooks ) ||\n				( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n				style[ name ] = value;\n			}\n\n		} else {\n\n			// If a hook was provided get the non-computed value from there\n			if ( hooks && "get" in hooks &&\n				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n				return ret;\n			}\n\n			// Otherwise just get the value from the style object\n			return style[ name ];\n		}\n	},\n\n	css: function( elem, name, extra, styles ) {\n		var val, num, hooks,\n			origName = jQuery.camelCase( name );\n\n		// Make sure that we\'re working with the right name\n		name = jQuery.cssProps[ origName ] ||\n			( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );\n\n		// Try prefixed name followed by the unprefixed name\n		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n		// If a hook was provided get the computed value from there\n		if ( hooks && "get" in hooks ) {\n			val = hooks.get( elem, true, extra );\n		}\n\n		// Otherwise, if a way to get the computed value exists, use that\n		if ( val === undefined ) {\n			val = curCSS( elem, name, styles );\n		}\n\n		// Convert "normal" to computed value\n		if ( val === "normal" && name in cssNormalTransform ) {\n			val = cssNormalTransform[ name ];\n		}\n\n		// Make numeric if forced or a qualifier was provided and val looks numeric\n		if ( extra === "" || extra ) {\n			num = parseFloat( val );\n			return extra === true || isFinite( num ) ? num || 0 : val;\n		}\n		return val;\n	}\n} );\n\njQuery.each( [ "height", "width" ], function( i, name ) {\n	jQuery.cssHooks[ name ] = {\n		get: function( elem, computed, extra ) {\n			if ( computed ) {\n\n				// Certain elements can have dimension info if we invisibly show them\n				// but it must have a current display style that would benefit\n				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&\n					elem.offsetWidth === 0 ?\n						swap( elem, cssShow, function() {\n							return getWidthOrHeight( elem, name, extra );\n						} ) :\n						getWidthOrHeight( elem, name, extra );\n			}\n		},\n\n		set: function( elem, value, extra ) {\n			var matches,\n				styles = extra && getStyles( elem ),\n				subtract = extra && augmentWidthOrHeight(\n					elem,\n					name,\n					extra,\n					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",\n					styles\n				);\n\n			// Convert to pixels if value adjustment is needed\n			if ( subtract && ( matches = rcssNum.exec( value ) ) &&\n				( matches[ 3 ] || "px" ) !== "px" ) {\n\n				elem.style[ name ] = value;\n				value = jQuery.css( elem, name );\n			}\n\n			return setPositiveNumber( elem, value, subtract );\n		}\n	};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n	function( elem, computed ) {\n		if ( computed ) {\n			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||\n				elem.getBoundingClientRect().left -\n					swap( elem, { marginLeft: 0 }, function() {\n						return elem.getBoundingClientRect().left;\n					} )\n				) + "px";\n		}\n	}\n);\n\n// Support: Android 2.3\njQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,\n	function( elem, computed ) {\n		if ( computed ) {\n			return swap( elem, { "display": "inline-block" },\n				curCSS, [ elem, "marginRight" ] );\n		}\n	}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n	margin: "",\n	padding: "",\n	border: "Width"\n}, function( prefix, suffix ) {\n	jQuery.cssHooks[ prefix + suffix ] = {\n		expand: function( value ) {\n			var i = 0,\n				expanded = {},\n\n				// Assumes a single number if not a string\n				parts = typeof value === "string" ? value.split( " " ) : [ value ];\n\n			for ( ; i < 4; i++ ) {\n				expanded[ prefix + cssExpand[ i ] + suffix ] =\n					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n			}\n\n			return expanded;\n		}\n	};\n\n	if ( !rmargin.test( prefix ) ) {\n		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n	}\n} );\n\njQuery.fn.extend( {\n	css: function( name, value ) {\n		return access( this, function( elem, name, value ) {\n			var styles, len,\n				map = {},\n				i = 0;\n\n			if ( jQuery.isArray( name ) ) {\n				styles = getStyles( elem );\n				len = name.length;\n\n				for ( ; i < len; i++ ) {\n					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n				}\n\n				return map;\n			}\n\n			return value !== undefined ?\n				jQuery.style( elem, name, value ) :\n				jQuery.css( elem, name );\n		}, name, value, arguments.length > 1 );\n	},\n	show: function() {\n		return showHide( this, true );\n	},\n	hide: function() {\n		return showHide( this );\n	},\n	toggle: function( state ) {\n		if ( typeof state === "boolean" ) {\n			return state ? this.show() : this.hide();\n		}\n\n		return this.each( function() {\n			if ( isHidden( this ) ) {\n				jQuery( this ).show();\n			} else {\n				jQuery( this ).hide();\n			}\n		} );\n	}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n	return new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n	constructor: Tween,\n	init: function( elem, options, prop, end, easing, unit ) {\n		this.elem = elem;\n		this.prop = prop;\n		this.easing = easing || jQuery.easing._default;\n		this.options = options;\n		this.start = this.now = this.cur();\n		this.end = end;\n		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );\n	},\n	cur: function() {\n		var hooks = Tween.propHooks[ this.prop ];\n\n		return hooks && hooks.get ?\n			hooks.get( this ) :\n			Tween.propHooks._default.get( this );\n	},\n	run: function( percent ) {\n		var eased,\n			hooks = Tween.propHooks[ this.prop ];\n\n		if ( this.options.duration ) {\n			this.pos = eased = jQuery.easing[ this.easing ](\n				percent, this.options.duration * percent, 0, 1, this.options.duration\n			);\n		} else {\n			this.pos = eased = percent;\n		}\n		this.now = ( this.end - this.start ) * eased + this.start;\n\n		if ( this.options.step ) {\n			this.options.step.call( this.elem, this.now, this );\n		}\n\n		if ( hooks && hooks.set ) {\n			hooks.set( this );\n		} else {\n			Tween.propHooks._default.set( this );\n		}\n		return this;\n	}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n	_default: {\n		get: function( tween ) {\n			var result;\n\n			// Use a property on the element directly when it is not a DOM element,\n			// or when there is no matching style property that exists.\n			if ( tween.elem.nodeType !== 1 ||\n				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n				return tween.elem[ tween.prop ];\n			}\n\n			// Passing an empty string as a 3rd parameter to .css will automatically\n			// attempt a parseFloat and fallback to a string if the parse fails.\n			// Simple values such as "10px" are parsed to Float;\n			// complex values such as "rotate(1rad)" are returned as-is.\n			result = jQuery.css( tween.elem, tween.prop, "" );\n\n			// Empty strings, null, undefined and "auto" are converted to 0.\n			return !result || result === "auto" ? 0 : result;\n		},\n		set: function( tween ) {\n\n			// Use step hook for back compat.\n			// Use cssHook if its there.\n			// Use .style if available and use plain properties where available.\n			if ( jQuery.fx.step[ tween.prop ] ) {\n				jQuery.fx.step[ tween.prop ]( tween );\n			} else if ( tween.elem.nodeType === 1 &&\n				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||\n					jQuery.cssHooks[ tween.prop ] ) ) {\n				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n			} else {\n				tween.elem[ tween.prop ] = tween.now;\n			}\n		}\n	}\n};\n\n// Support: IE9\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n	set: function( tween ) {\n		if ( tween.elem.nodeType && tween.elem.parentNode ) {\n			tween.elem[ tween.prop ] = tween.now;\n		}\n	}\n};\n\njQuery.easing = {\n	linear: function( p ) {\n		return p;\n	},\n	swing: function( p ) {\n		return 0.5 - Math.cos( p * Math.PI ) / 2;\n	},\n	_default: "swing"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back Compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n	fxNow, timerId,\n	rfxtypes = /^(?:toggle|show|hide)$/,\n	rrun = /queueHooks$/;\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n	window.setTimeout( function() {\n		fxNow = undefined;\n	} );\n	return ( fxNow = jQuery.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n	var which,\n		i = 0,\n		attrs = { height: type };\n\n	// If we include width, step value is 1 to do all cssExpand values,\n	// otherwise step value is 2 to skip over Left and Right\n	includeWidth = includeWidth ? 1 : 0;\n	for ( ; i < 4 ; i += 2 - includeWidth ) {\n		which = cssExpand[ i ];\n		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;\n	}\n\n	if ( includeWidth ) {\n		attrs.opacity = attrs.width = type;\n	}\n\n	return attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n	var tween,\n		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),\n		index = 0,\n		length = collection.length;\n	for ( ; index < length; index++ ) {\n		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n			// We\'re done with this property\n			return tween;\n		}\n	}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n	/* jshint validthis: true */\n	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,\n		anim = this,\n		orig = {},\n		style = elem.style,\n		hidden = elem.nodeType && isHidden( elem ),\n		dataShow = dataPriv.get( elem, "fxshow" );\n\n	// Handle queue: false promises\n	if ( !opts.queue ) {\n		hooks = jQuery._queueHooks( elem, "fx" );\n		if ( hooks.unqueued == null ) {\n			hooks.unqueued = 0;\n			oldfire = hooks.empty.fire;\n			hooks.empty.fire = function() {\n				if ( !hooks.unqueued ) {\n					oldfire();\n				}\n			};\n		}\n		hooks.unqueued++;\n\n		anim.always( function() {\n\n			// Ensure the complete handler is called before this completes\n			anim.always( function() {\n				hooks.unqueued--;\n				if ( !jQuery.queue( elem, "fx" ).length ) {\n					hooks.empty.fire();\n				}\n			} );\n		} );\n	}\n\n	// Height/width overflow pass\n	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {\n\n		// Make sure that nothing sneaks out\n		// Record all 3 overflow attributes because IE9-10 do not\n		// change the overflow attribute when overflowX and\n		// overflowY are set to the same value\n		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n		// Set display property to inline-block for height/width\n		// animations on inline elements that are having width/height animated\n		display = jQuery.css( elem, "display" );\n\n		// Test default display if display is currently "none"\n		checkDisplay = display === "none" ?\n			dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;\n\n		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {\n			style.display = "inline-block";\n		}\n	}\n\n	if ( opts.overflow ) {\n		style.overflow = "hidden";\n		anim.always( function() {\n			style.overflow = opts.overflow[ 0 ];\n			style.overflowX = opts.overflow[ 1 ];\n			style.overflowY = opts.overflow[ 2 ];\n		} );\n	}\n\n	// show/hide pass\n	for ( prop in props ) {\n		value = props[ prop ];\n		if ( rfxtypes.exec( value ) ) {\n			delete props[ prop ];\n			toggle = toggle || value === "toggle";\n			if ( value === ( hidden ? "hide" : "show" ) ) {\n\n				// If there is dataShow left over from a stopped hide or show\n				// and we are going to proceed with show, we should pretend to be hidden\n				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {\n					hidden = true;\n				} else {\n					continue;\n				}\n			}\n			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\n		// Any non-fx value stops us from restoring the original display value\n		} else {\n			display = undefined;\n		}\n	}\n\n	if ( !jQuery.isEmptyObject( orig ) ) {\n		if ( dataShow ) {\n			if ( "hidden" in dataShow ) {\n				hidden = dataShow.hidden;\n			}\n		} else {\n			dataShow = dataPriv.access( elem, "fxshow", {} );\n		}\n\n		// Store state if its toggle - enables .stop().toggle() to "reverse"\n		if ( toggle ) {\n			dataShow.hidden = !hidden;\n		}\n		if ( hidden ) {\n			jQuery( elem ).show();\n		} else {\n			anim.done( function() {\n				jQuery( elem ).hide();\n			} );\n		}\n		anim.done( function() {\n			var prop;\n\n			dataPriv.remove( elem, "fxshow" );\n			for ( prop in orig ) {\n				jQuery.style( elem, prop, orig[ prop ] );\n			}\n		} );\n		for ( prop in orig ) {\n			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\n			if ( !( prop in dataShow ) ) {\n				dataShow[ prop ] = tween.start;\n				if ( hidden ) {\n					tween.end = tween.start;\n					tween.start = prop === "width" || prop === "height" ? 1 : 0;\n				}\n			}\n		}\n\n	// If this is a noop like .hide().hide(), restore an overwritten display value\n	} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {\n		style.display = display;\n	}\n}\n\nfunction propFilter( props, specialEasing ) {\n	var index, name, easing, value, hooks;\n\n	// camelCase, specialEasing and expand cssHook pass\n	for ( index in props ) {\n		name = jQuery.camelCase( index );\n		easing = specialEasing[ name ];\n		value = props[ index ];\n		if ( jQuery.isArray( value ) ) {\n			easing = value[ 1 ];\n			value = props[ index ] = value[ 0 ];\n		}\n\n		if ( index !== name ) {\n			props[ name ] = value;\n			delete props[ index ];\n		}\n\n		hooks = jQuery.cssHooks[ name ];\n		if ( hooks && "expand" in hooks ) {\n			value = hooks.expand( value );\n			delete props[ name ];\n\n			// Not quite $.extend, this won\'t overwrite existing keys.\n			// Reusing \'index\' because we have the correct "name"\n			for ( index in value ) {\n				if ( !( index in props ) ) {\n					props[ index ] = value[ index ];\n					specialEasing[ index ] = easing;\n				}\n			}\n		} else {\n			specialEasing[ name ] = easing;\n		}\n	}\n}\n\nfunction Animation( elem, properties, options ) {\n	var result,\n		stopped,\n		index = 0,\n		length = Animation.prefilters.length,\n		deferred = jQuery.Deferred().always( function() {\n\n			// Don\'t match elem in the :animated selector\n			delete tick.elem;\n		} ),\n		tick = function() {\n			if ( stopped ) {\n				return false;\n			}\n			var currentTime = fxNow || createFxNow(),\n				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n				// Support: Android 2.3\n				// Archaic crash bug won\'t allow us to use `1 - ( 0.5 || 0 )` (#12497)\n				temp = remaining / animation.duration || 0,\n				percent = 1 - temp,\n				index = 0,\n				length = animation.tweens.length;\n\n			for ( ; index < length ; index++ ) {\n				animation.tweens[ index ].run( percent );\n			}\n\n			deferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n			if ( percent < 1 && length ) {\n				return remaining;\n			} else {\n				deferred.resolveWith( elem, [ animation ] );\n				return false;\n			}\n		},\n		animation = deferred.promise( {\n			elem: elem,\n			props: jQuery.extend( {}, properties ),\n			opts: jQuery.extend( true, {\n				specialEasing: {},\n				easing: jQuery.easing._default\n			}, options ),\n			originalProperties: properties,\n			originalOptions: options,\n			startTime: fxNow || createFxNow(),\n			duration: options.duration,\n			tweens: [],\n			createTween: function( prop, end ) {\n				var tween = jQuery.Tween( elem, animation.opts, prop, end,\n						animation.opts.specialEasing[ prop ] || animation.opts.easing );\n				animation.tweens.push( tween );\n				return tween;\n			},\n			stop: function( gotoEnd ) {\n				var index = 0,\n\n					// If we are going to the end, we want to run all the tweens\n					// otherwise we skip this part\n					length = gotoEnd ? animation.tweens.length : 0;\n				if ( stopped ) {\n					return this;\n				}\n				stopped = true;\n				for ( ; index < length ; index++ ) {\n					animation.tweens[ index ].run( 1 );\n				}\n\n				// Resolve when we played the last frame; otherwise, reject\n				if ( gotoEnd ) {\n					deferred.notifyWith( elem, [ animation, 1, 0 ] );\n					deferred.resolveWith( elem, [ animation, gotoEnd ] );\n				} else {\n					deferred.rejectWith( elem, [ animation, gotoEnd ] );\n				}\n				return this;\n			}\n		} ),\n		props = animation.props;\n\n	propFilter( props, animation.opts.specialEasing );\n\n	for ( ; index < length ; index++ ) {\n		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n		if ( result ) {\n			if ( jQuery.isFunction( result.stop ) ) {\n				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n					jQuery.proxy( result.stop, result );\n			}\n			return result;\n		}\n	}\n\n	jQuery.map( props, createTween, animation );\n\n	if ( jQuery.isFunction( animation.opts.start ) ) {\n		animation.opts.start.call( elem, animation );\n	}\n\n	jQuery.fx.timer(\n		jQuery.extend( tick, {\n			elem: elem,\n			anim: animation,\n			queue: animation.opts.queue\n		} )\n	);\n\n	// attach callbacks from options\n	return animation.progress( animation.opts.progress )\n		.done( animation.opts.done, animation.opts.complete )\n		.fail( animation.opts.fail )\n		.always( animation.opts.always );\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n	tweeners: {\n		"*": [ function( prop, value ) {\n			var tween = this.createTween( prop, value );\n			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n			return tween;\n		} ]\n	},\n\n	tweener: function( props, callback ) {\n		if ( jQuery.isFunction( props ) ) {\n			callback = props;\n			props = [ "*" ];\n		} else {\n			props = props.match( rnotwhite );\n		}\n\n		var prop,\n			index = 0,\n			length = props.length;\n\n		for ( ; index < length ; index++ ) {\n			prop = props[ index ];\n			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n			Animation.tweeners[ prop ].unshift( callback );\n		}\n	},\n\n	prefilters: [ defaultPrefilter ],\n\n	prefilter: function( callback, prepend ) {\n		if ( prepend ) {\n			Animation.prefilters.unshift( callback );\n		} else {\n			Animation.prefilters.push( callback );\n		}\n	}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {\n		complete: fn || !fn && easing ||\n			jQuery.isFunction( speed ) && speed,\n		duration: speed,\n		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing\n	};\n\n	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?\n		opt.duration : opt.duration in jQuery.fx.speeds ?\n			jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;\n\n	// Normalize opt.queue - true/undefined/null -> "fx"\n	if ( opt.queue == null || opt.queue === true ) {\n		opt.queue = "fx";\n	}\n\n	// Queueing\n	opt.old = opt.complete;\n\n	opt.complete = function() {\n		if ( jQuery.isFunction( opt.old ) ) {\n			opt.old.call( this );\n		}\n\n		if ( opt.queue ) {\n			jQuery.dequeue( this, opt.queue );\n		}\n	};\n\n	return opt;\n};\n\njQuery.fn.extend( {\n	fadeTo: function( speed, to, easing, callback ) {\n\n		// Show any hidden elements after setting opacity to 0\n		return this.filter( isHidden ).css( "opacity", 0 ).show()\n\n			// Animate to the value specified\n			.end().animate( { opacity: to }, speed, easing, callback );\n	},\n	animate: function( prop, speed, easing, callback ) {\n		var empty = jQuery.isEmptyObject( prop ),\n			optall = jQuery.speed( speed, easing, callback ),\n			doAnimation = function() {\n\n				// Operate on a copy of prop so per-property easing won\'t be lost\n				var anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n				// Empty animations, or finishing resolves immediately\n				if ( empty || dataPriv.get( this, "finish" ) ) {\n					anim.stop( true );\n				}\n			};\n			doAnimation.finish = doAnimation;\n\n		return empty || optall.queue === false ?\n			this.each( doAnimation ) :\n			this.queue( optall.queue, doAnimation );\n	},\n	stop: function( type, clearQueue, gotoEnd ) {\n		var stopQueue = function( hooks ) {\n			var stop = hooks.stop;\n			delete hooks.stop;\n			stop( gotoEnd );\n		};\n\n		if ( typeof type !== "string" ) {\n			gotoEnd = clearQueue;\n			clearQueue = type;\n			type = undefined;\n		}\n		if ( clearQueue && type !== false ) {\n			this.queue( type || "fx", [] );\n		}\n\n		return this.each( function() {\n			var dequeue = true,\n				index = type != null && type + "queueHooks",\n				timers = jQuery.timers,\n				data = dataPriv.get( this );\n\n			if ( index ) {\n				if ( data[ index ] && data[ index ].stop ) {\n					stopQueue( data[ index ] );\n				}\n			} else {\n				for ( index in data ) {\n					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n						stopQueue( data[ index ] );\n					}\n				}\n			}\n\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this &&\n					( type == null || timers[ index ].queue === type ) ) {\n\n					timers[ index ].anim.stop( gotoEnd );\n					dequeue = false;\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Start the next in the queue if the last step wasn\'t forced.\n			// Timers currently will call their complete callbacks, which\n			// will dequeue but only if they were gotoEnd.\n			if ( dequeue || !gotoEnd ) {\n				jQuery.dequeue( this, type );\n			}\n		} );\n	},\n	finish: function( type ) {\n		if ( type !== false ) {\n			type = type || "fx";\n		}\n		return this.each( function() {\n			var index,\n				data = dataPriv.get( this ),\n				queue = data[ type + "queue" ],\n				hooks = data[ type + "queueHooks" ],\n				timers = jQuery.timers,\n				length = queue ? queue.length : 0;\n\n			// Enable finishing flag on private data\n			data.finish = true;\n\n			// Empty the queue first\n			jQuery.queue( this, type, [] );\n\n			if ( hooks && hooks.stop ) {\n				hooks.stop.call( this, true );\n			}\n\n			// Look for any active animations, and finish them\n			for ( index = timers.length; index--; ) {\n				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n					timers[ index ].anim.stop( true );\n					timers.splice( index, 1 );\n				}\n			}\n\n			// Look for any animations in the old queue and finish them\n			for ( index = 0; index < length; index++ ) {\n				if ( queue[ index ] && queue[ index ].finish ) {\n					queue[ index ].finish.call( this );\n				}\n			}\n\n			// Turn off finishing flag\n			delete data.finish;\n		} );\n	}\n} );\n\njQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {\n	var cssFn = jQuery.fn[ name ];\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return speed == null || typeof speed === "boolean" ?\n			cssFn.apply( this, arguments ) :\n			this.animate( genFx( name, true ), speed, easing, callback );\n	};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n	slideDown: genFx( "show" ),\n	slideUp: genFx( "hide" ),\n	slideToggle: genFx( "toggle" ),\n	fadeIn: { opacity: "show" },\n	fadeOut: { opacity: "hide" },\n	fadeToggle: { opacity: "toggle" }\n}, function( name, props ) {\n	jQuery.fn[ name ] = function( speed, easing, callback ) {\n		return this.animate( props, speed, easing, callback );\n	};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n	var timer,\n		i = 0,\n		timers = jQuery.timers;\n\n	fxNow = jQuery.now();\n\n	for ( ; i < timers.length; i++ ) {\n		timer = timers[ i ];\n\n		// Checks the timer has not already been removed\n		if ( !timer() && timers[ i ] === timer ) {\n			timers.splice( i--, 1 );\n		}\n	}\n\n	if ( !timers.length ) {\n		jQuery.fx.stop();\n	}\n	fxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n	jQuery.timers.push( timer );\n	if ( timer() ) {\n		jQuery.fx.start();\n	} else {\n		jQuery.timers.pop();\n	}\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n	if ( !timerId ) {\n		timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );\n	}\n};\n\njQuery.fx.stop = function() {\n	window.clearInterval( timerId );\n\n	timerId = null;\n};\n\njQuery.fx.speeds = {\n	slow: 600,\n	fast: 200,\n\n	// Default speed\n	_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\n// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/\njQuery.fn.delay = function( time, type ) {\n	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n	type = type || "fx";\n\n	return this.queue( type, function( next, hooks ) {\n		var timeout = window.setTimeout( next, time );\n		hooks.stop = function() {\n			window.clearTimeout( timeout );\n		};\n	} );\n};\n\n\n( function() {\n	var input = document.createElement( "input" ),\n		select = document.createElement( "select" ),\n		opt = select.appendChild( document.createElement( "option" ) );\n\n	input.type = "checkbox";\n\n	// Support: iOS<=5.1, Android<=4.2+\n	// Default value for a checkbox should be "on"\n	support.checkOn = input.value !== "";\n\n	// Support: IE<=11+\n	// Must access selectedIndex to make default options select\n	support.optSelected = opt.selected;\n\n	// Support: Android<=2.3\n	// Options inside disabled selects are incorrectly marked as disabled\n	select.disabled = true;\n	support.optDisabled = !opt.disabled;\n\n	// Support: IE<=11+\n	// An input loses its value after becoming a radio\n	input = document.createElement( "input" );\n	input.value = "t";\n	input.type = "radio";\n	support.radioValue = input.value === "t";\n} )();\n\n\nvar boolHook,\n	attrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n	attr: function( name, value ) {\n		return access( this, jQuery.attr, name, value, arguments.length > 1 );\n	},\n\n	removeAttr: function( name ) {\n		return this.each( function() {\n			jQuery.removeAttr( this, name );\n		} );\n	}\n} );\n\njQuery.extend( {\n	attr: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don\'t get/set attributes on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		// Fallback to prop when attributes are not supported\n		if ( typeof elem.getAttribute === "undefined" ) {\n			return jQuery.prop( elem, name, value );\n		}\n\n		// All attributes are lowercase\n		// Grab necessary hook if one is defined\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n			name = name.toLowerCase();\n			hooks = jQuery.attrHooks[ name ] ||\n				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n		}\n\n		if ( value !== undefined ) {\n			if ( value === null ) {\n				jQuery.removeAttr( elem, name );\n				return;\n			}\n\n			if ( hooks && "set" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			elem.setAttribute( name, value + "" );\n			return value;\n		}\n\n		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		ret = jQuery.find.attr( elem, name );\n\n		// Non-existent attributes return null, we normalize to undefined\n		return ret == null ? undefined : ret;\n	},\n\n	attrHooks: {\n		type: {\n			set: function( elem, value ) {\n				if ( !support.radioValue && value === "radio" &&\n					jQuery.nodeName( elem, "input" ) ) {\n					var val = elem.value;\n					elem.setAttribute( "type", value );\n					if ( val ) {\n						elem.value = val;\n					}\n					return value;\n				}\n			}\n		}\n	},\n\n	removeAttr: function( elem, value ) {\n		var name, propName,\n			i = 0,\n			attrNames = value && value.match( rnotwhite );\n\n		if ( attrNames && elem.nodeType === 1 ) {\n			while ( ( name = attrNames[ i++ ] ) ) {\n				propName = jQuery.propFix[ name ] || name;\n\n				// Boolean attributes get special treatment (#10870)\n				if ( jQuery.expr.match.bool.test( name ) ) {\n\n					// Set corresponding property to false\n					elem[ propName ] = false;\n				}\n\n				elem.removeAttribute( name );\n			}\n		}\n	}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n	set: function( elem, value, name ) {\n		if ( value === false ) {\n\n			// Remove boolean attributes when set to false\n			jQuery.removeAttr( elem, name );\n		} else {\n			elem.setAttribute( name, name );\n		}\n		return name;\n	}\n};\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( i, name ) {\n	var getter = attrHandle[ name ] || jQuery.find.attr;\n\n	attrHandle[ name ] = function( elem, name, isXML ) {\n		var ret, handle;\n		if ( !isXML ) {\n\n			// Avoid an infinite loop by temporarily removing this function from the getter\n			handle = attrHandle[ name ];\n			attrHandle[ name ] = ret;\n			ret = getter( elem, name, isXML ) != null ?\n				name.toLowerCase() :\n				null;\n			attrHandle[ name ] = handle;\n		}\n		return ret;\n	};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n	rclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n	prop: function( name, value ) {\n		return access( this, jQuery.prop, name, value, arguments.length > 1 );\n	},\n\n	removeProp: function( name ) {\n		return this.each( function() {\n			delete this[ jQuery.propFix[ name ] || name ];\n		} );\n	}\n} );\n\njQuery.extend( {\n	prop: function( elem, name, value ) {\n		var ret, hooks,\n			nType = elem.nodeType;\n\n		// Don\'t get/set properties on text, comment and attribute nodes\n		if ( nType === 3 || nType === 8 || nType === 2 ) {\n			return;\n		}\n\n		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n			// Fix name and attach hooks\n			name = jQuery.propFix[ name ] || name;\n			hooks = jQuery.propHooks[ name ];\n		}\n\n		if ( value !== undefined ) {\n			if ( hooks && "set" in hooks &&\n				( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n				return ret;\n			}\n\n			return ( elem[ name ] = value );\n		}\n\n		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n			return ret;\n		}\n\n		return elem[ name ];\n	},\n\n	propHooks: {\n		tabIndex: {\n			get: function( elem ) {\n\n				// elem.tabIndex doesn\'t always return the\n				// correct value when it hasn\'t been explicitly set\n				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/\n				// Use proper attribute retrieval(#12072)\n				var tabindex = jQuery.find.attr( elem, "tabindex" );\n\n				return tabindex ?\n					parseInt( tabindex, 10 ) :\n					rfocusable.test( elem.nodeName ) ||\n						rclickable.test( elem.nodeName ) && elem.href ?\n							0 :\n							-1;\n			}\n		}\n	},\n\n	propFix: {\n		"for": "htmlFor",\n		"class": "className"\n	}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\nif ( !support.optSelected ) {\n	jQuery.propHooks.selected = {\n		get: function( elem ) {\n			var parent = elem.parentNode;\n			if ( parent && parent.parentNode ) {\n				parent.parentNode.selectedIndex;\n			}\n			return null;\n		},\n		set: function( elem ) {\n			var parent = elem.parentNode;\n			if ( parent ) {\n				parent.selectedIndex;\n\n				if ( parent.parentNode ) {\n					parent.parentNode.selectedIndex;\n				}\n			}\n		}\n	};\n}\n\njQuery.each( [\n	"tabIndex",\n	"readOnly",\n	"maxLength",\n	"cellSpacing",\n	"cellPadding",\n	"rowSpan",\n	"colSpan",\n	"useMap",\n	"frameBorder",\n	"contentEditable"\n], function() {\n	jQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\nvar rclass = /[\\t\\r\\n\\f]/g;\n\nfunction getClass( elem ) {\n	return elem.getAttribute && elem.getAttribute( "class" ) || "";\n}\n\njQuery.fn.extend( {\n	addClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( typeof value === "string" && value ) {\n			classes = value.match( rnotwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n				cur = elem.nodeType === 1 &&\n					( " " + curValue + " " ).replace( rclass, " " );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {\n							cur += clazz + " ";\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = jQuery.trim( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( "class", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	removeClass: function( value ) {\n		var classes, elem, cur, curValue, clazz, j, finalValue,\n			i = 0;\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( j ) {\n				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n			} );\n		}\n\n		if ( !arguments.length ) {\n			return this.attr( "class", "" );\n		}\n\n		if ( typeof value === "string" && value ) {\n			classes = value.match( rnotwhite ) || [];\n\n			while ( ( elem = this[ i++ ] ) ) {\n				curValue = getClass( elem );\n\n				// This expression is here for better compressibility (see addClass)\n				cur = elem.nodeType === 1 &&\n					( " " + curValue + " " ).replace( rclass, " " );\n\n				if ( cur ) {\n					j = 0;\n					while ( ( clazz = classes[ j++ ] ) ) {\n\n						// Remove *all* instances\n						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {\n							cur = cur.replace( " " + clazz + " ", " " );\n						}\n					}\n\n					// Only assign if different to avoid unneeded rendering.\n					finalValue = jQuery.trim( cur );\n					if ( curValue !== finalValue ) {\n						elem.setAttribute( "class", finalValue );\n					}\n				}\n			}\n		}\n\n		return this;\n	},\n\n	toggleClass: function( value, stateVal ) {\n		var type = typeof value;\n\n		if ( typeof stateVal === "boolean" && type === "string" ) {\n			return stateVal ? this.addClass( value ) : this.removeClass( value );\n		}\n\n		if ( jQuery.isFunction( value ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).toggleClass(\n					value.call( this, i, getClass( this ), stateVal ),\n					stateVal\n				);\n			} );\n		}\n\n		return this.each( function() {\n			var className, i, self, classNames;\n\n			if ( type === "string" ) {\n\n				// Toggle individual class names\n				i = 0;\n				self = jQuery( this );\n				classNames = value.match( rnotwhite ) || [];\n\n				while ( ( className = classNames[ i++ ] ) ) {\n\n					// Check each className given, space separated list\n					if ( self.hasClass( className ) ) {\n						self.removeClass( className );\n					} else {\n						self.addClass( className );\n					}\n				}\n\n			// Toggle whole class name\n			} else if ( value === undefined || type === "boolean" ) {\n				className = getClass( this );\n				if ( className ) {\n\n					// Store className if set\n					dataPriv.set( this, "__className__", className );\n				}\n\n				// If the element has a class name or if we\'re passed `false`,\n				// then remove the whole classname (if there was one, the above saved it).\n				// Otherwise bring back whatever was previously saved (if anything),\n				// falling back to the empty string if nothing was stored.\n				if ( this.setAttribute ) {\n					this.setAttribute( "class",\n						className || value === false ?\n						"" :\n						dataPriv.get( this, "__className__" ) || ""\n					);\n				}\n			}\n		} );\n	},\n\n	hasClass: function( selector ) {\n		var className, elem,\n			i = 0;\n\n		className = " " + selector + " ";\n		while ( ( elem = this[ i++ ] ) ) {\n			if ( elem.nodeType === 1 &&\n				( " " + getClass( elem ) + " " ).replace( rclass, " " )\n					.indexOf( className ) > -1\n			) {\n				return true;\n			}\n		}\n\n		return false;\n	}\n} );\n\n\n\n\nvar rreturn = /\\r/g,\n	rspaces = /[\\x20\\t\\r\\n\\f]+/g;\n\njQuery.fn.extend( {\n	val: function( value ) {\n		var hooks, ret, isFunction,\n			elem = this[ 0 ];\n\n		if ( !arguments.length ) {\n			if ( elem ) {\n				hooks = jQuery.valHooks[ elem.type ] ||\n					jQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n				if ( hooks &&\n					"get" in hooks &&\n					( ret = hooks.get( elem, "value" ) ) !== undefined\n				) {\n					return ret;\n				}\n\n				ret = elem.value;\n\n				return typeof ret === "string" ?\n\n					// Handle most common string cases\n					ret.replace( rreturn, "" ) :\n\n					// Handle cases where value is null/undef or number\n					ret == null ? "" : ret;\n			}\n\n			return;\n		}\n\n		isFunction = jQuery.isFunction( value );\n\n		return this.each( function( i ) {\n			var val;\n\n			if ( this.nodeType !== 1 ) {\n				return;\n			}\n\n			if ( isFunction ) {\n				val = value.call( this, i, jQuery( this ).val() );\n			} else {\n				val = value;\n			}\n\n			// Treat null/undefined as ""; convert numbers to string\n			if ( val == null ) {\n				val = "";\n\n			} else if ( typeof val === "number" ) {\n				val += "";\n\n			} else if ( jQuery.isArray( val ) ) {\n				val = jQuery.map( val, function( value ) {\n					return value == null ? "" : value + "";\n				} );\n			}\n\n			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n			// If set returns undefined, fall back to normal setting\n			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {\n				this.value = val;\n			}\n		} );\n	}\n} );\n\njQuery.extend( {\n	valHooks: {\n		option: {\n			get: function( elem ) {\n\n				var val = jQuery.find.attr( elem, "value" );\n				return val != null ?\n					val :\n\n					// Support: IE10-11+\n					// option.text throws exceptions (#14686, #14858)\n					// Strip and collapse whitespace\n					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n					jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );\n			}\n		},\n		select: {\n			get: function( elem ) {\n				var value, option,\n					options = elem.options,\n					index = elem.selectedIndex,\n					one = elem.type === "select-one" || index < 0,\n					values = one ? null : [],\n					max = one ? index + 1 : options.length,\n					i = index < 0 ?\n						max :\n						one ? index : 0;\n\n				// Loop through all the selected options\n				for ( ; i < max; i++ ) {\n					option = options[ i ];\n\n					// IE8-9 doesn\'t update selected after form reset (#2551)\n					if ( ( option.selected || i === index ) &&\n\n							// Don\'t return options that are disabled or in a disabled optgroup\n							( support.optDisabled ?\n								!option.disabled : option.getAttribute( "disabled" ) === null ) &&\n							( !option.parentNode.disabled ||\n								!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {\n\n						// Get the specific value for the option\n						value = jQuery( option ).val();\n\n						// We don\'t need an array for one selects\n						if ( one ) {\n							return value;\n						}\n\n						// Multi-Selects return an array\n						values.push( value );\n					}\n				}\n\n				return values;\n			},\n\n			set: function( elem, value ) {\n				var optionSet, option,\n					options = elem.options,\n					values = jQuery.makeArray( value ),\n					i = options.length;\n\n				while ( i-- ) {\n					option = options[ i ];\n					if ( option.selected =\n						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n					) {\n						optionSet = true;\n					}\n				}\n\n				// Force browsers to behave consistently when non-matching value is set\n				if ( !optionSet ) {\n					elem.selectedIndex = -1;\n				}\n				return values;\n			}\n		}\n	}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ "radio", "checkbox" ], function() {\n	jQuery.valHooks[ this ] = {\n		set: function( elem, value ) {\n			if ( jQuery.isArray( value ) ) {\n				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n			}\n		}\n	};\n	if ( !support.checkOn ) {\n		jQuery.valHooks[ this ].get = function( elem ) {\n			return elem.getAttribute( "value" ) === null ? "on" : elem.value;\n		};\n	}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;\n\njQuery.extend( jQuery.event, {\n\n	trigger: function( event, data, elem, onlyHandlers ) {\n\n		var i, cur, tmp, bubbleType, ontype, handle, special,\n			eventPath = [ elem || document ],\n			type = hasOwn.call( event, "type" ) ? event.type : event,\n			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];\n\n		cur = tmp = elem = elem || document;\n\n		// Don\'t do events on text and comment nodes\n		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n			return;\n		}\n\n		// focus/blur morphs to focusin/out; ensure we\'re not firing them right now\n		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n			return;\n		}\n\n		if ( type.indexOf( "." ) > -1 ) {\n\n			// Namespaced trigger; create a regexp to match event type in handle()\n			namespaces = type.split( "." );\n			type = namespaces.shift();\n			namespaces.sort();\n		}\n		ontype = type.indexOf( ":" ) < 0 && "on" + type;\n\n		// Caller can pass in a jQuery.Event object, Object, or just an event type string\n		event = event[ jQuery.expando ] ?\n			event :\n			new jQuery.Event( type, typeof event === "object" && event );\n\n		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n		event.isTrigger = onlyHandlers ? 2 : 3;\n		event.namespace = namespaces.join( "." );\n		event.rnamespace = event.namespace ?\n			new RegExp( "(^|\\\\.)" + namespaces.join( "\\\\.(?:.*\\\\.|)" ) + "(\\\\.|$)" ) :\n			null;\n\n		// Clean up the event in case it is being reused\n		event.result = undefined;\n		if ( !event.target ) {\n			event.target = elem;\n		}\n\n		// Clone any incoming data and prepend the event, creating the handler arg list\n		data = data == null ?\n			[ event ] :\n			jQuery.makeArray( data, [ event ] );\n\n		// Allow special events to draw outside the lines\n		special = jQuery.event.special[ type ] || {};\n		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n			return;\n		}\n\n		// Determine event propagation path in advance, per W3C events spec (#9951)\n		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)\n		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {\n\n			bubbleType = special.delegateType || type;\n			if ( !rfocusMorph.test( bubbleType + type ) ) {\n				cur = cur.parentNode;\n			}\n			for ( ; cur; cur = cur.parentNode ) {\n				eventPath.push( cur );\n				tmp = cur;\n			}\n\n			// Only add window if we got to document (e.g., not plain obj or detached DOM)\n			if ( tmp === ( elem.ownerDocument || document ) ) {\n				eventPath.push( tmp.defaultView || tmp.parentWindow || window );\n			}\n		}\n\n		// Fire handlers on the event path\n		i = 0;\n		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\n			event.type = i > 1 ?\n				bubbleType :\n				special.bindType || type;\n\n			// jQuery handler\n			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&\n				dataPriv.get( cur, "handle" );\n			if ( handle ) {\n				handle.apply( cur, data );\n			}\n\n			// Native handler\n			handle = ontype && cur[ ontype ];\n			if ( handle && handle.apply && acceptData( cur ) ) {\n				event.result = handle.apply( cur, data );\n				if ( event.result === false ) {\n					event.preventDefault();\n				}\n			}\n		}\n		event.type = type;\n\n		// If nobody prevented the default action, do it now\n		if ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n			if ( ( !special._default ||\n				special._default.apply( eventPath.pop(), data ) === false ) &&\n				acceptData( elem ) ) {\n\n				// Call a native DOM method on the target with the same name name as the event.\n				// Don\'t do default actions on window, that\'s where global variables be (#6170)\n				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {\n\n					// Don\'t re-trigger an onFOO event when we call its FOO() method\n					tmp = elem[ ontype ];\n\n					if ( tmp ) {\n						elem[ ontype ] = null;\n					}\n\n					// Prevent re-triggering of the same event, since we already bubbled it above\n					jQuery.event.triggered = type;\n					elem[ type ]();\n					jQuery.event.triggered = undefined;\n\n					if ( tmp ) {\n						elem[ ontype ] = tmp;\n					}\n				}\n			}\n		}\n\n		return event.result;\n	},\n\n	// Piggyback on a donor event to simulate a different one\n	simulate: function( type, elem, event ) {\n		var e = jQuery.extend(\n			new jQuery.Event(),\n			event,\n			{\n				type: type,\n				isSimulated: true\n\n				// Previously, `originalEvent: {}` was set here, so stopPropagation call\n				// would not be triggered on donor event, since in our own\n				// jQuery.event.stopPropagation function we had a check for existence of\n				// originalEvent.stopPropagation method, so, consequently it would be a noop.\n				//\n				// But now, this "simulate" function is used only for events\n				// for which stopPropagation() is noop, so there is no need for that anymore.\n				//\n				// For the 1.x branch though, guard for "click" and "submit"\n				// events is still used, but was moved to jQuery.event.stopPropagation function\n				// because `originalEvent` should point to the original event for the constancy\n				// with other events and for more focused logic\n			}\n		);\n\n		jQuery.event.trigger( e, null, elem );\n\n		if ( e.isDefaultPrevented() ) {\n			event.preventDefault();\n		}\n	}\n\n} );\n\njQuery.fn.extend( {\n\n	trigger: function( type, data ) {\n		return this.each( function() {\n			jQuery.event.trigger( type, data, this );\n		} );\n	},\n	triggerHandler: function( type, data ) {\n		var elem = this[ 0 ];\n		if ( elem ) {\n			return jQuery.event.trigger( type, data, elem, true );\n		}\n	}\n} );\n\n\njQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +\n	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +\n	"change select submit keydown keypress keyup error contextmenu" ).split( " " ),\n	function( i, name ) {\n\n	// Handle event binding\n	jQuery.fn[ name ] = function( data, fn ) {\n		return arguments.length > 0 ?\n			this.on( name, null, data, fn ) :\n			this.trigger( name );\n	};\n} );\n\njQuery.fn.extend( {\n	hover: function( fnOver, fnOut ) {\n		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n	}\n} );\n\n\n\n\nsupport.focusin = "onfocusin" in window;\n\n\n// Support: Firefox\n// Firefox doesn\'t have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome, Safari\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {\n\n		// Attach a single capturing handler on the document while someone wants focusin/focusout\n		var handler = function( event ) {\n			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n		};\n\n		jQuery.event.special[ fix ] = {\n			setup: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix );\n\n				if ( !attaches ) {\n					doc.addEventListener( orig, handler, true );\n				}\n				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n			},\n			teardown: function() {\n				var doc = this.ownerDocument || this,\n					attaches = dataPriv.access( doc, fix ) - 1;\n\n				if ( !attaches ) {\n					doc.removeEventListener( orig, handler, true );\n					dataPriv.remove( doc, fix );\n\n				} else {\n					dataPriv.access( doc, fix, attaches );\n				}\n			}\n		};\n	} );\n}\nvar location = window.location;\n\nvar nonce = jQuery.now();\n\nvar rquery = ( /\\?/ );\n\n\n\n// Support: Android 2.3\n// Workaround failure to string-cast null input\njQuery.parseJSON = function( data ) {\n	return JSON.parse( data + "" );\n};\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n	var xml;\n	if ( !data || typeof data !== "string" ) {\n		return null;\n	}\n\n	// Support: IE9\n	try {\n		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );\n	} catch ( e ) {\n		xml = undefined;\n	}\n\n	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {\n		jQuery.error( "Invalid XML: " + data );\n	}\n	return xml;\n};\n\n\nvar\n	rhash = /#.*$/,\n	rts = /([?&])_=[^&]*/,\n	rheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n	// #7653, #8125, #8152: local protocol detection\n	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n	rnoContent = /^(?:GET|HEAD)$/,\n	rprotocol = /^\\/\\//,\n\n	/* Prefilters\n	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n	 * 2) These are called:\n	 *    - BEFORE asking for a transport\n	 *    - AFTER param serialization (s.data is a string if s.processData is true)\n	 * 3) key is the dataType\n	 * 4) the catchall symbol "*" can be used\n	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed\n	 */\n	prefilters = {},\n\n	/* Transports bindings\n	 * 1) key is the dataType\n	 * 2) the catchall symbol "*" can be used\n	 * 3) selection will start with transport dataType and THEN go to "*" if needed\n	 */\n	transports = {},\n\n	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression\n	allTypes = "*/".concat( "*" ),\n\n	// Anchor tag for parsing the document origin\n	originAnchor = document.createElement( "a" );\n	originAnchor.href = location.href;\n\n// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n	// dataTypeExpression is optional and defaults to "*"\n	return function( dataTypeExpression, func ) {\n\n		if ( typeof dataTypeExpression !== "string" ) {\n			func = dataTypeExpression;\n			dataTypeExpression = "*";\n		}\n\n		var dataType,\n			i = 0,\n			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];\n\n		if ( jQuery.isFunction( func ) ) {\n\n			// For each dataType in the dataTypeExpression\n			while ( ( dataType = dataTypes[ i++ ] ) ) {\n\n				// Prepend if requested\n				if ( dataType[ 0 ] === "+" ) {\n					dataType = dataType.slice( 1 ) || "*";\n					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n				// Otherwise append\n				} else {\n					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n				}\n			}\n		}\n	};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n	var inspected = {},\n		seekingTransport = ( structure === transports );\n\n	function inspect( dataType ) {\n		var selected;\n		inspected[ dataType ] = true;\n		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n			if ( typeof dataTypeOrTransport === "string" &&\n				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n				options.dataTypes.unshift( dataTypeOrTransport );\n				inspect( dataTypeOrTransport );\n				return false;\n			} else if ( seekingTransport ) {\n				return !( selected = dataTypeOrTransport );\n			}\n		} );\n		return selected;\n	}\n\n	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );\n}\n\n// A special extend for ajax options\n// that takes "flat" options (not to be deep extended)\n// Fixes #9887\nfunction ajaxExtend( target, src ) {\n	var key, deep,\n		flatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n	for ( key in src ) {\n		if ( src[ key ] !== undefined ) {\n			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n		}\n	}\n	if ( deep ) {\n		jQuery.extend( true, target, deep );\n	}\n\n	return target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n	var ct, type, finalDataType, firstDataType,\n		contents = s.contents,\n		dataTypes = s.dataTypes;\n\n	// Remove auto dataType and get content-type in the process\n	while ( dataTypes[ 0 ] === "*" ) {\n		dataTypes.shift();\n		if ( ct === undefined ) {\n			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );\n		}\n	}\n\n	// Check if we\'re dealing with a known content-type\n	if ( ct ) {\n		for ( type in contents ) {\n			if ( contents[ type ] && contents[ type ].test( ct ) ) {\n				dataTypes.unshift( type );\n				break;\n			}\n		}\n	}\n\n	// Check to see if we have a response for the expected dataType\n	if ( dataTypes[ 0 ] in responses ) {\n		finalDataType = dataTypes[ 0 ];\n	} else {\n\n		// Try convertible dataTypes\n		for ( type in responses ) {\n			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {\n				finalDataType = type;\n				break;\n			}\n			if ( !firstDataType ) {\n				firstDataType = type;\n			}\n		}\n\n		// Or just use first one\n		finalDataType = finalDataType || firstDataType;\n	}\n\n	// If we found a dataType\n	// We add the dataType to the list if needed\n	// and return the corresponding response\n	if ( finalDataType ) {\n		if ( finalDataType !== dataTypes[ 0 ] ) {\n			dataTypes.unshift( finalDataType );\n		}\n		return responses[ finalDataType ];\n	}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n	var conv2, current, conv, tmp, prev,\n		converters = {},\n\n		// Work with a copy of dataTypes in case we need to modify it for conversion\n		dataTypes = s.dataTypes.slice();\n\n	// Create converters map with lowercased keys\n	if ( dataTypes[ 1 ] ) {\n		for ( conv in s.converters ) {\n			converters[ conv.toLowerCase() ] = s.converters[ conv ];\n		}\n	}\n\n	current = dataTypes.shift();\n\n	// Convert to each sequential dataType\n	while ( current ) {\n\n		if ( s.responseFields[ current ] ) {\n			jqXHR[ s.responseFields[ current ] ] = response;\n		}\n\n		// Apply the dataFilter if provided\n		if ( !prev && isSuccess && s.dataFilter ) {\n			response = s.dataFilter( response, s.dataType );\n		}\n\n		prev = current;\n		current = dataTypes.shift();\n\n		if ( current ) {\n\n		// There\'s only work to do if current dataType is non-auto\n			if ( current === "*" ) {\n\n				current = prev;\n\n			// Convert response if prev dataType is non-auto and differs from current\n			} else if ( prev !== "*" && prev !== current ) {\n\n				// Seek a direct converter\n				conv = converters[ prev + " " + current ] || converters[ "* " + current ];\n\n				// If none found, seek a pair\n				if ( !conv ) {\n					for ( conv2 in converters ) {\n\n						// If conv2 outputs current\n						tmp = conv2.split( " " );\n						if ( tmp[ 1 ] === current ) {\n\n							// If prev can be converted to accepted input\n							conv = converters[ prev + " " + tmp[ 0 ] ] ||\n								converters[ "* " + tmp[ 0 ] ];\n							if ( conv ) {\n\n								// Condense equivalence converters\n								if ( conv === true ) {\n									conv = converters[ conv2 ];\n\n								// Otherwise, insert the intermediate dataType\n								} else if ( converters[ conv2 ] !== true ) {\n									current = tmp[ 0 ];\n									dataTypes.unshift( tmp[ 1 ] );\n								}\n								break;\n							}\n						}\n					}\n				}\n\n				// Apply converter (if not an equivalence)\n				if ( conv !== true ) {\n\n					// Unless errors are allowed to bubble, catch and return them\n					if ( conv && s.throws ) {\n						response = conv( response );\n					} else {\n						try {\n							response = conv( response );\n						} catch ( e ) {\n							return {\n								state: "parsererror",\n								error: conv ? e : "No conversion from " + prev + " to " + current\n							};\n						}\n					}\n				}\n			}\n		}\n	}\n\n	return { state: "success", data: response };\n}\n\njQuery.extend( {\n\n	// Counter for holding the number of active queries\n	active: 0,\n\n	// Last-Modified header cache for next request\n	lastModified: {},\n	etag: {},\n\n	ajaxSettings: {\n		url: location.href,\n		type: "GET",\n		isLocal: rlocalProtocol.test( location.protocol ),\n		global: true,\n		processData: true,\n		async: true,\n		contentType: "application/x-www-form-urlencoded; charset=UTF-8",\n		/*\n		timeout: 0,\n		data: null,\n		dataType: null,\n		username: null,\n		password: null,\n		cache: null,\n		throws: false,\n		traditional: false,\n		headers: {},\n		*/\n\n		accepts: {\n			"*": allTypes,\n			text: "text/plain",\n			html: "text/html",\n			xml: "application/xml, text/xml",\n			json: "application/json, text/javascript"\n		},\n\n		contents: {\n			xml: /\\bxml\\b/,\n			html: /\\bhtml/,\n			json: /\\bjson\\b/\n		},\n\n		responseFields: {\n			xml: "responseXML",\n			text: "responseText",\n			json: "responseJSON"\n		},\n\n		// Data converters\n		// Keys separate source (or catchall "*") and destination types with a single space\n		converters: {\n\n			// Convert anything to text\n			"* text": String,\n\n			// Text to html (true = no transformation)\n			"text html": true,\n\n			// Evaluate text as a json expression\n			"text json": jQuery.parseJSON,\n\n			// Parse text as xml\n			"text xml": jQuery.parseXML\n		},\n\n		// For options that shouldn\'t be deep extended:\n		// you can add your own custom options here if\n		// and when you create one that shouldn\'t be\n		// deep extended (see ajaxExtend)\n		flatOptions: {\n			url: true,\n			context: true\n		}\n	},\n\n	// Creates a full fledged settings object into target\n	// with both ajaxSettings and settings fields.\n	// If target is omitted, writes into ajaxSettings.\n	ajaxSetup: function( target, settings ) {\n		return settings ?\n\n			// Building a settings object\n			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n			// Extending ajaxSettings\n			ajaxExtend( jQuery.ajaxSettings, target );\n	},\n\n	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n	ajaxTransport: addToPrefiltersOrTransports( transports ),\n\n	// Main method\n	ajax: function( url, options ) {\n\n		// If url is an object, simulate pre-1.5 signature\n		if ( typeof url === "object" ) {\n			options = url;\n			url = undefined;\n		}\n\n		// Force options to be an object\n		options = options || {};\n\n		var transport,\n\n			// URL without anti-cache param\n			cacheURL,\n\n			// Response headers\n			responseHeadersString,\n			responseHeaders,\n\n			// timeout handle\n			timeoutTimer,\n\n			// Url cleanup var\n			urlAnchor,\n\n			// To know if global events are to be dispatched\n			fireGlobals,\n\n			// Loop variable\n			i,\n\n			// Create the final options object\n			s = jQuery.ajaxSetup( {}, options ),\n\n			// Callbacks context\n			callbackContext = s.context || s,\n\n			// Context for global events is callbackContext if it is a DOM node or jQuery collection\n			globalEventContext = s.context &&\n				( callbackContext.nodeType || callbackContext.jquery ) ?\n					jQuery( callbackContext ) :\n					jQuery.event,\n\n			// Deferreds\n			deferred = jQuery.Deferred(),\n			completeDeferred = jQuery.Callbacks( "once memory" ),\n\n			// Status-dependent callbacks\n			statusCode = s.statusCode || {},\n\n			// Headers (they are sent all at once)\n			requestHeaders = {},\n			requestHeadersNames = {},\n\n			// The jqXHR state\n			state = 0,\n\n			// Default abort message\n			strAbort = "canceled",\n\n			// Fake xhr\n			jqXHR = {\n				readyState: 0,\n\n				// Builds headers hashtable if needed\n				getResponseHeader: function( key ) {\n					var match;\n					if ( state === 2 ) {\n						if ( !responseHeaders ) {\n							responseHeaders = {};\n							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n							}\n						}\n						match = responseHeaders[ key.toLowerCase() ];\n					}\n					return match == null ? null : match;\n				},\n\n				// Raw string\n				getAllResponseHeaders: function() {\n					return state === 2 ? responseHeadersString : null;\n				},\n\n				// Caches the header\n				setRequestHeader: function( name, value ) {\n					var lname = name.toLowerCase();\n					if ( !state ) {\n						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;\n						requestHeaders[ name ] = value;\n					}\n					return this;\n				},\n\n				// Overrides response content-type header\n				overrideMimeType: function( type ) {\n					if ( !state ) {\n						s.mimeType = type;\n					}\n					return this;\n				},\n\n				// Status-dependent callbacks\n				statusCode: function( map ) {\n					var code;\n					if ( map ) {\n						if ( state < 2 ) {\n							for ( code in map ) {\n\n								// Lazy-add the new callback in a way that preserves old ones\n								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n							}\n						} else {\n\n							// Execute the appropriate callbacks\n							jqXHR.always( map[ jqXHR.status ] );\n						}\n					}\n					return this;\n				},\n\n				// Cancel the request\n				abort: function( statusText ) {\n					var finalText = statusText || strAbort;\n					if ( transport ) {\n						transport.abort( finalText );\n					}\n					done( 0, finalText );\n					return this;\n				}\n			};\n\n		// Attach deferreds\n		deferred.promise( jqXHR ).complete = completeDeferred.add;\n		jqXHR.success = jqXHR.done;\n		jqXHR.error = jqXHR.fail;\n\n		// Remove hash character (#7531: and string promotion)\n		// Add protocol if not provided (prefilters might expect it)\n		// Handle falsy url in the settings object (#10093: consistency with old signature)\n		// We also use the url parameter if available\n		s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )\n			.replace( rprotocol, location.protocol + "//" );\n\n		// Alias method option to type as per ticket #12004\n		s.type = options.method || options.type || s.method || s.type;\n\n		// Extract dataTypes list\n		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];\n\n		// A cross-domain request is in order when the origin doesn\'t match the current origin.\n		if ( s.crossDomain == null ) {\n			urlAnchor = document.createElement( "a" );\n\n			// Support: IE8-11+\n			// IE throws exception if url is malformed, e.g. http://example.com:80x/\n			try {\n				urlAnchor.href = s.url;\n\n				// Support: IE8-11+\n				// Anchor\'s host property isn\'t correctly set when s.url is relative\n				urlAnchor.href = urlAnchor.href;\n				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==\n					urlAnchor.protocol + "//" + urlAnchor.host;\n			} catch ( e ) {\n\n				// If there is an error parsing the URL, assume it is crossDomain,\n				// it can be rejected by the transport if it is invalid\n				s.crossDomain = true;\n			}\n		}\n\n		// Convert data if not already a string\n		if ( s.data && s.processData && typeof s.data !== "string" ) {\n			s.data = jQuery.param( s.data, s.traditional );\n		}\n\n		// Apply prefilters\n		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n		// If request was aborted inside a prefilter, stop there\n		if ( state === 2 ) {\n			return jqXHR;\n		}\n\n		// We can fire global events as of now if asked to\n		// Don\'t fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)\n		fireGlobals = jQuery.event && s.global;\n\n		// Watch for a new set of requests\n		if ( fireGlobals && jQuery.active++ === 0 ) {\n			jQuery.event.trigger( "ajaxStart" );\n		}\n\n		// Uppercase the type\n		s.type = s.type.toUpperCase();\n\n		// Determine if request has content\n		s.hasContent = !rnoContent.test( s.type );\n\n		// Save the URL in case we\'re toying with the If-Modified-Since\n		// and/or If-None-Match header later on\n		cacheURL = s.url;\n\n		// More options handling for requests with no content\n		if ( !s.hasContent ) {\n\n			// If data is available, append data to url\n			if ( s.data ) {\n				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );\n\n				// #9682: remove data so that it\'s not used in an eventual retry\n				delete s.data;\n			}\n\n			// Add anti-cache in url if needed\n			if ( s.cache === false ) {\n				s.url = rts.test( cacheURL ) ?\n\n					// If there is already a \'_\' parameter, set its value\n					cacheURL.replace( rts, "$1_=" + nonce++ ) :\n\n					// Otherwise add one to the end\n					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;\n			}\n		}\n\n		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n		if ( s.ifModified ) {\n			if ( jQuery.lastModified[ cacheURL ] ) {\n				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );\n			}\n			if ( jQuery.etag[ cacheURL ] ) {\n				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );\n			}\n		}\n\n		// Set the correct header, if data is being sent\n		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n			jqXHR.setRequestHeader( "Content-Type", s.contentType );\n		}\n\n		// Set the Accepts header for the server, depending on the dataType\n		jqXHR.setRequestHeader(\n			"Accept",\n			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n				s.accepts[ s.dataTypes[ 0 ] ] +\n					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :\n				s.accepts[ "*" ]\n		);\n\n		// Check for headers option\n		for ( i in s.headers ) {\n			jqXHR.setRequestHeader( i, s.headers[ i ] );\n		}\n\n		// Allow custom headers/mimetypes and early abort\n		if ( s.beforeSend &&\n			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {\n\n			// Abort if not done already and return\n			return jqXHR.abort();\n		}\n\n		// Aborting is no longer a cancellation\n		strAbort = "abort";\n\n		// Install callbacks on deferreds\n		for ( i in { success: 1, error: 1, complete: 1 } ) {\n			jqXHR[ i ]( s[ i ] );\n		}\n\n		// Get transport\n		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n		// If no transport, we auto-abort\n		if ( !transport ) {\n			done( -1, "No Transport" );\n		} else {\n			jqXHR.readyState = 1;\n\n			// Send global event\n			if ( fireGlobals ) {\n				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );\n			}\n\n			// If request was aborted inside ajaxSend, stop there\n			if ( state === 2 ) {\n				return jqXHR;\n			}\n\n			// Timeout\n			if ( s.async && s.timeout > 0 ) {\n				timeoutTimer = window.setTimeout( function() {\n					jqXHR.abort( "timeout" );\n				}, s.timeout );\n			}\n\n			try {\n				state = 1;\n				transport.send( requestHeaders, done );\n			} catch ( e ) {\n\n				// Propagate exception as error if not done\n				if ( state < 2 ) {\n					done( -1, e );\n\n				// Simply rethrow otherwise\n				} else {\n					throw e;\n				}\n			}\n		}\n\n		// Callback for when everything is done\n		function done( status, nativeStatusText, responses, headers ) {\n			var isSuccess, success, error, response, modified,\n				statusText = nativeStatusText;\n\n			// Called once\n			if ( state === 2 ) {\n				return;\n			}\n\n			// State is "done" now\n			state = 2;\n\n			// Clear timeout if it exists\n			if ( timeoutTimer ) {\n				window.clearTimeout( timeoutTimer );\n			}\n\n			// Dereference transport for early garbage collection\n			// (no matter how long the jqXHR object will be used)\n			transport = undefined;\n\n			// Cache response headers\n			responseHeadersString = headers || "";\n\n			// Set readyState\n			jqXHR.readyState = status > 0 ? 4 : 0;\n\n			// Determine if successful\n			isSuccess = status >= 200 && status < 300 || status === 304;\n\n			// Get response data\n			if ( responses ) {\n				response = ajaxHandleResponses( s, jqXHR, responses );\n			}\n\n			// Convert no matter what (that way responseXXX fields are always set)\n			response = ajaxConvert( s, response, jqXHR, isSuccess );\n\n			// If successful, handle type chaining\n			if ( isSuccess ) {\n\n				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n				if ( s.ifModified ) {\n					modified = jqXHR.getResponseHeader( "Last-Modified" );\n					if ( modified ) {\n						jQuery.lastModified[ cacheURL ] = modified;\n					}\n					modified = jqXHR.getResponseHeader( "etag" );\n					if ( modified ) {\n						jQuery.etag[ cacheURL ] = modified;\n					}\n				}\n\n				// if no content\n				if ( status === 204 || s.type === "HEAD" ) {\n					statusText = "nocontent";\n\n				// if not modified\n				} else if ( status === 304 ) {\n					statusText = "notmodified";\n\n				// If we have data, let\'s convert it\n				} else {\n					statusText = response.state;\n					success = response.data;\n					error = response.error;\n					isSuccess = !error;\n				}\n			} else {\n\n				// Extract error from statusText and normalize for non-aborts\n				error = statusText;\n				if ( status || !statusText ) {\n					statusText = "error";\n					if ( status < 0 ) {\n						status = 0;\n					}\n				}\n			}\n\n			// Set data for the fake xhr object\n			jqXHR.status = status;\n			jqXHR.statusText = ( nativeStatusText || statusText ) + "";\n\n			// Success/Error\n			if ( isSuccess ) {\n				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n			} else {\n				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n			}\n\n			// Status-dependent callbacks\n			jqXHR.statusCode( statusCode );\n			statusCode = undefined;\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",\n					[ jqXHR, s, isSuccess ? success : error ] );\n			}\n\n			// Complete\n			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n			if ( fireGlobals ) {\n				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );\n\n				// Handle the global AJAX counter\n				if ( !( --jQuery.active ) ) {\n					jQuery.event.trigger( "ajaxStop" );\n				}\n			}\n		}\n\n		return jqXHR;\n	},\n\n	getJSON: function( url, data, callback ) {\n		return jQuery.get( url, data, callback, "json" );\n	},\n\n	getScript: function( url, callback ) {\n		return jQuery.get( url, undefined, callback, "script" );\n	}\n} );\n\njQuery.each( [ "get", "post" ], function( i, method ) {\n	jQuery[ method ] = function( url, data, callback, type ) {\n\n		// Shift arguments if data argument was omitted\n		if ( jQuery.isFunction( data ) ) {\n			type = type || callback;\n			callback = data;\n			data = undefined;\n		}\n\n		// The url can be an options object (which then must have .url)\n		return jQuery.ajax( jQuery.extend( {\n			url: url,\n			type: method,\n			dataType: type,\n			data: data,\n			success: callback\n		}, jQuery.isPlainObject( url ) && url ) );\n	};\n} );\n\n\njQuery._evalUrl = function( url ) {\n	return jQuery.ajax( {\n		url: url,\n\n		// Make this explicit, since user can override this through ajaxSetup (#11264)\n		type: "GET",\n		dataType: "script",\n		async: false,\n		global: false,\n		"throws": true\n	} );\n};\n\n\njQuery.fn.extend( {\n	wrapAll: function( html ) {\n		var wrap;\n\n		if ( jQuery.isFunction( html ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).wrapAll( html.call( this, i ) );\n			} );\n		}\n\n		if ( this[ 0 ] ) {\n\n			// The elements to wrap the target around\n			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n			if ( this[ 0 ].parentNode ) {\n				wrap.insertBefore( this[ 0 ] );\n			}\n\n			wrap.map( function() {\n				var elem = this;\n\n				while ( elem.firstElementChild ) {\n					elem = elem.firstElementChild;\n				}\n\n				return elem;\n			} ).append( this );\n		}\n\n		return this;\n	},\n\n	wrapInner: function( html ) {\n		if ( jQuery.isFunction( html ) ) {\n			return this.each( function( i ) {\n				jQuery( this ).wrapInner( html.call( this, i ) );\n			} );\n		}\n\n		return this.each( function() {\n			var self = jQuery( this ),\n				contents = self.contents();\n\n			if ( contents.length ) {\n				contents.wrapAll( html );\n\n			} else {\n				self.append( html );\n			}\n		} );\n	},\n\n	wrap: function( html ) {\n		var isFunction = jQuery.isFunction( html );\n\n		return this.each( function( i ) {\n			jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );\n		} );\n	},\n\n	unwrap: function() {\n		return this.parent().each( function() {\n			if ( !jQuery.nodeName( this, "body" ) ) {\n				jQuery( this ).replaceWith( this.childNodes );\n			}\n		} ).end();\n	}\n} );\n\n\njQuery.expr.filters.hidden = function( elem ) {\n	return !jQuery.expr.filters.visible( elem );\n};\njQuery.expr.filters.visible = function( elem ) {\n\n	// Support: Opera <= 12.12\n	// Opera reports offsetWidths and offsetHeights less than zero on some elements\n	// Use OR instead of AND as the element is not visible if either is true\n	// See tickets #10406 and #13132\n	return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;\n};\n\n\n\n\nvar r20 = /%20/g,\n	rbracket = /\\[\\]$/,\n	rCRLF = /\\r?\\n/g,\n	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n	rsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n	var name;\n\n	if ( jQuery.isArray( obj ) ) {\n\n		// Serialize array item.\n		jQuery.each( obj, function( i, v ) {\n			if ( traditional || rbracket.test( prefix ) ) {\n\n				// Treat each array item as a scalar.\n				add( prefix, v );\n\n			} else {\n\n				// Item is non-scalar (array or object), encode its numeric index.\n				buildParams(\n					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",\n					v,\n					traditional,\n					add\n				);\n			}\n		} );\n\n	} else if ( !traditional && jQuery.type( obj ) === "object" ) {\n\n		// Serialize object item.\n		for ( name in obj ) {\n			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );\n		}\n\n	} else {\n\n		// Serialize scalar item.\n		add( prefix, obj );\n	}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n	var prefix,\n		s = [],\n		add = function( key, value ) {\n\n			// If value is a function, invoke it and return its value\n			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );\n			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );\n		};\n\n	// Set traditional to true for jQuery <= 1.3.2 behavior.\n	if ( traditional === undefined ) {\n		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;\n	}\n\n	// If an array was passed in, assume that it is an array of form elements.\n	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n		// Serialize the form elements\n		jQuery.each( a, function() {\n			add( this.name, this.value );\n		} );\n\n	} else {\n\n		// If traditional, encode the "old" way (the way 1.3.2 or older\n		// did it), otherwise encode params recursively.\n		for ( prefix in a ) {\n			buildParams( prefix, a[ prefix ], traditional, add );\n		}\n	}\n\n	// Return the resulting serialization\n	return s.join( "&" ).replace( r20, "+" );\n};\n\njQuery.fn.extend( {\n	serialize: function() {\n		return jQuery.param( this.serializeArray() );\n	},\n	serializeArray: function() {\n		return this.map( function() {\n\n			// Can add propHook for "elements" to filter or add form elements\n			var elements = jQuery.prop( this, "elements" );\n			return elements ? jQuery.makeArray( elements ) : this;\n		} )\n		.filter( function() {\n			var type = this.type;\n\n			// Use .is( ":disabled" ) so that fieldset[disabled] works\n			return this.name && !jQuery( this ).is( ":disabled" ) &&\n				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n				( this.checked || !rcheckableType.test( type ) );\n		} )\n		.map( function( i, elem ) {\n			var val = jQuery( this ).val();\n\n			return val == null ?\n				null :\n				jQuery.isArray( val ) ?\n					jQuery.map( val, function( val ) {\n						return { name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n					} ) :\n					{ name: elem.name, value: val.replace( rCRLF, "\\r\\n" ) };\n		} ).get();\n	}\n} );\n\n\njQuery.ajaxSettings.xhr = function() {\n	try {\n		return new window.XMLHttpRequest();\n	} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n		// File protocol always yields status code 0, assume 200\n		0: 200,\n\n		// Support: IE9\n		// #1450: sometimes IE returns 1223 when it should be 204\n		1223: 204\n	},\n	xhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n	var callback, errorCallback;\n\n	// Cross domain only allowed if supported through XMLHttpRequest\n	if ( support.cors || xhrSupported && !options.crossDomain ) {\n		return {\n			send: function( headers, complete ) {\n				var i,\n					xhr = options.xhr();\n\n				xhr.open(\n					options.type,\n					options.url,\n					options.async,\n					options.username,\n					options.password\n				);\n\n				// Apply custom fields if provided\n				if ( options.xhrFields ) {\n					for ( i in options.xhrFields ) {\n						xhr[ i ] = options.xhrFields[ i ];\n					}\n				}\n\n				// Override mime type if needed\n				if ( options.mimeType && xhr.overrideMimeType ) {\n					xhr.overrideMimeType( options.mimeType );\n				}\n\n				// X-Requested-With header\n				// For cross-domain requests, seeing as conditions for a preflight are\n				// akin to a jigsaw puzzle, we simply never set it to be sure.\n				// (it can always be set on a per-request basis or even using ajaxSetup)\n				// For same-domain requests, won\'t change header if already provided.\n				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {\n					headers[ "X-Requested-With" ] = "XMLHttpRequest";\n				}\n\n				// Set headers\n				for ( i in headers ) {\n					xhr.setRequestHeader( i, headers[ i ] );\n				}\n\n				// Callback\n				callback = function( type ) {\n					return function() {\n						if ( callback ) {\n							callback = errorCallback = xhr.onload =\n								xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;\n\n							if ( type === "abort" ) {\n								xhr.abort();\n							} else if ( type === "error" ) {\n\n								// Support: IE9\n								// On a manual native abort, IE9 throws\n								// errors on any property access that is not readyState\n								if ( typeof xhr.status !== "number" ) {\n									complete( 0, "error" );\n								} else {\n									complete(\n\n										// File: protocol always yields status 0; see #8605, #14207\n										xhr.status,\n										xhr.statusText\n									);\n								}\n							} else {\n								complete(\n									xhrSuccessStatus[ xhr.status ] || xhr.status,\n									xhr.statusText,\n\n									// Support: IE9 only\n									// IE9 has no XHR2 but throws on binary (trac-11426)\n									// For XHR2 non-text, let the caller handle it (gh-2498)\n									( xhr.responseType || "text" ) !== "text"  ||\n									typeof xhr.responseText !== "string" ?\n										{ binary: xhr.response } :\n										{ text: xhr.responseText },\n									xhr.getAllResponseHeaders()\n								);\n							}\n						}\n					};\n				};\n\n				// Listen to events\n				xhr.onload = callback();\n				errorCallback = xhr.onerror = callback( "error" );\n\n				// Support: IE9\n				// Use onreadystatechange to replace onabort\n				// to handle uncaught aborts\n				if ( xhr.onabort !== undefined ) {\n					xhr.onabort = errorCallback;\n				} else {\n					xhr.onreadystatechange = function() {\n\n						// Check readyState before timeout as it changes\n						if ( xhr.readyState === 4 ) {\n\n							// Allow onerror to be called first,\n							// but that will not handle a native abort\n							// Also, save errorCallback to a variable\n							// as xhr.onerror cannot be accessed\n							window.setTimeout( function() {\n								if ( callback ) {\n									errorCallback();\n								}\n							} );\n						}\n					};\n				}\n\n				// Create the abort callback\n				callback = callback( "abort" );\n\n				try {\n\n					// Do send the request (this may raise an exception)\n					xhr.send( options.hasContent && options.data || null );\n				} catch ( e ) {\n\n					// #14683: Only rethrow if this hasn\'t been notified as an error yet\n					if ( callback ) {\n						throw e;\n					}\n				}\n			},\n\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\n// Install script dataType\njQuery.ajaxSetup( {\n	accepts: {\n		script: "text/javascript, application/javascript, " +\n			"application/ecmascript, application/x-ecmascript"\n	},\n	contents: {\n		script: /\\b(?:java|ecma)script\\b/\n	},\n	converters: {\n		"text script": function( text ) {\n			jQuery.globalEval( text );\n			return text;\n		}\n	}\n} );\n\n// Handle cache\'s special case and crossDomain\njQuery.ajaxPrefilter( "script", function( s ) {\n	if ( s.cache === undefined ) {\n		s.cache = false;\n	}\n	if ( s.crossDomain ) {\n		s.type = "GET";\n	}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( "script", function( s ) {\n\n	// This transport only deals with cross domain requests\n	if ( s.crossDomain ) {\n		var script, callback;\n		return {\n			send: function( _, complete ) {\n				script = jQuery( "<script>" ).prop( {\n					charset: s.scriptCharset,\n					src: s.url\n				} ).on(\n					"load error",\n					callback = function( evt ) {\n						script.remove();\n						callback = null;\n						if ( evt ) {\n							complete( evt.type === "error" ? 404 : 200, evt.type );\n						}\n					}\n				);\n\n				// Use native DOM manipulation to avoid our domManip AJAX trickery\n				document.head.appendChild( script[ 0 ] );\n			},\n			abort: function() {\n				if ( callback ) {\n					callback();\n				}\n			}\n		};\n	}\n} );\n\n\n\n\nvar oldCallbacks = [],\n	rjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n	jsonp: "callback",\n	jsonpCallback: function() {\n		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );\n		this[ callback ] = true;\n		return callback;\n	}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {\n\n	var callbackName, overwritten, responseContainer,\n		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n			"url" :\n			typeof s.data === "string" &&\n				( s.contentType || "" )\n					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&\n				rjsonp.test( s.data ) && "data"\n		);\n\n	// Handle iff the expected data type is "jsonp" or we have a parameter to set\n	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {\n\n		// Get callback name, remembering preexisting value associated with it\n		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n			s.jsonpCallback() :\n			s.jsonpCallback;\n\n		// Insert callback into url or form data\n		if ( jsonProp ) {\n			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );\n		} else if ( s.jsonp !== false ) {\n			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;\n		}\n\n		// Use data converter to retrieve json after script execution\n		s.converters[ "script json" ] = function() {\n			if ( !responseContainer ) {\n				jQuery.error( callbackName + " was not called" );\n			}\n			return responseContainer[ 0 ];\n		};\n\n		// Force json dataType\n		s.dataTypes[ 0 ] = "json";\n\n		// Install callback\n		overwritten = window[ callbackName ];\n		window[ callbackName ] = function() {\n			responseContainer = arguments;\n		};\n\n		// Clean-up function (fires after converters)\n		jqXHR.always( function() {\n\n			// If previous value didn\'t exist - remove it\n			if ( overwritten === undefined ) {\n				jQuery( window ).removeProp( callbackName );\n\n			// Otherwise restore preexisting value\n			} else {\n				window[ callbackName ] = overwritten;\n			}\n\n			// Save back as free\n			if ( s[ callbackName ] ) {\n\n				// Make sure that re-using the options doesn\'t screw things around\n				s.jsonpCallback = originalSettings.jsonpCallback;\n\n				// Save the callback name for future use\n				oldCallbacks.push( callbackName );\n			}\n\n			// Call if it was a function and we have a response\n			if ( responseContainer && jQuery.isFunction( overwritten ) ) {\n				overwritten( responseContainer[ 0 ] );\n			}\n\n			responseContainer = overwritten = undefined;\n		} );\n\n		// Delegate to script\n		return "script";\n	}\n} );\n\n\n\n\n// Argument "data" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n	if ( !data || typeof data !== "string" ) {\n		return null;\n	}\n	if ( typeof context === "boolean" ) {\n		keepScripts = context;\n		context = false;\n	}\n	context = context || document;\n\n	var parsed = rsingleTag.exec( data ),\n		scripts = !keepScripts && [];\n\n	// Single tag\n	if ( parsed ) {\n		return [ context.createElement( parsed[ 1 ] ) ];\n	}\n\n	parsed = buildFragment( [ data ], context, scripts );\n\n	if ( scripts && scripts.length ) {\n		jQuery( scripts ).remove();\n	}\n\n	return jQuery.merge( [], parsed.childNodes );\n};\n\n\n// Keep a copy of the old load method\nvar _load = jQuery.fn.load;\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n	if ( typeof url !== "string" && _load ) {\n		return _load.apply( this, arguments );\n	}\n\n	var selector, type, response,\n		self = this,\n		off = url.indexOf( " " );\n\n	if ( off > -1 ) {\n		selector = jQuery.trim( url.slice( off ) );\n		url = url.slice( 0, off );\n	}\n\n	// If it\'s a function\n	if ( jQuery.isFunction( params ) ) {\n\n		// We assume that it\'s the callback\n		callback = params;\n		params = undefined;\n\n	// Otherwise, build a param string\n	} else if ( params && typeof params === "object" ) {\n		type = "POST";\n	}\n\n	// If we have elements to modify, make the request\n	if ( self.length > 0 ) {\n		jQuery.ajax( {\n			url: url,\n\n			// If "type" variable is undefined, then "GET" method will be used.\n			// Make value of this field explicit since\n			// user can override it through ajaxSetup method\n			type: type || "GET",\n			dataType: "html",\n			data: params\n		} ).done( function( responseText ) {\n\n			// Save response for use in complete callback\n			response = arguments;\n\n			self.html( selector ?\n\n				// If a selector was specified, locate the right elements in a dummy div\n				// Exclude scripts to avoid IE \'Permission Denied\' errors\n				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n				// Otherwise use the full result\n				responseText );\n\n		// If the request succeeds, this function gets "data", "status", "jqXHR"\n		// but they are ignored because response was set above.\n		// If it fails, this function gets "jqXHR", "status", "error"\n		} ).always( callback && function( jqXHR, status ) {\n			self.each( function() {\n				callback.apply( self, response || [ jqXHR.responseText, status, jqXHR ] );\n			} );\n		} );\n	}\n\n	return this;\n};\n\n\n\n\n// Attach a bunch of functions for handling common AJAX events\njQuery.each( [\n	"ajaxStart",\n	"ajaxStop",\n	"ajaxComplete",\n	"ajaxError",\n	"ajaxSuccess",\n	"ajaxSend"\n], function( i, type ) {\n	jQuery.fn[ type ] = function( fn ) {\n		return this.on( type, fn );\n	};\n} );\n\n\n\n\njQuery.expr.filters.animated = function( elem ) {\n	return jQuery.grep( jQuery.timers, function( fn ) {\n		return elem === fn.elem;\n	} ).length;\n};\n\n\n\n\n/**\n * Gets a window from an element\n */\nfunction getWindow( elem ) {\n	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;\n}\n\njQuery.offset = {\n	setOffset: function( elem, options, i ) {\n		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n			position = jQuery.css( elem, "position" ),\n			curElem = jQuery( elem ),\n			props = {};\n\n		// Set position first, in-case top/left are set even on static elem\n		if ( position === "static" ) {\n			elem.style.position = "relative";\n		}\n\n		curOffset = curElem.offset();\n		curCSSTop = jQuery.css( elem, "top" );\n		curCSSLeft = jQuery.css( elem, "left" );\n		calculatePosition = ( position === "absolute" || position === "fixed" ) &&\n			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;\n\n		// Need to be able to calculate position if either\n		// top or left is auto and position is either absolute or fixed\n		if ( calculatePosition ) {\n			curPosition = curElem.position();\n			curTop = curPosition.top;\n			curLeft = curPosition.left;\n\n		} else {\n			curTop = parseFloat( curCSSTop ) || 0;\n			curLeft = parseFloat( curCSSLeft ) || 0;\n		}\n\n		if ( jQuery.isFunction( options ) ) {\n\n			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n		}\n\n		if ( options.top != null ) {\n			props.top = ( options.top - curOffset.top ) + curTop;\n		}\n		if ( options.left != null ) {\n			props.left = ( options.left - curOffset.left ) + curLeft;\n		}\n\n		if ( "using" in options ) {\n			options.using.call( elem, props );\n\n		} else {\n			curElem.css( props );\n		}\n	}\n};\n\njQuery.fn.extend( {\n	offset: function( options ) {\n		if ( arguments.length ) {\n			return options === undefined ?\n				this :\n				this.each( function( i ) {\n					jQuery.offset.setOffset( this, options, i );\n				} );\n		}\n\n		var docElem, win,\n			elem = this[ 0 ],\n			box = { top: 0, left: 0 },\n			doc = elem && elem.ownerDocument;\n\n		if ( !doc ) {\n			return;\n		}\n\n		docElem = doc.documentElement;\n\n		// Make sure it\'s not a disconnected DOM node\n		if ( !jQuery.contains( docElem, elem ) ) {\n			return box;\n		}\n\n		box = elem.getBoundingClientRect();\n		win = getWindow( doc );\n		return {\n			top: box.top + win.pageYOffset - docElem.clientTop,\n			left: box.left + win.pageXOffset - docElem.clientLeft\n		};\n	},\n\n	position: function() {\n		if ( !this[ 0 ] ) {\n			return;\n		}\n\n		var offsetParent, offset,\n			elem = this[ 0 ],\n			parentOffset = { top: 0, left: 0 };\n\n		// Fixed elements are offset from window (parentOffset = {top:0, left: 0},\n		// because it is its only offset parent\n		if ( jQuery.css( elem, "position" ) === "fixed" ) {\n\n			// Assume getBoundingClientRect is there when computed position is fixed\n			offset = elem.getBoundingClientRect();\n\n		} else {\n\n			// Get *real* offsetParent\n			offsetParent = this.offsetParent();\n\n			// Get correct offsets\n			offset = this.offset();\n			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {\n				parentOffset = offsetParent.offset();\n			}\n\n			// Add offsetParent borders\n			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );\n			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );\n		}\n\n		// Subtract parent offsets and element margins\n		return {\n			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),\n			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )\n		};\n	},\n\n	// This method will return documentElement in the following cases:\n	// 1) For the element inside the iframe without offsetParent, this method will return\n	//    documentElement of the parent window\n	// 2) For the hidden or detached element\n	// 3) For body or html element, i.e. in case of the html node - it will return itself\n	//\n	// but those exceptions were never presented as a real life use-cases\n	// and might be considered as more preferable results.\n	//\n	// This logic, however, is not guaranteed and can change at any point in the future\n	offsetParent: function() {\n		return this.map( function() {\n			var offsetParent = this.offsetParent;\n\n			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {\n				offsetParent = offsetParent.offsetParent;\n			}\n\n			return offsetParent || documentElement;\n		} );\n	}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {\n	var top = "pageYOffset" === prop;\n\n	jQuery.fn[ method ] = function( val ) {\n		return access( this, function( elem, method, val ) {\n			var win = getWindow( elem );\n\n			if ( val === undefined ) {\n				return win ? win[ prop ] : elem[ method ];\n			}\n\n			if ( win ) {\n				win.scrollTo(\n					!top ? val : win.pageXOffset,\n					top ? val : win.pageYOffset\n				);\n\n			} else {\n				elem[ method ] = val;\n			}\n		}, method, val, arguments.length );\n	};\n} );\n\n// Support: Safari<7-8+, Chrome<37-44+\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ "top", "left" ], function( i, prop ) {\n	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n		function( elem, computed ) {\n			if ( computed ) {\n				computed = curCSS( elem, prop );\n\n				// If curCSS returns percentage, fallback to offset\n				return rnumnonpx.test( computed ) ?\n					jQuery( elem ).position()[ prop ] + "px" :\n					computed;\n			}\n		}\n	);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: "height", Width: "width" }, function( name, type ) {\n	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },\n		function( defaultExtra, funcName ) {\n\n		// Margin is only for outerHeight, outerWidth\n		jQuery.fn[ funcName ] = function( margin, value ) {\n			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),\n				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );\n\n			return access( this, function( elem, type, value ) {\n				var doc;\n\n				if ( jQuery.isWindow( elem ) ) {\n\n					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there\n					// isn\'t a whole lot we can do. See pull request at this URL for discussion:\n					// https://github.com/jquery/jquery/pull/764\n					return elem.document.documentElement[ "client" + name ];\n				}\n\n				// Get document width or height\n				if ( elem.nodeType === 9 ) {\n					doc = elem.documentElement;\n\n					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n					// whichever is greatest\n					return Math.max(\n						elem.body[ "scroll" + name ], doc[ "scroll" + name ],\n						elem.body[ "offset" + name ], doc[ "offset" + name ],\n						doc[ "client" + name ]\n					);\n				}\n\n				return value === undefined ?\n\n					// Get width or height on the element, requesting but not forcing parseFloat\n					jQuery.css( elem, type, extra ) :\n\n					// Set width or height on the element\n					jQuery.style( elem, type, value, extra );\n			}, type, chainable ? margin : undefined, chainable, null );\n		};\n	} );\n} );\n\n\njQuery.fn.extend( {\n\n	bind: function( types, data, fn ) {\n		return this.on( types, null, data, fn );\n	},\n	unbind: function( types, fn ) {\n		return this.off( types, null, fn );\n	},\n\n	delegate: function( selector, types, data, fn ) {\n		return this.on( types, selector, data, fn );\n	},\n	undelegate: function( selector, types, fn ) {\n\n		// ( namespace ) or ( selector, types [, fn] )\n		return arguments.length === 1 ?\n			this.off( selector, "**" ) :\n			this.off( types, selector || "**", fn );\n	},\n	size: function() {\n		return this.length;\n	}\n} );\n\njQuery.fn.andSelf = jQuery.fn.addBack;\n\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {\n		return jQuery;\n	}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\nvar\n\n	// Map over jQuery in case of overwrite\n	_jQuery = window.jQuery,\n\n	// Map over the $ in case of overwrite\n	_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n	if ( window.$ === jQuery ) {\n		window.$ = _$;\n	}\n\n	if ( deep && window.jQuery === jQuery ) {\n		window.jQuery = _jQuery;\n	}\n\n	return jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (#13566)\nif ( !noGlobal ) {\n	window.jQuery = window.$ = jQuery;\n}\n\nreturn jQuery;\n}));\n//@ sourceMappingURL=data:application/json;base64,');
},7:function(module,exports){eval('/*\r\n	MIT License http://www.opensource.org/licenses/mit-license.php\r\n	Author Tobias Koppers @sokra\r\n*/\r\n// css base code, injected by the css-loader\r\nmodule.exports = function() {\r\n	var list = [];\r\n\r\n	// return the list of modules as css string\r\n	list.toString = function toString() {\r\n		var result = [];\r\n		for(var i = 0; i < this.length; i++) {\r\n			var item = this[i];\r\n			if(item[2]) {\r\n				result.push("@media " + item[2] + "{" + item[1] + "}");\r\n			} else {\r\n				result.push(item[1]);\r\n			}\r\n		}\r\n		return result.join("");\r\n	};\r\n\r\n	// import a list of modules into the list\r\n	list.i = function(modules, mediaQuery) {\r\n		if(typeof modules === "string")\r\n			modules = [[null, modules, ""]];\r\n		var alreadyImportedModules = {};\r\n		for(var i = 0; i < this.length; i++) {\r\n			var id = this[i][0];\r\n			if(typeof id === "number")\r\n				alreadyImportedModules[id] = true;\r\n		}\r\n		for(i = 0; i < modules.length; i++) {\r\n			var item = modules[i];\r\n			// skip already imported module\r\n			// this implementation is not 100% perfect for weird media query combinations\r\n			//  when a module is imported multiple times with different media queries.\r\n			//  I hope this will never occur (Hey this way we have smaller bundles)\r\n			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\r\n				if(mediaQuery && !item[2]) {\r\n					item[2] = mediaQuery;\r\n				} else if(mediaQuery) {\r\n					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\r\n				}\r\n				list.push(item);\r\n			}\r\n		}\r\n	};\r\n	return list;\r\n};\r\n//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzP2RhMDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RCxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxyXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcclxuKi9cclxuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcclxuXHR2YXIgbGlzdCA9IFtdO1xyXG5cclxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXHJcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xyXG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0dmFyIGl0ZW0gPSB0aGlzW2ldO1xyXG5cdFx0XHRpZihpdGVtWzJdKSB7XHJcblx0XHRcdFx0cmVzdWx0LnB1c2goXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBpdGVtWzFdICsgXCJ9XCIpO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdHJlc3VsdC5wdXNoKGl0ZW1bMV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gcmVzdWx0LmpvaW4oXCJcIik7XHJcblx0fTtcclxuXHJcblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcclxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XHJcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcclxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xyXG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcclxuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XHJcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcclxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XHJcblx0XHR9XHJcblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcclxuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxyXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xyXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxyXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxyXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xyXG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcclxuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xyXG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XHJcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cdH07XHJcblx0cmV0dXJuIGxpc3Q7XHJcbn07XHJcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXG4gKiogbW9kdWxlIGlkID0gN1xuICoqIG1vZHVsZSBjaHVua3MgPSAwIDEgMiAzIDUgNlxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=')},9:function(module,exports,__webpack_require__){eval('/*\r\n	MIT License http://www.opensource.org/licenses/mit-license.php\r\n	Author Tobias Koppers @sokra\r\n*/\r\nvar stylesInDom = {},\r\n	memoize = function(fn) {\r\n		var memo;\r\n		return function () {\r\n			if (typeof memo === "undefined") memo = fn.apply(this, arguments);\r\n			return memo;\r\n		};\r\n	},\r\n	isOldIE = memoize(function() {\r\n		return /msie [6-9]\\b/.test(window.navigator.userAgent.toLowerCase());\r\n	}),\r\n	getHeadElement = memoize(function () {\r\n		return document.head || document.getElementsByTagName("head")[0];\r\n	}),\r\n	singletonElement = null,\r\n	singletonCounter = 0,\r\n	styleElementsInsertedAtTop = [];\r\n\r\nmodule.exports = function(list, options) {\r\n	if(false) {\r\n		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\r\n	}\r\n\r\n	options = options || {};\r\n	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\r\n	// tags it will allow on a page\r\n	if (typeof options.singleton === "undefined") options.singleton = isOldIE();\r\n\r\n	// By default, add <style> tags to the bottom of <head>.\r\n	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";\r\n\r\n	var styles = listToStyles(list);\r\n	addStylesToDom(styles, options);\r\n\r\n	return function update(newList) {\r\n		var mayRemove = [];\r\n		for(var i = 0; i < styles.length; i++) {\r\n			var item = styles[i];\r\n			var domStyle = stylesInDom[item.id];\r\n			domStyle.refs--;\r\n			mayRemove.push(domStyle);\r\n		}\r\n		if(newList) {\r\n			var newStyles = listToStyles(newList);\r\n			addStylesToDom(newStyles, options);\r\n		}\r\n		for(var i = 0; i < mayRemove.length; i++) {\r\n			var domStyle = mayRemove[i];\r\n			if(domStyle.refs === 0) {\r\n				for(var j = 0; j < domStyle.parts.length; j++)\r\n					domStyle.parts[j]();\r\n				delete stylesInDom[domStyle.id];\r\n			}\r\n		}\r\n	};\r\n}\r\n\r\nfunction addStylesToDom(styles, options) {\r\n	for(var i = 0; i < styles.length; i++) {\r\n		var item = styles[i];\r\n		var domStyle = stylesInDom[item.id];\r\n		if(domStyle) {\r\n			domStyle.refs++;\r\n			for(var j = 0; j < domStyle.parts.length; j++) {\r\n				domStyle.parts[j](item.parts[j]);\r\n			}\r\n			for(; j < item.parts.length; j++) {\r\n				domStyle.parts.push(addStyle(item.parts[j], options));\r\n			}\r\n		} else {\r\n			var parts = [];\r\n			for(var j = 0; j < item.parts.length; j++) {\r\n				parts.push(addStyle(item.parts[j], options));\r\n			}\r\n			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\r\n		}\r\n	}\r\n}\r\n\r\nfunction listToStyles(list) {\r\n	var styles = [];\r\n	var newStyles = {};\r\n	for(var i = 0; i < list.length; i++) {\r\n		var item = list[i];\r\n		var id = item[0];\r\n		var css = item[1];\r\n		var media = item[2];\r\n		var sourceMap = item[3];\r\n		var part = {css: css, media: media, sourceMap: sourceMap};\r\n		if(!newStyles[id])\r\n			styles.push(newStyles[id] = {id: id, parts: [part]});\r\n		else\r\n			newStyles[id].parts.push(part);\r\n	}\r\n	return styles;\r\n}\r\n\r\nfunction insertStyleElement(options, styleElement) {\r\n	var head = getHeadElement();\r\n	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\r\n	if (options.insertAt === "top") {\r\n		if(!lastStyleElementInsertedAtTop) {\r\n			head.insertBefore(styleElement, head.firstChild);\r\n		} else if(lastStyleElementInsertedAtTop.nextSibling) {\r\n			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\r\n		} else {\r\n			head.appendChild(styleElement);\r\n		}\r\n		styleElementsInsertedAtTop.push(styleElement);\r\n	} else if (options.insertAt === "bottom") {\r\n		head.appendChild(styleElement);\r\n	} else {\r\n		throw new Error("Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.");\r\n	}\r\n}\r\n\r\nfunction removeStyleElement(styleElement) {\r\n	styleElement.parentNode.removeChild(styleElement);\r\n	var idx = styleElementsInsertedAtTop.indexOf(styleElement);\r\n	if(idx >= 0) {\r\n		styleElementsInsertedAtTop.splice(idx, 1);\r\n	}\r\n}\r\n\r\nfunction createStyleElement(options) {\r\n	var styleElement = document.createElement("style");\r\n	styleElement.type = "text/css";\r\n	insertStyleElement(options, styleElement);\r\n	return styleElement;\r\n}\r\n\r\nfunction createLinkElement(options) {\r\n	var linkElement = document.createElement("link");\r\n	linkElement.rel = "stylesheet";\r\n	insertStyleElement(options, linkElement);\r\n	return linkElement;\r\n}\r\n\r\nfunction addStyle(obj, options) {\r\n	var styleElement, update, remove;\r\n\r\n	if (options.singleton) {\r\n		var styleIndex = singletonCounter++;\r\n		styleElement = singletonElement || (singletonElement = createStyleElement(options));\r\n		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);\r\n		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);\r\n	} else if(obj.sourceMap &&\r\n		typeof URL === "function" &&\r\n		typeof URL.createObjectURL === "function" &&\r\n		typeof URL.revokeObjectURL === "function" &&\r\n		typeof Blob === "function" &&\r\n		typeof btoa === "function") {\r\n		styleElement = createLinkElement(options);\r\n		update = updateLink.bind(null, styleElement);\r\n		remove = function() {\r\n			removeStyleElement(styleElement);\r\n			if(styleElement.href)\r\n				URL.revokeObjectURL(styleElement.href);\r\n		};\r\n	} else {\r\n		styleElement = createStyleElement(options);\r\n		update = applyToTag.bind(null, styleElement);\r\n		remove = function() {\r\n			removeStyleElement(styleElement);\r\n		};\r\n	}\r\n\r\n	update(obj);\r\n\r\n	return function updateStyle(newObj) {\r\n		if(newObj) {\r\n			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)\r\n				return;\r\n			update(obj = newObj);\r\n		} else {\r\n			remove();\r\n		}\r\n	};\r\n}\r\n\r\nvar replaceText = (function () {\r\n	var textStore = [];\r\n\r\n	return function (index, replacement) {\r\n		textStore[index] = replacement;\r\n		return textStore.filter(Boolean).join(\'\\n\');\r\n	};\r\n})();\r\n\r\nfunction applyToSingletonTag(styleElement, index, remove, obj) {\r\n	var css = remove ? "" : obj.css;\r\n\r\n	if (styleElement.styleSheet) {\r\n		styleElement.styleSheet.cssText = replaceText(index, css);\r\n	} else {\r\n		var cssNode = document.createTextNode(css);\r\n		var childNodes = styleElement.childNodes;\r\n		if (childNodes[index]) styleElement.removeChild(childNodes[index]);\r\n		if (childNodes.length) {\r\n			styleElement.insertBefore(cssNode, childNodes[index]);\r\n		} else {\r\n			styleElement.appendChild(cssNode);\r\n		}\r\n	}\r\n}\r\n\r\nfunction applyToTag(styleElement, obj) {\r\n	var css = obj.css;\r\n	var media = obj.media;\r\n	var sourceMap = obj.sourceMap;\r\n\r\n	if(media) {\r\n		styleElement.setAttribute("media", media)\r\n	}\r\n\r\n	if(styleElement.styleSheet) {\r\n		styleElement.styleSheet.cssText = css;\r\n	} else {\r\n		while(styleElement.firstChild) {\r\n			styleElement.removeChild(styleElement.firstChild);\r\n		}\r\n		styleElement.appendChild(document.createTextNode(css));\r\n	}\r\n}\r\n\r\nfunction updateLink(linkElement, obj) {\r\n	var css = obj.css;\r\n	var media = obj.media;\r\n	var sourceMap = obj.sourceMap;\r\n\r\n	if(sourceMap) {\r\n		// http://stackoverflow.com/a/26603875\r\n		css += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\r\n	}\r\n\r\n	var blob = new Blob([css], { type: "text/css" });\r\n\r\n	var oldSrc = linkElement.href;\r\n\r\n	linkElement.href = URL.createObjectURL(blob);\r\n\r\n	if(oldSrc)\r\n		URL.revokeObjectURL(oldSrc);\r\n}\r\n//@ sourceMappingURL=data:application/json;base64,')},12:function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar EventEmitter = function () {\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n\n    this._events = {};\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n\n  _createClass(EventEmitter, [{\n    key: 'on',\n    value: function on(event, fct) {\n\n      this._events[event] = this._events[event] || [];\n      this._events[event].push(fct);\n\n      return this;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'off',\n    value: function off(event, fct) {\n\n      if (event == undefined) {\n        this._events = {};\n        return;\n      }\n\n      if (event in this._events === false) return;\n\n      if (fct) {\n        this._events[event].splice(this._events[event].indexOf(fct), 1);\n      } else {\n        this._events[event] = [];\n      }\n\n      return this;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'emit',\n    value: function emit(event /* , args... */) {\n\n      if (this._events[event] === undefined) return;\n\n      var tmpArray = this._events[event].slice();\n\n      for (var i = 0; i < tmpArray.length; ++i) {\n\n        var result = tmpArray[i].apply(this, Array.prototype.slice.call(arguments, 1));\n\n        if (result !== undefined) return result;\n      }\n\n      return undefined;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'guid',\n    value: function guid() {\n      var format = arguments.length <= 0 || arguments[0] === undefined ? 'xxxxxxxxxxxx' : arguments[0];\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n  }]);\n\n  return EventEmitter;\n}();\n\nexports.default = EventEmitter;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvRXZlbnRzRW1pdHRlci5qcz9kMjk5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7SUFDcUI7Ozs7Ozs7QUFNbkIsV0FObUIsWUFNbkIsR0FBYzswQkFOSyxjQU1MOztBQUVaLFNBQUssT0FBTCxHQUFlLEVBQWYsQ0FGWTtHQUFkOzs7Ozs7OztlQU5tQjs7dUJBZWhCLE9BQU8sS0FBSzs7QUFFYixXQUFLLE9BQUwsQ0FBYSxLQUFiLElBQXNCLEtBQUssT0FBTCxDQUFhLEtBQWIsS0FBdUIsRUFBdkIsQ0FGVDtBQUdiLFdBQUssT0FBTCxDQUFhLEtBQWIsRUFBb0IsSUFBcEIsQ0FBeUIsR0FBekIsRUFIYTs7QUFLYixhQUFPLElBQVAsQ0FMYTs7Ozs7Ozs7Ozt3QkFZWCxPQUFPLEtBQUs7O0FBRWQsVUFBRyxTQUFTLFNBQVQsRUFBbUI7QUFDcEIsYUFBSyxPQUFMLEdBQWUsRUFBZixDQURvQjtBQUVwQixlQUZvQjtPQUF0Qjs7QUFLQSxVQUFHLFNBQVMsS0FBSyxPQUFMLEtBQWlCLEtBQTFCLEVBQ0QsT0FERjs7QUFHQSxVQUFHLEdBQUgsRUFBTztBQUNMLGFBQUssT0FBTCxDQUFhLEtBQWIsRUFBb0IsTUFBcEIsQ0FDRSxLQUFLLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLE9BQXBCLENBQTRCLEdBQTVCLENBREYsRUFDb0MsQ0FEcEMsRUFESztPQUFQLE1BSUs7QUFDSCxhQUFLLE9BQUwsQ0FBYSxLQUFiLElBQXNCLEVBQXRCLENBREc7T0FKTDs7QUFRQSxhQUFPLElBQVAsQ0FsQmM7Ozs7Ozs7Ozs7eUJBeUJYLHVCQUF1Qjs7QUFFMUIsVUFBRyxLQUFLLE9BQUwsQ0FBYSxLQUFiLE1BQXdCLFNBQXhCLEVBQ0QsT0FERjs7QUFHQSxVQUFJLFdBQVcsS0FBSyxPQUFMLENBQWEsS0FBYixFQUFvQixLQUFwQixFQUFYLENBTHNCOztBQU8xQixXQUFJLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxTQUFTLE1BQVQsRUFBaUIsRUFBRSxDQUFGLEVBQUs7O0FBRXZDLFlBQUksU0FBUyxTQUFTLENBQVQsRUFBWSxLQUFaLENBQWtCLElBQWxCLEVBQ1gsTUFBTSxTQUFOLENBQWdCLEtBQWhCLENBQXNCLElBQXRCLENBQTJCLFNBQTNCLEVBQXNDLENBQXRDLENBRFcsQ0FBVCxDQUZtQzs7QUFLdkMsWUFBRyxXQUFXLFNBQVgsRUFDRCxPQUFPLE1BQVAsQ0FERjtPQUxGOztBQVNBLGFBQU8sU0FBUCxDQWhCMEI7Ozs7Ozs7Ozs7MkJBdUJBO1VBQXZCLCtEQUFPLDhCQUFnQjs7O0FBRTFCLFVBQUksSUFBSSxJQUFJLElBQUosR0FBVyxPQUFYLEVBQUosQ0FGc0I7O0FBSTFCLFVBQUksT0FBTyxPQUFPLE9BQVAsQ0FDVCxPQURTLEVBRVQsVUFBVSxDQUFWLEVBQWE7QUFDWCxZQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTCxLQUFnQixFQUFoQixDQUFMLEdBQTJCLEVBQTNCLEdBQWdDLENBQWhDLENBREc7QUFFWCxZQUFJLEtBQUssS0FBTCxDQUFXLElBQUksRUFBSixDQUFmLENBRlc7QUFHWCxlQUFPLENBQUMsS0FBSyxHQUFMLEdBQVcsQ0FBWCxHQUFnQixJQUFJLEdBQUosR0FBVSxHQUFWLENBQWpCLENBQWlDLFFBQWpDLENBQTBDLEVBQTFDLENBQVAsQ0FIVztPQUFiLENBRkUsQ0FKc0I7O0FBWTFCLGFBQU8sSUFBUCxDQVowQjs7OztTQTNFVCIsImZpbGUiOiIxMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXZlbnRFbWl0dGVyIHtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBvbihldmVudCwgZmN0KSB7XG5cbiAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gdGhpcy5fZXZlbnRzW2V2ZW50XVx0fHwgW107XG4gICAgdGhpcy5fZXZlbnRzW2V2ZW50XS5wdXNoKGZjdCk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBvZmYoZXZlbnQsIGZjdCkge1xuXG4gICAgaWYoZXZlbnQgPT0gdW5kZWZpbmVkKXtcbiAgICAgIHRoaXMuX2V2ZW50cyA9IHt9O1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmKGV2ZW50IGluIHRoaXMuX2V2ZW50cyA9PT0gZmFsc2UpXG4gICAgICByZXR1cm47XG5cbiAgICBpZihmY3Qpe1xuICAgICAgdGhpcy5fZXZlbnRzW2V2ZW50XS5zcGxpY2UoXG4gICAgICAgIHRoaXMuX2V2ZW50c1tldmVudF0uaW5kZXhPZihmY3QpLCAxKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB0aGlzLl9ldmVudHNbZXZlbnRdID0gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZW1pdChldmVudCAvKiAsIGFyZ3MuLi4gKi8pIHtcblxuICAgIGlmKHRoaXMuX2V2ZW50c1tldmVudF0gPT09IHVuZGVmaW5lZClcbiAgICAgIHJldHVybjtcblxuICAgIHZhciB0bXBBcnJheSA9IHRoaXMuX2V2ZW50c1tldmVudF0uc2xpY2UoKTtcblxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCB0bXBBcnJheS5sZW5ndGg7ICsraSkge1xuXG4gICAgICB2YXIgcmVzdWx0XHQ9IHRtcEFycmF5W2ldLmFwcGx5KHRoaXMsXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xuXG4gICAgICBpZihyZXN1bHQgIT09IHVuZGVmaW5lZCApXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBndWlkKGZvcm1hdD0neHh4eHh4eHh4eHh4Jykge1xuXG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHZhciBndWlkID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAvW3h5XS9nLFxuICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PSAneCcgPyByIDogKHIgJiAweDcgfCAweDgpKS50b1N0cmluZygxNik7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBndWlkO1xuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9FdmVudHNFbWl0dGVyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==");
},17:function(module,exports){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step(\"next\", value); }, function (err) { return step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar ViewerToolkit = function () {\n  function ViewerToolkit() {\n    _classCallCheck(this, ViewerToolkit);\n  }\n\n  _createClass(ViewerToolkit, null, [{\n    key: 'guid',\n\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n    value: function guid() {\n      var format = arguments.length <= 0 || arguments[0] === undefined ? 'xxxx-xxxx-xxxx' : arguments[0];\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n\n    /////////////////////////////////////////////\n    //mobile detection\n    //\n    /////////////////////////////////////////////\n\n  }, {\n    key: 'createButton',\n\n\n    /////////////////////////////////////////////////////////////////\n    // Toolbar button\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function createButton(id, className, tooltip, handler) {\n\n      var button = new Autodesk.Viewing.UI.Button(id);\n\n      button.icon.style.fontSize = \"24px\";\n\n      button.icon.className = className;\n\n      button.setToolTip(tooltip);\n\n      button.onClick = handler;\n\n      return button;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Control group\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createControlGroup',\n    value: function createControlGroup(viewer, ctrlGroupName) {\n\n      var viewerToolbar = viewer.getToolbar(true);\n\n      if (viewerToolbar) {\n\n        var ctrlGroup = new Autodesk.Viewing.UI.ControlGroup(ctrlGroupName);\n\n        viewerToolbar.addControl(ctrlGroup);\n\n        return ctrlGroup;\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // NodeId to FragIds v < 2.5 (deprecated)\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'nodeIdToFragIds',\n    value: function nodeIdToFragIds(model, dbId) {\n      var _this = this;\n\n      var recursive = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];\n      var instanceTree = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(resolve, reject) {\n          var it, node, fragIds, getAllChildFragIds, allChildFragIds;\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.prev = 0;\n                  it = instanceTree || model.getData().instanceTree;\n                  node = it.dbIdToNode[dbId];\n\n                  if (!(node == undefined)) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  return _context.abrupt('return', reject('Invalid dbId: ' + dbId));\n\n                case 5:\n                  fragIds = [].concat(_toConsumableArray(Array.isArray(node.fragIds) ? node.fragIds : [node.fragIds]));\n\n\n                  if (node.children && recursive) {\n                    getAllChildFragIds = [];\n\n\n                    node.children.forEach(function (child) {\n\n                      getAllChildFragIds.push(ViewerToolkit.nodeIdToFragIds(model, child.dbId, recursive, it));\n                    });\n\n                    allChildFragIds = Promise.all(getAllChildFragIds);\n\n\n                    allChildFragIds.forEach(function (childFragIds) {\n\n                      fragIds = [].concat(_toConsumableArray(fragIds), [childFragIds]);\n                    });\n                  }\n\n                  return _context.abrupt('return', resolve(fragIds));\n\n                case 10:\n                  _context.prev = 10;\n                  _context.t0 = _context['catch'](0);\n                  return _context.abrupt('return', reject(_context.t0));\n\n                case 13:\n                case 'end':\n                  return _context.stop();\n              }\n            }\n          }, _callee, _this, [[0, 10]]);\n        }));\n\n        return function (_x4, _x5) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getLeafNodes',\n    value: function getLeafNodes(model, dbId) {\n      var _this2 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(resolve, reject) {\n          var leafIds, instanceTree, _ret;\n\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.prev = 0;\n\n                  _ret = function () {\n                    var _getLeafNodesRec = function _getLeafNodesRec(id) {\n\n                      var childCount = 0;\n\n                      instanceTree.enumNodeChildren(id, function (childId) {\n                        _getLeafNodesRec(childId);\n                        ++childCount;\n                      });\n\n                      if (childCount == 0) {\n                        leafIds.push(id);\n                      }\n                    };\n\n                    leafIds = [];\n                    instanceTree = model.getData().instanceTree;\n\n\n                    dbId = dbId || instanceTree.getRootId();\n\n                    _getLeafNodesRec(dbId);\n\n                    return {\n                      v: resolve(leafIds)\n                    };\n                  }();\n\n                  if (!((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\")) {\n                    _context2.next = 4;\n                    break;\n                  }\n\n                  return _context2.abrupt('return', _ret.v);\n\n                case 4:\n                  _context2.next = 9;\n                  break;\n\n                case 6:\n                  _context2.prev = 6;\n                  _context2.t0 = _context2['catch'](0);\n                  return _context2.abrupt('return', reject(_context2.t0));\n\n                case 9:\n                case 'end':\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, _this2, [[0, 6]]);\n        }));\n\n        return function (_x6, _x7) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // get node fragIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getFragIds',\n    value: function getFragIds(model, dbId) {\n      var _this3 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(resolve, reject) {\n          var instanceTree, leafIds, fragIds, i;\n          return regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.prev = 0;\n                  instanceTree = model.getData().instanceTree;\n                  _context3.next = 4;\n                  return ViewerToolkit.getLeafNodes(model, dbId);\n\n                case 4:\n                  leafIds = _context3.sent;\n                  fragIds = [];\n\n\n                  for (i = 0; i < leafIds.length; ++i) {\n\n                    instanceTree.enumNodeFragments(leafIds[i], function (fragId) {\n                      fragIds.push(fragId);\n                    });\n                  }\n\n                  return _context3.abrupt('return', resolve(fragIds));\n\n                case 10:\n                  _context3.prev = 10;\n                  _context3.t0 = _context3['catch'](0);\n                  return _context3.abrupt('return', reject(_context3.t0));\n\n                case 13:\n                case 'end':\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, _this3, [[0, 10]]);\n        }));\n\n        return function (_x8, _x9) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Node bounding box\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getWorldBoundingBox',\n    value: function getWorldBoundingBox(model, dbId) {\n      var _this4 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(resolve, reject) {\n          var fragIds, fragList, fragbBox, nodebBox;\n          return regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  _context4.next = 3;\n                  return ViewerToolkit.getFragIds(model, dbId);\n\n                case 3:\n                  fragIds = _context4.sent;\n\n                  if (fragIds.length) {\n                    _context4.next = 6;\n                    break;\n                  }\n\n                  return _context4.abrupt('return', reject('No geometry, invalid dbId?'));\n\n                case 6:\n                  fragList = model.getFragmentList();\n                  fragbBox = new THREE.Box3();\n                  nodebBox = new THREE.Box3();\n\n\n                  fragIds.forEach(function (fragId) {\n\n                    fragList.getWorldBounds(fragId, fragbBox);\n                    nodebBox.union(fragbBox);\n                  });\n\n                  return _context4.abrupt('return', resolve(nodebBox));\n\n                case 13:\n                  _context4.prev = 13;\n                  _context4.t0 = _context4['catch'](0);\n                  return _context4.abrupt('return', reject(_context4.t0));\n\n                case 16:\n                case 'end':\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, _this4, [[0, 13]]);\n        }));\n\n        return function (_x10, _x11) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Gets properties from component\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getProperties',\n    value: function getProperties(model, dbId) {\n      var _this5 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee5(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.prev = 0;\n\n\n                  model.getProperties(dbId, function (result) {\n\n                    if (result.properties) ;\n                    return resolve(result.properties);\n\n                    return reject('No Properties');\n                  });\n                  _context5.next = 7;\n                  break;\n\n                case 4:\n                  _context5.prev = 4;\n                  _context5.t0 = _context5['catch'](0);\n                  return _context5.abrupt('return', reject(_context5.t0));\n\n                case 7:\n                case 'end':\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, _this5, [[0, 4]]);\n        }));\n\n        return function (_x12, _x13) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getProperty',\n    value: function getProperty(model, dbId, displayName) {\n      var _this6 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee6(resolve, reject) {\n          return regeneratorRuntime.wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  _context6.prev = 0;\n\n\n                  model.getProperties(dbId, function (result) {\n\n                    if (result.properties) {\n\n                      result.properties.forEach(function (prop) {\n\n                        if (displayName == prop.displayName) {\n                          return resolve(prop);\n                        }\n                      });\n\n                      reject(new Error('Not Found'));\n                    } else {\n\n                      reject(new Error('Error getting properties'));\n                    }\n                  });\n                  _context6.next = 7;\n                  break;\n\n                case 4:\n                  _context6.prev = 4;\n                  _context6.t0 = _context6['catch'](0);\n                  return _context6.abrupt('return', reject(_context6.t0));\n\n                case 7:\n                case 'end':\n                  return _context6.stop();\n              }\n            }\n          }, _callee6, _this6, [[0, 4]]);\n        }));\n\n        return function (_x14, _x15) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Gets all existing properties from component  dbIds\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getPropertyList',\n    value: function getPropertyList(model, dbIds) {\n      var _this7 = this;\n\n      return new Promise(function () {\n        var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee7(resolve, reject) {\n          var propertyTasks, propertyResults, properties;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.prev = 0;\n                  propertyTasks = dbIds.map(function (dbId) {\n\n                    return ViewerToolkit.getProperties(model, dbId);\n                  });\n                  _context7.next = 4;\n                  return Promise.all(propertyTasks);\n\n                case 4:\n                  propertyResults = _context7.sent;\n                  properties = [];\n\n\n                  propertyResults.forEach(function (propertyResult) {\n\n                    propertyResult.forEach(function (prop) {\n\n                      if (properties.indexOf(prop.displayName) < 0) {\n\n                        properties.push(prop.displayName);\n                      }\n                    });\n                  });\n\n                  return _context7.abrupt('return', resolve(properties.sort()));\n\n                case 10:\n                  _context7.prev = 10;\n                  _context7.t0 = _context7['catch'](0);\n                  return _context7.abrupt('return', reject(_context7.t0));\n\n                case 13:\n                case 'end':\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, _this7, [[0, 10]]);\n        }));\n\n        return function (_x16, _x17) {\n          return ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'drawBox',\n    value: function drawBox(viewer, min, max) {\n      var material = arguments.length <= 3 || arguments[3] === undefined ? null : arguments[3];\n\n\n      var _material = material;\n\n      if (!_material) {\n\n        _material = new THREE.LineBasicMaterial({\n          color: 0xffff00,\n          linewidth: 2\n        });\n\n        viewer.impl.matman().addMaterial('ADN-Material-Line', _material, true);\n      }\n\n      function drawLines(coordsArray, mat) {\n\n        var lines = [];\n\n        for (var i = 0; i < coordsArray.length; i += 2) {\n\n          var start = coordsArray[i];\n          var end = coordsArray[i + 1];\n\n          var geometry = new THREE.Geometry();\n\n          geometry.vertices.push(new THREE.Vector3(start.x, start.y, start.z));\n\n          geometry.vertices.push(new THREE.Vector3(end.x, end.y, end.z));\n\n          geometry.computeLineDistances();\n\n          var line = new THREE.Line(geometry, mat);\n\n          viewer.impl.scene.add(line);\n\n          lines.push(line);\n        }\n\n        return lines;\n      }\n\n      var lines = drawLines([{ x: min.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: min.y, z: max.z }, { x: max.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: min.y, z: min.z }, { x: min.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: max.x, y: max.y, z: min.z }, { x: max.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: min.x, y: max.y, z: max.z }, { x: min.x, y: min.y, z: min.z }, { x: min.x, y: max.y, z: min.z }, { x: max.x, y: min.y, z: min.z }, { x: max.x, y: max.y, z: min.z }, { x: max.x, y: min.y, z: max.z }, { x: max.x, y: max.y, z: max.z }, { x: min.x, y: min.y, z: max.z }, { x: min.x, y: max.y, z: max.z }], _material);\n\n      viewer.impl.sceneUpdated(true);\n\n      return lines;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Set component material\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setMaterial',\n    value: function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee8(model, dbId, material) {\n        var fragIds;\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return ViewerToolkit.getFragIds(model, dbId);\n\n              case 2:\n                fragIds = _context8.sent;\n\n\n                fragIds.forEach(function (fragId) {\n\n                  model.getFragmentList().setMaterial(fragId, material);\n                });\n\n              case 4:\n              case 'end':\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function setMaterial(_x19, _x20, _x21) {\n        return ref.apply(this, arguments);\n      }\n\n      return setMaterial;\n    }()\n  }, {\n    key: 'mobile',\n    get: function get() {\n\n      return {\n\n        getUserAgent: function getUserAgent() {\n          return navigator.userAgent;\n        },\n        isAndroid: function isAndroid() {\n          return this.getUserAgent().match(/Android/i);\n        },\n        isBlackBerry: function isBlackBerry() {\n          return this.getUserAgent().match(/BlackBerry/i);\n        },\n        isIOS: function isIOS() {\n          return this.getUserAgent().match(/iPhone|iPad|iPod/i);\n        },\n        isOpera: function isOpera() {\n          return this.getUserAgent().match(/Opera Mini/i);\n        },\n        isWindows: function isWindows() {\n          return this.isWindowsDesktop() || this.isWindowsMobile();\n        },\n        isWindowsMobile: function isWindowsMobile() {\n          return this.getUserAgent().match(/IEMobile/i);\n        },\n        isWindowsDesktop: function isWindowsDesktop() {\n          return this.getUserAgent().match(/WPDesktop/i);\n        },\n        isAny: function isAny() {\n\n          return this.isAndroid() || this.isBlackBerry() || this.isIOS() || this.isWindowsMobile();\n        }\n      };\n    }\n  }]);\n\n  return ViewerToolkit;\n}();\n\nexports.default = ViewerToolkit;//@ sourceMappingURL=data:application/json;base64,");
},25:function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n///////////////////////////////////////////////////////////////////////////////\n//\n//\n//\n///////////////////////////////////////////////////////////////////////////////\nAutodeskNamespace("Viewing.Extension");\n\nvar ExtensionBase = function (_Autodesk$Viewing$Ext) {\n  _inherits(ExtensionBase, _Autodesk$Viewing$Ext);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function ExtensionBase(viewer, options) {\n    _classCallCheck(this, ExtensionBase);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(ExtensionBase).call(this, viewer, options));\n\n    _this._viewer = viewer;\n\n    _this._options = options;\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Extension Id\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(ExtensionBase, [{\n    key: "load",\n\n\n    /////////////////////////////////////////////////////////////////\n    // Load callback\n    //\n    /////////////////////////////////////////////////////////////////\n    value: function load() {\n\n      return true;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Unload callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: "unload",\n    value: function unload() {\n\n      return true;\n    }\n  }], [{\n    key: "ExtensionId",\n    get: function get() {\n\n      return \'Viewing.Extension.Base\';\n    }\n  }]);\n\n  return ExtensionBase;\n}(Autodesk.Viewing.Extension);\n\nexports.default = ExtensionBase;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvRXh0ZW5zaW9uQmFzZS5qcz9kZjg3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFLQSxrQkFBa0IsbUJBQWxCOztJQUVxQjs7Ozs7Ozs7QUFNbkIsV0FObUIsYUFNbkIsQ0FBWSxNQUFaLEVBQW9CLE9BQXBCLEVBQTZCOzBCQU5WLGVBTVU7O3VFQU5WLDBCQVFYLFFBQVEsVUFGYTs7QUFJM0IsVUFBSyxPQUFMLEdBQWUsTUFBZixDQUoyQjs7QUFNM0IsVUFBSyxRQUFMLEdBQWdCLE9BQWhCLENBTjJCOztHQUE3Qjs7Ozs7Ozs7ZUFObUI7Ozs7Ozs7OzJCQTRCWjs7QUFFTCxhQUFPLElBQVAsQ0FGSzs7Ozs7Ozs7Ozs2QkFTRTs7QUFFUCxhQUFPLElBQVAsQ0FGTzs7Ozt3QkFsQmdCOztBQUV2QixhQUFPLHdCQUFQLENBRnVCOzs7O1NBbkJOO0VBQXNCLFNBQVMsT0FBVCxDQUFpQixTQUFqQjs7a0JBQXRCIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy9cbi8vXG4vL1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuQXV0b2Rlc2tOYW1lc3BhY2UoXCJWaWV3aW5nLkV4dGVuc2lvblwiKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXh0ZW5zaW9uQmFzZSBleHRlbmRzIEF1dG9kZXNrLlZpZXdpbmcuRXh0ZW5zaW9uIHtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBDbGFzcyBjb25zdHJ1Y3RvclxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBjb25zdHJ1Y3Rvcih2aWV3ZXIsIG9wdGlvbnMpIHtcblxuICAgIHN1cGVyKHZpZXdlciwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLl92aWV3ZXIgPSB2aWV3ZXI7XG5cbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIEV4dGVuc2lvbiBJZFxuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzdGF0aWMgZ2V0IEV4dGVuc2lvbklkKCkge1xuXG4gICAgcmV0dXJuICdWaWV3aW5nLkV4dGVuc2lvbi5CYXNlJztcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIExvYWQgY2FsbGJhY2tcbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgbG9hZCgpIHtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gVW5sb2FkIGNhbGxiYWNrXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHVubG9hZCgpIHtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL3V0aWxzL0V4dGVuc2lvbkJhc2UuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9')},63:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _PointTracker = __webpack_require__(119);\n\nvar _PointTracker2 = _interopRequireDefault(_PointTracker);\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////////\n//\n//\n/////////////////////////////////////////////////////////////////\n\n\nvar GraphicMarker = function (_EventsEmitter) {\n  _inherits(GraphicMarker, _EventsEmitter);\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n  function GraphicMarker(parent) {\n    var size = arguments.length <= 1 || arguments[1] === undefined ? { x: 32, y: 32 } : arguments[1];\n\n    _classCallCheck(this, GraphicMarker);\n\n    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(GraphicMarker).call(this));\n\n    _this2._markerId = _this2.guid();\n\n    var htmlMarker = '\\n      <div id=\"' + _this2._markerId + '\"\\n      </div>\\n    ';\n\n    $(parent).append(htmlMarker);\n\n    $('#' + _this2._markerId).css({\n      'pointer-events': 'none',\n      'width': size.x + 'px',\n      'height': size.y + 'px',\n      'position': 'absolute',\n      'overflow': 'visible',\n      'display': 'none'\n    });\n\n    _this2.onTrackerModifiedHandler = function (screenPoint) {\n      return _this2.onTrackerModified(screenPoint);\n    };\n    return _this2;\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n\n  _createClass(GraphicMarker, [{\n    key: 'setContent',\n    value: function setContent(html) {\n\n      $('#' + this._markerId).append(html);\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setSelectable',\n    value: function setSelectable(selectable) {\n\n      var _this = this;\n\n      function _click(e) {\n\n        if (e.target.id == _this._markerId) {\n\n          _this.emit('_click', e);\n        }\n      }\n\n      if (selectable) {\n\n        $('#' + this._markerId).css({\n          'cursor': 'pointer',\n          'pointer-events': 'auto'\n        });\n\n        $('#' + this._markerId).on('click', _click);\n      } else {\n\n        $('#' + this._markerId).css({\n          'cursor': 'auto',\n          'pointer-events': 'none'\n        });\n\n        $('#' + this._markerId).off('click', _click);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'activateLock3d',\n    value: function activateLock3d(viewer) {\n\n      this._tracker = new _PointTracker2.default(viewer);\n\n      this._tracker.on('modified', this.onTrackerModifiedHandler);\n\n      this._tracker.activate();\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onTrackerModified',\n    value: function onTrackerModified(screenPoint) {\n\n      var $container = $('#' + this._markerId);\n\n      $container.css({\n        'left': screenPoint.x - $container.width() / 2,\n        'top': screenPoint.y - $container.height() / 2\n      });\n\n      this.emit('tracker.modified', screenPoint);\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setScreenPoint',\n    value: function setScreenPoint(screenPoint) {\n\n      $('#' + this._markerId).css({\n        'left': screenPoint.x,\n        'top': screenPoint.y\n      });\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getScreenPoint',\n    value: function getScreenPoint() {\n\n      return {\n        x: $('#' + this._markerId).left(),\n        y: $('#' + this._markerId).top()\n      };\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getWorldPoint',\n    value: function getWorldPoint() {\n\n      if (this._tracker) {\n        return this._tracker.getWorldPoint();\n      }\n\n      return null;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setWorldPoint',\n    value: function setWorldPoint(worldPoint) {\n\n      if (this._tracker) {\n        this._tracker.setWorldPoint(worldPoint);\n      }\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setVisible',\n    value: function setVisible(show) {\n\n      $('#' + this._markerId).css({\n        display: show ? 'block' : 'none'\n      });\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'guid',\n    value: function guid() {\n      var format = arguments.length <= 0 || arguments[0] === undefined ? 'xxxxxxxxxxxx' : arguments[0];\n\n\n      var d = new Date().getTime();\n\n      var guid = format.replace(/[xy]/g, function (c) {\n        var r = (d + Math.random() * 16) % 16 | 0;\n        d = Math.floor(d / 16);\n        return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n      });\n\n      return guid;\n    }\n\n    ///////////////////////////////////////////////////////////////////\n    //\n    //\n    ///////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n\n      $('#' + this._markerId).remove();\n    }\n  }]);\n\n  return GraphicMarker;\n}(_EventsEmitter3.default);\n\nexports.default = GraphicMarker;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvR3JhcGhpY01hcmtlci5qcz9iYTUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBSUE7Ozs7QUFDQTs7Ozs7Ozs7Ozs7Ozs7OztJQUVxQjs7Ozs7Ozs7QUFNbkIsV0FObUIsYUFNbkIsQ0FBWSxNQUFaLEVBQTJDO1FBQXZCLDZEQUFPLEVBQUMsR0FBRyxFQUFILEVBQU8sR0FBRyxFQUFILGtCQUFROzswQkFOeEIsZUFNd0I7O3dFQU54QiwyQkFNd0I7O0FBSXpDLFdBQUssU0FBTCxHQUFpQixPQUFLLElBQUwsRUFBakIsQ0FKeUM7O0FBTXpDLFFBQUksbUNBQ1MsT0FBSyxTQUFMLDBCQURULENBTnFDOztBQVd6QyxNQUFFLE1BQUYsRUFBVSxNQUFWLENBQWlCLFVBQWpCLEVBWHlDOztBQWF6QyxZQUFNLE9BQUssU0FBTCxDQUFOLENBQXdCLEdBQXhCLENBQTRCO0FBQzFCLHdCQUFrQixNQUFsQjtBQUNBLGVBQVksS0FBSyxDQUFMLE9BQVo7QUFDQSxnQkFBYSxLQUFLLENBQUwsT0FBYjtBQUNBLGtCQUFZLFVBQVo7QUFDQSxrQkFBWSxTQUFaO0FBQ0EsaUJBQVcsTUFBWDtLQU5GLEVBYnlDOztBQXNCekMsV0FBSyx3QkFBTCxHQUNFLFVBQUMsV0FBRDthQUFnQixPQUFLLGlCQUFMLENBQXVCLFdBQXZCO0tBQWhCLENBdkJ1Qzs7R0FBM0M7Ozs7Ozs7O2VBTm1COzsrQkFvQ1IsTUFBTTs7QUFFZixjQUFNLEtBQUssU0FBTCxDQUFOLENBQXdCLE1BQXhCLENBQStCLElBQS9CLEVBRmU7Ozs7Ozs7Ozs7a0NBU0gsWUFBWTs7QUFFeEIsVUFBSSxRQUFRLElBQVIsQ0FGb0I7O0FBSXhCLGVBQVMsTUFBVCxDQUFnQixDQUFoQixFQUFtQjs7QUFFakIsWUFBRyxFQUFFLE1BQUYsQ0FBUyxFQUFULElBQWUsTUFBTSxTQUFOLEVBQWdCOztBQUVoQyxnQkFBTSxJQUFOLENBQVcsUUFBWCxFQUFxQixDQUFyQixFQUZnQztTQUFsQztPQUZGOztBQVFBLFVBQUcsVUFBSCxFQUFjOztBQUVaLGdCQUFNLEtBQUssU0FBTCxDQUFOLENBQXdCLEdBQXhCLENBQTRCO0FBQzFCLG9CQUFVLFNBQVY7QUFDQSw0QkFBa0IsTUFBbEI7U0FGRixFQUZZOztBQU9aLGdCQUFNLEtBQUssU0FBTCxDQUFOLENBQXdCLEVBQXhCLENBQ0UsT0FERixFQUNXLE1BRFgsRUFQWTtPQUFkLE1BVUs7O0FBRUgsZ0JBQU0sS0FBSyxTQUFMLENBQU4sQ0FBd0IsR0FBeEIsQ0FBNEI7QUFDMUIsb0JBQVUsTUFBVjtBQUNBLDRCQUFrQixNQUFsQjtTQUZGLEVBRkc7O0FBT0gsZ0JBQU0sS0FBSyxTQUFMLENBQU4sQ0FBd0IsR0FBeEIsQ0FDRSxPQURGLEVBQ1csTUFEWCxFQVBHO09BVkw7Ozs7Ozs7Ozs7bUNBMEJhLFFBQVE7O0FBRXJCLFdBQUssUUFBTCxHQUFnQiwyQkFBaUIsTUFBakIsQ0FBaEIsQ0FGcUI7O0FBSXJCLFdBQUssUUFBTCxDQUFjLEVBQWQsQ0FBaUIsVUFBakIsRUFDRSxLQUFLLHdCQUFMLENBREYsQ0FKcUI7O0FBT3JCLFdBQUssUUFBTCxDQUFjLFFBQWQsR0FQcUI7Ozs7Ozs7Ozs7c0NBY0wsYUFBYTs7QUFFN0IsVUFBSSxhQUFhLFFBQU0sS0FBSyxTQUFMLENBQW5CLENBRnlCOztBQUk3QixpQkFBVyxHQUFYLENBQWU7QUFDYixnQkFBUSxZQUFZLENBQVosR0FBZ0IsV0FBVyxLQUFYLEtBQW1CLENBQW5CO0FBQ3hCLGVBQU8sWUFBWSxDQUFaLEdBQWlCLFdBQVcsTUFBWCxLQUFvQixDQUFwQjtPQUYxQixFQUo2Qjs7QUFTN0IsV0FBSyxJQUFMLENBQVUsa0JBQVYsRUFBOEIsV0FBOUIsRUFUNkI7Ozs7Ozs7Ozs7bUNBZ0JoQixhQUFhOztBQUUxQixjQUFNLEtBQUssU0FBTCxDQUFOLENBQXdCLEdBQXhCLENBQTRCO0FBQzFCLGdCQUFRLFlBQVksQ0FBWjtBQUNSLGVBQU8sWUFBWSxDQUFaO09BRlQsRUFGMEI7Ozs7Ozs7Ozs7cUNBWVg7O0FBRWYsYUFBTztBQUNMLFdBQUcsUUFBTSxLQUFLLFNBQUwsQ0FBTixDQUF3QixJQUF4QixFQUFIO0FBQ0EsV0FBRyxRQUFNLEtBQUssU0FBTCxDQUFOLENBQXdCLEdBQXhCLEVBQUg7T0FGRixDQUZlOzs7Ozs7Ozs7O29DQVlEOztBQUVkLFVBQUcsS0FBSyxRQUFMLEVBQWU7QUFDaEIsZUFBTyxLQUFLLFFBQUwsQ0FBYyxhQUFkLEVBQVAsQ0FEZ0I7T0FBbEI7O0FBSUEsYUFBTyxJQUFQLENBTmM7Ozs7Ozs7Ozs7a0NBYUYsWUFBWTs7QUFFeEIsVUFBRyxLQUFLLFFBQUwsRUFBZTtBQUNoQixhQUFLLFFBQUwsQ0FBYyxhQUFkLENBQTRCLFVBQTVCLEVBRGdCO09BQWxCOzs7Ozs7Ozs7OytCQVNTLE1BQU07O0FBRWYsY0FBTSxLQUFLLFNBQUwsQ0FBTixDQUF3QixHQUF4QixDQUE0QjtBQUMxQixpQkFBVSxPQUFPLE9BQVAsR0FBaUIsTUFBakI7T0FEWixFQUZlOzs7Ozs7Ozs7OzJCQVdXO1VBQXZCLCtEQUFPLDhCQUFnQjs7O0FBRTFCLFVBQUksSUFBSSxJQUFJLElBQUosR0FBVyxPQUFYLEVBQUosQ0FGc0I7O0FBSTFCLFVBQUksT0FBTyxPQUFPLE9BQVAsQ0FDVCxPQURTLEVBRVQsVUFBVSxDQUFWLEVBQWE7QUFDWCxZQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTCxLQUFnQixFQUFoQixDQUFMLEdBQTJCLEVBQTNCLEdBQWdDLENBQWhDLENBREc7QUFFWCxZQUFJLEtBQUssS0FBTCxDQUFXLElBQUksRUFBSixDQUFmLENBRlc7QUFHWCxlQUFPLENBQUMsS0FBSyxHQUFMLEdBQVcsQ0FBWCxHQUFnQixJQUFJLEdBQUosR0FBVSxHQUFWLENBQWpCLENBQWlDLFFBQWpDLENBQTBDLEVBQTFDLENBQVAsQ0FIVztPQUFiLENBRkUsQ0FKc0I7O0FBWTFCLGFBQU8sSUFBUCxDQVowQjs7Ozs7Ozs7Ozs2QkFtQm5COztBQUVQLGNBQU0sS0FBSyxTQUFMLENBQU4sQ0FBd0IsTUFBeEIsR0FGTzs7OztTQS9MVSIsImZpbGUiOiI2My5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5pbXBvcnQgUG9pbnRUcmFja2VyIGZyb20gJ1BvaW50VHJhY2tlcic7XG5pbXBvcnQgRXZlbnRzRW1pdHRlciBmcm9tICdFdmVudHNFbWl0dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JhcGhpY01hcmtlciBleHRlbmRzIEV2ZW50c0VtaXR0ZXIge1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBjb25zdHJ1Y3RvcihwYXJlbnQsIHNpemUgPSB7eDogMzIsIHk6IDMyfSkge1xuXG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMuX21hcmtlcklkID0gdGhpcy5ndWlkKCk7XG5cbiAgICB2YXIgaHRtbE1hcmtlciA9IGBcbiAgICAgIDxkaXYgaWQ9XCIke3RoaXMuX21hcmtlcklkfVwiXG4gICAgICA8L2Rpdj5cbiAgICBgO1xuXG4gICAgJChwYXJlbnQpLmFwcGVuZChodG1sTWFya2VyKTtcblxuICAgICQoYCMke3RoaXMuX21hcmtlcklkfWApLmNzcyh7XG4gICAgICAncG9pbnRlci1ldmVudHMnOiAnbm9uZScsXG4gICAgICAnd2lkdGgnOiBgJHtzaXplLnh9cHhgLFxuICAgICAgJ2hlaWdodCc6IGAke3NpemUueX1weGAsXG4gICAgICAncG9zaXRpb24nOiAnYWJzb2x1dGUnLFxuICAgICAgJ292ZXJmbG93JzogJ3Zpc2libGUnLFxuICAgICAgJ2Rpc3BsYXknOiAnbm9uZSdcbiAgICB9KTtcblxuICAgIHRoaXMub25UcmFja2VyTW9kaWZpZWRIYW5kbGVyID1cbiAgICAgIChzY3JlZW5Qb2ludCk9PiB0aGlzLm9uVHJhY2tlck1vZGlmaWVkKHNjcmVlblBvaW50KTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzZXRDb250ZW50KGh0bWwpIHtcblxuICAgICQoYCMke3RoaXMuX21hcmtlcklkfWApLmFwcGVuZChodG1sKTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzZXRTZWxlY3RhYmxlKHNlbGVjdGFibGUpIHtcblxuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBmdW5jdGlvbiBfY2xpY2soZSkge1xuXG4gICAgICBpZihlLnRhcmdldC5pZCA9PSBfdGhpcy5fbWFya2VySWQpe1xuXG4gICAgICAgIF90aGlzLmVtaXQoJ19jbGljaycsIGUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmKHNlbGVjdGFibGUpe1xuXG4gICAgICAkKGAjJHt0aGlzLl9tYXJrZXJJZH1gKS5jc3Moe1xuICAgICAgICAnY3Vyc29yJzogJ3BvaW50ZXInLFxuICAgICAgICAncG9pbnRlci1ldmVudHMnOiAnYXV0bydcbiAgICAgIH0pO1xuXG4gICAgICAkKGAjJHt0aGlzLl9tYXJrZXJJZH1gKS5vbihcbiAgICAgICAgJ2NsaWNrJywgX2NsaWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG5cbiAgICAgICQoYCMke3RoaXMuX21hcmtlcklkfWApLmNzcyh7XG4gICAgICAgICdjdXJzb3InOiAnYXV0bycsXG4gICAgICAgICdwb2ludGVyLWV2ZW50cyc6ICdub25lJ1xuICAgICAgfSk7XG5cbiAgICAgICQoYCMke3RoaXMuX21hcmtlcklkfWApLm9mZihcbiAgICAgICAgJ2NsaWNrJywgX2NsaWNrKTtcbiAgICB9XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgYWN0aXZhdGVMb2NrM2Qodmlld2VyKSB7XG5cbiAgICB0aGlzLl90cmFja2VyID0gbmV3IFBvaW50VHJhY2tlcih2aWV3ZXIpO1xuXG4gICAgdGhpcy5fdHJhY2tlci5vbignbW9kaWZpZWQnLFxuICAgICAgdGhpcy5vblRyYWNrZXJNb2RpZmllZEhhbmRsZXIpO1xuXG4gICAgdGhpcy5fdHJhY2tlci5hY3RpdmF0ZSgpO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIG9uVHJhY2tlck1vZGlmaWVkKHNjcmVlblBvaW50KSB7XG5cbiAgICB2YXIgJGNvbnRhaW5lciA9ICQoYCMke3RoaXMuX21hcmtlcklkfWApO1xuXG4gICAgJGNvbnRhaW5lci5jc3Moe1xuICAgICAgJ2xlZnQnOiBzY3JlZW5Qb2ludC54IC0gJGNvbnRhaW5lci53aWR0aCgpLzIsXG4gICAgICAndG9wJzogc2NyZWVuUG9pbnQueSAtICAkY29udGFpbmVyLmhlaWdodCgpLzJcbiAgICB9KTtcblxuICAgIHRoaXMuZW1pdCgndHJhY2tlci5tb2RpZmllZCcsIHNjcmVlblBvaW50KTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzZXRTY3JlZW5Qb2ludChzY3JlZW5Qb2ludCkge1xuXG4gICAgJChgIyR7dGhpcy5fbWFya2VySWR9YCkuY3NzKHtcbiAgICAgICdsZWZ0Jzogc2NyZWVuUG9pbnQueCxcbiAgICAgICd0b3AnOiBzY3JlZW5Qb2ludC55XG4gICAgfSk7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZ2V0U2NyZWVuUG9pbnQoKSB7XG5cbiAgICByZXR1cm4ge1xuICAgICAgeDogJChgIyR7dGhpcy5fbWFya2VySWR9YCkubGVmdCgpLFxuICAgICAgeTogJChgIyR7dGhpcy5fbWFya2VySWR9YCkudG9wKClcbiAgICB9O1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGdldFdvcmxkUG9pbnQoKSB7XG5cbiAgICBpZih0aGlzLl90cmFja2VyKSB7XG4gICAgICByZXR1cm4gdGhpcy5fdHJhY2tlci5nZXRXb3JsZFBvaW50KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vXG4gIC8vXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgc2V0V29ybGRQb2ludCh3b3JsZFBvaW50KSB7XG5cbiAgICBpZih0aGlzLl90cmFja2VyKSB7XG4gICAgICB0aGlzLl90cmFja2VyLnNldFdvcmxkUG9pbnQod29ybGRQb2ludCk7XG4gICAgfVxuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHNldFZpc2libGUoc2hvdykge1xuXG4gICAgJChgIyR7dGhpcy5fbWFya2VySWR9YCkuY3NzKHtcbiAgICAgIGRpc3BsYXk6IChzaG93ID8gJ2Jsb2NrJyA6ICdub25lJylcbiAgICB9KTtcbiAgfVxuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBndWlkKGZvcm1hdD0neHh4eHh4eHh4eHh4Jykge1xuXG4gICAgdmFyIGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICAgIHZhciBndWlkID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgICAvW3h5XS9nLFxuICAgICAgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgICAgIHJldHVybiAoYyA9PSAneCcgPyByIDogKHIgJiAweDcgfCAweDgpKS50b1N0cmluZygxNik7XG4gICAgICB9KTtcblxuICAgIHJldHVybiBndWlkO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHJlbW92ZSgpIHtcblxuICAgICQoYCMke3RoaXMuX21hcmtlcklkfWApLnJlbW92ZSgpO1xuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9HcmFwaGljTWFya2VyLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==")},104:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _GraphicMarker2 = __webpack_require__(63);\n\nvar _GraphicMarker3 = _interopRequireDefault(_GraphicMarker2);\n\nvar _SwitchButton = __webpack_require__(121);\n\nvar _SwitchButton2 = _interopRequireDefault(_SwitchButton);\n\nvar _ViewerToolkit = __webpack_require__(17);\n\nvar _ViewerToolkit2 = _interopRequireDefault(_ViewerToolkit);\n\nvar _Dropdown = __webpack_require__(118);\n\nvar _Dropdown2 = _interopRequireDefault(_Dropdown);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { return step(\"next\", value); }, function (err) { return step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LabelMarker = function (_GraphicMarker) {\n  _inherits(LabelMarker, _GraphicMarker);\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function LabelMarker(parent, viewer, dbId, screenPoint) {\n    _classCallCheck(this, LabelMarker);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LabelMarker).call(this, viewer.container, { x: 100, y: 22 }));\n\n    _this.controlsId = _this.guid();\n\n    _this.svgId = _this.guid();\n\n    _this.viewer = viewer;\n\n    _this.parent = parent;\n\n    _this.dbId = dbId;\n\n    _this.setContent('<svg id=\"' + _this.svgId + '\" class=\"markup3D\"></svg>\\n       <div id=\"' + _this.controlsId + '\" class=\"markup3D\"></div>\\n      ');\n\n    $('#' + _this._markerId).css({\n      'pointer-events': 'auto'\n    });\n\n    $('#' + _this.svgId).css({\n      cursor: 'pointer'\n    });\n\n    var snap = Snap($('#' + _this.svgId)[0]);\n\n    _this.label = snap.paper.text(0, 15, 'Place label ...');\n\n    _this.label.attr({\n      fontFamily: 'Arial',\n      fontSize: '13px',\n      stroke: '#000000'\n    });\n\n    _this.setVisible(true);\n    _this.setScreenPoint(screenPoint);\n\n    _this.onMouseUpHandler = function (event) {\n      return _this.onMouseUp(event);\n    };\n\n    _this.onMouseDownHandler = function (event) {\n      return _this.onMouseDown(event);\n    };\n\n    _this.onDoubleClickHandler = function (event) {\n      return _this.onDoubleClick(event);\n    };\n\n    $('#' + _this.svgId).on('mouseup', _this.onMouseUpHandler);\n\n    $('#' + _this.svgId).on('mousedown', _this.onMouseDownHandler);\n\n    $('#' + _this.svgId).on('dblclick', _this.onDoubleClickHandler);\n\n    _this.createControls();\n\n    _this.showControls(false);\n\n    _this.timeoutId = 0;\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(LabelMarker, [{\n    key: 'setVisible',\n    value: function setVisible(show) {\n      var _this2 = this;\n\n      if (show) {\n\n        clearTimeout(this.timeoutId);\n        this.timeoutId = 0;\n        _get(Object.getPrototypeOf(LabelMarker.prototype), 'setVisible', this).call(this, true);\n      } else {\n\n        clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(function () {\n          _get(Object.getPrototypeOf(LabelMarker.prototype), 'setVisible', _this2).call(_this2, false);\n        }, 400);\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'startDrag',\n    value: function startDrag() {\n\n      $('#' + this.svgId).css({\n        cursor: 'move'\n      });\n\n      var $canvas = $('canvas', this.viewer.container);\n\n      this.viewerCursor = $canvas.css('cursor');\n\n      $canvas.css({\n        cursor: 'move'\n      });\n\n      this.parent.dragging = true;\n\n      this.parent.emit('drag.start', this.parent);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'endDrag',\n    value: function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n        var $canvas, prop;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n\n                this.parent.dragging = false;\n\n                this.parent.emit('drag.end', this.parent);\n\n                $canvas = $('canvas', this.viewer.container);\n\n\n                $canvas.css({\n                  cursor: this.viewerCursor\n                });\n\n                $('#' + this._markerId).css({\n                  'pointer-events': 'auto'\n                });\n\n                $('#' + this.svgId).css({\n                  cursor: 'pointer'\n                });\n\n                if (!this.item) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt('return');\n\n              case 8:\n                if (!LabelMarker.prototype.labelName) {\n                  _context.next = 16;\n                  break;\n                }\n\n                _context.next = 11;\n                return _ViewerToolkit2.default.getProperty(this.viewer.model, this.dbId, LabelMarker.prototype.labelName);\n\n              case 11:\n                prop = _context.sent;\n\n\n                this.updateLabel(prop.displayName, prop.displayValue);\n\n                this.item = {\n                  label: prop.displayName,\n                  value: prop.displayValue\n                };\n                _context.next = 18;\n                break;\n\n              case 16:\n\n                this.showControls(true);\n\n                this.dropdown.open();\n\n              case 18:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function endDrag() {\n        return ref.apply(this, arguments);\n      }\n\n      return endDrag;\n    }()\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'createControls',\n    value: function () {\n      var ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var properties, menuItems, $container, occlusionSwitchId, bindSwitchId, btnRemoveId, btnExitId, html;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _ViewerToolkit2.default.getProperties(this.viewer.model, this.dbId);\n\n              case 2:\n                properties = _context2.sent;\n\n\n                properties = properties.sort(function (a, b) {\n\n                  var nameA = a.displayName.toLowerCase();\n                  var nameB = b.displayName.toLowerCase();\n\n                  return nameA > nameB ? 1 : -1;\n                });\n\n                menuItems = properties.map(function (prop) {\n\n                  return {\n                    name: prop.displayName,\n                    value: prop.displayValue\n                  };\n                });\n                $container = $('#' + this.controlsId);\n\n\n                this.dropdown = new _Dropdown2.default({\n                  container: $container,\n                  title: 'Property',\n                  pos: {\n                    top: 0, left: 0\n                  },\n                  menuItems: menuItems\n                });\n\n                this.dropdown.on('item.selected', function (item) {\n\n                  LabelMarker.prototype.labelName = item.name;\n\n                  _this3.item = item;\n                });\n\n                occlusionSwitchId = this.guid();\n                bindSwitchId = this.guid();\n                btnRemoveId = this.guid();\n                btnExitId = this.guid();\n                html = '\\n      <br>\\n      <br>\\n      <div style=\"width: 150px;\">\\n\\n        <div id=\"' + bindSwitchId + '\"\\n          style=\"margin-right:10px;float:left;padding-top:1px;\">\\n        </div>\\n        <div style=\"height:24px;\">\\n          <b>Bind to State</b>\\n        </div>\\n\\n        <div id=\"' + occlusionSwitchId + '\"\\n          style=\"margin-right:10px;float:left;padding-top:1px;\">\\n        </div>\\n        <div style=\"height:24px;\">\\n          <b>Occlusion</b>\\n        </div>\\n\\n        <button id=\"' + btnRemoveId + '\" class=\"btn btn-danger btn-ctrl\"\\n          style=\"float: left; margin-right: 3px;\">\\n         <span class=\"fa fa-remove btn-span\"></span>\\n          </button>\\n        <button id=\"' + btnExitId + '\" class=\"btn btn-success btn-ctrl\">\\n         <span class=\"fa fa-sign-out btn-span\"></span>\\n         </button>\\n      </div>\\n    ';\n\n\n                $container.append(html);\n\n                this.bindSwitch = new _SwitchButton2.default('#' + bindSwitchId, this.parent.bindToState);\n\n                this.bindSwitch.on('checked', function (checked) {\n\n                  _this3.parent.bindToState = checked;\n                });\n\n                this.occlusionSwitch = new _SwitchButton2.default('#' + occlusionSwitchId, this.parent.occlusion);\n\n                this.occlusionSwitch.on('checked', function (checked) {\n\n                  _this3.parent.occlusion = checked;\n                });\n\n                $('#' + btnRemoveId).click(function () {\n\n                  _this3.parent.remove();\n                });\n\n                $('#' + btnExitId).click(function () {\n\n                  // ensure some default is set for next markup\n                  if (!_this3.item) {\n\n                    _this3.item = menuItems[0];\n\n                    LabelMarker.prototype.labelName = _this3.item.name;\n                  }\n\n                  _this3.showControls(false);\n\n                  _this3.updateLabel(_this3.item.name, _this3.item.value);\n                });\n\n              case 20:\n              case 'end':\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function createControls() {\n        return ref.apply(this, arguments);\n      }\n\n      return createControls;\n    }()\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'updateLabel',\n    value: function updateLabel(name, value) {\n\n      var snap = Snap($('#' + this.svgId)[0]);\n\n      this.label.remove();\n\n      var nameLabel = snap.paper.text(0, 15, name.replace(':', '') + ': ');\n\n      var valueLabel = snap.paper.text(nameLabel.getBBox().width, 15, value);\n\n      nameLabel.attr({\n        fontFamily: 'Arial',\n        fontSize: '13px',\n        stroke: '#FF0000'\n      });\n\n      valueLabel.attr({\n        fontFamily: 'Arial',\n        fontSize: '13px',\n        stroke: '#000000'\n      });\n\n      this.label = snap.group(nameLabel, valueLabel);\n\n      var width = nameLabel.getBBox().width + valueLabel.getBBox().width;\n\n      $('#' + this._markerId).css({\n        width: width + 10\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onMouseUp',\n    value: function onMouseUp(event) {\n\n      if (this.parent.dragging) {\n\n        this.endDrag();\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onMouseDown',\n    value: function onMouseDown(event) {\n\n      if (!this.parent.dragging) {\n\n        this.startDrag();\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onDoubleClick',\n    value: function onDoubleClick(event) {\n\n      this.showControls(true);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'showControls',\n    value: function showControls(show) {\n\n      $('#' + this.svgId).css({\n        display: show ? 'none' : 'block'\n      });\n\n      $('#' + this.controlsId).css({\n        display: show ? 'block' : 'none'\n      });\n    }\n  }]);\n\n  return LabelMarker;\n}(_GraphicMarker3.default);\n\nexports.default = LabelMarker;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,");
},105:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _Stopwatch = __webpack_require__(120);\n\nvar _Stopwatch2 = _interopRequireDefault(_Stopwatch);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Leader = function () {\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function Leader(container, startPoint) {\n    _classCallCheck(this, Leader);\n\n    var snap = Snap(container);\n\n    this.line = snap.paper.line(startPoint.x, startPoint.y, startPoint.x, startPoint.y);\n\n    this.line.attr({\n      fill: 'none',\n      strokeWidth: 1,\n      stroke: '#000000',\n      strokeLinecap: \"round\",\n      strokeDasharray: \"1 5 1 5\"\n    });\n\n    var pts = [startPoint.x, startPoint.y];\n\n    this.arrow = snap.paper.polygon(pts);\n\n    this.arrow.attr({\n      fill: \"#B80000\"\n    });\n\n    this.leader = snap.group(this.line, this.arrow);\n\n    this.timer = new _Stopwatch2.default();\n\n    this.scaleFactor = 1.0;\n    this.animationId = 0;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(Leader, [{\n    key: 'setVisible',\n    value: function setVisible(show) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n\n        if (show) {\n\n          _this.leader.attr({\n            visibility: 'visible'\n          });\n        }\n\n        cancelAnimationFrame(_this.animationId);\n\n        var step = show ? 0.002 : -0.002;\n\n        var _animation = function _animation() {\n\n          _this.scaleFactor += step * Math.max(_this.timer.getElapsedMs(), 1);\n\n          if (_this.scaleFactor >= 1.0) {\n\n            _this.scaleFactor = 1.0;\n            _this.draw();\n            return resolve();\n          } else if (_this.scaleFactor <= 0.0) {\n\n            _this.scaleFactor = 0.0;\n\n            _this.leader.attr({\n              visibility: 'hidden'\n            });\n\n            _this.draw();\n            return resolve();\n          }\n\n          _this.draw();\n\n          _this.animationId = requestAnimationFrame(_animation);\n        };\n\n        _this.timer.getElapsedMs();\n\n        _animation();\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'update',\n    value: function update(startPoint, endPoint) {\n\n      this.startPoint = startPoint;\n      this.endPoint = endPoint;\n\n      this.dir = {\n        x: endPoint.x - startPoint.x,\n        y: endPoint.y - startPoint.y\n      };\n\n      this.draw();\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'draw',\n    value: function draw() {\n\n      var startPoint = {\n        x: this.endPoint.x - this.scaleFactor * this.dir.x,\n        y: this.endPoint.y - this.scaleFactor * this.dir.y\n      };\n\n      var norm = Math.sqrt(this.dir.x * this.dir.x + this.dir.y * this.dir.y);\n\n      var nDir = {\n        x: this.dir.x,\n        y: this.dir.y\n      };\n\n      if (norm > 0) {\n        nDir.x /= norm;\n        nDir.y /= norm;\n      }\n\n      this.line.attr({\n\n        x1: startPoint.x,\n        y1: startPoint.y,\n\n        x2: this.endPoint.x,\n        y2: this.endPoint.y\n      });\n\n      var orthoDir = {\n        x: nDir.y * this.scaleFactor,\n        y: -nDir.x * this.scaleFactor\n      };\n\n      var pts = [startPoint.x - 3 * nDir.x, startPoint.y - 3 * nDir.y, startPoint.x + 20 * nDir.x + 5 * orthoDir.x, startPoint.y + 20 * nDir.y + 5 * orthoDir.y, startPoint.x + 20 * nDir.x - 5 * orthoDir.x, startPoint.y + 20 * nDir.y - 5 * orthoDir.y];\n\n      this.arrow.attr({\n        points: pts\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n\n      this.leader.remove();\n    }\n  }]);\n\n  return Leader;\n}();\n\nexports.default = Leader;//@ sourceMappingURL=data:application/json;base64,")},106:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ViewingExtensionMarkup3D = __webpack_require__(104);\n\nvar _ViewingExtensionMarkup3D2 = _interopRequireDefault(_ViewingExtensionMarkup3D);\n\nvar _ViewingExtensionMarkup3D3 = __webpack_require__(107);\n\nvar _ViewingExtensionMarkup3D4 = _interopRequireDefault(_ViewingExtensionMarkup3D3);\n\nvar _ViewingExtensionMarkup3D5 = __webpack_require__(105);\n\nvar _ViewingExtensionMarkup3D6 = _interopRequireDefault(_ViewingExtensionMarkup3D5);\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar LeaderNote = function (_EventsEmitter) {\n  _inherits(LeaderNote, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function LeaderNote(viewer, screenPoint, dbId, fragId) {\n    var worldPoint = arguments.length <= 4 || arguments[4] === undefined ? null : arguments[4];\n\n    _classCallCheck(this, LeaderNote);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(LeaderNote).call(this));\n\n    _this.id = _this.guid();\n\n    _this.bindToState = true;\n\n    _this.occlusion = true;\n\n    _this.viewer = viewer;\n\n    _this.fragId = fragId;\n\n    _this.visible = true;\n\n    _this.dbId = dbId;\n\n    _this.initialMeshPos = _this.meshPosition(_this.fragId);\n\n    _this.initialWorldPoint = worldPoint || _this.screenToWorld(screenPoint);\n\n    _this.pinMarker = new _ViewingExtensionMarkup3D4.default(viewer, _this.initialWorldPoint);\n\n    _this.trackerModifiedHandler = function (screenPoint) {\n      return _this.onTrackerModified(screenPoint);\n    };\n\n    _this.pinMarker.on('tracker.modified', _this.trackerModifiedHandler);\n\n    // creates single container for all Leader objects\n    // if doesnt exist\n    if ($('.leader-container').length == 0) {\n\n      $(viewer.container).append('<svg class=\"markup3D leader-container\"></svg>');\n    }\n\n    _this.leaderContainer = $('.leader-container')[0];\n\n    _this.onMouseUpHandler = function (event) {\n      return _this.onMouseUp(event);\n    };\n\n    $(viewer.container).on('mouseup', _this.onMouseUpHandler);\n\n    _this.offset = _this.getClientOffset(viewer.container);\n\n    _this.startPoint = {\n      x: screenPoint.x - _this.offset.x,\n      y: screenPoint.y - _this.offset.y\n    };\n\n    _this.endPoint = {\n      x: screenPoint.x - _this.offset.x,\n      y: screenPoint.y - _this.offset.y\n    };\n\n    _this.leader = new _ViewingExtensionMarkup3D6.default(_this.leaderContainer, _this.startPoint);\n\n    _this.labelMarker = new _ViewingExtensionMarkup3D2.default(_this, _this.viewer, _this.dbId, _this.startPoint);\n\n    _this.setLeaderEndPoint(screenPoint);\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(LeaderNote, [{\n    key: 'startDrag',\n    value: function startDrag() {\n\n      this.labelMarker.startDrag();\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setVisible',\n    value: function setVisible(show) {\n\n      //update only if it's a toggle\n\n      if (show == this.visible) return;\n\n      this.visible = show;\n\n      this.labelMarker.setVisible(show);\n      this.pinMarker.setVisible(show);\n      this.leader.setVisible(show);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setLabelItem',\n    value: function setLabelItem(item) {\n\n      this.labelMarker.item = item;\n\n      this.labelMarker.updateLabel(item.name, item.value);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'normalize',\n    value: function normalize(screenPoint) {\n\n      var viewport = this.viewer.navigation.getScreenViewport();\n\n      var n = {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n\n      return n;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'screenToWorld',\n    value: function screenToWorld(screenPoint) {\n\n      var n = this.normalize(screenPoint);\n\n      var worldPoint = this.viewer.utilities.getHitPoint(n.x, n.y);\n\n      return worldPoint;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'worldToScreen',\n    value: function worldToScreen(screenPoint) {\n\n      var n = this.normalize(screenPoint);\n\n      var worldPoint = this.viewer.utilities.getHitPoint(n.x, n.y);\n\n      return screenPoint;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Return hit data\n    // {\n    //  dbId: nb\n    //  face: THREE.Face3\n    //  fragId: nb\n    //  intersectPoint: THREE.Vector3\n    //  model: RenderModel\n    // }\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getHitData',\n    value: function getHitData(x, y) {\n\n      y = 1.0 - y;\n\n      x = x * 2.0 - 1.0;\n      y = y * 2.0 - 1.0;\n\n      var vpVec = new THREE.Vector3(x, y, 1);\n\n      var result = this.viewer.impl.hitTestViewport(vpVec, false);\n\n      return result ? result : null;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'direction',\n    value: function direction() {\n\n      var dir = {\n        x: this.endPoint.x - this.startPoint.x,\n        y: this.endPoint.y - this.startPoint.y\n      };\n\n      return dir;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setLeaderEndPoint',\n    value: function setLeaderEndPoint(endPoint) {\n\n      this.endPoint = {\n        x: endPoint.x - this.offset.x,\n        y: endPoint.y - this.offset.y\n      };\n\n      this.update();\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onTrackerModified',\n    value: function onTrackerModified(screenPoint) {\n\n      this.startPoint = screenPoint;\n\n      if (this.occlusion && this.checkOcclusion()) {\n\n        this.setVisible(false);\n      } else {\n\n        this.update();\n        this.setVisible(true);\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'checkOcclusion',\n    value: function checkOcclusion() {\n\n      var n = this.normalize({\n        x: this.startPoint.x + this.offset.x,\n        y: this.startPoint.y + this.offset.y\n      });\n\n      var hitData = this.getHitData(n.x, n.y);\n\n      if (hitData) {\n\n        if (hitData.dbId != this.dbId) {\n\n          return true;\n        }\n\n        var worldPoint = this.pinMarker.getWorldPoint();\n\n        var dist = {\n          x: hitData.intersectPoint.x - worldPoint.x,\n          y: hitData.intersectPoint.y - worldPoint.y,\n          z: hitData.intersectPoint.z - worldPoint.z\n        };\n\n        var d = dist.x * dist.x + dist.y * dist.y + dist.z * dist.z;\n\n        if (d > 2.0) {\n\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'update',\n    value: function update() {\n\n      var dir = this.direction();\n\n      var norm = Math.sqrt(dir.x * dir.x + dir.y * dir.y);\n\n      if (norm > 0) {\n        dir.x = dir.x / norm;\n        dir.y = dir.y / norm;\n      }\n\n      var leaderEndPoint = {\n        x: this.startPoint.x + dir.x * Math.max(50, norm - 50),\n        y: this.startPoint.y + dir.y * Math.max(50, norm - 50)\n      };\n\n      this.leader.update({\n        x: this.startPoint.x + dir.x * 20,\n        y: this.startPoint.y + dir.y * 20\n      }, leaderEndPoint);\n\n      this.labelMarker.setScreenPoint({\n        x: leaderEndPoint.x + (dir.x > 0 ? -dir.x * 50 : dir.x * 50),\n        y: leaderEndPoint.y + (dir.y > 0 ? 20 : -30)\n      });\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'updateFragmentTransform',\n    value: function updateFragmentTransform() {\n\n      var pos = this.meshPosition(this.fragId);\n\n      var meshTranslation = {\n\n        x: pos.x - this.initialMeshPos.x,\n        y: pos.y - this.initialMeshPos.y,\n        z: pos.z - this.initialMeshPos.z\n      };\n\n      var worldPoint = {\n\n        x: this.initialWorldPoint.x + meshTranslation.x,\n        y: this.initialWorldPoint.y + meshTranslation.y,\n        z: this.initialWorldPoint.z + meshTranslation.z\n      };\n\n      this.pinMarker.setWorldPoint(worldPoint);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'meshPosition',\n    value: function meshPosition(fragId) {\n\n      var mesh = this.viewer.impl.getRenderProxy(this.viewer.model, fragId);\n\n      var pos = new THREE.Vector3();\n\n      pos.setFromMatrixPosition(mesh.matrixWorld);\n\n      return pos;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getClientOffset',\n    value: function getClientOffset(element) {\n\n      var x = 0;\n      var y = 0;\n\n      while (element) {\n\n        x += element.offsetLeft - element.scrollLeft + element.clientLeft;\n\n        y += element.offsetTop - element.scrollTop + element.clientTop;\n\n        element = element.offsetParent;\n      }\n\n      return { x: x, y: y };\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onMouseUp',\n    value: function onMouseUp(event) {\n\n      if (this.dragging) {\n\n        this.labelMarker.endDrag();\n\n        this.emit('drag.end', this);\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'remove',\n    value: function remove() {\n\n      this.pinMarker.remove();\n      this.leader.remove();\n      this.labelMarker.remove();\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'save',\n    value: function save() {\n\n      var screenPoint = {\n        x: this.startPoint.x + this.offset.x,\n        y: this.startPoint.y + this.offset.y\n      };\n\n      var state = {\n        worldPoint: this.initialWorldPoint,\n        bindToState: this.bindToState,\n        item: this.labelMarker.item,\n        occlusion: this.occlusion,\n        screenPoint: screenPoint,\n        endPoint: this.endPoint,\n        fragId: this.fragId,\n        dbId: this.dbId\n      };\n\n      return state;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }], [{\n    key: 'load',\n    value: function load(viewer, state) {\n\n      var leaderNote = new LeaderNote(viewer, state.screenPoint, state.dbId, state.fragId, state.worldPoint);\n\n      leaderNote.bindToState = state.bindToState;\n\n      leaderNote.occlusion = state.occlusion;\n\n      leaderNote.endPoint = state.endPoint;\n\n      leaderNote.setLabelItem(state.item);\n\n      leaderNote.update();\n\n      return leaderNote;\n    }\n  }]);\n\n  return LeaderNote;\n}(_EventsEmitter3.default);\n\nexports.default = LeaderNote;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,");
},107:function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar _GraphicMarker2 = __webpack_require__(63);\n\nvar _GraphicMarker3 = _interopRequireDefault(_GraphicMarker2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar PinMarker = function (_GraphicMarker) {\n  _inherits(PinMarker, _GraphicMarker);\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function PinMarker(viewer, worldPoint) {\n    _classCallCheck(this, PinMarker);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PinMarker).call(this, viewer.container, { x: 28, y: 28 }));\n\n    _this.svgId = _this.guid();\n\n    _this.setContent("<svg id=\\"" + _this.svgId + "\\"></svg>");\n\n    var snap = Snap($("#" + _this.svgId)[0]);\n\n    var circle = snap.paper.circle(14, 14, 12);\n\n    circle.attr({\n      fill: "#FF8888",\n      fillOpacity: 0.6,\n      stroke: "#FF0000",\n      strokeWidth: 3\n    });\n\n    _this.setVisible(true);\n    _this.activateLock3d(viewer);\n    _this.setWorldPoint(worldPoint);\n\n    _this.timeoutId = 0;\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(PinMarker, [{\n    key: "setVisible",\n    value: function setVisible(show) {\n      var _this2 = this;\n\n      if (show) {\n\n        clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(function () {\n          _get(Object.getPrototypeOf(PinMarker.prototype), "setVisible", _this2).call(_this2, true);\n        }, 400);\n      } else {\n\n        clearTimeout(this.timeoutId);\n        this.timeoutId = 0;\n        _get(Object.getPrototypeOf(PinMarker.prototype), "setVisible", this).call(this, false);\n      }\n    }\n  }]);\n\n  return PinMarker;\n}(_GraphicMarker3.default);\n\nexports.default = PinMarker;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvTGVhZGVyTm90ZS9WaWV3aW5nLkV4dGVuc2lvbi5NYXJrdXAzRC5QaW5NYXJrZXIuanM/ODYwYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7OztJQUVxQjs7Ozs7Ozs7QUFNbkIsV0FObUIsU0FNbkIsQ0FBWSxNQUFaLEVBQW9CLFVBQXBCLEVBQWdDOzBCQU5iLFdBTWE7O3VFQU5iLHNCQVFYLE9BQU8sU0FBUCxFQUFrQixFQUFDLEdBQUcsRUFBSCxFQUFPLEdBQUcsRUFBSCxLQUZGOztBQUk5QixVQUFLLEtBQUwsR0FBYSxNQUFLLElBQUwsRUFBYixDQUo4Qjs7QUFNOUIsVUFBSyxVQUFMLGdCQUNjLE1BQUssS0FBTCxjQURkLEVBTjhCOztBQVU5QixRQUFJLE9BQU8sS0FBSyxRQUFNLE1BQUssS0FBTCxDQUFOLENBQW9CLENBQXBCLENBQUwsQ0FBUCxDQVYwQjs7QUFZOUIsUUFBSSxTQUFTLEtBQUssS0FBTCxDQUFXLE1BQVgsQ0FBa0IsRUFBbEIsRUFBc0IsRUFBdEIsRUFBMEIsRUFBMUIsQ0FBVCxDQVowQjs7QUFjOUIsV0FBTyxJQUFQLENBQVk7QUFDVixZQUFNLFNBQU47QUFDQSxtQkFBYSxHQUFiO0FBQ0EsY0FBUSxTQUFSO0FBQ0EsbUJBQWEsQ0FBYjtLQUpGLEVBZDhCOztBQXFCOUIsVUFBSyxVQUFMLENBQWdCLElBQWhCLEVBckI4QjtBQXNCOUIsVUFBSyxjQUFMLENBQW9CLE1BQXBCLEVBdEI4QjtBQXVCOUIsVUFBSyxhQUFMLENBQW1CLFVBQW5CLEVBdkI4Qjs7QUF5QjlCLFVBQUssU0FBTCxHQUFpQixDQUFqQixDQXpCOEI7O0dBQWhDOzs7Ozs7OztlQU5tQjs7K0JBc0NSLE1BQU07OztBQUVmLFVBQUcsSUFBSCxFQUFROztBQUVOLHFCQUFhLEtBQUssU0FBTCxDQUFiLENBRk07QUFHTixhQUFLLFNBQUwsR0FBaUIsV0FBVyxZQUFJO0FBQzlCLHFDQTVDYSx5REE0Q0ksS0FBakIsQ0FEOEI7U0FBSixFQUV6QixHQUZjLENBQWpCLENBSE07T0FBUixNQU9JOztBQUVGLHFCQUFhLEtBQUssU0FBTCxDQUFiLENBRkU7QUFHRixhQUFLLFNBQUwsR0FBaUIsQ0FBakIsQ0FIRTtBQUlGLG1DQW5EZSxxREFtREUsTUFBakIsQ0FKRTtPQVBKOzs7O1NBeENpQiIsImZpbGUiOiIxMDcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR3JhcGhpY01hcmtlciBmcm9tICdHcmFwaGljTWFya2VyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGluTWFya2VyIGV4dGVuZHMgR3JhcGhpY01hcmtlciB7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy9cbiAgLy9cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgY29uc3RydWN0b3Iodmlld2VyLCB3b3JsZFBvaW50KSB7XG5cbiAgICBzdXBlcih2aWV3ZXIuY29udGFpbmVyLCB7eDogMjgsIHk6IDI4fSk7XG5cbiAgICB0aGlzLnN2Z0lkID0gdGhpcy5ndWlkKCk7XG5cbiAgICB0aGlzLnNldENvbnRlbnQoXG4gICAgICBgPHN2ZyBpZD1cIiR7dGhpcy5zdmdJZH1cIj48L3N2Zz5gXG4gICAgKTtcblxuICAgIHZhciBzbmFwID0gU25hcCgkKGAjJHt0aGlzLnN2Z0lkfWApWzBdKTtcblxuICAgIHZhciBjaXJjbGUgPSBzbmFwLnBhcGVyLmNpcmNsZSgxNCwgMTQsIDEyKTtcblxuICAgIGNpcmNsZS5hdHRyKHtcbiAgICAgIGZpbGw6IFwiI0ZGODg4OFwiLFxuICAgICAgZmlsbE9wYWNpdHk6IDAuNixcbiAgICAgIHN0cm9rZTogXCIjRkYwMDAwXCIsXG4gICAgICBzdHJva2VXaWR0aDogM1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZXRWaXNpYmxlKHRydWUpO1xuICAgIHRoaXMuYWN0aXZhdGVMb2NrM2Qodmlld2VyKTtcbiAgICB0aGlzLnNldFdvcmxkUG9pbnQod29ybGRQb2ludCk7XG5cbiAgICB0aGlzLnRpbWVvdXRJZCA9IDA7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzZXRWaXNpYmxlKHNob3cpIHtcblxuICAgIGlmKHNob3cpe1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICAgICAgdGhpcy50aW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpPT57XG4gICAgICAgIHN1cGVyLnNldFZpc2libGUodHJ1ZSk7XG4gICAgICB9LCA0MDApO1xuICAgIH1cbiAgICBlbHNle1xuXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0SWQpO1xuICAgICAgdGhpcy50aW1lb3V0SWQgPSAwO1xuICAgICAgc3VwZXIuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgfVxuICB9XG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvTGVhZGVyTm90ZS9WaWV3aW5nLkV4dGVuc2lvbi5NYXJrdXAzRC5QaW5NYXJrZXIuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9')},108:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _ViewingExtensionMarkup3D = __webpack_require__(106);\n\nvar _ViewingExtensionMarkup3D2 = _interopRequireDefault(_ViewingExtensionMarkup3D);\n\n__webpack_require__(221);\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar Markup3DTool = function (_EventsEmitter) {\n  _inherits(Markup3DTool, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////////\n  // Class constructor\n  //\n  /////////////////////////////////////////////////////////////////\n\n  function Markup3DTool(viewer) {\n    _classCallCheck(this, Markup3DTool);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Markup3DTool).call(this));\n\n    _this.viewer = viewer;\n\n    _this.onSelectionChangedHandler = function (e) {\n      return _this.onSelectionChanged(e);\n    };\n\n    _this.onExplodeHandler = function (e) {\n      return _this.onExplode(e);\n    };\n\n    _this.onStartDragHandler = function (e) {\n      return _this.onStartDrag(e);\n    };\n\n    _this.onEndDragHandler = function (e) {\n      return _this.onEndDrag(e);\n    };\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Tool names\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(Markup3DTool, [{\n    key: 'getNames',\n    value: function getNames() {\n\n      return [\"Viewing.Extension.Markup3D.Tool\"];\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Tool name\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getName',\n    value: function getName() {\n\n      return \"Viewing.Extension.Markup3D.Tool\";\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Activate Tool\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'activate',\n    value: function activate() {\n\n      this.MarkupCollection = {};\n\n      this.currentMarkup = null;\n\n      this.viewer.addEventListener(Autodesk.Viewing.AGGREGATE_SELECTION_CHANGED_EVENT, this.onSelectionChangedHandler);\n\n      this.viewer.addEventListener(Autodesk.Viewing.EXPLODE_CHANGE_EVENT, this.onExplodeHandler);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Deactivate tool\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n\n      this.currentMarkup = null;\n\n      this.viewer.removeEventListener(Autodesk.Viewing.SELECTION_CHANGED_EVENT, this.onSelectionChangedHandler);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleSingleClick',\n    value: function handleSingleClick(event, button) {\n\n      this.screenPoint = {\n        x: event.clientX,\n        y: event.clientY\n      };\n\n      //console.log('-------------------');\n      //console.log('Tool:handleSingleClick(event, button)');\n      //console.log(event);\n      //console.log(button);\n\n      return false;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'handleMouseMove',\n    value: function handleMouseMove(event) {\n\n      if (this.currentMarkup) {\n\n        this.currentMarkup.setLeaderEndPoint({\n          x: event.clientX,\n          y: event.clientY\n        });\n      }\n\n      return false;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // SELECTION_CHANGED_EVENT Handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onSelectionChanged',\n    value: function onSelectionChanged(event) {\n\n      //console.log(event)\n\n      if (event.selections.length) {\n\n        this.viewer.select([]);\n\n        if (this.currentMarkup) return;\n\n        var sel = event.selections[0];\n\n        var markup = new _ViewingExtensionMarkup3D2.default(this.viewer, this.screenPoint, sel.dbIdArray[0], sel.fragIdsArray[0]);\n\n        markup.on('drag.start', this.onStartDragHandler);\n\n        markup.on('drag.end', this.onEndDragHandler);\n\n        markup.startDrag();\n\n        this.MarkupCollection[markup.id] = markup;\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // EXPLODE_CHANGE_EVENT Handler\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onExplode',\n    value: function onExplode(event) {\n\n      for (var id in this.MarkupCollection) {\n\n        var markup = this.MarkupCollection[id];\n\n        markup.updateFragmentTransform();\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onStartDrag',\n    value: function onStartDrag(markup) {\n\n      this.currentMarkup = markup;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onEndDrag',\n    value: function onEndDrag(markup) {\n\n      this.currentMarkup = null;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getState',\n    value: function getState(viewerState) {\n\n      viewerState.Markup3D = {\n\n        MarkupCollection: []\n      };\n\n      for (var id in this.MarkupCollection) {\n\n        var markup = this.MarkupCollection[id];\n\n        if (markup.bindToState) {\n\n          viewerState.Markup3D.MarkupCollection.push(markup.save());\n        }\n      }\n    }\n\n    /////////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'restoreState',\n    value: function restoreState(viewerState, immediate) {\n      var _this2 = this;\n\n      for (var id in this.MarkupCollection) {\n\n        var markup = this.MarkupCollection[id];\n\n        if (markup.bindToState) {\n\n          markup.remove();\n          delete this.MarkupCollection[id];\n        }\n      }\n\n      if (viewerState.Markup3D) {\n\n        viewerState.Markup3D.MarkupCollection.forEach(function (state) {\n\n          var markup = _ViewingExtensionMarkup3D2.default.load(_this2.viewer, state);\n\n          _this2.MarkupCollection[markup.id] = markup;\n        });\n      }\n    }\n  }]);\n\n  return Markup3DTool;\n}(_EventsEmitter3.default);\n\nexports.default = Markup3DTool;//@ sourceMappingURL=data:application/json;base64,")},118:function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function($) {'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////\n// Create dropwdown menu\n//\n/////////////////////////////////////////////////////////////\n\n\nvar Dropdown = function (_EventsEmitter) {\n  _inherits(Dropdown, _EventsEmitter);\n\n  /////////////////////////////////////////////////////////////\n  // opts = {\n  //   container: viewer.container,\n  //   title: 'Material',\n  //   pos: {\n  //    top: 10,\n  //    left: 10\n  //   },\n  //   selectedItemIdx: 2,\n  //   menuItems: [\n  //    {\n  //      name: item1,\n  //      handler: function(){}\n  //    }\n  //   ]\n  // }\n  //\n  /////////////////////////////////////////////////////////////\n\n  function Dropdown(opts) {\n    _classCallCheck(this, Dropdown);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Dropdown).call(this));\n\n    _this.dropdownId = guid();\n\n    _this.buttonId = guid();\n\n    _this.labelId = guid();\n\n    _this.listId = guid();\n\n    var html = '\\n      <div id=\"' + _this.dropdownId + '\" class=\"dropdown lmv-dropdown\">\\n      <button id=\"' + _this.buttonId + '\" class=\"btn btn-default dropdown-toggle\"\\n        type=\"button\" \\n        data-toggle=\"dropdown\">\\n      <label id=\"' + _this.labelId + '\" class=\"label\">' + opts.title + '</label>\\n      <span class=\"caret\"></span>\\n      </button>\\n      <ul id=\"' + _this.listId + '\" class=\"dropdown-menu scrollable-menu\">\\n      </ul>\\n      </div>\\n    ';\n\n    $(opts.container).append(html);\n\n    $('#' + _this.dropdownId).css(opts.pos);\n\n    $('#' + _this.labelId).text(opts.title + ': ' + opts.menuItems[opts.selectedItemIdx || 0].name);\n\n    opts.menuItems.forEach(function (menuItem) {\n\n      var itemId = guid();\n\n      var itemHtml = '\\n        <li id=\"' + itemId + '\">\\n          <a href=\"\">' + menuItem.name + '</a>\\n        </li>';\n\n      $('#' + _this.listId).append(itemHtml);\n\n      $('#' + itemId).click(function (event) {\n\n        event.preventDefault();\n\n        var eventResult = _this.emit('item.selected', menuItem);\n\n        if (menuItem.handler) menuItem.handler();\n\n        $('#' + _this.labelId).text(opts.title + ': ' + menuItem.name);\n      });\n    });\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////\n  //\n  //\n  /////////////////////////////////////////////////////////////\n\n\n  _createClass(Dropdown, [{\n    key: 'setVisible',\n    value: function setVisible(show) {\n\n      $('#' + this.dropdownId).css({\n        display: show ? 'block' : 'none'\n      });\n    }\n\n    /////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setPosition',\n    value: function setPosition(pos) {\n\n      $('#' + this.dropdownId).css(opts.pos);\n    }\n\n    /////////////////////////////////////////////////////////////\n    //\n    //\n    /////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'open',\n    value: function open() {\n\n      $('#' + this.dropdownId).addClass('open');\n      $('#' + this.dropdownId).trigger('click.bs.dropdown');\n    }\n  }]);\n\n  return Dropdown;\n}(_EventsEmitter3.default);\n\n/////////////////////////////////////////////////////////////\n//\n//\n/////////////////////////////////////////////////////////////\n\n\nexports.default = Dropdown;\nfunction guid() {\n  var format = arguments.length <= 0 || arguments[0] === undefined ? 'xxxx-xxxx-xxxx' : arguments[0];\n\n\n  var d = new Date().getTime();\n\n  var guid = format.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c == 'x' ? r : r & 0x7 | 0x8).toString(16);\n  });\n\n  return guid;\n}\n\n/////////////////////////////////////////////////////////////\n//\n//\n/////////////////////////////////////////////////////////////\nvar css = '\\n  \\n  .lmv-dropdown {\\n    position: absolute;\\n  }\\n\\n  .lmv-dropdown .btn {\\n     background-color: #3C3F40;\\n     height: 13px;\\n     line-height: 0;\\n     vertical-align: top;\\n  }\\n\\n  .lmv-dropdown .label {\\n    font: normal 14px Times New Roman;\\n  }\\n  \\n  .scrollable-menu {\\n    height: auto;\\n    max-height: 300px;\\n    overflow-x: hidden;\\n    overflow-y: scroll;\\n  }\\n';\n\n$('<style type=\"text/css\">' + css + '</style>').appendTo('head');\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,");
},119:function(module,exports,__webpack_require__){eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////////\n// PointTracker: Tracks a 3D point in world coordinates\n// and returns 2D screen coordinates\n// By Philippe Leefsma, April 2016\n/////////////////////////////////////////////////////////////////\n\n\nvar PointTracker = function (_EventsEmitter) {\n  _inherits(PointTracker, _EventsEmitter);\n\n  function PointTracker(viewer) {\n    _classCallCheck(this, PointTracker);\n\n    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PointTracker).call(this));\n\n    _this._viewer = viewer;\n\n    _this.worldPoint = new THREE.Vector3();\n\n    //used to bind 'this' inside event hander\n    _this.cameraChangedHandler = function (event) {\n      return _this.onCameraChanged(event);\n    };\n    return _this;\n  }\n\n  /////////////////////////////////////////////////////////////////\n  // Set screenpoint\n  //\n  /////////////////////////////////////////////////////////////////\n\n\n  _createClass(PointTracker, [{\n    key: 'setScreenPoint',\n    value: function setScreenPoint(screenPoint) {\n\n      var n = this.normalize(screenPoint);\n\n      this.worldPoint = this._viewer.utilities.getHitPoint(n.x, n.y);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Get ScreenPoint\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getScreenPoint',\n    value: function getScreenPoint() {\n\n      var screenPoint = this.worldToScreen(this.worldPoint, this._viewer.navigation.getCamera());\n\n      return screenPoint;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Set worldpoint\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'setWorldPoint',\n    value: function setWorldPoint(worldPoint) {\n\n      this.worldPoint = worldPoint;\n\n      var screenPoint = this.worldToScreen(this.worldPoint, this._viewer.navigation.getCamera());\n\n      this.emit('modified', screenPoint);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Get World Point\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'getWorldPoint',\n    value: function getWorldPoint() {\n\n      return this.worldPoint;\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Activate tracking\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'activate',\n    value: function activate() {\n\n      this._viewer.addEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.cameraChangedHandler);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // Deactivate tracking\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'deactivate',\n    value: function deactivate() {\n\n      this._viewer.removeEventListener(Autodesk.Viewing.CAMERA_CHANGE_EVENT, this.cameraChangedHandler);\n    }\n\n    /////////////////////////////////////////////////////////////////\n    // camera change callback\n    //\n    /////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'onCameraChanged',\n    value: function onCameraChanged(event) {\n\n      var screenPoint = this.worldToScreen(this.worldPoint, this._viewer.navigation.getCamera());\n\n      this.emit('modified', screenPoint);\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // Normalize screen coordinates\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'normalize',\n    value: function normalize(screenPoint) {\n\n      var viewport = this._viewer.navigation.getScreenViewport();\n\n      return {\n        x: (screenPoint.x - viewport.left) / viewport.width,\n        y: (screenPoint.y - viewport.top) / viewport.height\n      };\n    }\n\n    ///////////////////////////////////////////////////////////////////////////\n    // world -> screen coords conversion\n    //\n    ///////////////////////////////////////////////////////////////////////////\n\n  }, {\n    key: 'worldToScreen',\n    value: function worldToScreen(worldPoint, camera) {\n\n      var p = new THREE.Vector4();\n\n      p.x = worldPoint.x;\n      p.y = worldPoint.y;\n      p.z = worldPoint.z;\n      p.w = 1;\n\n      p.applyMatrix4(camera.matrixWorldInverse);\n      p.applyMatrix4(camera.projectionMatrix);\n\n      // Don't want to mirror values with negative z (behind camera)\n      // if camera is inside the bounding box,\n      // better to throw markers to the screen sides.\n      if (p.w > 0) {\n        p.x /= p.w;\n        p.y /= p.w;\n        p.z /= p.w;\n      }\n\n      // This one is multiplying by width/2 and â€“height/2,\n      // and offsetting by canvas location\n      var point = this._viewer.impl.viewportToClient(p.x, p.y);\n\n      // snap to the center of the pixel\n      point.x = Math.floor(point.x) + 0.5;\n      point.y = Math.floor(point.y) + 0.5;\n\n      return point;\n    }\n  }]);\n\n  return PointTracker;\n}(_EventsEmitter3.default);\n\nexports.default = PointTracker;//@ sourceMappingURL=data:application/json;base64,")},120:function(module,exports){eval('"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\n///////////////////////////////////////////////////////////////////////////\n// A stopwatch\n//\n///////////////////////////////////////////////////////////////////////////\n\nvar Stopwatch = function () {\n  function Stopwatch() {\n    _classCallCheck(this, Stopwatch);\n\n    this._lastTime = performance.now();\n  }\n\n  _createClass(Stopwatch, [{\n    key: "start",\n    value: function start() {\n\n      this._lastTime = performance.now();\n    }\n  }, {\n    key: "getElapsedMs",\n    value: function getElapsedMs() {\n\n      var time = performance.now();\n\n      var elapsedMs = time - this._lastTime;\n\n      this._lastTime = time;\n\n      return elapsedMs;\n    }\n  }]);\n\n  return Stopwatch;\n}();\n\nexports.default = Stopwatch;//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvU3RvcHdhdGNoLmpzPzhlMmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0lBSXFCO0FBRW5CLFdBRm1CLFNBRW5CLEdBQWE7MEJBRk0sV0FFTjs7QUFFWixTQUFLLFNBQUwsR0FBaUIsWUFBWSxHQUFaLEVBQWpCLENBRlk7R0FBYjs7ZUFGbUI7OzRCQU9aOztBQUVMLFdBQUssU0FBTCxHQUFpQixZQUFZLEdBQVosRUFBakIsQ0FGSzs7OzttQ0FLTzs7QUFFWixVQUFJLE9BQU8sWUFBWSxHQUFaLEVBQVAsQ0FGUTs7QUFJWixVQUFJLFlBQVksT0FBTyxLQUFLLFNBQUwsQ0FKWDs7QUFNWixXQUFLLFNBQUwsR0FBaUIsSUFBakIsQ0FOWTs7QUFRWixhQUFPLFNBQVAsQ0FSWTs7OztTQVpLIiwiZmlsZSI6IjEyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQSBzdG9wd2F0Y2hcbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3B3YXRjaCB7XG5cbiAgY29uc3RydWN0b3IoKXtcblxuICAgdGhpcy5fbGFzdFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgfVxuXG4gIHN0YXJ0KCl7XG5cbiAgICB0aGlzLl9sYXN0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICB9XG5cbiAgZ2V0RWxhcHNlZE1zKCl7XG5cbiAgICB2YXIgdGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuXG4gICAgdmFyIGVsYXBzZWRNcyA9IHRpbWUgLSB0aGlzLl9sYXN0VGltZTtcblxuICAgIHRoaXMuX2xhc3RUaW1lID0gdGltZTtcblxuICAgIHJldHVybiBlbGFwc2VkTXM7XG4gIH1cbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy91dGlscy9TdG9wd2F0Y2guanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9')},121:function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function($) {"use strict";\n\nObject.defineProperty(exports, "__esModule", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _EventsEmitter2 = __webpack_require__(12);\n\nvar _EventsEmitter3 = _interopRequireDefault(_EventsEmitter2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /////////////////////////////////////////////////////////////\n// switch button\n//\n/////////////////////////////////////////////////////////////\n\n\nvar SwitchButton = function (_EventsEmitter) {\n  _inherits(SwitchButton, _EventsEmitter);\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n  function SwitchButton(container) {\n    var checked = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];\n\n    _classCallCheck(this, SwitchButton);\n\n    var _this2 = _possibleConstructorReturn(this, Object.getPrototypeOf(SwitchButton).call(this));\n\n    addCSS();\n\n    var _this = _this2;\n\n    var labelId = guid();\n\n    _this2._inputId = guid();\n\n    var html = "\\n        <div class=\\"onoffswitch\\">\\n          <input id=\\"" + _this2._inputId + "\\" type=\\"checkbox\\" name=\\"onoffswitch\\"\\n            class=\\"onoffswitch-checkbox\\" " + (checked ? "checked" : "") + ">\\n          <label id=\\"" + labelId + "\\" class=\\"onoffswitch-label\\">\\n            <span class=\\"onoffswitch-inner\\"></span>\\n            <span class=\\"onoffswitch-switch\\"></span>\\n          </label>\\n        </div>\\n      ";\n\n    $(container).append(html);\n\n    $(\'#\' + labelId).click(function (e) {\n\n      var $input = $(\'#\' + _this2._inputId)[0];\n\n      $input.checked = !$input.checked;\n\n      _this.emit(\'checked\', $input.checked);\n    });\n    return _this2;\n  }\n\n  ///////////////////////////////////////////////////////////////////\n  //\n  //\n  ///////////////////////////////////////////////////////////////////\n\n\n  _createClass(SwitchButton, [{\n    key: "checked",\n    value: function checked() {\n\n      return $(\'#\' + this._inputId)[0].checked;\n    }\n  }]);\n\n  return SwitchButton;\n}(_EventsEmitter3.default);\n\n/////////////////////////////////////////////////////////////\n//\n//\n/////////////////////////////////////////////////////////////\n\n\nexports.default = SwitchButton;\nfunction guid() {\n  var format = arguments.length <= 0 || arguments[0] === undefined ? \'xxxx-xxxx-xxxx\' : arguments[0];\n\n\n  var d = new Date().getTime();\n\n  var guid = format.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c == \'x\' ? r : r & 0x7 | 0x8).toString(16);\n  });\n\n  return guid;\n}\n\n/////////////////////////////////////////////////////////////\n// https://proto.io/freebies/onoff/\n//\n/////////////////////////////////////////////////////////////\nfunction addCSS(id) {\n\n  var css = "\\n\\n  .onoffswitch {\\n    position: relative; width: 50px;\\n    -webkit-user-select:none; -moz-user-select:none; -ms-user-select: none;\\n  }\\n  .onoffswitch-checkbox {\\n    display: none;\\n  }\\n  .onoffswitch-label {\\n    display: block; overflow: hidden; cursor: pointer;\\n    border: 2px solid #999999; border-radius: 8px;\\n  }\\n  .onoffswitch-inner {\\n    display: block; width: 200%; margin-left: -100%;\\n    transition: margin 0.3s ease-in 0s;\\n  }\\n  .onoffswitch-inner:before, .onoffswitch-inner:after {\\n    display: block; float: left; width: 50%; height: 15px; padding: 0; line-height: 15px;\\n    font-size: 10px; color: white; font-family: Trebuchet, Arial, sans-serif; font-weight: bold;\\n    box-sizing: border-box;\\n  }\\n  .onoffswitch-inner:before {\\n    content: \\"ON\\";\\n    padding-left: 10px;\\n    background-color: #0E8200; color: #FFFFFF;\\n  }\\n  .onoffswitch-inner:after {\\n    content: \\"OFF\\";\\n    padding-right: 10px;\\n    background-color: #E82525; color: #FFFFFF;\\n    text-align: right;\\n  }\\n  .onoffswitch-switch {\\n    display: block; width: 11px; margin: 2px;\\n    background: #FFFFFF;\\n    position: absolute; top: 0; bottom: 0;\\n    right: 31px;\\n    border: 2px solid #999999; border-radius: 8px;\\n    transition: all 0.3s ease-in 0s;\\n  }\\n  .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-inner {\\n    margin-left: 0;\\n  }\\n  .onoffswitch-checkbox:checked + .onoffswitch-label .onoffswitch-switch {\\n    right: 0px;\\n  }\\n  ";\n\n  $(\'<style type="text/css">\' + css + \'</style>\').appendTo(\'head\');\n}\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvU3dpdGNoQnV0dG9uLmpzPzQyYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFJQTs7Ozs7Ozs7Ozs7Ozs7OztJQUVxQjs7Ozs7Ozs7QUFNbkIsV0FObUIsWUFNbkIsQ0FBWSxTQUFaLEVBQXNDO1FBQWYsZ0VBQVUsb0JBQUs7OzBCQU5uQixjQU1tQjs7d0VBTm5CLDBCQU1tQjs7QUFJcEMsYUFKb0M7O0FBTXBDLFFBQUksY0FBSixDQU5vQzs7QUFRcEMsUUFBSSxVQUFVLE1BQVYsQ0FSZ0M7O0FBVXBDLFdBQUssUUFBTCxHQUFnQixNQUFoQixDQVZvQzs7QUFZcEMsUUFBSSx5RUFFZSxPQUFLLFFBQUwsK0ZBQ29CLFVBQVEsU0FBUixHQUFrQixFQUFsQixrQ0FDcEIsc01BSmYsQ0FaZ0M7O0FBdUJwQyxNQUFFLFNBQUYsRUFBYSxNQUFiLENBQW9CLElBQXBCLEVBdkJvQzs7QUF5QnBDLE1BQUUsTUFBTSxPQUFOLENBQUYsQ0FBaUIsS0FBakIsQ0FBdUIsVUFBQyxDQUFELEVBQUs7O0FBRTFCLFVBQUksU0FBUyxFQUFFLE1BQU0sT0FBSyxRQUFMLENBQVIsQ0FBdUIsQ0FBdkIsQ0FBVCxDQUZzQjs7QUFJMUIsYUFBTyxPQUFQLEdBQWlCLENBQUMsT0FBTyxPQUFQLENBSlE7O0FBTTFCLFlBQU0sSUFBTixDQUFXLFNBQVgsRUFBc0IsT0FBTyxPQUFQLENBQXRCLENBTjBCO0tBQUwsQ0FBdkIsQ0F6Qm9DOztHQUF0Qzs7Ozs7Ozs7ZUFObUI7OzhCQTZDVDs7QUFFUixhQUFRLEVBQUUsTUFBTSxLQUFLLFFBQUwsQ0FBUixDQUF1QixDQUF2QixFQUEwQixPQUExQixDQUZBOzs7O1NBN0NTOzs7Ozs7Ozs7O0FBdURyQixTQUFTLElBQVQsR0FBdUM7TUFBekIsK0RBQU8sZ0NBQWtCOzs7QUFFckMsTUFBSSxJQUFJLElBQUksSUFBSixHQUFXLE9BQVgsRUFBSixDQUZpQzs7QUFJckMsTUFBSSxPQUFPLE9BQU8sT0FBUCxDQUNULE9BRFMsRUFFVCxVQUFVLENBQVYsRUFBYTtBQUNYLFFBQUksSUFBSSxDQUFDLElBQUksS0FBSyxNQUFMLEtBQWdCLEVBQWhCLENBQUwsR0FBMkIsRUFBM0IsR0FBZ0MsQ0FBaEMsQ0FERztBQUVYLFFBQUksS0FBSyxLQUFMLENBQVcsSUFBSSxFQUFKLENBQWYsQ0FGVztBQUdYLFdBQU8sQ0FBQyxLQUFLLEdBQUwsR0FBVyxDQUFYLEdBQWdCLElBQUksR0FBSixHQUFVLEdBQVYsQ0FBakIsQ0FBaUMsUUFBakMsQ0FBMEMsRUFBMUMsQ0FBUCxDQUhXO0dBQWIsQ0FGRSxDQUppQzs7QUFZckMsU0FBTyxJQUFQLENBWnFDO0NBQXZDOzs7Ozs7QUFtQkEsU0FBUyxNQUFULENBQWdCLEVBQWhCLEVBQW9COztBQUVsQixNQUFJLDg4Q0FBSixDQUZrQjs7QUFtRGxCLElBQUUsNEJBQTRCLEdBQTVCLEdBQWtDLFVBQWxDLENBQUYsQ0FBZ0QsUUFBaEQsQ0FBeUQsTUFBekQsRUFuRGtCIiwiZmlsZSI6IjEyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIHN3aXRjaCBidXR0b25cbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5pbXBvcnQgRXZlbnRzRW1pdHRlciBmcm9tICdFdmVudHNFbWl0dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3dpdGNoQnV0dG9uIGV4dGVuZHMgRXZlbnRzRW1pdHRlciB7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGNvbnN0cnVjdG9yKGNvbnRhaW5lciwgY2hlY2tlZCA9IHRydWUpe1xuXG4gICAgc3VwZXIoKTtcblxuICAgIGFkZENTUygpO1xuXG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHZhciBsYWJlbElkID0gZ3VpZCgpO1xuXG4gICAgdGhpcy5faW5wdXRJZCA9IGd1aWQoKTtcblxuICAgIHZhciBodG1sID0gYFxuICAgICAgICA8ZGl2IGNsYXNzPVwib25vZmZzd2l0Y2hcIj5cbiAgICAgICAgICA8aW5wdXQgaWQ9XCIke3RoaXMuX2lucHV0SWR9XCIgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cIm9ub2Zmc3dpdGNoXCJcbiAgICAgICAgICAgIGNsYXNzPVwib25vZmZzd2l0Y2gtY2hlY2tib3hcIiAke2NoZWNrZWQ/XCJjaGVja2VkXCI6XCJcIn0+XG4gICAgICAgICAgPGxhYmVsIGlkPVwiJHtsYWJlbElkfVwiIGNsYXNzPVwib25vZmZzd2l0Y2gtbGFiZWxcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwib25vZmZzd2l0Y2gtaW5uZXJcIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm9ub2Zmc3dpdGNoLXN3aXRjaFwiPjwvc3Bhbj5cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIGA7XG5cbiAgICAkKGNvbnRhaW5lcikuYXBwZW5kKGh0bWwpO1xuXG4gICAgJCgnIycgKyBsYWJlbElkKS5jbGljaygoZSk9PntcblxuICAgICAgdmFyICRpbnB1dCA9ICQoJyMnICsgdGhpcy5faW5wdXRJZClbMF07XG5cbiAgICAgICRpbnB1dC5jaGVja2VkID0gISRpbnB1dC5jaGVja2VkO1xuXG4gICAgICBfdGhpcy5lbWl0KCdjaGVja2VkJywgJGlucHV0LmNoZWNrZWQpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvL1xuICAvL1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIGNoZWNrZWQoKSB7XG5cbiAgICByZXR1cm4gICQoJyMnICsgdGhpcy5faW5wdXRJZClbMF0uY2hlY2tlZDtcbiAgfVxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vL1xuLy9cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmZ1bmN0aW9uIGd1aWQoZm9ybWF0PSd4eHh4LXh4eHgteHh4eCcpIHtcblxuICB2YXIgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gIHZhciBndWlkID0gZm9ybWF0LnJlcGxhY2UoXG4gICAgL1t4eV0vZyxcbiAgICBmdW5jdGlvbiAoYykge1xuICAgICAgdmFyIHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG4gICAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgICAgcmV0dXJuIChjID09ICd4JyA/IHIgOiAociAmIDB4NyB8IDB4OCkpLnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcblxuICByZXR1cm4gZ3VpZDtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gaHR0cHM6Ly9wcm90by5pby9mcmVlYmllcy9vbm9mZi9cbi8vXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5mdW5jdGlvbiBhZGRDU1MoaWQpIHtcblxuICB2YXIgY3NzID0gYFxuXG4gIC5vbm9mZnN3aXRjaCB7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB3aWR0aDogNTBweDtcbiAgICAtd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7IC1tb3otdXNlci1zZWxlY3Q6bm9uZTsgLW1zLXVzZXItc2VsZWN0OiBub25lO1xuICB9XG4gIC5vbm9mZnN3aXRjaC1jaGVja2JveCB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAub25vZmZzd2l0Y2gtbGFiZWwge1xuICAgIGRpc3BsYXk6IGJsb2NrOyBvdmVyZmxvdzogaGlkZGVuOyBjdXJzb3I6IHBvaW50ZXI7XG4gICAgYm9yZGVyOiAycHggc29saWQgIzk5OTk5OTsgYm9yZGVyLXJhZGl1czogOHB4O1xuICB9XG4gIC5vbm9mZnN3aXRjaC1pbm5lciB7XG4gICAgZGlzcGxheTogYmxvY2s7IHdpZHRoOiAyMDAlOyBtYXJnaW4tbGVmdDogLTEwMCU7XG4gICAgdHJhbnNpdGlvbjogbWFyZ2luIDAuM3MgZWFzZS1pbiAwcztcbiAgfVxuICAub25vZmZzd2l0Y2gtaW5uZXI6YmVmb3JlLCAub25vZmZzd2l0Y2gtaW5uZXI6YWZ0ZXIge1xuICAgIGRpc3BsYXk6IGJsb2NrOyBmbG9hdDogbGVmdDsgd2lkdGg6IDUwJTsgaGVpZ2h0OiAxNXB4OyBwYWRkaW5nOiAwOyBsaW5lLWhlaWdodDogMTVweDtcbiAgICBmb250LXNpemU6IDEwcHg7IGNvbG9yOiB3aGl0ZTsgZm9udC1mYW1pbHk6IFRyZWJ1Y2hldCwgQXJpYWwsIHNhbnMtc2VyaWY7IGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIH1cbiAgLm9ub2Zmc3dpdGNoLWlubmVyOmJlZm9yZSB7XG4gICAgY29udGVudDogXCJPTlwiO1xuICAgIHBhZGRpbmctbGVmdDogMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMEU4MjAwOyBjb2xvcjogI0ZGRkZGRjtcbiAgfVxuICAub25vZmZzd2l0Y2gtaW5uZXI6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiT0ZGXCI7XG4gICAgcGFkZGluZy1yaWdodDogMTBweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRTgyNTI1OyBjb2xvcjogI0ZGRkZGRjtcbiAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgfVxuICAub25vZmZzd2l0Y2gtc3dpdGNoIHtcbiAgICBkaXNwbGF5OiBibG9jazsgd2lkdGg6IDExcHg7IG1hcmdpbjogMnB4O1xuICAgIGJhY2tncm91bmQ6ICNGRkZGRkY7XG4gICAgcG9zaXRpb246IGFic29sdXRlOyB0b3A6IDA7IGJvdHRvbTogMDtcbiAgICByaWdodDogMzFweDtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjOTk5OTk5OyBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgdHJhbnNpdGlvbjogYWxsIDAuM3MgZWFzZS1pbiAwcztcbiAgfVxuICAub25vZmZzd2l0Y2gtY2hlY2tib3g6Y2hlY2tlZCArIC5vbm9mZnN3aXRjaC1sYWJlbCAub25vZmZzd2l0Y2gtaW5uZXIge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG4gIC5vbm9mZnN3aXRjaC1jaGVja2JveDpjaGVja2VkICsgLm9ub2Zmc3dpdGNoLWxhYmVsIC5vbm9mZnN3aXRjaC1zd2l0Y2gge1xuICAgIHJpZ2h0OiAwcHg7XG4gIH1cbiAgYDtcblxuICAkKCc8c3R5bGUgdHlwZT1cInRleHQvY3NzXCI+JyArIGNzcyArICc8L3N0eWxlPicpLmFwcGVuZFRvKCdoZWFkJyk7XG59XG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvdXRpbHMvU3dpdGNoQnV0dG9uLmpzXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==');
},125:function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(7)();\n// imports\n\n\n// module\nexports.push([module.id, ".markup3D.leader-container{pointer-events:none;position:absolute;height:100%;width:100%;left:0;top:0}svg.markup3D{width:100%;height:100%}.markup3D .btn-ctrl{width:46px;height:6px;line-height:0;vertical-align:top}.markup3D .btn-span{margin-right:0;line-height:.3;top:1px}", ""]);\n\n// exports\n//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QuY3NzPzQxYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7O0FBR0E7QUFDQSxxREFBcUQsb0JBQW9CLGtCQUFrQixZQUFZLFdBQVcsT0FBTyxNQUFNLGFBQWEsV0FBVyxZQUFZLG9CQUFvQixXQUFXLFdBQVcsY0FBYyxtQkFBbUIsb0JBQW9CLGVBQWUsZUFBZSxRQUFROztBQUV4UyIsImZpbGUiOiIxMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5tYXJrdXAzRC5sZWFkZXItY29udGFpbmVye3BvaW50ZXItZXZlbnRzOm5vbmU7cG9zaXRpb246YWJzb2x1dGU7aGVpZ2h0OjEwMCU7d2lkdGg6MTAwJTtsZWZ0OjA7dG9wOjB9c3ZnLm1hcmt1cDNEe3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9Lm1hcmt1cDNEIC5idG4tY3RybHt3aWR0aDo0NnB4O2hlaWdodDo2cHg7bGluZS1oZWlnaHQ6MDt2ZXJ0aWNhbC1hbGlnbjp0b3B9Lm1hcmt1cDNEIC5idG4tc3BhbnttYXJnaW4tcmlnaHQ6MDtsaW5lLWhlaWdodDouMzt0b3A6MXB4fVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QuY3NzXG4gKiogbW9kdWxlIGlkID0gMTI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9')},144:function(module,exports,__webpack_require__){eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_LOCAL_MODULE_0__;var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*** IMPORTS FROM imports-loader ***/\n(function() {\nvar fix = module.exports=0;\n\n// Snap.svg 0.4.0\n// \n// Copyright (c) 2013 – 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// \n// build: 2015-04-07\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n// ┌────────────────────────────────────────────────────────────┐ \\\\\n// │ Eve 0.4.2 - JavaScript Events Library                      │ \\\\\n// ├────────────────────────────────────────────────────────────┤ \\\\\n// │ Author Dmitry Baranovskiy (http://dmitry.baranovskiy.com/) │ \\\\\n// └────────────────────────────────────────────────────────────┘ \\\\\n\n(function (glob) {\n    var version = "0.4.2",\n        has = "hasOwnProperty",\n        separator = /[\\.\\/]/,\n        comaseparator = /\\s*,\\s*/,\n        wildcard = "*",\n        fun = function () {},\n        numsort = function (a, b) {\n            return a - b;\n        },\n        current_event,\n        stop,\n        events = {n: {}},\n        firstDefined = function () {\n            for (var i = 0, ii = this.length; i < ii; i++) {\n                if (typeof this[i] != "undefined") {\n                    return this[i];\n                }\n            }\n        },\n        lastDefined = function () {\n            var i = this.length;\n            while (--i) {\n                if (typeof this[i] != "undefined") {\n                    return this[i];\n                }\n            }\n        },\n    /*\\\n     * eve\n     [ method ]\n\n     * Fires event with given `name`, given scope and other parameters.\n\n     > Arguments\n\n     - name (string) name of the *event*, dot (`.`) or slash (`/`) separated\n     - scope (object) context for the event handlers\n     - varargs (...) the rest of arguments will be sent to event handlers\n\n     = (object) array of returned values from the listeners. Array has two methods `.firstDefined()` and `.lastDefined()` to get first or last not `undefined` value.\n    \\*/\n        eve = function (name, scope) {\n            name = String(name);\n            var e = events,\n                oldstop = stop,\n                args = Array.prototype.slice.call(arguments, 2),\n                listeners = eve.listeners(name),\n                z = 0,\n                f = false,\n                l,\n                indexed = [],\n                queue = {},\n                out = [],\n                ce = current_event,\n                errors = [];\n            out.firstDefined = firstDefined;\n            out.lastDefined = lastDefined;\n            current_event = name;\n            stop = 0;\n            for (var i = 0, ii = listeners.length; i < ii; i++) if ("zIndex" in listeners[i]) {\n                indexed.push(listeners[i].zIndex);\n                if (listeners[i].zIndex < 0) {\n                    queue[listeners[i].zIndex] = listeners[i];\n                }\n            }\n            indexed.sort(numsort);\n            while (indexed[z] < 0) {\n                l = queue[indexed[z++]];\n                out.push(l.apply(scope, args));\n                if (stop) {\n                    stop = oldstop;\n                    return out;\n                }\n            }\n            for (i = 0; i < ii; i++) {\n                l = listeners[i];\n                if ("zIndex" in l) {\n                    if (l.zIndex == indexed[z]) {\n                        out.push(l.apply(scope, args));\n                        if (stop) {\n                            break;\n                        }\n                        do {\n                            z++;\n                            l = queue[indexed[z]];\n                            l && out.push(l.apply(scope, args));\n                            if (stop) {\n                                break;\n                            }\n                        } while (l)\n                    } else {\n                        queue[l.zIndex] = l;\n                    }\n                } else {\n                    out.push(l.apply(scope, args));\n                    if (stop) {\n                        break;\n                    }\n                }\n            }\n            stop = oldstop;\n            current_event = ce;\n            return out;\n        };\n        // Undocumented. Debug only.\n        eve._events = events;\n    /*\\\n     * eve.listeners\n     [ method ]\n\n     * Internal method which gives you array of all event handlers that will be triggered by the given `name`.\n\n     > Arguments\n\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated\n\n     = (array) array of event handlers\n    \\*/\n    eve.listeners = function (name) {\n        var names = name.split(separator),\n            e = events,\n            item,\n            items,\n            k,\n            i,\n            ii,\n            j,\n            jj,\n            nes,\n            es = [e],\n            out = [];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            nes = [];\n            for (j = 0, jj = es.length; j < jj; j++) {\n                e = es[j].n;\n                items = [e[names[i]], e[wildcard]];\n                k = 2;\n                while (k--) {\n                    item = items[k];\n                    if (item) {\n                        nes.push(item);\n                        out = out.concat(item.f || []);\n                    }\n                }\n            }\n            es = nes;\n        }\n        return out;\n    };\n    \n    /*\\\n     * eve.on\n     [ method ]\n     **\n     * Binds given event handler with a given name. You can use wildcards “`*`” for the names:\n     | eve.on("*.under.*", f);\n     | eve("mouse.under.floor"); // triggers f\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) returned function accepts a single numeric parameter that represents z-index of the handler. It is an optional feature and only used when you need to ensure that some subset of handlers will be invoked in a given order, despite of the order of assignment. \n     > Example:\n     | eve.on("mouse", eatIt)(2);\n     | eve.on("mouse", scream);\n     | eve.on("mouse", catchIt)(1);\n     * This will ensure that `catchIt` function will be called before `eatIt`.\n     *\n     * If you want to put your handler before non-indexed handlers, specify a negative value.\n     * Note: I assume most of the time you don’t need to worry about z-index, but it’s nice to have this feature “just in case”.\n    \\*/\n    eve.on = function (name, f) {\n        name = String(name);\n        if (typeof f != "function") {\n            return function () {};\n        }\n        var names = name.split(comaseparator);\n        for (var i = 0, ii = names.length; i < ii; i++) {\n            (function (name) {\n                var names = name.split(separator),\n                    e = events,\n                    exist;\n                for (var i = 0, ii = names.length; i < ii; i++) {\n                    e = e.n;\n                    e = e.hasOwnProperty(names[i]) && e[names[i]] || (e[names[i]] = {n: {}});\n                }\n                e.f = e.f || [];\n                for (i = 0, ii = e.f.length; i < ii; i++) if (e.f[i] == f) {\n                    exist = true;\n                    break;\n                }\n                !exist && e.f.push(f);\n            }(names[i]));\n        }\n        return function (zIndex) {\n            if (+zIndex == +zIndex) {\n                f.zIndex = +zIndex;\n            }\n        };\n    };\n    /*\\\n     * eve.f\n     [ method ]\n     **\n     * Returns function that will fire given event with optional arguments.\n     * Arguments that will be passed to the result function will be also\n     * concated to the list of final arguments.\n     | el.onclick = eve.f("click", 1, 2);\n     | eve.on("click", function (a, b, c) {\n     |     console.log(a, b, c); // 1, 2, [event object]\n     | });\n     > Arguments\n     - event (string) event name\n     - varargs (…) and any other arguments\n     = (function) possible event handler function\n    \\*/\n    eve.f = function (event) {\n        var attrs = [].slice.call(arguments, 1);\n        return function () {\n            eve.apply(null, [event, null].concat(attrs).concat([].slice.call(arguments, 0)));\n        };\n    };\n    /*\\\n     * eve.stop\n     [ method ]\n     **\n     * Is used inside an event handler to stop the event, preventing any subsequent listeners from firing.\n    \\*/\n    eve.stop = function () {\n        stop = 1;\n    };\n    /*\\\n     * eve.nt\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     > Arguments\n     **\n     - subname (string) #optional subname of the event\n     **\n     = (string) name of the event, if `subname` is not specified\n     * or\n     = (boolean) `true`, if current event’s name contains `subname`\n    \\*/\n    eve.nt = function (subname) {\n        if (subname) {\n            return new RegExp("(?:\\\\.|\\\\/|^)" + subname + "(?:\\\\.|\\\\/|$)").test(current_event);\n        }\n        return current_event;\n    };\n    /*\\\n     * eve.nts\n     [ method ]\n     **\n     * Could be used inside event handler to figure out actual name of the event.\n     **\n     **\n     = (array) names of the event\n    \\*/\n    eve.nts = function () {\n        return current_event.split(separator);\n    };\n    /*\\\n     * eve.off\n     [ method ]\n     **\n     * Removes given function from the list of event listeners assigned to given name.\n     * If no arguments specified all the events will be cleared.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n    \\*/\n    /*\\\n     * eve.unbind\n     [ method ]\n     **\n     * See @eve.off\n    \\*/\n    eve.off = eve.unbind = function (name, f) {\n        if (!name) {\n            eve._events = events = {n: {}};\n            return;\n        }\n        var names = name.split(comaseparator);\n        if (names.length > 1) {\n            for (var i = 0, ii = names.length; i < ii; i++) {\n                eve.off(names[i], f);\n            }\n            return;\n        }\n        names = name.split(separator);\n        var e,\n            key,\n            splice,\n            i, ii, j, jj,\n            cur = [events];\n        for (i = 0, ii = names.length; i < ii; i++) {\n            for (j = 0; j < cur.length; j += splice.length - 2) {\n                splice = [j, 1];\n                e = cur[j].n;\n                if (names[i] != wildcard) {\n                    if (e[names[i]]) {\n                        splice.push(e[names[i]]);\n                    }\n                } else {\n                    for (key in e) if (e[has](key)) {\n                        splice.push(e[key]);\n                    }\n                }\n                cur.splice.apply(cur, splice);\n            }\n        }\n        for (i = 0, ii = cur.length; i < ii; i++) {\n            e = cur[i];\n            while (e.n) {\n                if (f) {\n                    if (e.f) {\n                        for (j = 0, jj = e.f.length; j < jj; j++) if (e.f[j] == f) {\n                            e.f.splice(j, 1);\n                            break;\n                        }\n                        !e.f.length && delete e.f;\n                    }\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        var funcs = e.n[key].f;\n                        for (j = 0, jj = funcs.length; j < jj; j++) if (funcs[j] == f) {\n                            funcs.splice(j, 1);\n                            break;\n                        }\n                        !funcs.length && delete e.n[key].f;\n                    }\n                } else {\n                    delete e.f;\n                    for (key in e.n) if (e.n[has](key) && e.n[key].f) {\n                        delete e.n[key].f;\n                    }\n                }\n                e = e.n;\n            }\n        }\n    };\n    /*\\\n     * eve.once\n     [ method ]\n     **\n     * Binds given event handler with a given name to only run once then unbind itself.\n     | eve.once("login", f);\n     | eve("login"); // triggers f\n     | eve("login"); // no listeners\n     * Use @eve to trigger the listener.\n     **\n     > Arguments\n     **\n     - name (string) name of the event, dot (`.`) or slash (`/`) separated, with optional wildcards\n     - f (function) event handler function\n     **\n     = (function) same return function as @eve.on\n    \\*/\n    eve.once = function (name, f) {\n        var f2 = function () {\n            eve.unbind(name, f2);\n            return f.apply(this, arguments);\n        };\n        return eve.on(name, f2);\n    };\n    /*\\\n     * eve.version\n     [ property (string) ]\n     **\n     * Current version of the library.\n    \\*/\n    eve.version = version;\n    eve.toString = function () {\n        return "You are running Eve " + version;\n    };\n    (typeof module != "undefined" && module.exports) ? (module.exports = eve) : ( true ? (!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_LOCAL_MODULE_0__ = (function() { return eve; }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))) : (glob.eve = eve));\n})(this);\n\n(function (glob, factory) {\n    // AMD support\n    if (true) {\n        // Define as an anonymous module\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__WEBPACK_LOCAL_MODULE_0__], __WEBPACK_AMD_DEFINE_RESULT__ = function (eve) {\n            return factory(glob, eve);\n        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof exports != \'undefined\') {\n        // Next for Node.js or CommonJS\n        var eve = require(\'eve\');\n        module.exports = factory(glob, eve);\n    } else {\n        // Browser globals (glob is window)\n        // Snap adds itself to window\n        factory(glob, glob.eve);\n    }\n}(window || this, function (window, eve) {\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar mina = (function (eve) {\n    var animations = {},\n    requestAnimFrame = window.requestAnimationFrame       ||\n                       window.webkitRequestAnimationFrame ||\n                       window.mozRequestAnimationFrame    ||\n                       window.oRequestAnimationFrame      ||\n                       window.msRequestAnimationFrame     ||\n                       function (callback) {\n                           setTimeout(callback, 16);\n                       },\n    isArray = Array.isArray || function (a) {\n        return a instanceof Array ||\n            Object.prototype.toString.call(a) == "[object Array]";\n    },\n    idgen = 0,\n    idprefix = "M" + (+new Date).toString(36),\n    ID = function () {\n        return idprefix + (idgen++).toString(36);\n    },\n    diff = function (a, b, A, B) {\n        if (isArray(a)) {\n            res = [];\n            for (var i = 0, ii = a.length; i < ii; i++) {\n                res[i] = diff(a[i], b, A[i], B);\n            }\n            return res;\n        }\n        var dif = (A - a) / (B - b);\n        return function (bb) {\n            return a + dif * (bb - b);\n        };\n    },\n    timer = Date.now || function () {\n        return +new Date;\n    },\n    sta = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.s;\n        }\n        var ds = a.s - val;\n        a.b += a.dur * ds;\n        a.B += a.dur * ds;\n        a.s = val;\n    },\n    speed = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.spd;\n        }\n        a.spd = val;\n    },\n    duration = function (val) {\n        var a = this;\n        if (val == null) {\n            return a.dur;\n        }\n        a.s = a.s * val / a.dur;\n        a.dur = val;\n    },\n    stopit = function () {\n        var a = this;\n        delete animations[a.id];\n        a.update();\n        eve("mina.stop." + a.id, a);\n    },\n    pause = function () {\n        var a = this;\n        if (a.pdif) {\n            return;\n        }\n        delete animations[a.id];\n        a.update();\n        a.pdif = a.get() - a.b;\n    },\n    resume = function () {\n        var a = this;\n        if (!a.pdif) {\n            return;\n        }\n        a.b = a.get() - a.pdif;\n        delete a.pdif;\n        animations[a.id] = a;\n    },\n    update = function () {\n        var a = this,\n            res;\n        if (isArray(a.start)) {\n            res = [];\n            for (var j = 0, jj = a.start.length; j < jj; j++) {\n                res[j] = +a.start[j] +\n                    (a.end[j] - a.start[j]) * a.easing(a.s);\n            }\n        } else {\n            res = +a.start + (a.end - a.start) * a.easing(a.s);\n        }\n        a.set(res);\n    },\n    frame = function () {\n        var len = 0;\n        for (var i in animations) if (animations.hasOwnProperty(i)) {\n            var a = animations[i],\n                b = a.get(),\n                res;\n            len++;\n            a.s = (b - a.b) / (a.dur / a.spd);\n            if (a.s >= 1) {\n                delete animations[i];\n                a.s = 1;\n                len--;\n                (function (a) {\n                    setTimeout(function () {\n                        eve("mina.finish." + a.id, a);\n                    });\n                }(a));\n            }\n            a.update();\n        }\n        len && requestAnimFrame(frame);\n    },\n    /*\\\n     * mina\n     [ method ]\n     **\n     * Generic animation of numbers\n     **\n     - a (number) start _slave_ number\n     - A (number) end _slave_ number\n     - b (number) start _master_ number (start time in general case)\n     - B (number) end _master_ number (end time in gereal case)\n     - get (function) getter of _master_ number (see @mina.time)\n     - set (function) setter of _slave_ number\n     - easing (function) #optional easing function, default is @mina.linear\n     = (object) animation descriptor\n     o {\n     o         id (string) animation id,\n     o         start (number) start _slave_ number,\n     o         end (number) end _slave_ number,\n     o         b (number) start _master_ number,\n     o         s (number) animation status (0..1),\n     o         dur (number) animation duration,\n     o         spd (number) animation speed,\n     o         get (function) getter of _master_ number (see @mina.time),\n     o         set (function) setter of _slave_ number,\n     o         easing (function) easing function, default is @mina.linear,\n     o         status (function) status getter/setter,\n     o         speed (function) speed getter/setter,\n     o         duration (function) duration getter/setter,\n     o         stop (function) animation stopper\n     o         pause (function) pauses the animation\n     o         resume (function) resumes the animation\n     o         update (function) calles setter with the right value of the animation\n     o }\n    \\*/\n    mina = function (a, A, b, B, get, set, easing) {\n        var anim = {\n            id: ID(),\n            start: a,\n            end: A,\n            b: b,\n            s: 0,\n            dur: B - b,\n            spd: 1,\n            get: get,\n            set: set,\n            easing: easing || mina.linear,\n            status: sta,\n            speed: speed,\n            duration: duration,\n            stop: stopit,\n            pause: pause,\n            resume: resume,\n            update: update\n        };\n        animations[anim.id] = anim;\n        var len = 0, i;\n        for (i in animations) if (animations.hasOwnProperty(i)) {\n            len++;\n            if (len == 2) {\n                break;\n            }\n        }\n        len == 1 && requestAnimFrame(frame);\n        return anim;\n    };\n    /*\\\n     * mina.time\n     [ method ]\n     **\n     * Returns the current time. Equivalent to:\n     | function () {\n     |     return (new Date).getTime();\n     | }\n    \\*/\n    mina.time = timer;\n    /*\\\n     * mina.getById\n     [ method ]\n     **\n     * Returns an animation by its id\n     - id (string) animation\'s id\n     = (object) See @mina\n    \\*/\n    mina.getById = function (id) {\n        return animations[id] || null;\n    };\n\n    /*\\\n     * mina.linear\n     [ method ]\n     **\n     * Default linear easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.linear = function (n) {\n        return n;\n    };\n    /*\\\n     * mina.easeout\n     [ method ]\n     **\n     * Easeout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeout = function (n) {\n        return Math.pow(n, 1.7);\n    };\n    /*\\\n     * mina.easein\n     [ method ]\n     **\n     * Easein easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easein = function (n) {\n        return Math.pow(n, .48);\n    };\n    /*\\\n     * mina.easeinout\n     [ method ]\n     **\n     * Easeinout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.easeinout = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        if (n == 0) {\n            return 0;\n        }\n        var q = .48 - n / 1.04,\n            Q = Math.sqrt(.1734 + q * q),\n            x = Q - q,\n            X = Math.pow(Math.abs(x), 1 / 3) * (x < 0 ? -1 : 1),\n            y = -Q - q,\n            Y = Math.pow(Math.abs(y), 1 / 3) * (y < 0 ? -1 : 1),\n            t = X + Y + .5;\n        return (1 - t) * 3 * t * t + t * t * t;\n    };\n    /*\\\n     * mina.backin\n     [ method ]\n     **\n     * Backin easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backin = function (n) {\n        if (n == 1) {\n            return 1;\n        }\n        var s = 1.70158;\n        return n * n * ((s + 1) * n - s);\n    };\n    /*\\\n     * mina.backout\n     [ method ]\n     **\n     * Backout easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.backout = function (n) {\n        if (n == 0) {\n            return 0;\n        }\n        n = n - 1;\n        var s = 1.70158;\n        return n * n * ((s + 1) * n + s) + 1;\n    };\n    /*\\\n     * mina.elastic\n     [ method ]\n     **\n     * Elastic easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.elastic = function (n) {\n        if (n == !!n) {\n            return n;\n        }\n        return Math.pow(2, -10 * n) * Math.sin((n - .075) *\n            (2 * Math.PI) / .3) + 1;\n    };\n    /*\\\n     * mina.bounce\n     [ method ]\n     **\n     * Bounce easing\n     - n (number) input 0..1\n     = (number) output 0..1\n    \\*/\n    mina.bounce = function (n) {\n        var s = 7.5625,\n            p = 2.75,\n            l;\n        if (n < (1 / p)) {\n            l = s * n * n;\n        } else {\n            if (n < (2 / p)) {\n                n -= (1.5 / p);\n                l = s * n * n + .75;\n            } else {\n                if (n < (2.5 / p)) {\n                    n -= (2.25 / p);\n                    l = s * n * n + .9375;\n                } else {\n                    n -= (2.625 / p);\n                    l = s * n * n + .984375;\n                }\n            }\n        }\n        return l;\n    };\n    window.mina = mina;\n    return mina;\n})(typeof eve == "undefined" ? function () {} : eve);\n// Copyright (c) 2013 - 2015 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar Snap = (function(root) {\nSnap.version = "0.4.0";\n/*\\\n * Snap\n [ method ]\n **\n * Creates a drawing surface or wraps existing SVG element.\n **\n - width (number|string) width of surface\n - height (number|string) height of surface\n * or\n - DOM (SVGElement) element to be wrapped into Snap structure\n * or\n - array (array) array of elements (will return set of elements)\n * or\n - query (string) CSS query selector\n = (object) @Element\n\\*/\nfunction Snap(w, h) {\n    if (w) {\n        if (w.nodeType) {\n            return wrap(w);\n        }\n        if (is(w, "array") && Snap.set) {\n            return Snap.set.apply(Snap, w);\n        }\n        if (w instanceof Element) {\n            return w;\n        }\n        if (h == null) {\n            w = glob.doc.querySelector(String(w));\n            return wrap(w);\n        }\n    }\n    w = w == null ? "100%" : w;\n    h = h == null ? "100%" : h;\n    return new Paper(w, h);\n}\nSnap.toString = function () {\n    return "Snap v" + this.version;\n};\nSnap._ = {};\nvar glob = {\n    win: root.window,\n    doc: root.window.document\n};\nSnap._.glob = glob;\nvar has = "hasOwnProperty",\n    Str = String,\n    toFloat = parseFloat,\n    toInt = parseInt,\n    math = Math,\n    mmax = math.max,\n    mmin = math.min,\n    abs = math.abs,\n    pow = math.pow,\n    PI = math.PI,\n    round = math.round,\n    E = "",\n    S = " ",\n    objectToString = Object.prototype.toString,\n    ISURL = /^url\\([\'"]?([^\\)]+?)[\'"]?\\)$/i,\n    colourRegExp = /^\\s*((#[a-f\\d]{6})|(#[a-f\\d]{3})|rgba?\\(\\s*([\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+%?(?:\\s*,\\s*[\\d\\.]+%?)?)\\s*\\)|hsba?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\)|hsla?\\(\\s*([\\d\\.]+(?:deg|\\xb0|%)?\\s*,\\s*[\\d\\.]+%?\\s*,\\s*[\\d\\.]+(?:%?\\s*,\\s*[\\d\\.]+)?%?)\\s*\\))\\s*$/i,\n    bezierrg = /^(?:cubic-)?bezier\\(([^,]+),([^,]+),([^,]+),([^\\)]+)\\)/,\n    reURLValue = /^url\\(#?([^)]+)\\)$/,\n    separator = Snap._.separator = /[,\\s]+/,\n    whitespace = /[\\s]/g,\n    commaSpaces = /[\\s]*,[\\s]*/,\n    hsrg = {hs: 1, rg: 1},\n    pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    tCommand = /([rstm])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/ig,\n    pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\\\d+)?)[\\s]*,?[\\s]*/ig,\n    idgen = 0,\n    idprefix = "S" + (+new Date).toString(36),\n    ID = function (el) {\n        return (el && el.type ? el.type : E) + idprefix + (idgen++).toString(36);\n    },\n    xlink = "http://www.w3.org/1999/xlink",\n    xmlns = "http://www.w3.org/2000/svg",\n    hub = {},\n    URL = Snap.url = function (url) {\n        return "url(\'#" + url + "\')";\n    };\n\nfunction $(el, attr) {\n    if (attr) {\n        if (el == "#text") {\n            el = glob.doc.createTextNode(attr.text || attr["#text"] || "");\n        }\n        if (el == "#comment") {\n            el = glob.doc.createComment(attr.text || attr["#text"] || "");\n        }\n        if (typeof el == "string") {\n            el = $(el);\n        }\n        if (typeof attr == "string") {\n            if (el.nodeType == 1) {\n                if (attr.substring(0, 6) == "xlink:") {\n                    return el.getAttributeNS(xlink, attr.substring(6));\n                }\n                if (attr.substring(0, 4) == "xml:") {\n                    return el.getAttributeNS(xmlns, attr.substring(4));\n                }\n                return el.getAttribute(attr);\n            } else if (attr == "text") {\n                return el.nodeValue;\n            } else {\n                return null;\n            }\n        }\n        if (el.nodeType == 1) {\n            for (var key in attr) if (attr[has](key)) {\n                var val = Str(attr[key]);\n                if (val) {\n                    if (key.substring(0, 6) == "xlink:") {\n                        el.setAttributeNS(xlink, key.substring(6), val);\n                    } else if (key.substring(0, 4) == "xml:") {\n                        el.setAttributeNS(xmlns, key.substring(4), val);\n                    } else {\n                        el.setAttribute(key, val);\n                    }\n                } else {\n                    el.removeAttribute(key);\n                }\n            }\n        } else if ("text" in attr) {\n            el.nodeValue = attr.text;\n        }\n    } else {\n        el = glob.doc.createElementNS(xmlns, el);\n    }\n    return el;\n}\nSnap._.$ = $;\nSnap._.id = ID;\nfunction getAttrs(el) {\n    var attrs = el.attributes,\n        name,\n        out = {};\n    for (var i = 0; i < attrs.length; i++) {\n        if (attrs[i].namespaceURI == xlink) {\n            name = "xlink:";\n        } else {\n            name = "";\n        }\n        name += attrs[i].name;\n        out[name] = attrs[i].textContent;\n    }\n    return out;\n}\nfunction is(o, type) {\n    type = Str.prototype.toLowerCase.call(type);\n    if (type == "finite") {\n        return isFinite(o);\n    }\n    if (type == "array" &&\n        (o instanceof Array || Array.isArray && Array.isArray(o))) {\n        return true;\n    }\n    return  (type == "null" && o === null) ||\n            (type == typeof o && o !== null) ||\n            (type == "object" && o === Object(o)) ||\n            objectToString.call(o).slice(8, -1).toLowerCase() == type;\n}\n/*\\\n * Snap.format\n [ method ]\n **\n * Replaces construction of type `{<name>}` to the corresponding argument\n **\n - token (string) string to format\n - json (object) object which properties are used as a replacement\n = (string) formatted string\n > Usage\n | // this draws a rectangular shape equivalent to "M10,20h40v50h-40z"\n | paper.path(Snap.format("M{x},{y}h{dim.width}v{dim.height}h{dim[\'negative width\']}z", {\n |     x: 10,\n |     y: 20,\n |     dim: {\n |         width: 40,\n |         height: 50,\n |         "negative width": -40\n |     }\n | }));\n\\*/\nSnap.format = (function () {\n    var tokenRegex = /\\{([^\\}]+)\\}/g,\n        objNotationRegex = /(?:(?:^|\\.)(.+?)(?=\\[|\\.|$|\\()|\\[(\'|")(.+?)\\2\\])(\\(\\))?/g, // matches .xxxxx or ["xxxxx"] to run over object properties\n        replacer = function (all, key, obj) {\n            var res = obj;\n            key.replace(objNotationRegex, function (all, name, quote, quotedName, isFunc) {\n                name = name || quotedName;\n                if (res) {\n                    if (name in res) {\n                        res = res[name];\n                    }\n                    typeof res == "function" && isFunc && (res = res());\n                }\n            });\n            res = (res == null || res == obj ? all : res) + "";\n            return res;\n        };\n    return function (str, obj) {\n        return Str(str).replace(tokenRegex, function (all, key) {\n            return replacer(all, key, obj);\n        });\n    };\n})();\nfunction clone(obj) {\n    if (typeof obj == "function" || Object(obj) !== obj) {\n        return obj;\n    }\n    var res = new obj.constructor;\n    for (var key in obj) if (obj[has](key)) {\n        res[key] = clone(obj[key]);\n    }\n    return res;\n}\nSnap._.clone = clone;\nfunction repush(array, item) {\n    for (var i = 0, ii = array.length; i < ii; i++) if (array[i] === item) {\n        return array.push(array.splice(i, 1)[0]);\n    }\n}\nfunction cacher(f, scope, postprocessor) {\n    function newf() {\n        var arg = Array.prototype.slice.call(arguments, 0),\n            args = arg.join("\\u2400"),\n            cache = newf.cache = newf.cache || {},\n            count = newf.count = newf.count || [];\n        if (cache[has](args)) {\n            repush(count, args);\n            return postprocessor ? postprocessor(cache[args]) : cache[args];\n        }\n        count.length >= 1e3 && delete cache[count.shift()];\n        count.push(args);\n        cache[args] = f.apply(scope, arg);\n        return postprocessor ? postprocessor(cache[args]) : cache[args];\n    }\n    return newf;\n}\nSnap._.cacher = cacher;\nfunction angle(x1, y1, x2, y2, x3, y3) {\n    if (x3 == null) {\n        var x = x1 - x2,\n            y = y1 - y2;\n        if (!x && !y) {\n            return 0;\n        }\n        return (180 + math.atan2(-y, -x) * 180 / PI + 360) % 360;\n    } else {\n        return angle(x1, y1, x3, y3) - angle(x2, y2, x3, y3);\n    }\n}\nfunction rad(deg) {\n    return deg % 360 * PI / 180;\n}\nfunction deg(rad) {\n    return rad * 180 / PI % 360;\n}\nfunction x_y() {\n    return this.x + S + this.y;\n}\nfunction x_y_w_h() {\n    return this.x + S + this.y + S + this.width + " \\xd7 " + this.height;\n}\n\n/*\\\n * Snap.rad\n [ method ]\n **\n * Transform angle to radians\n - deg (number) angle in degrees\n = (number) angle in radians\n\\*/\nSnap.rad = rad;\n/*\\\n * Snap.deg\n [ method ]\n **\n * Transform angle to degrees\n - rad (number) angle in radians\n = (number) angle in degrees\n\\*/\nSnap.deg = deg;\n/*\\\n * Snap.sin\n [ method ]\n **\n * Equivalent to `Math.sin()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) sin\n\\*/\nSnap.sin = function (angle) {\n    return math.sin(Snap.rad(angle));\n};\n/*\\\n * Snap.tan\n [ method ]\n **\n * Equivalent to `Math.tan()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) tan\n\\*/\nSnap.tan = function (angle) {\n    return math.tan(Snap.rad(angle));\n};\n/*\\\n * Snap.cos\n [ method ]\n **\n * Equivalent to `Math.cos()` only works with degrees, not radians.\n - angle (number) angle in degrees\n = (number) cos\n\\*/\nSnap.cos = function (angle) {\n    return math.cos(Snap.rad(angle));\n};\n/*\\\n * Snap.asin\n [ method ]\n **\n * Equivalent to `Math.asin()` only works with degrees, not radians.\n - num (number) value\n = (number) asin in degrees\n\\*/\nSnap.asin = function (num) {\n    return Snap.deg(math.asin(num));\n};\n/*\\\n * Snap.acos\n [ method ]\n **\n * Equivalent to `Math.acos()` only works with degrees, not radians.\n - num (number) value\n = (number) acos in degrees\n\\*/\nSnap.acos = function (num) {\n    return Snap.deg(math.acos(num));\n};\n/*\\\n * Snap.atan\n [ method ]\n **\n * Equivalent to `Math.atan()` only works with degrees, not radians.\n - num (number) value\n = (number) atan in degrees\n\\*/\nSnap.atan = function (num) {\n    return Snap.deg(math.atan(num));\n};\n/*\\\n * Snap.atan2\n [ method ]\n **\n * Equivalent to `Math.atan2()` only works with degrees, not radians.\n - num (number) value\n = (number) atan2 in degrees\n\\*/\nSnap.atan2 = function (num) {\n    return Snap.deg(math.atan2(num));\n};\n/*\\\n * Snap.angle\n [ method ]\n **\n * Returns an angle between two or three points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n - x3 (number) #optional x coord of third point\n - y3 (number) #optional y coord of third point\n = (number) angle in degrees\n\\*/\nSnap.angle = angle;\n/*\\\n * Snap.len\n [ method ]\n **\n * Returns distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len = function (x1, y1, x2, y2) {\n    return Math.sqrt(Snap.len2(x1, y1, x2, y2));\n};\n/*\\\n * Snap.len2\n [ method ]\n **\n * Returns squared distance between two points\n > Parameters\n - x1 (number) x coord of first point\n - y1 (number) y coord of first point\n - x2 (number) x coord of second point\n - y2 (number) y coord of second point\n = (number) distance\n\\*/\nSnap.len2 = function (x1, y1, x2, y2) {\n    return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n};\n/*\\\n * Snap.closestPoint\n [ method ]\n **\n * Returns closest point to a given one on a given path.\n > Parameters\n - path (Element) path element\n - x (number) x coord of a point\n - y (number) y coord of a point\n = (object) in format\n {\n    x (number) x coord of the point on the path\n    y (number) y coord of the point on the path\n    length (number) length of the path to the point\n    distance (number) distance from the given point to the path\n }\n\\*/\n// Copied from http://bl.ocks.org/mbostock/8027637\nSnap.closestPoint = function (path, x, y) {\n    function distance2(p) {\n        var dx = p.x - x,\n            dy = p.y - y;\n        return dx * dx + dy * dy;\n    }\n    var pathNode = path.node,\n        pathLength = pathNode.getTotalLength(),\n        precision = pathLength / pathNode.pathSegList.numberOfItems * .125,\n        best,\n        bestLength,\n        bestDistance = Infinity;\n\n    // linear scan for coarse approximation\n    for (var scan, scanLength = 0, scanDistance; scanLength <= pathLength; scanLength += precision) {\n        if ((scanDistance = distance2(scan = pathNode.getPointAtLength(scanLength))) < bestDistance) {\n            best = scan, bestLength = scanLength, bestDistance = scanDistance;\n        }\n    }\n\n    // binary search for precise estimate\n    precision *= .5;\n    while (precision > .5) {\n        var before,\n            after,\n            beforeLength,\n            afterLength,\n            beforeDistance,\n            afterDistance;\n        if ((beforeLength = bestLength - precision) >= 0 && (beforeDistance = distance2(before = pathNode.getPointAtLength(beforeLength))) < bestDistance) {\n            best = before, bestLength = beforeLength, bestDistance = beforeDistance;\n        } else if ((afterLength = bestLength + precision) <= pathLength && (afterDistance = distance2(after = pathNode.getPointAtLength(afterLength))) < bestDistance) {\n            best = after, bestLength = afterLength, bestDistance = afterDistance;\n        } else {\n            precision *= .5;\n        }\n    }\n\n    best = {\n        x: best.x,\n        y: best.y,\n        length: bestLength,\n        distance: Math.sqrt(bestDistance)\n    };\n    return best;\n}\n/*\\\n * Snap.is\n [ method ]\n **\n * Handy replacement for the `typeof` operator\n - o (…) any object or primitive\n - type (string) name of the type, e.g., `string`, `function`, `number`, etc.\n = (boolean) `true` if given value is of given type\n\\*/\nSnap.is = is;\n/*\\\n * Snap.snapTo\n [ method ]\n **\n * Snaps given value to given grid\n - values (array|number) given array of values or step of the grid\n - value (number) value to adjust\n - tolerance (number) #optional maximum distance to the target value that would trigger the snap. Default is `10`.\n = (number) adjusted value\n\\*/\nSnap.snapTo = function (values, value, tolerance) {\n    tolerance = is(tolerance, "finite") ? tolerance : 10;\n    if (is(values, "array")) {\n        var i = values.length;\n        while (i--) if (abs(values[i] - value) <= tolerance) {\n            return values[i];\n        }\n    } else {\n        values = +values;\n        var rem = value % values;\n        if (rem < tolerance) {\n            return value - rem;\n        }\n        if (rem > values - tolerance) {\n            return value - rem + values;\n        }\n    }\n    return value;\n};\n// Colour\n/*\\\n * Snap.getRGB\n [ method ]\n **\n * Parses color string as RGB object\n - color (string) color string in one of the following formats:\n # <ul>\n #     <li>Color name (<code>red</code>, <code>green</code>, <code>cornflowerblue</code>, etc)</li>\n #     <li>#••• — shortened HTML color: (<code>#000</code>, <code>#fc0</code>, etc.)</li>\n #     <li>#•••••• — full length HTML color: (<code>#000000</code>, <code>#bd2300</code>)</li>\n #     <li>rgb(•••, •••, •••) — red, green and blue channels values: (<code>rgb(200,&nbsp;100,&nbsp;0)</code>)</li>\n #     <li>rgba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>rgb(•••%, •••%, •••%) — same as above, but in %: (<code>rgb(100%,&nbsp;175%,&nbsp;0%)</code>)</li>\n #     <li>rgba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsb(•••, •••, •••) — hue, saturation and brightness values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;1)</code>)</li>\n #     <li>hsba(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsb(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsba(•••%, •••%, •••%, •••%) — also with opacity</li>\n #     <li>hsl(•••, •••, •••) — hue, saturation and luminosity values: (<code>hsb(0.5,&nbsp;0.25,&nbsp;0.5)</code>)</li>\n #     <li>hsla(•••, •••, •••, •••) — also with opacity</li>\n #     <li>hsl(•••%, •••%, •••%) — same as above, but in %</li>\n #     <li>hsla(•••%, •••%, •••%, •••%) — also with opacity</li>\n # </ul>\n * Note that `%` can be used any time: `rgb(20%, 255, 50%)`.\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) true if string can\'t be parsed\n o }\n\\*/\nSnap.getRGB = cacher(function (colour) {\n    if (!colour || !!((colour = Str(colour)).indexOf("-") + 1)) {\n        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};\n    }\n    if (colour == "none") {\n        return {r: -1, g: -1, b: -1, hex: "none", toString: rgbtoString};\n    }\n    !(hsrg[has](colour.toLowerCase().substring(0, 2)) || colour.charAt() == "#") && (colour = toHex(colour));\n    if (!colour) {\n        return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};\n    }\n    var res,\n        red,\n        green,\n        blue,\n        opacity,\n        t,\n        values,\n        rgb = colour.match(colourRegExp);\n    if (rgb) {\n        if (rgb[2]) {\n            blue = toInt(rgb[2].substring(5), 16);\n            green = toInt(rgb[2].substring(3, 5), 16);\n            red = toInt(rgb[2].substring(1, 3), 16);\n        }\n        if (rgb[3]) {\n            blue = toInt((t = rgb[3].charAt(3)) + t, 16);\n            green = toInt((t = rgb[3].charAt(2)) + t, 16);\n            red = toInt((t = rgb[3].charAt(1)) + t, 16);\n        }\n        if (rgb[4]) {\n            values = rgb[4].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == "%" && (red *= 2.55);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == "%" && (green *= 2.55);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == "%" && (blue *= 2.55);\n            rgb[1].toLowerCase().slice(0, 4) == "rgba" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n        }\n        if (rgb[5]) {\n            values = rgb[5].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == "%" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == "%" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == "%" && (blue /= 100);\n            (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\\xb0") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == "hsba" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n            return Snap.hsb2rgb(red, green, blue, opacity);\n        }\n        if (rgb[6]) {\n            values = rgb[6].split(commaSpaces);\n            red = toFloat(values[0]);\n            values[0].slice(-1) == "%" && (red /= 100);\n            green = toFloat(values[1]);\n            values[1].slice(-1) == "%" && (green /= 100);\n            blue = toFloat(values[2]);\n            values[2].slice(-1) == "%" && (blue /= 100);\n            (values[0].slice(-3) == "deg" || values[0].slice(-1) == "\\xb0") && (red /= 360);\n            rgb[1].toLowerCase().slice(0, 4) == "hsla" && (opacity = toFloat(values[3]));\n            values[3] && values[3].slice(-1) == "%" && (opacity /= 100);\n            return Snap.hsl2rgb(red, green, blue, opacity);\n        }\n        red = mmin(math.round(red), 255);\n        green = mmin(math.round(green), 255);\n        blue = mmin(math.round(blue), 255);\n        opacity = mmin(mmax(opacity, 0), 1);\n        rgb = {r: red, g: green, b: blue, toString: rgbtoString};\n        rgb.hex = "#" + (16777216 | blue | (green << 8) | (red << 16)).toString(16).slice(1);\n        rgb.opacity = is(opacity, "finite") ? opacity : 1;\n        return rgb;\n    }\n    return {r: -1, g: -1, b: -1, hex: "none", error: 1, toString: rgbtoString};\n}, Snap);\n/*\\\n * Snap.hsb\n [ method ]\n **\n * Converts HSB values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - b (number) value or brightness\n = (string) hex representation of the color\n\\*/\nSnap.hsb = cacher(function (h, s, b) {\n    return Snap.hsb2rgb(h, s, b).hex;\n});\n/*\\\n * Snap.hsl\n [ method ]\n **\n * Converts HSL values to a hex representation of the color\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (string) hex representation of the color\n\\*/\nSnap.hsl = cacher(function (h, s, l) {\n    return Snap.hsl2rgb(h, s, l).hex;\n});\n/*\\\n * Snap.rgb\n [ method ]\n **\n * Converts RGB values to a hex representation of the color\n - r (number) red\n - g (number) green\n - b (number) blue\n = (string) hex representation of the color\n\\*/\nSnap.rgb = cacher(function (r, g, b, o) {\n    if (is(o, "finite")) {\n        var round = math.round;\n        return "rgba(" + [round(r), round(g), round(b), +o.toFixed(2)] + ")";\n    }\n    return "#" + (16777216 | b | (g << 8) | (r << 16)).toString(16).slice(1);\n});\nvar toHex = function (color) {\n    var i = glob.doc.getElementsByTagName("head")[0] || glob.doc.getElementsByTagName("svg")[0],\n        red = "rgb(255, 0, 0)";\n    toHex = cacher(function (color) {\n        if (color.toLowerCase() == "red") {\n            return red;\n        }\n        i.style.color = red;\n        i.style.color = color;\n        var out = glob.doc.defaultView.getComputedStyle(i, E).getPropertyValue("color");\n        return out == red ? null : out;\n    });\n    return toHex(color);\n},\nhsbtoString = function () {\n    return "hsb(" + [this.h, this.s, this.b] + ")";\n},\nhsltoString = function () {\n    return "hsl(" + [this.h, this.s, this.l] + ")";\n},\nrgbtoString = function () {\n    return this.opacity == 1 || this.opacity == null ?\n            this.hex :\n            "rgba(" + [this.r, this.g, this.b, this.opacity] + ")";\n},\nprepareRGB = function (r, g, b) {\n    if (g == null && is(r, "object") && "r" in r && "g" in r && "b" in r) {\n        b = r.b;\n        g = r.g;\n        r = r.r;\n    }\n    if (g == null && is(r, string)) {\n        var clr = Snap.getRGB(r);\n        r = clr.r;\n        g = clr.g;\n        b = clr.b;\n    }\n    if (r > 1 || g > 1 || b > 1) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n    }\n    \n    return [r, g, b];\n},\npackageRGB = function (r, g, b, o) {\n    r = math.round(r * 255);\n    g = math.round(g * 255);\n    b = math.round(b * 255);\n    var rgb = {\n        r: r,\n        g: g,\n        b: b,\n        opacity: is(o, "finite") ? o : 1,\n        hex: Snap.rgb(r, g, b),\n        toString: rgbtoString\n    };\n    is(o, "finite") && (rgb.opacity = o);\n    return rgb;\n};\n/*\\\n * Snap.color\n [ method ]\n **\n * Parses the color string and returns an object featuring the color\'s component values\n - clr (string) color string in one of the supported formats (see @Snap.getRGB)\n = (object) Combined RGB/HSB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••,\n o     error (boolean) `true` if string can\'t be parsed,\n o     h (number) hue,\n o     s (number) saturation,\n o     v (number) value (brightness),\n o     l (number) lightness\n o }\n\\*/\nSnap.color = function (clr) {\n    var rgb;\n    if (is(clr, "object") && "h" in clr && "s" in clr && "b" in clr) {\n        rgb = Snap.hsb2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else if (is(clr, "object") && "h" in clr && "s" in clr && "l" in clr) {\n        rgb = Snap.hsl2rgb(clr);\n        clr.r = rgb.r;\n        clr.g = rgb.g;\n        clr.b = rgb.b;\n        clr.opacity = 1;\n        clr.hex = rgb.hex;\n    } else {\n        if (is(clr, "string")) {\n            clr = Snap.getRGB(clr);\n        }\n        if (is(clr, "object") && "r" in clr && "g" in clr && "b" in clr && !("error" in clr)) {\n            rgb = Snap.rgb2hsl(clr);\n            clr.h = rgb.h;\n            clr.s = rgb.s;\n            clr.l = rgb.l;\n            rgb = Snap.rgb2hsb(clr);\n            clr.v = rgb.b;\n        } else {\n            clr = {hex: "none"};\n            clr.r = clr.g = clr.b = clr.h = clr.s = clr.v = clr.l = -1;\n            clr.error = 1;\n        }\n    }\n    clr.toString = rgbtoString;\n    return clr;\n};\n/*\\\n * Snap.hsb2rgb\n [ method ]\n **\n * Converts HSB values to an RGB object\n - h (number) hue\n - s (number) saturation\n - v (number) value or brightness\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsb2rgb = function (h, s, v, o) {\n    if (is(h, "object") && "h" in h && "s" in h && "b" in h) {\n        v = h.b;\n        s = h.s;\n        o = h.o;\n        h = h.h;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = v * s;\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = v - C;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.hsl2rgb\n [ method ]\n **\n * Converts HSL values to an RGB object\n - h (number) hue\n - s (number) saturation\n - l (number) luminosity\n = (object) RGB object in the following format:\n o {\n o     r (number) red,\n o     g (number) green,\n o     b (number) blue,\n o     hex (string) color in HTML/CSS format: #••••••\n o }\n\\*/\nSnap.hsl2rgb = function (h, s, l, o) {\n    if (is(h, "object") && "h" in h && "s" in h && "l" in h) {\n        l = h.l;\n        s = h.s;\n        h = h.h;\n    }\n    if (h > 1 || s > 1 || l > 1) {\n        h /= 360;\n        s /= 100;\n        l /= 100;\n    }\n    h *= 360;\n    var R, G, B, X, C;\n    h = (h % 360) / 60;\n    C = 2 * s * (l < .5 ? l : 1 - l);\n    X = C * (1 - abs(h % 2 - 1));\n    R = G = B = l - C / 2;\n\n    h = ~~h;\n    R += [C, X, 0, 0, X, C][h];\n    G += [X, C, C, X, 0, 0][h];\n    B += [0, 0, X, C, C, X][h];\n    return packageRGB(R, G, B, o);\n};\n/*\\\n * Snap.rgb2hsb\n [ method ]\n **\n * Converts RGB values to an HSB object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSB object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     b (number) brightness\n o }\n\\*/\nSnap.rgb2hsb = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, V, C;\n    V = mmax(r, g, b);\n    C = V - mmin(r, g, b);\n    H = (C == 0 ? null :\n         V == r ? (g - b) / C :\n         V == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4\n        );\n    H = ((H + 360) % 6) * 60 / 360;\n    S = C == 0 ? 0 : C / V;\n    return {h: H, s: S, b: V, toString: hsbtoString};\n};\n/*\\\n * Snap.rgb2hsl\n [ method ]\n **\n * Converts RGB values to an HSL object\n - r (number) red\n - g (number) green\n - b (number) blue\n = (object) HSL object in the following format:\n o {\n o     h (number) hue,\n o     s (number) saturation,\n o     l (number) luminosity\n o }\n\\*/\nSnap.rgb2hsl = function (r, g, b) {\n    b = prepareRGB(r, g, b);\n    r = b[0];\n    g = b[1];\n    b = b[2];\n\n    var H, S, L, M, m, C;\n    M = mmax(r, g, b);\n    m = mmin(r, g, b);\n    C = M - m;\n    H = (C == 0 ? null :\n         M == r ? (g - b) / C :\n         M == g ? (b - r) / C + 2 :\n                  (r - g) / C + 4);\n    H = ((H + 360) % 6) * 60 / 360;\n    L = (M + m) / 2;\n    S = (C == 0 ? 0 :\n         L < .5 ? C / (2 * L) :\n                  C / (2 - 2 * L));\n    return {h: H, s: S, l: L, toString: hsltoString};\n};\n\n// Transformations\n/*\\\n * Snap.parsePathString\n [ method ]\n **\n * Utility method\n **\n * Parses given path string into an array of arrays of path segments\n - pathString (string|array) path string or array of segments (in the last case it is returned straight away)\n = (array) array of segments\n\\*/\nSnap.parsePathString = function (pathString) {\n    if (!pathString) {\n        return null;\n    }\n    var pth = Snap.path(pathString);\n    if (pth.arr) {\n        return Snap.path.clone(pth.arr);\n    }\n    \n    var paramCounts = {a: 7, c: 6, o: 2, h: 1, l: 2, m: 2, r: 4, q: 4, s: 4, t: 2, v: 1, u: 3, z: 0},\n        data = [];\n    if (is(pathString, "array") && is(pathString[0], "array")) { // rough assumption\n        data = Snap.path.clone(pathString);\n    }\n    if (!data.length) {\n        Str(pathString).replace(pathCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            if (name == "m" && params.length > 2) {\n                data.push([b].concat(params.splice(0, 2)));\n                name = "l";\n                b = b == "m" ? "l" : "L";\n            }\n            if (name == "o" && params.length == 1) {\n                data.push([b, params[0]]);\n            }\n            if (name == "r") {\n                data.push([b].concat(params));\n            } else while (params.length >= paramCounts[name]) {\n                data.push([b].concat(params.splice(0, paramCounts[name])));\n                if (!paramCounts[name]) {\n                    break;\n                }\n            }\n        });\n    }\n    data.toString = Snap.path.toString;\n    pth.arr = Snap.path.clone(data);\n    return data;\n};\n/*\\\n * Snap.parseTransformString\n [ method ]\n **\n * Utility method\n **\n * Parses given transform string into an array of transformations\n - TString (string|array) transform string or array of transformations (in the last case it is returned straight away)\n = (array) array of transformations\n\\*/\nvar parseTransformString = Snap.parseTransformString = function (TString) {\n    if (!TString) {\n        return null;\n    }\n    var paramCounts = {r: 3, s: 4, t: 2, m: 6},\n        data = [];\n    if (is(TString, "array") && is(TString[0], "array")) { // rough assumption\n        data = Snap.path.clone(TString);\n    }\n    if (!data.length) {\n        Str(TString).replace(tCommand, function (a, b, c) {\n            var params = [],\n                name = b.toLowerCase();\n            c.replace(pathValues, function (a, b) {\n                b && params.push(+b);\n            });\n            data.push([b].concat(params));\n        });\n    }\n    data.toString = Snap.path.toString;\n    return data;\n};\nfunction svgTransform2string(tstr) {\n    var res = [];\n    tstr = tstr.replace(/(?:^|\\s)(\\w+)\\(([^)]+)\\)/g, function (all, name, params) {\n        params = params.split(/\\s*,\\s*|\\s+/);\n        if (name == "rotate" && params.length == 1) {\n            params.push(0, 0);\n        }\n        if (name == "scale") {\n            if (params.length > 2) {\n                params = params.slice(0, 2);\n            } else if (params.length == 2) {\n                params.push(0, 0);\n            }\n            if (params.length == 1) {\n                params.push(params[0], 0, 0);\n            }\n        }\n        if (name == "skewX") {\n            res.push(["m", 1, 0, math.tan(rad(params[0])), 1, 0, 0]);\n        } else if (name == "skewY") {\n            res.push(["m", 1, math.tan(rad(params[0])), 0, 1, 0, 0]);\n        } else {\n            res.push([name.charAt(0)].concat(params));\n        }\n        return all;\n    });\n    return res;\n}\nSnap._.svgTransform2string = svgTransform2string;\nSnap._.rgTransform = /^[a-z][\\s]*-?\\.?\\d/i;\nfunction transform2matrix(tstr, bbox) {\n    var tdata = parseTransformString(tstr),\n        m = new Snap.Matrix;\n    if (tdata) {\n        for (var i = 0, ii = tdata.length; i < ii; i++) {\n            var t = tdata[i],\n                tlen = t.length,\n                command = Str(t[0]).toLowerCase(),\n                absolute = t[0] != command,\n                inver = absolute ? m.invert() : 0,\n                x1,\n                y1,\n                x2,\n                y2,\n                bb;\n            if (command == "t" && tlen == 2){\n                m.translate(t[1], 0);\n            } else if (command == "t" && tlen == 3) {\n                if (absolute) {\n                    x1 = inver.x(0, 0);\n                    y1 = inver.y(0, 0);\n                    x2 = inver.x(t[1], t[2]);\n                    y2 = inver.y(t[1], t[2]);\n                    m.translate(x2 - x1, y2 - y1);\n                } else {\n                    m.translate(t[1], t[2]);\n                }\n            } else if (command == "r") {\n                if (tlen == 2) {\n                    bb = bb || bbox;\n                    m.rotate(t[1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.rotate(t[1], x2, y2);\n                    } else {\n                        m.rotate(t[1], t[2], t[3]);\n                    }\n                }\n            } else if (command == "s") {\n                if (tlen == 2 || tlen == 3) {\n                    bb = bb || bbox;\n                    m.scale(t[1], t[tlen - 1], bb.x + bb.width / 2, bb.y + bb.height / 2);\n                } else if (tlen == 4) {\n                    if (absolute) {\n                        x2 = inver.x(t[2], t[3]);\n                        y2 = inver.y(t[2], t[3]);\n                        m.scale(t[1], t[1], x2, y2);\n                    } else {\n                        m.scale(t[1], t[1], t[2], t[3]);\n                    }\n                } else if (tlen == 5) {\n                    if (absolute) {\n                        x2 = inver.x(t[3], t[4]);\n                        y2 = inver.y(t[3], t[4]);\n                        m.scale(t[1], t[2], x2, y2);\n                    } else {\n                        m.scale(t[1], t[2], t[3], t[4]);\n                    }\n                }\n            } else if (command == "m" && tlen == 7) {\n                m.add(t[1], t[2], t[3], t[4], t[5], t[6]);\n            }\n        }\n    }\n    return m;\n}\nSnap._.transform2matrix = transform2matrix;\nSnap._unit2px = unit2px;\nvar contains = glob.doc.contains || glob.doc.compareDocumentPosition ?\n    function (a, b) {\n        var adown = a.nodeType == 9 ? a.documentElement : a,\n            bup = b && b.parentNode;\n            return a == bup || !!(bup && bup.nodeType == 1 && (\n                adown.contains ?\n                    adown.contains(bup) :\n                    a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16\n            ));\n    } :\n    function (a, b) {\n        if (b) {\n            while (b) {\n                b = b.parentNode;\n                if (b == a) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    };\nfunction getSomeDefs(el) {\n    var p = (el.node.ownerSVGElement && wrap(el.node.ownerSVGElement)) ||\n            (el.node.parentNode && wrap(el.node.parentNode)) ||\n            Snap.select("svg") ||\n            Snap(0, 0),\n        pdefs = p.select("defs"),\n        defs  = pdefs == null ? false : pdefs.node;\n    if (!defs) {\n        defs = make("defs", p.node).node;\n    }\n    return defs;\n}\nfunction getSomeSVG(el) {\n    return el.node.ownerSVGElement && wrap(el.node.ownerSVGElement) || Snap.select("svg");\n}\nSnap._.getSomeDefs = getSomeDefs;\nSnap._.getSomeSVG = getSomeSVG;\nfunction unit2px(el, name, value) {\n    var svg = getSomeSVG(el).node,\n        out = {},\n        mgr = svg.querySelector(".svg---mgr");\n    if (!mgr) {\n        mgr = $("rect");\n        $(mgr, {x: -9e9, y: -9e9, width: 10, height: 10, "class": "svg---mgr", fill: "none"});\n        svg.appendChild(mgr);\n    }\n    function getW(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {width: val});\n        try {\n            return mgr.getBBox().width;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function getH(val) {\n        if (val == null) {\n            return E;\n        }\n        if (val == +val) {\n            return val;\n        }\n        $(mgr, {height: val});\n        try {\n            return mgr.getBBox().height;\n        } catch (e) {\n            return 0;\n        }\n    }\n    function set(nam, f) {\n        if (name == null) {\n            out[nam] = f(el.attr(nam) || 0);\n        } else if (nam == name) {\n            out = f(value == null ? el.attr(nam) || 0 : value);\n        }\n    }\n    switch (el.type) {\n        case "rect":\n            set("rx", getW);\n            set("ry", getH);\n        case "image":\n            set("width", getW);\n            set("height", getH);\n        case "text":\n            set("x", getW);\n            set("y", getH);\n        break;\n        case "circle":\n            set("cx", getW);\n            set("cy", getH);\n            set("r", getW);\n        break;\n        case "ellipse":\n            set("cx", getW);\n            set("cy", getH);\n            set("rx", getW);\n            set("ry", getH);\n        break;\n        case "line":\n            set("x1", getW);\n            set("x2", getW);\n            set("y1", getH);\n            set("y2", getH);\n        break;\n        case "marker":\n            set("refX", getW);\n            set("markerWidth", getW);\n            set("refY", getH);\n            set("markerHeight", getH);\n        break;\n        case "radialGradient":\n            set("fx", getW);\n            set("fy", getH);\n        break;\n        case "tspan":\n            set("dx", getW);\n            set("dy", getH);\n        break;\n        default:\n            set(name, getW);\n    }\n    svg.removeChild(mgr);\n    return out;\n}\n/*\\\n * Snap.select\n [ method ]\n **\n * Wraps a DOM element specified by CSS selector as @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.select = function (query) {\n    query = Str(query).replace(/([^\\\\]):/g, "$1\\\\:");\n    return wrap(glob.doc.querySelector(query));\n};\n/*\\\n * Snap.selectAll\n [ method ]\n **\n * Wraps DOM elements specified by CSS selector as set or array of @Element\n - query (string) CSS selector of the element\n = (Element) the current element\n\\*/\nSnap.selectAll = function (query) {\n    var nodelist = glob.doc.querySelectorAll(query),\n        set = (Snap.set || Array)();\n    for (var i = 0; i < nodelist.length; i++) {\n        set.push(wrap(nodelist[i]));\n    }\n    return set;\n};\n\nfunction add2group(list) {\n    if (!is(list, "array")) {\n        list = Array.prototype.slice.call(arguments, 0);\n    }\n    var i = 0,\n        j = 0,\n        node = this.node;\n    while (this[i]) delete this[i++];\n    for (i = 0; i < list.length; i++) {\n        if (list[i].type == "set") {\n            list[i].forEach(function (el) {\n                node.appendChild(el.node);\n            });\n        } else {\n            node.appendChild(list[i].node);\n        }\n    }\n    var children = node.childNodes;\n    for (i = 0; i < children.length; i++) {\n        this[j++] = wrap(children[i]);\n    }\n    return this;\n}\n// Hub garbage collector every 10s\nsetInterval(function () {\n    for (var key in hub) if (hub[has](key)) {\n        var el = hub[key],\n            node = el.node;\n        if (el.type != "svg" && !node.ownerSVGElement || el.type == "svg" && (!node.parentNode || "ownerSVGElement" in node.parentNode && !node.ownerSVGElement)) {\n            delete hub[key];\n        }\n    }\n}, 1e4);\nfunction Element(el) {\n    if (el.snap in hub) {\n        return hub[el.snap];\n    }\n    var svg;\n    try {\n        svg = el.ownerSVGElement;\n    } catch(e) {}\n    /*\\\n     * Element.node\n     [ property (object) ]\n     **\n     * Gives you a reference to the DOM object, so you can assign event handlers or just mess around.\n     > Usage\n     | // draw a circle at coordinate 10,10 with radius of 10\n     | var c = paper.circle(10, 10, 10);\n     | c.node.onclick = function () {\n     |     c.attr("fill", "red");\n     | };\n    \\*/\n    this.node = el;\n    if (svg) {\n        this.paper = new Paper(svg);\n    }\n    /*\\\n     * Element.type\n     [ property (string) ]\n     **\n     * SVG tag name of the given element.\n    \\*/\n    this.type = el.tagName || el.nodeName;\n    var id = this.id = ID(this);\n    this.anims = {};\n    this._ = {\n        transform: []\n    };\n    el.snap = id;\n    hub[id] = this;\n    if (this.type == "g") {\n        this.add = add2group;\n    }\n    if (this.type in {g: 1, mask: 1, pattern: 1, symbol: 1}) {\n        for (var method in Paper.prototype) if (Paper.prototype[has](method)) {\n            this[method] = Paper.prototype[method];\n        }\n    }\n}\n   /*\\\n     * Element.attr\n     [ method ]\n     **\n     * Gets or sets given attributes of the element.\n     **\n     - params (object) contains key-value pairs of attributes you want to set\n     * or\n     - param (string) name of the attribute\n     = (Element) the current element\n     * or\n     = (string) value of attribute\n     > Usage\n     | el.attr({\n     |     fill: "#fc0",\n     |     stroke: "#000",\n     |     strokeWidth: 2, // CamelCase...\n     |     "fill-opacity": 0.5, // or dash-separated names\n     |     width: "*=2" // prefixed values\n     | });\n     | console.log(el.attr("fill")); // #fc0\n     * Prefixed values in format `"+=10"` supported. All four operations\n     * (`+`, `-`, `*` and `/`) could be used. Optionally you can use units for `+`\n     * and `-`: `"+=2em"`.\n    \\*/\n    Element.prototype.attr = function (params, value) {\n        var el = this,\n            node = el.node;\n        if (!params) {\n            if (node.nodeType != 1) {\n                return {\n                    text: node.nodeValue\n                };\n            }\n            var attr = node.attributes,\n                out = {};\n            for (var i = 0, ii = attr.length; i < ii; i++) {\n                out[attr[i].nodeName] = attr[i].nodeValue;\n            }\n            return out;\n        }\n        if (is(params, "string")) {\n            if (arguments.length > 1) {\n                var json = {};\n                json[params] = value;\n                params = json;\n            } else {\n                return eve("snap.util.getattr." + params, el).firstDefined();\n            }\n        }\n        for (var att in params) {\n            if (params[has](att)) {\n                eve("snap.util.attr." + att, el, params[att]);\n            }\n        }\n        return el;\n    };\n/*\\\n * Snap.parse\n [ method ]\n **\n * Parses SVG fragment and converts it into a @Fragment\n **\n - svg (string) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.parse = function (svg) {\n    var f = glob.doc.createDocumentFragment(),\n        full = true,\n        div = glob.doc.createElement("div");\n    svg = Str(svg);\n    if (!svg.match(/^\\s*<\\s*svg(?:\\s|>)/)) {\n        svg = "<svg>" + svg + "</svg>";\n        full = false;\n    }\n    div.innerHTML = svg;\n    svg = div.getElementsByTagName("svg")[0];\n    if (svg) {\n        if (full) {\n            f = svg;\n        } else {\n            while (svg.firstChild) {\n                f.appendChild(svg.firstChild);\n            }\n        }\n    }\n    return new Fragment(f);\n};\nfunction Fragment(frag) {\n    this.node = frag;\n}\n/*\\\n * Snap.fragment\n [ method ]\n **\n * Creates a DOM fragment from a given list of elements or strings\n **\n - varargs (…) SVG string\n = (Fragment) the @Fragment\n\\*/\nSnap.fragment = function () {\n    var args = Array.prototype.slice.call(arguments, 0),\n        f = glob.doc.createDocumentFragment();\n    for (var i = 0, ii = args.length; i < ii; i++) {\n        var item = args[i];\n        if (item.node && item.node.nodeType) {\n            f.appendChild(item.node);\n        }\n        if (item.nodeType) {\n            f.appendChild(item);\n        }\n        if (typeof item == "string") {\n            f.appendChild(Snap.parse(item).node);\n        }\n    }\n    return new Fragment(f);\n};\n\nfunction make(name, parent) {\n    var res = $(name);\n    parent.appendChild(res);\n    var el = wrap(res);\n    return el;\n}\nfunction Paper(w, h) {\n    var res,\n        desc,\n        defs,\n        proto = Paper.prototype;\n    if (w && w.tagName == "svg") {\n        if (w.snap in hub) {\n            return hub[w.snap];\n        }\n        var doc = w.ownerDocument;\n        res = new Element(w);\n        desc = w.getElementsByTagName("desc")[0];\n        defs = w.getElementsByTagName("defs")[0];\n        if (!desc) {\n            desc = $("desc");\n            desc.appendChild(doc.createTextNode("Created with Snap"));\n            res.node.appendChild(desc);\n        }\n        if (!defs) {\n            defs = $("defs");\n            res.node.appendChild(defs);\n        }\n        res.defs = defs;\n        for (var key in proto) if (proto[has](key)) {\n            res[key] = proto[key];\n        }\n        res.paper = res.root = res;\n    } else {\n        res = make("svg", glob.doc.body);\n        $(res.node, {\n            height: h,\n            version: 1.1,\n            width: w,\n            xmlns: xmlns\n        });\n    }\n    return res;\n}\nfunction wrap(dom) {\n    if (!dom) {\n        return dom;\n    }\n    if (dom instanceof Element || dom instanceof Fragment) {\n        return dom;\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == "svg") {\n        return new Paper(dom);\n    }\n    if (dom.tagName && dom.tagName.toLowerCase() == "object" && dom.type == "image/svg+xml") {\n        return new Paper(dom.contentDocument.getElementsByTagName("svg")[0]);\n    }\n    return new Element(dom);\n}\n\nSnap._.make = make;\nSnap._.wrap = wrap;\n/*\\\n * Paper.el\n [ method ]\n **\n * Creates an element on paper with a given name and no attributes\n **\n - name (string) tag name\n - attr (object) attributes\n = (Element) the current element\n > Usage\n | var c = paper.circle(10, 10, 10); // is the same as...\n | var c = paper.el("circle").attr({\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n | // and the same as\n | var c = paper.el("circle", {\n |     cx: 10,\n |     cy: 10,\n |     r: 10\n | });\n\\*/\nPaper.prototype.el = function (name, attr) {\n    var el = make(name, this.node);\n    attr && el.attr(attr);\n    return el;\n};\n/*\\\n * Element.children\n [ method ]\n **\n * Returns array of all the children of the element.\n = (array) array of Elements\n\\*/\nElement.prototype.children = function () {\n    var out = [],\n        ch = this.node.childNodes;\n    for (var i = 0, ii = ch.length; i < ii; i++) {\n        out[i] = Snap(ch[i]);\n    }\n    return out;\n};\nfunction jsonFiller(root, o) {\n    for (var i = 0, ii = root.length; i < ii; i++) {\n        var item = {\n                type: root[i].type,\n                attr: root[i].attr()\n            },\n            children = root[i].children();\n        o.push(item);\n        if (children.length) {\n            jsonFiller(children, item.childNodes = []);\n        }\n    }\n}\n/*\\\n * Element.toJSON\n [ method ]\n **\n * Returns object representation of the given element and all its children.\n = (object) in format\n o {\n o     type (string) this.type,\n o     attr (object) attributes map,\n o     childNodes (array) optional array of children in the same format\n o }\n\\*/\nElement.prototype.toJSON = function () {\n    var out = [];\n    jsonFiller([this], out);\n    return out[0];\n};\n// default\neve.on("snap.util.getattr", function () {\n    var att = eve.nt();\n    att = att.substring(att.lastIndexOf(".") + 1);\n    var css = att.replace(/[A-Z]/g, function (letter) {\n        return "-" + letter.toLowerCase();\n    });\n    if (cssAttr[has](css)) {\n        return this.node.ownerDocument.defaultView.getComputedStyle(this.node, null).getPropertyValue(css);\n    } else {\n        return $(this.node, att);\n    }\n});\nvar cssAttr = {\n    "alignment-baseline": 0,\n    "baseline-shift": 0,\n    "clip": 0,\n    "clip-path": 0,\n    "clip-rule": 0,\n    "color": 0,\n    "color-interpolation": 0,\n    "color-interpolation-filters": 0,\n    "color-profile": 0,\n    "color-rendering": 0,\n    "cursor": 0,\n    "direction": 0,\n    "display": 0,\n    "dominant-baseline": 0,\n    "enable-background": 0,\n    "fill": 0,\n    "fill-opacity": 0,\n    "fill-rule": 0,\n    "filter": 0,\n    "flood-color": 0,\n    "flood-opacity": 0,\n    "font": 0,\n    "font-family": 0,\n    "font-size": 0,\n    "font-size-adjust": 0,\n    "font-stretch": 0,\n    "font-style": 0,\n    "font-variant": 0,\n    "font-weight": 0,\n    "glyph-orientation-horizontal": 0,\n    "glyph-orientation-vertical": 0,\n    "image-rendering": 0,\n    "kerning": 0,\n    "letter-spacing": 0,\n    "lighting-color": 0,\n    "marker": 0,\n    "marker-end": 0,\n    "marker-mid": 0,\n    "marker-start": 0,\n    "mask": 0,\n    "opacity": 0,\n    "overflow": 0,\n    "pointer-events": 0,\n    "shape-rendering": 0,\n    "stop-color": 0,\n    "stop-opacity": 0,\n    "stroke": 0,\n    "stroke-dasharray": 0,\n    "stroke-dashoffset": 0,\n    "stroke-linecap": 0,\n    "stroke-linejoin": 0,\n    "stroke-miterlimit": 0,\n    "stroke-opacity": 0,\n    "stroke-width": 0,\n    "text-anchor": 0,\n    "text-decoration": 0,\n    "text-rendering": 0,\n    "unicode-bidi": 0,\n    "visibility": 0,\n    "word-spacing": 0,\n    "writing-mode": 0\n};\n\neve.on("snap.util.attr", function (value) {\n    var att = eve.nt(),\n        attr = {};\n    att = att.substring(att.lastIndexOf(".") + 1);\n    attr[att] = value;\n    var style = att.replace(/-(\\w)/gi, function (all, letter) {\n            return letter.toUpperCase();\n        }),\n        css = att.replace(/[A-Z]/g, function (letter) {\n            return "-" + letter.toLowerCase();\n        });\n    if (cssAttr[has](css)) {\n        this.node.style[style] = value == null ? E : value;\n    } else {\n        $(this.node, attr);\n    }\n});\n(function (proto) {}(Paper.prototype));\n\n// simple ajax\n/*\\\n * Snap.ajax\n [ method ]\n **\n * Simple implementation of Ajax\n **\n - url (string) URL\n - postData (object|string) data for post request\n - callback (function) callback\n - scope (object) #optional scope of callback\n * or\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n = (XMLHttpRequest) the XMLHttpRequest object, just in case\n\\*/\nSnap.ajax = function (url, postData, callback, scope){\n    var req = new XMLHttpRequest,\n        id = ID();\n    if (req) {\n        if (is(postData, "function")) {\n            scope = callback;\n            callback = postData;\n            postData = null;\n        } else if (is(postData, "object")) {\n            var pd = [];\n            for (var key in postData) if (postData.hasOwnProperty(key)) {\n                pd.push(encodeURIComponent(key) + "=" + encodeURIComponent(postData[key]));\n            }\n            postData = pd.join("&");\n        }\n        req.open((postData ? "POST" : "GET"), url, true);\n        if (postData) {\n            req.setRequestHeader("X-Requested-With", "XMLHttpRequest");\n            req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");\n        }\n        if (callback) {\n            eve.once("snap.ajax." + id + ".0", callback);\n            eve.once("snap.ajax." + id + ".200", callback);\n            eve.once("snap.ajax." + id + ".304", callback);\n        }\n        req.onreadystatechange = function() {\n            if (req.readyState != 4) return;\n            eve("snap.ajax." + id + "." + req.status, scope, req);\n        };\n        if (req.readyState == 4) {\n            return req;\n        }\n        req.send(postData);\n        return req;\n    }\n};\n/*\\\n * Snap.load\n [ method ]\n **\n * Loads external SVG file as a @Fragment (see @Snap.ajax for more advanced AJAX)\n **\n - url (string) URL\n - callback (function) callback\n - scope (object) #optional scope of callback\n\\*/\nSnap.load = function (url, callback, scope) {\n    Snap.ajax(url, function (req) {\n        var f = Snap.parse(req.responseText);\n        scope ? callback.call(scope, f) : callback(f);\n    });\n};\nvar getOffset = function (elem) {\n    var box = elem.getBoundingClientRect(),\n        doc = elem.ownerDocument,\n        body = doc.body,\n        docElem = doc.documentElement,\n        clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0,\n        top  = box.top  + (g.win.pageYOffset || docElem.scrollTop || body.scrollTop ) - clientTop,\n        left = box.left + (g.win.pageXOffset || docElem.scrollLeft || body.scrollLeft) - clientLeft;\n    return {\n        y: top,\n        x: left\n    };\n};\n/*\\\n * Snap.getElementByPoint\n [ method ]\n **\n * Returns you topmost element under given point.\n **\n = (object) Snap element object\n - x (number) x coordinate from the top left corner of the window\n - y (number) y coordinate from the top left corner of the window\n > Usage\n | Snap.getElementByPoint(mouseX, mouseY).attr({stroke: "#f00"});\n\\*/\nSnap.getElementByPoint = function (x, y) {\n    var paper = this,\n        svg = paper.canvas,\n        target = glob.doc.elementFromPoint(x, y);\n    if (glob.win.opera && target.tagName == "svg") {\n        var so = getOffset(target),\n            sr = target.createSVGRect();\n        sr.x = x - so.x;\n        sr.y = y - so.y;\n        sr.width = sr.height = 1;\n        var hits = target.getIntersectionList(sr, null);\n        if (hits.length) {\n            target = hits[hits.length - 1];\n        }\n    }\n    if (!target) {\n        return null;\n    }\n    return wrap(target);\n};\n/*\\\n * Snap.plugin\n [ method ]\n **\n * Let you write plugins. You pass in a function with five arguments, like this:\n | Snap.plugin(function (Snap, Element, Paper, global, Fragment) {\n |     Snap.newmethod = function () {};\n |     Element.prototype.newmethod = function () {};\n |     Paper.prototype.newmethod = function () {};\n | });\n * Inside the function you have access to all main objects (and their\n * prototypes). This allow you to extend anything you want.\n **\n - f (function) your plugin body\n\\*/\nSnap.plugin = function (f) {\n    f(Snap, Element, Paper, glob, Fragment);\n};\nglob.win.Snap = Snap;\nreturn Snap;\n}(window || this));\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        Str = String,\n        unit2px = Snap._unit2px,\n        $ = Snap._.$,\n        make = Snap._.make,\n        getSomeDefs = Snap._.getSomeDefs,\n        has = "hasOwnProperty",\n        wrap = Snap._.wrap;\n    /*\\\n     * Element.getBBox\n     [ method ]\n     **\n     * Returns the bounding box descriptor for the given element\n     **\n     = (object) bounding box descriptor:\n     o {\n     o     cx: (number) x of the center,\n     o     cy: (number) x of the center,\n     o     h: (number) height,\n     o     height: (number) height,\n     o     path: (string) path command for the box,\n     o     r0: (number) radius of a circle that fully encloses the box,\n     o     r1: (number) radius of the smallest circle that can be enclosed,\n     o     r2: (number) radius of the largest circle that can be enclosed,\n     o     vb: (string) box as a viewbox command,\n     o     w: (number) width,\n     o     width: (number) width,\n     o     x2: (number) x of the right side,\n     o     x: (number) x of the left side,\n     o     y2: (number) y of the bottom edge,\n     o     y: (number) y of the top edge\n     o }\n    \\*/\n    elproto.getBBox = function (isWithoutTransform) {\n        if (!Snap.Matrix || !Snap.path) {\n            return this.node.getBBox();\n        }\n        var el = this,\n            m = new Snap.Matrix;\n        if (el.removed) {\n            return Snap._.box();\n        }\n        while (el.type == "use") {\n            if (!isWithoutTransform) {\n                m = m.add(el.transform().localMatrix.translate(el.attr("x") || 0, el.attr("y") || 0));\n            }\n            if (el.original) {\n                el = el.original;\n            } else {\n                var href = el.attr("xlink:href");\n                el = el.original = el.node.ownerDocument.getElementById(href.substring(href.indexOf("#") + 1));\n            }\n        }\n        var _ = el._,\n            pathfinder = Snap.path.get[el.type] || Snap.path.get.deflt;\n        try {\n            if (isWithoutTransform) {\n                _.bboxwt = pathfinder ? Snap.path.getBBox(el.realPath = pathfinder(el)) : Snap._.box(el.node.getBBox());\n                return Snap._.box(_.bboxwt);\n            } else {\n                el.realPath = pathfinder(el);\n                el.matrix = el.transform().localMatrix;\n                _.bbox = Snap.path.getBBox(Snap.path.map(el.realPath, m.add(el.matrix)));\n                return Snap._.box(_.bbox);\n            }\n        } catch (e) {\n            // Firefox doesn’t give you bbox of hidden element\n            return Snap._.box();\n        }\n    };\n    var propString = function () {\n        return this.string;\n    };\n    function extractTransform(el, tstr) {\n        if (tstr == null) {\n            var doReturn = true;\n            if (el.type == "linearGradient" || el.type == "radialGradient") {\n                tstr = el.node.getAttribute("gradientTransform");\n            } else if (el.type == "pattern") {\n                tstr = el.node.getAttribute("patternTransform");\n            } else {\n                tstr = el.node.getAttribute("transform");\n            }\n            if (!tstr) {\n                return new Snap.Matrix;\n            }\n            tstr = Snap._.svgTransform2string(tstr);\n        } else {\n            if (!Snap._.rgTransform.test(tstr)) {\n                tstr = Snap._.svgTransform2string(tstr);\n            } else {\n                tstr = Str(tstr).replace(/\\.{3}|\\u2026/g, el._.transform || E);\n            }\n            if (is(tstr, "array")) {\n                tstr = Snap.path ? Snap.path.toString.call(tstr) : Str(tstr);\n            }\n            el._.transform = tstr;\n        }\n        var m = Snap._.transform2matrix(tstr, el.getBBox(1));\n        if (doReturn) {\n            return m;\n        } else {\n            el.matrix = m;\n        }\n    }\n    /*\\\n     * Element.transform\n     [ method ]\n     **\n     * Gets or sets transformation of the element\n     **\n     - tstr (string) transform string in Snap or SVG format\n     = (Element) the current element\n     * or\n     = (object) transformation descriptor:\n     o {\n     o     string (string) transform string,\n     o     globalMatrix (Matrix) matrix of all transformations applied to element or its parents,\n     o     localMatrix (Matrix) matrix of transformations applied only to the element,\n     o     diffMatrix (Matrix) matrix of difference between global and local transformations,\n     o     global (string) global transformation as string,\n     o     local (string) local transformation as string,\n     o     toString (function) returns `string` property\n     o }\n    \\*/\n    elproto.transform = function (tstr) {\n        var _ = this._;\n        if (tstr == null) {\n            var papa = this,\n                global = new Snap.Matrix(this.node.getCTM()),\n                local = extractTransform(this),\n                ms = [local],\n                m = new Snap.Matrix,\n                i,\n                localString = local.toTransformString(),\n                string = Str(local) == Str(this.matrix) ?\n                            Str(_.transform) : localString;\n            while (papa.type != "svg" && (papa = papa.parent())) {\n                ms.push(extractTransform(papa));\n            }\n            i = ms.length;\n            while (i--) {\n                m.add(ms[i]);\n            }\n            return {\n                string: string,\n                globalMatrix: global,\n                totalMatrix: m,\n                localMatrix: local,\n                diffMatrix: global.clone().add(local.invert()),\n                global: global.toTransformString(),\n                total: m.toTransformString(),\n                local: localString,\n                toString: propString\n            };\n        }\n        if (tstr instanceof Snap.Matrix) {\n            this.matrix = tstr;\n            this._.transform = tstr.toTransformString();\n        } else {\n            extractTransform(this, tstr);\n        }\n\n        if (this.node) {\n            if (this.type == "linearGradient" || this.type == "radialGradient") {\n                $(this.node, {gradientTransform: this.matrix});\n            } else if (this.type == "pattern") {\n                $(this.node, {patternTransform: this.matrix});\n            } else {\n                $(this.node, {transform: this.matrix});\n            }\n        }\n\n        return this;\n    };\n    /*\\\n     * Element.parent\n     [ method ]\n     **\n     * Returns the element\'s parent\n     **\n     = (Element) the parent element\n    \\*/\n    elproto.parent = function () {\n        return wrap(this.node.parentNode);\n    };\n    /*\\\n     * Element.append\n     [ method ]\n     **\n     * Appends the given element to current one\n     **\n     - el (Element|Set) element to append\n     = (Element) the parent element\n    \\*/\n    /*\\\n     * Element.add\n     [ method ]\n     **\n     * See @Element.append\n    \\*/\n    elproto.append = elproto.add = function (el) {\n        if (el) {\n            if (el.type == "set") {\n                var it = this;\n                el.forEach(function (el) {\n                    it.add(el);\n                });\n                return this;\n            }\n            el = wrap(el);\n            this.node.appendChild(el.node);\n            el.paper = this.paper;\n        }\n        return this;\n    };\n    /*\\\n     * Element.appendTo\n     [ method ]\n     **\n     * Appends the current element to the given one\n     **\n     - el (Element) parent element to append to\n     = (Element) the child element\n    \\*/\n    elproto.appendTo = function (el) {\n        if (el) {\n            el = wrap(el);\n            el.append(this);\n        }\n        return this;\n    };\n    /*\\\n     * Element.prepend\n     [ method ]\n     **\n     * Prepends the given element to the current one\n     **\n     - el (Element) element to prepend\n     = (Element) the parent element\n    \\*/\n    elproto.prepend = function (el) {\n        if (el) {\n            if (el.type == "set") {\n                var it = this,\n                    first;\n                el.forEach(function (el) {\n                    if (first) {\n                        first.after(el);\n                    } else {\n                        it.prepend(el);\n                    }\n                    first = el;\n                });\n                return this;\n            }\n            el = wrap(el);\n            var parent = el.parent();\n            this.node.insertBefore(el.node, this.node.firstChild);\n            this.add && this.add();\n            el.paper = this.paper;\n            this.parent() && this.parent().add();\n            parent && parent.add();\n        }\n        return this;\n    };\n    /*\\\n     * Element.prependTo\n     [ method ]\n     **\n     * Prepends the current element to the given one\n     **\n     - el (Element) parent element to prepend to\n     = (Element) the child element\n    \\*/\n    elproto.prependTo = function (el) {\n        el = wrap(el);\n        el.prepend(this);\n        return this;\n    };\n    /*\\\n     * Element.before\n     [ method ]\n     **\n     * Inserts given element before the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.before = function (el) {\n        if (el.type == "set") {\n            var it = this;\n            el.forEach(function (el) {\n                var parent = el.parent();\n                it.node.parentNode.insertBefore(el.node, it.node);\n                parent && parent.add();\n            });\n            this.parent().add();\n            return this;\n        }\n        el = wrap(el);\n        var parent = el.parent();\n        this.node.parentNode.insertBefore(el.node, this.node);\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.after\n     [ method ]\n     **\n     * Inserts given element after the current one\n     **\n     - el (Element) element to insert\n     = (Element) the parent element\n    \\*/\n    elproto.after = function (el) {\n        el = wrap(el);\n        var parent = el.parent();\n        if (this.node.nextSibling) {\n            this.node.parentNode.insertBefore(el.node, this.node.nextSibling);\n        } else {\n            this.node.parentNode.appendChild(el.node);\n        }\n        this.parent() && this.parent().add();\n        parent && parent.add();\n        el.paper = this.paper;\n        return this;\n    };\n    /*\\\n     * Element.insertBefore\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertBefore = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.insertAfter\n     [ method ]\n     **\n     * Inserts the element after the given one\n     **\n     - el (Element) element next to whom insert to\n     = (Element) the parent element\n    \\*/\n    elproto.insertAfter = function (el) {\n        el = wrap(el);\n        var parent = this.parent();\n        el.node.parentNode.insertBefore(this.node, el.node.nextSibling);\n        this.paper = el.paper;\n        parent && parent.add();\n        el.parent() && el.parent().add();\n        return this;\n    };\n    /*\\\n     * Element.remove\n     [ method ]\n     **\n     * Removes element from the DOM\n     = (Element) the detached element\n    \\*/\n    elproto.remove = function () {\n        var parent = this.parent();\n        this.node.parentNode && this.node.parentNode.removeChild(this.node);\n        delete this.paper;\n        this.removed = true;\n        parent && parent.add();\n        return this;\n    };\n    /*\\\n     * Element.select\n     [ method ]\n     **\n     * Gathers the nested @Element matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Element) result of query selection\n    \\*/\n    elproto.select = function (query) {\n        query = Str(query).replace(/([^\\\\]):/g, "$1\\\\:");\n        return wrap(this.node.querySelector(query));\n    };\n    /*\\\n     * Element.selectAll\n     [ method ]\n     **\n     * Gathers nested @Element objects matching the given set of CSS selectors\n     **\n     - query (string) CSS selector\n     = (Set|array) result of query selection\n    \\*/\n    elproto.selectAll = function (query) {\n        var nodelist = this.node.querySelectorAll(query),\n            set = (Snap.set || Array)();\n        for (var i = 0; i < nodelist.length; i++) {\n            set.push(wrap(nodelist[i]));\n        }\n        return set;\n    };\n    /*\\\n     * Element.asPX\n     [ method ]\n     **\n     * Returns given attribute of the element as a `px` value (not %, em, etc.)\n     **\n     - attr (string) attribute name\n     - value (string) #optional attribute value\n     = (Element) result of query selection\n    \\*/\n    elproto.asPX = function (attr, value) {\n        if (value == null) {\n            value = this.attr(attr);\n        }\n        return +unit2px(this, attr, value);\n    };\n    // SIERRA Element.use(): I suggest adding a note about how to access the original element the returned <use> instantiates. It\'s a part of SVG with which ordinary web developers may be least familiar.\n    /*\\\n     * Element.use\n     [ method ]\n     **\n     * Creates a `<use>` element linked to the current element\n     **\n     = (Element) the `<use>` element\n    \\*/\n    elproto.use = function () {\n        var use,\n            id = this.node.id;\n        if (!id) {\n            id = this.id;\n            $(this.node, {\n                id: id\n            });\n        }\n        if (this.type == "linearGradient" || this.type == "radialGradient" ||\n            this.type == "pattern") {\n            use = make(this.type, this.node.parentNode);\n        } else {\n            use = make("use", this.node.parentNode);\n        }\n        $(use.node, {\n            "xlink:href": "#" + id\n        });\n        use.original = this;\n        return use;\n    };\n    function fixids(el) {\n        var els = el.selectAll("*"),\n            it,\n            url = /^\\s*url\\(("|\'|)(.*)\\1\\)\\s*$/,\n            ids = [],\n            uses = {};\n        function urltest(it, name) {\n            var val = $(it.node, name);\n            val = val && val.match(url);\n            val = val && val[2];\n            if (val && val.charAt() == "#") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    var attr = {};\n                    attr[name] = URL(id);\n                    $(it.node, attr);\n                });\n            }\n        }\n        function linktest(it) {\n            var val = $(it.node, "xlink:href");\n            if (val && val.charAt() == "#") {\n                val = val.substring(1);\n            } else {\n                return;\n            }\n            if (val) {\n                uses[val] = (uses[val] || []).concat(function (id) {\n                    it.attr("xlink:href", "#" + id);\n                });\n            }\n        }\n        for (var i = 0, ii = els.length; i < ii; i++) {\n            it = els[i];\n            urltest(it, "fill");\n            urltest(it, "stroke");\n            urltest(it, "filter");\n            urltest(it, "mask");\n            urltest(it, "clip-path");\n            linktest(it);\n            var oldid = $(it.node, "id");\n            if (oldid) {\n                $(it.node, {id: it.id});\n                ids.push({\n                    old: oldid,\n                    id: it.id\n                });\n            }\n        }\n        for (i = 0, ii = ids.length; i < ii; i++) {\n            var fs = uses[ids[i].old];\n            if (fs) {\n                for (var j = 0, jj = fs.length; j < jj; j++) {\n                    fs[j](ids[i].id);\n                }\n            }\n        }\n    }\n    /*\\\n     * Element.clone\n     [ method ]\n     **\n     * Creates a clone of the element and inserts it after the element\n     **\n     = (Element) the clone\n    \\*/\n    elproto.clone = function () {\n        var clone = wrap(this.node.cloneNode(true));\n        if ($(clone.node, "id")) {\n            $(clone.node, {id: clone.id});\n        }\n        fixids(clone);\n        clone.insertAfter(this);\n        return clone;\n    };\n    /*\\\n     * Element.toDefs\n     [ method ]\n     **\n     * Moves element to the shared `<defs>` area\n     **\n     = (Element) the element\n    \\*/\n    elproto.toDefs = function () {\n        var defs = getSomeDefs(this);\n        defs.appendChild(this.node);\n        return this;\n    };\n    /*\\\n     * Element.toPattern\n     [ method ]\n     **\n     * Creates a `<pattern>` element from the current element\n     **\n     * To create a pattern you have to specify the pattern rect:\n     - x (string|number)\n     - y (string|number)\n     - width (string|number)\n     - height (string|number)\n     = (Element) the `<pattern>` element\n     * You can use pattern later on as an argument for `fill` attribute:\n     | var p = paper.path("M10-5-10,15M15,0,0,15M0-5-20,15").attr({\n     |         fill: "none",\n     |         stroke: "#bada55",\n     |         strokeWidth: 5\n     |     }).pattern(0, 0, 10, 10),\n     |     c = paper.circle(200, 200, 100);\n     | c.attr({\n     |     fill: p\n     | });\n    \\*/\n    elproto.pattern = elproto.toPattern = function (x, y, width, height) {\n        var p = make("pattern", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, "object") && "x" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        $(p.node, {\n            x: x,\n            y: y,\n            width: width,\n            height: height,\n            patternUnits: "userSpaceOnUse",\n            id: p.id,\n            viewBox: [x, y, width, height].join(" ")\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n// SIERRA Element.marker(): clarify what a reference point is. E.g., helps you offset the object from its edge such as when centering it over a path.\n// SIERRA Element.marker(): I suggest the method should accept default reference point values.  Perhaps centered with (refX = width/2) and (refY = height/2)? Also, couldn\'t it assume the element\'s current _width_ and _height_? And please specify what _x_ and _y_ mean: offsets? If so, from where?  Couldn\'t they also be assigned default values?\n    /*\\\n     * Element.marker\n     [ method ]\n     **\n     * Creates a `<marker>` element from the current element\n     **\n     * To create a marker you have to specify the bounding rect and reference point:\n     - x (number)\n     - y (number)\n     - width (number)\n     - height (number)\n     - refX (number)\n     - refY (number)\n     = (Element) the `<marker>` element\n     * You can specify the marker later as an argument for `marker-start`, `marker-end`, `marker-mid`, and `marker` attributes. The `marker` attribute places the marker at every point along the path, and `marker-mid` places them at every point except the start and end.\n    \\*/\n    // TODO add usage for markers\n    elproto.marker = function (x, y, width, height, refX, refY) {\n        var p = make("marker", getSomeDefs(this));\n        if (x == null) {\n            x = this.getBBox();\n        }\n        if (is(x, "object") && "x" in x) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            refX = x.refX || x.cx;\n            refY = x.refY || x.cy;\n            x = x.x;\n        }\n        $(p.node, {\n            viewBox: [x, y, width, height].join(" "),\n            markerWidth: width,\n            markerHeight: height,\n            orient: "auto",\n            refX: refX || 0,\n            refY: refY || 0,\n            id: p.id\n        });\n        p.node.appendChild(this.node);\n        return p;\n    };\n    // animation\n    function slice(from, to, f) {\n        return function (arr) {\n            var res = arr.slice(from, to);\n            if (res.length == 1) {\n                res = res[0];\n            }\n            return f ? f(res) : res;\n        };\n    }\n    var Animation = function (attr, ms, easing, callback) {\n        if (typeof easing == "function" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        this.attr = attr;\n        this.dur = ms;\n        easing && (this.easing = easing);\n        callback && (this.callback = callback);\n    };\n    Snap._.Animation = Animation;\n    /*\\\n     * Snap.animation\n     [ method ]\n     **\n     * Creates an animation object\n     **\n     - attr (object) attributes of final destination\n     - duration (number) duration of the animation, in milliseconds\n     - easing (function) #optional one of easing functions of @mina or custom one\n     - callback (function) #optional callback function that fires when animation ends\n     = (object) animation object\n    \\*/\n    Snap.animation = function (attr, ms, easing, callback) {\n        return new Animation(attr, ms, easing, callback);\n    };\n    /*\\\n     * Element.inAnim\n     [ method ]\n     **\n     * Returns a set of animations that may be able to manipulate the current element\n     **\n     = (object) in format:\n     o {\n     o     anim (object) animation object,\n     o     mina (object) @mina object,\n     o     curStatus (number) 0..1 — status of the animation: 0 — just started, 1 — just finished,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n    \\*/\n    elproto.inAnim = function () {\n        var el = this,\n            res = [];\n        for (var id in el.anims) if (el.anims[has](id)) {\n            (function (a) {\n                res.push({\n                    anim: new Animation(a._attrs, a.dur, a.easing, a._callback),\n                    mina: a,\n                    curStatus: a.status(),\n                    status: function (val) {\n                        return a.status(val);\n                    },\n                    stop: function () {\n                        a.stop();\n                    }\n                });\n            }(el.anims[id]));\n        }\n        return res;\n    };\n    /*\\\n     * Snap.animate\n     [ method ]\n     **\n     * Runs generic animation of one number into another with a caring function\n     **\n     - from (number|array) number or array of numbers\n     - to (number|array) number or array of numbers\n     - setter (function) caring function that accepts one number argument\n     - duration (number) duration, in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function to execute when animation ends\n     = (object) animation object in @mina format\n     o {\n     o     id (string) animation id, consider it read-only,\n     o     duration (function) gets or sets the duration of the animation,\n     o     easing (function) easing,\n     o     speed (function) gets or sets the speed of the animation,\n     o     status (function) gets or sets the status of the animation,\n     o     stop (function) stops the animation\n     o }\n     | var rect = Snap().rect(0, 0, 10, 10);\n     | Snap.animate(0, 10, function (val) {\n     |     rect.attr({\n     |         x: val\n     |     });\n     | }, 1000);\n     | // in given context is equivalent to\n     | rect.animate({x: 10}, 1000);\n    \\*/\n    Snap.animate = function (from, to, setter, ms, easing, callback) {\n        if (typeof easing == "function" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        var now = mina.time(),\n            anim = mina(from, to, now, now + ms, mina.time, setter, easing);\n        callback && eve.once("mina.finish." + anim.id, callback);\n        return anim;\n    };\n    /*\\\n     * Element.stop\n     [ method ]\n     **\n     * Stops all the animations for the current element\n     **\n     = (Element) the current element\n    \\*/\n    elproto.stop = function () {\n        var anims = this.inAnim();\n        for (var i = 0, ii = anims.length; i < ii; i++) {\n            anims[i].stop();\n        }\n        return this;\n    };\n    /*\\\n     * Element.animate\n     [ method ]\n     **\n     * Animates the given attributes of the element\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     = (Element) the current element\n    \\*/\n    elproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == "function" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var fkeys = [], tkeys = [], keys = {}, from, to, f, eq,\n            el = this;\n        for (var key in attrs) if (attrs[has](key)) {\n            if (el.equal) {\n                eq = el.equal(key, Str(attrs[key]));\n                from = eq.from;\n                to = eq.to;\n                f = eq.f;\n            } else {\n                from = +el.attr(key);\n                to = +attrs[key];\n            }\n            var len = is(from, "array") ? from.length : 1;\n            keys[key] = slice(fkeys.length, fkeys.length + len, f);\n            fkeys = fkeys.concat(from);\n            tkeys = tkeys.concat(to);\n        }\n        var now = mina.time(),\n            anim = mina(fkeys, tkeys, now, now + ms, mina.time, function (val) {\n                var attr = {};\n                for (var key in keys) if (keys[has](key)) {\n                    attr[key] = keys[key](val);\n                }\n                el.attr(attr);\n            }, easing);\n        el.anims[anim.id] = anim;\n        anim._attrs = attrs;\n        anim._callback = callback;\n        eve("snap.animcreated." + el.id, anim);\n        eve.once("mina.finish." + anim.id, function () {\n            delete el.anims[anim.id];\n            callback && callback.call(el);\n        });\n        eve.once("mina.stop." + anim.id, function () {\n            delete el.anims[anim.id];\n        });\n        return el;\n    };\n    var eldata = {};\n    /*\\\n     * Element.data\n     [ method ]\n     **\n     * Adds or retrieves given value associated with given key. (Don’t confuse\n     * with `data-` attributes)\n     *\n     * See also @Element.removeData\n     - key (string) key to store data\n     - value (any) #optional value to store\n     = (object) @Element\n     * or, if value is not specified:\n     = (any) value\n     > Usage\n     | for (var i = 0, i < 5, i++) {\n     |     paper.circle(10 + 15 * i, 10, 10)\n     |          .attr({fill: "#000"})\n     |          .data("i", i)\n     |          .click(function () {\n     |             alert(this.data("i"));\n     |          });\n     | }\n    \\*/\n    elproto.data = function (key, value) {\n        var data = eldata[this.id] = eldata[this.id] || {};\n        if (arguments.length == 0){\n            eve("snap.data.get." + this.id, this, data, null);\n            return data;\n        }\n        if (arguments.length == 1) {\n            if (Snap.is(key, "object")) {\n                for (var i in key) if (key[has](i)) {\n                    this.data(i, key[i]);\n                }\n                return this;\n            }\n            eve("snap.data.get." + this.id, this, data[key], key);\n            return data[key];\n        }\n        data[key] = value;\n        eve("snap.data.set." + this.id, this, value, key);\n        return this;\n    };\n    /*\\\n     * Element.removeData\n     [ method ]\n     **\n     * Removes value associated with an element by given key.\n     * If key is not provided, removes all the data of the element.\n     - key (string) #optional key\n     = (object) @Element\n    \\*/\n    elproto.removeData = function (key) {\n        if (key == null) {\n            eldata[this.id] = {};\n        } else {\n            eldata[this.id] && delete eldata[this.id][key];\n        }\n        return this;\n    };\n    /*\\\n     * Element.outerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element, equivalent to HTML\'s `outerHTML`.\n     *\n     * See also @Element.innerSVG\n     = (string) SVG code for the element\n    \\*/\n    /*\\\n     * Element.toString\n     [ method ]\n     **\n     * See @Element.outerSVG\n    \\*/\n    elproto.outerSVG = elproto.toString = toString(1);\n    /*\\\n     * Element.innerSVG\n     [ method ]\n     **\n     * Returns SVG code for the element\'s contents, equivalent to HTML\'s `innerHTML`\n     = (string) SVG code for the element\n    \\*/\n    elproto.innerSVG = toString();\n    function toString(type) {\n        return function () {\n            var res = type ? "<" + this.type : "",\n                attr = this.node.attributes,\n                chld = this.node.childNodes;\n            if (type) {\n                for (var i = 0, ii = attr.length; i < ii; i++) {\n                    res += " " + attr[i].name + \'="\' +\n                            attr[i].value.replace(/"/g, \'\\\\"\') + \'"\';\n                }\n            }\n            if (chld.length) {\n                type && (res += ">");\n                for (i = 0, ii = chld.length; i < ii; i++) {\n                    if (chld[i].nodeType == 3) {\n                        res += chld[i].nodeValue;\n                    } else if (chld[i].nodeType == 1) {\n                        res += wrap(chld[i]).toString();\n                    }\n                }\n                type && (res += "</" + this.type + ">");\n            } else {\n                type && (res += "/>");\n            }\n            return res;\n        };\n    }\n    elproto.toDataURL = function () {\n        if (window && window.btoa) {\n            var bb = this.getBBox(),\n                svg = Snap.format(\'<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="{width}" height="{height}" viewBox="{x} {y} {width} {height}">{contents}</svg>\', {\n                x: +bb.x.toFixed(3),\n                y: +bb.y.toFixed(3),\n                width: +bb.width.toFixed(3),\n                height: +bb.height.toFixed(3),\n                contents: this.outerSVG()\n            });\n            return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(svg)));\n        }\n    };\n    /*\\\n     * Fragment.select\n     [ method ]\n     **\n     * See @Element.select\n    \\*/\n    Fragment.prototype.select = elproto.select;\n    /*\\\n     * Fragment.selectAll\n     [ method ]\n     **\n     * See @Element.selectAll\n    \\*/\n    Fragment.prototype.selectAll = elproto.selectAll;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var objectToString = Object.prototype.toString,\n        Str = String,\n        math = Math,\n        E = "";\n    function Matrix(a, b, c, d, e, f) {\n        if (b == null && objectToString.call(a) == "[object SVGMatrix]") {\n            this.a = a.a;\n            this.b = a.b;\n            this.c = a.c;\n            this.d = a.d;\n            this.e = a.e;\n            this.f = a.f;\n            return;\n        }\n        if (a != null) {\n            this.a = +a;\n            this.b = +b;\n            this.c = +c;\n            this.d = +d;\n            this.e = +e;\n            this.f = +f;\n        } else {\n            this.a = 1;\n            this.b = 0;\n            this.c = 0;\n            this.d = 1;\n            this.e = 0;\n            this.f = 0;\n        }\n    }\n    (function (matrixproto) {\n        /*\\\n         * Matrix.add\n         [ method ]\n         **\n         * Adds the given matrix to existing one\n         - a (number)\n         - b (number)\n         - c (number)\n         - d (number)\n         - e (number)\n         - f (number)\n         * or\n         - matrix (object) @Matrix\n        \\*/\n        matrixproto.add = function (a, b, c, d, e, f) {\n            var out = [[], [], []],\n                m = [[this.a, this.c, this.e], [this.b, this.d, this.f], [0, 0, 1]],\n                matrix = [[a, c, e], [b, d, f], [0, 0, 1]],\n                x, y, z, res;\n\n            if (a && a instanceof Matrix) {\n                matrix = [[a.a, a.c, a.e], [a.b, a.d, a.f], [0, 0, 1]];\n            }\n\n            for (x = 0; x < 3; x++) {\n                for (y = 0; y < 3; y++) {\n                    res = 0;\n                    for (z = 0; z < 3; z++) {\n                        res += m[x][z] * matrix[z][y];\n                    }\n                    out[x][y] = res;\n                }\n            }\n            this.a = out[0][0];\n            this.b = out[1][0];\n            this.c = out[0][1];\n            this.d = out[1][1];\n            this.e = out[0][2];\n            this.f = out[1][2];\n            return this;\n        };\n        /*\\\n         * Matrix.invert\n         [ method ]\n         **\n         * Returns an inverted version of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.invert = function () {\n            var me = this,\n                x = me.a * me.d - me.b * me.c;\n            return new Matrix(me.d / x, -me.b / x, -me.c / x, me.a / x, (me.c * me.f - me.d * me.e) / x, (me.b * me.e - me.a * me.f) / x);\n        };\n        /*\\\n         * Matrix.clone\n         [ method ]\n         **\n         * Returns a copy of the matrix\n         = (object) @Matrix\n        \\*/\n        matrixproto.clone = function () {\n            return new Matrix(this.a, this.b, this.c, this.d, this.e, this.f);\n        };\n        /*\\\n         * Matrix.translate\n         [ method ]\n         **\n         * Translate the matrix\n         - x (number) horizontal offset distance\n         - y (number) vertical offset distance\n        \\*/\n        matrixproto.translate = function (x, y) {\n            return this.add(1, 0, 0, 1, x, y);\n        };\n        /*\\\n         * Matrix.scale\n         [ method ]\n         **\n         * Scales the matrix\n         - x (number) amount to be scaled, with `1` resulting in no change\n         - y (number) #optional amount to scale along the vertical axis. (Otherwise `x` applies to both axes.)\n         - cx (number) #optional horizontal origin point from which to scale\n         - cy (number) #optional vertical origin point from which to scale\n         * Default cx, cy is the middle point of the element.\n        \\*/\n        matrixproto.scale = function (x, y, cx, cy) {\n            y == null && (y = x);\n            (cx || cy) && this.add(1, 0, 0, 1, cx, cy);\n            this.add(x, 0, 0, y, 0, 0);\n            (cx || cy) && this.add(1, 0, 0, 1, -cx, -cy);\n            return this;\n        };\n        /*\\\n         * Matrix.rotate\n         [ method ]\n         **\n         * Rotates the matrix\n         - a (number) angle of rotation, in degrees\n         - x (number) horizontal origin point from which to rotate\n         - y (number) vertical origin point from which to rotate\n        \\*/\n        matrixproto.rotate = function (a, x, y) {\n            a = Snap.rad(a);\n            x = x || 0;\n            y = y || 0;\n            var cos = +math.cos(a).toFixed(9),\n                sin = +math.sin(a).toFixed(9);\n            this.add(cos, sin, -sin, cos, x, y);\n            return this.add(1, 0, 0, 1, -x, -y);\n        };\n        /*\\\n         * Matrix.x\n         [ method ]\n         **\n         * Returns x coordinate for given point after transformation described by the matrix. See also @Matrix.y\n         - x (number)\n         - y (number)\n         = (number) x\n        \\*/\n        matrixproto.x = function (x, y) {\n            return x * this.a + y * this.c + this.e;\n        };\n        /*\\\n         * Matrix.y\n         [ method ]\n         **\n         * Returns y coordinate for given point after transformation described by the matrix. See also @Matrix.x\n         - x (number)\n         - y (number)\n         = (number) y\n        \\*/\n        matrixproto.y = function (x, y) {\n            return x * this.b + y * this.d + this.f;\n        };\n        matrixproto.get = function (i) {\n            return +this[Str.fromCharCode(97 + i)].toFixed(4);\n        };\n        matrixproto.toString = function () {\n            return "matrix(" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)].join() + ")";\n        };\n        matrixproto.offset = function () {\n            return [this.e.toFixed(4), this.f.toFixed(4)];\n        };\n        function norm(a) {\n            return a[0] * a[0] + a[1] * a[1];\n        }\n        function normalize(a) {\n            var mag = math.sqrt(norm(a));\n            a[0] && (a[0] /= mag);\n            a[1] && (a[1] /= mag);\n        }\n        /*\\\n         * Matrix.determinant\n         [ method ]\n         **\n         * Finds determinant of the given matrix.\n         = (number) determinant\n        \\*/\n        matrixproto.determinant = function () {\n            return this.a * this.d - this.b * this.c;\n        };\n        /*\\\n         * Matrix.split\n         [ method ]\n         **\n         * Splits matrix into primitive transformations\n         = (object) in format:\n         o dx (number) translation by x\n         o dy (number) translation by y\n         o scalex (number) scale by x\n         o scaley (number) scale by y\n         o shear (number) shear\n         o rotate (number) rotation in deg\n         o isSimple (boolean) could it be represented via simple transformations\n        \\*/\n        matrixproto.split = function () {\n            var out = {};\n            // translation\n            out.dx = this.e;\n            out.dy = this.f;\n\n            // scale and shear\n            var row = [[this.a, this.c], [this.b, this.d]];\n            out.scalex = math.sqrt(norm(row[0]));\n            normalize(row[0]);\n\n            out.shear = row[0][0] * row[1][0] + row[0][1] * row[1][1];\n            row[1] = [row[1][0] - row[0][0] * out.shear, row[1][1] - row[0][1] * out.shear];\n\n            out.scaley = math.sqrt(norm(row[1]));\n            normalize(row[1]);\n            out.shear /= out.scaley;\n\n            if (this.determinant() < 0) {\n                out.scalex = -out.scalex;\n            }\n\n            // rotation\n            var sin = -row[0][1],\n                cos = row[1][1];\n            if (cos < 0) {\n                out.rotate = Snap.deg(math.acos(cos));\n                if (sin < 0) {\n                    out.rotate = 360 - out.rotate;\n                }\n            } else {\n                out.rotate = Snap.deg(math.asin(sin));\n            }\n\n            out.isSimple = !+out.shear.toFixed(9) && (out.scalex.toFixed(9) == out.scaley.toFixed(9) || !out.rotate);\n            out.isSuperSimple = !+out.shear.toFixed(9) && out.scalex.toFixed(9) == out.scaley.toFixed(9) && !out.rotate;\n            out.noRotation = !+out.shear.toFixed(9) && !out.rotate;\n            return out;\n        };\n        /*\\\n         * Matrix.toTransformString\n         [ method ]\n         **\n         * Returns transform string that represents given matrix\n         = (string) transform string\n        \\*/\n        matrixproto.toTransformString = function (shorter) {\n            var s = shorter || this.split();\n            if (!+s.shear.toFixed(9)) {\n                s.scalex = +s.scalex.toFixed(4);\n                s.scaley = +s.scaley.toFixed(4);\n                s.rotate = +s.rotate.toFixed(4);\n                return  (s.dx || s.dy ? "t" + [+s.dx.toFixed(4), +s.dy.toFixed(4)] : E) + \n                        (s.scalex != 1 || s.scaley != 1 ? "s" + [s.scalex, s.scaley, 0, 0] : E) +\n                        (s.rotate ? "r" + [+s.rotate.toFixed(4), 0, 0] : E);\n            } else {\n                return "m" + [this.get(0), this.get(1), this.get(2), this.get(3), this.get(4), this.get(5)];\n            }\n        };\n    })(Matrix.prototype);\n    /*\\\n     * Snap.Matrix\n     [ method ]\n     **\n     * Matrix constructor, extend on your own risk.\n     * To create matrices use @Snap.matrix.\n    \\*/\n    Snap.Matrix = Matrix;\n    /*\\\n     * Snap.matrix\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns a matrix based on the given parameters\n     - a (number)\n     - b (number)\n     - c (number)\n     - d (number)\n     - e (number)\n     - f (number)\n     * or\n     - svgMatrix (SVGMatrix)\n     = (object) @Matrix\n    \\*/\n    Snap.matrix = function (a, b, c, d, e, f) {\n        return new Matrix(a, b, c, d, e, f);\n    };\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var has = "hasOwnProperty",\n        make = Snap._.make,\n        wrap = Snap._.wrap,\n        is = Snap.is,\n        getSomeDefs = Snap._.getSomeDefs,\n        reURLValue = /^url\\(#?([^)]+)\\)$/,\n        $ = Snap._.$,\n        URL = Snap.url,\n        Str = String,\n        separator = Snap._.separator,\n        E = "";\n    // Attributes event handlers\n    eve.on("snap.util.attr.mask", function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value.type == "mask") {\n                var mask = value;\n            } else {\n                mask = make("mask", getSomeDefs(this));\n                mask.node.appendChild(value.node);\n            }\n            !mask.node.id && $(mask.node, {\n                id: mask.id\n            });\n            $(this.node, {\n                mask: URL(mask.id)\n            });\n        }\n    });\n    (function (clipIt) {\n        eve.on("snap.util.attr.clip", clipIt);\n        eve.on("snap.util.attr.clip-path", clipIt);\n        eve.on("snap.util.attr.clipPath", clipIt);\n    }(function (value) {\n        if (value instanceof Element || value instanceof Fragment) {\n            eve.stop();\n            if (value.type == "clipPath") {\n                var clip = value;\n            } else {\n                clip = make("clipPath", getSomeDefs(this));\n                clip.node.appendChild(value.node);\n                !clip.node.id && $(clip.node, {\n                    id: clip.id\n                });\n            }\n            $(this.node, {\n                "clip-path": URL(clip.node.id || clip.id)\n            });\n        }\n    }));\n    function fillStroke(name) {\n        return function (value) {\n            eve.stop();\n            if (value instanceof Fragment && value.node.childNodes.length == 1 &&\n                (value.node.firstChild.tagName == "radialGradient" ||\n                value.node.firstChild.tagName == "linearGradient" ||\n                value.node.firstChild.tagName == "pattern")) {\n                value = value.node.firstChild;\n                getSomeDefs(this).appendChild(value);\n                value = wrap(value);\n            }\n            if (value instanceof Element) {\n                if (value.type == "radialGradient" || value.type == "linearGradient"\n                   || value.type == "pattern") {\n                    if (!value.node.id) {\n                        $(value.node, {\n                            id: value.id\n                        });\n                    }\n                    var fill = URL(value.node.id);\n                } else {\n                    fill = value.attr(name);\n                }\n            } else {\n                fill = Snap.color(value);\n                if (fill.error) {\n                    var grad = Snap(getSomeDefs(this).ownerSVGElement).gradient(value);\n                    if (grad) {\n                        if (!grad.node.id) {\n                            $(grad.node, {\n                                id: grad.id\n                            });\n                        }\n                        fill = URL(grad.node.id);\n                    } else {\n                        fill = value;\n                    }\n                } else {\n                    fill = Str(fill);\n                }\n            }\n            var attrs = {};\n            attrs[name] = fill;\n            $(this.node, attrs);\n            this.node.style[name] = E;\n        };\n    }\n    eve.on("snap.util.attr.fill", fillStroke("fill"));\n    eve.on("snap.util.attr.stroke", fillStroke("stroke"));\n    var gradrg = /^([lr])(?:\\(([^)]*)\\))?(.*)$/i;\n    eve.on("snap.util.grad.parse", function parseGrad(string) {\n        string = Str(string);\n        var tokens = string.match(gradrg);\n        if (!tokens) {\n            return null;\n        }\n        var type = tokens[1],\n            params = tokens[2],\n            stops = tokens[3];\n        params = params.split(/\\s*,\\s*/).map(function (el) {\n            return +el == el ? +el : el;\n        });\n        if (params.length == 1 && params[0] == 0) {\n            params = [];\n        }\n        stops = stops.split("-");\n        stops = stops.map(function (el) {\n            el = el.split(":");\n            var out = {\n                color: el[0]\n            };\n            if (el[1]) {\n                out.offset = parseFloat(el[1]);\n            }\n            return out;\n        });\n        return {\n            type: type,\n            params: params,\n            stops: stops\n        };\n    });\n\n    eve.on("snap.util.attr.d", function (value) {\n        eve.stop();\n        if (is(value, "array") && is(value[0], "array")) {\n            value = Snap.path.toString.call(value);\n        }\n        value = Str(value);\n        if (value.match(/[ruo]/i)) {\n            value = Snap.path.toAbsolute(value);\n        }\n        $(this.node, {d: value});\n    })(-1);\n    eve.on("snap.util.attr.#text", function (value) {\n        eve.stop();\n        value = Str(value);\n        var txt = glob.doc.createTextNode(value);\n        while (this.node.firstChild) {\n            this.node.removeChild(this.node.firstChild);\n        }\n        this.node.appendChild(txt);\n    })(-1);\n    eve.on("snap.util.attr.path", function (value) {\n        eve.stop();\n        this.attr({d: value});\n    })(-1);\n    eve.on("snap.util.attr.class", function (value) {\n        eve.stop();\n        this.node.className.baseVal = value;\n    })(-1);\n    eve.on("snap.util.attr.viewBox", function (value) {\n        var vb;\n        if (is(value, "object") && "x" in value) {\n            vb = [value.x, value.y, value.width, value.height].join(" ");\n        } else if (is(value, "array")) {\n            vb = value.join(" ");\n        } else {\n            vb = value;\n        }\n        $(this.node, {\n            viewBox: vb\n        });\n        eve.stop();\n    })(-1);\n    eve.on("snap.util.attr.transform", function (value) {\n        this.transform(value);\n        eve.stop();\n    })(-1);\n    eve.on("snap.util.attr.r", function (value) {\n        if (this.type == "rect") {\n            eve.stop();\n            $(this.node, {\n                rx: value,\n                ry: value\n            });\n        }\n    })(-1);\n    eve.on("snap.util.attr.textpath", function (value) {\n        eve.stop();\n        if (this.type == "text") {\n            var id, tp, node;\n            if (!value && this.textPath) {\n                tp = this.textPath;\n                while (tp.node.firstChild) {\n                    this.node.appendChild(tp.node.firstChild);\n                }\n                tp.remove();\n                delete this.textPath;\n                return;\n            }\n            if (is(value, "string")) {\n                var defs = getSomeDefs(this),\n                    path = wrap(defs.parentNode).path(value);\n                defs.appendChild(path.node);\n                id = path.id;\n                path.attr({id: id});\n            } else {\n                value = wrap(value);\n                if (value instanceof Element) {\n                    id = value.attr("id");\n                    if (!id) {\n                        id = value.id;\n                        value.attr({id: id});\n                    }\n                }\n            }\n            if (id) {\n                tp = this.textPath;\n                node = this.node;\n                if (tp) {\n                    tp.attr({"xlink:href": "#" + id});\n                } else {\n                    tp = $("textPath", {\n                        "xlink:href": "#" + id\n                    });\n                    while (node.firstChild) {\n                        tp.appendChild(node.firstChild);\n                    }\n                    node.appendChild(tp);\n                    this.textPath = wrap(tp);\n                }\n            }\n        }\n    })(-1);\n    eve.on("snap.util.attr.text", function (value) {\n        if (this.type == "text") {\n            var i = 0,\n                node = this.node,\n                tuner = function (chunk) {\n                    var out = $("tspan");\n                    if (is(chunk, "array")) {\n                        for (var i = 0; i < chunk.length; i++) {\n                            out.appendChild(tuner(chunk[i]));\n                        }\n                    } else {\n                        out.appendChild(glob.doc.createTextNode(chunk));\n                    }\n                    out.normalize && out.normalize();\n                    return out;\n                };\n            while (node.firstChild) {\n                node.removeChild(node.firstChild);\n            }\n            var tuned = tuner(value);\n            while (tuned.firstChild) {\n                node.appendChild(tuned.firstChild);\n            }\n        }\n        eve.stop();\n    })(-1);\n    function setFontSize(value) {\n        eve.stop();\n        if (value == +value) {\n            value += "px";\n        }\n        this.node.style.fontSize = value;\n    }\n    eve.on("snap.util.attr.fontSize", setFontSize)(-1);\n    eve.on("snap.util.attr.font-size", setFontSize)(-1);\n\n\n    eve.on("snap.util.getattr.transform", function () {\n        eve.stop();\n        return this.transform();\n    })(-1);\n    eve.on("snap.util.getattr.textpath", function () {\n        eve.stop();\n        return this.textPath;\n    })(-1);\n    // Markers\n    (function () {\n        function getter(end) {\n            return function () {\n                eve.stop();\n                var style = glob.doc.defaultView.getComputedStyle(this.node, null).getPropertyValue("marker-" + end);\n                if (style == "none") {\n                    return style;\n                } else {\n                    return Snap(glob.doc.getElementById(style.match(reURLValue)[1]));\n                }\n            };\n        }\n        function setter(end) {\n            return function (value) {\n                eve.stop();\n                var name = "marker" + end.charAt(0).toUpperCase() + end.substring(1);\n                if (value == "" || !value) {\n                    this.node.style[name] = "none";\n                    return;\n                }\n                if (value.type == "marker") {\n                    var id = value.node.id;\n                    if (!id) {\n                        $(value.node, {id: value.id});\n                    }\n                    this.node.style[name] = URL(id);\n                    return;\n                }\n            };\n        }\n        eve.on("snap.util.getattr.marker-end", getter("end"))(-1);\n        eve.on("snap.util.getattr.markerEnd", getter("end"))(-1);\n        eve.on("snap.util.getattr.marker-start", getter("start"))(-1);\n        eve.on("snap.util.getattr.markerStart", getter("start"))(-1);\n        eve.on("snap.util.getattr.marker-mid", getter("mid"))(-1);\n        eve.on("snap.util.getattr.markerMid", getter("mid"))(-1);\n        eve.on("snap.util.attr.marker-end", setter("end"))(-1);\n        eve.on("snap.util.attr.markerEnd", setter("end"))(-1);\n        eve.on("snap.util.attr.marker-start", setter("start"))(-1);\n        eve.on("snap.util.attr.markerStart", setter("start"))(-1);\n        eve.on("snap.util.attr.marker-mid", setter("mid"))(-1);\n        eve.on("snap.util.attr.markerMid", setter("mid"))(-1);\n    }());\n    eve.on("snap.util.getattr.r", function () {\n        if (this.type == "rect" && $(this.node, "rx") == $(this.node, "ry")) {\n            eve.stop();\n            return $(this.node, "rx");\n        }\n    })(-1);\n    function textExtract(node) {\n        var out = [];\n        var children = node.childNodes;\n        for (var i = 0, ii = children.length; i < ii; i++) {\n            var chi = children[i];\n            if (chi.nodeType == 3) {\n                out.push(chi.nodeValue);\n            }\n            if (chi.tagName == "tspan") {\n                if (chi.childNodes.length == 1 && chi.firstChild.nodeType == 3) {\n                    out.push(chi.firstChild.nodeValue);\n                } else {\n                    out.push(textExtract(chi));\n                }\n            }\n        }\n        return out;\n    }\n    eve.on("snap.util.getattr.text", function () {\n        if (this.type == "text" || this.type == "tspan") {\n            eve.stop();\n            var out = textExtract(this.node);\n            return out.length == 1 ? out[0] : out;\n        }\n    })(-1);\n    eve.on("snap.util.getattr.#text", function () {\n        return this.node.textContent;\n    })(-1);\n    eve.on("snap.util.getattr.viewBox", function () {\n        eve.stop();\n        var vb = $(this.node, "viewBox");\n        if (vb) {\n            vb = vb.split(separator);\n            return Snap._.box(+vb[0], +vb[1], +vb[2], +vb[3]);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on("snap.util.getattr.points", function () {\n        var p = $(this.node, "points");\n        eve.stop();\n        if (p) {\n            return p.split(separator);\n        } else {\n            return;\n        }\n    })(-1);\n    eve.on("snap.util.getattr.path", function () {\n        var p = $(this.node, "d");\n        eve.stop();\n        return p;\n    })(-1);\n    eve.on("snap.util.getattr.class", function () {\n        return this.node.className.baseVal;\n    })(-1);\n    function getFontSize() {\n        eve.stop();\n        return this.node.style.fontSize;\n    }\n    eve.on("snap.util.getattr.fontSize", getFontSize)(-1);\n    eve.on("snap.util.getattr.font-size", getFontSize)(-1);\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var rgNotSpace = /\\S+/g,\n        rgBadSpace = /[\\t\\r\\n\\f]/g,\n        rgTrim = /(^\\s+|\\s+$)/g,\n        Str = String,\n        elproto = Element.prototype;\n    /*\\\n     * Element.addClass\n     [ method ]\n     **\n     * Adds given class name or list of class names to the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.addClass = function (value) {\n        var classes = Str(value || "").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n\n        if (classes.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (!~pos) {\n                    curClasses.push(clazz);\n                }\n            }\n\n            finalValue = curClasses.join(" ");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.removeClass\n     [ method ]\n     **\n     * Removes given class name or list of class names from the element.\n     - value (string) class name or space separated list of class names\n     **\n     = (Element) original element.\n    \\*/\n    elproto.removeClass = function (value) {\n        var classes = Str(value || "").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        if (curClasses.length) {\n            j = 0;\n            while ((clazz = classes[j++])) {\n                pos = curClasses.indexOf(clazz);\n                if (~pos) {\n                    curClasses.splice(pos, 1);\n                }\n            }\n\n            finalValue = curClasses.join(" ");\n            if (className != finalValue) {\n                elem.className.baseVal = finalValue;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Element.hasClass\n     [ method ]\n     **\n     * Checks if the element has a given class name in the list of class names applied to it.\n     - value (string) class name\n     **\n     = (boolean) `true` if the element has given class\n    \\*/\n    elproto.hasClass = function (value) {\n        var elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [];\n        return !!~curClasses.indexOf(value);\n    };\n    /*\\\n     * Element.toggleClass\n     [ method ]\n     **\n     * Add or remove one or more classes from the element, depending on either\n     * the class’s presence or the value of the `flag` argument.\n     - value (string) class name or space separated list of class names\n     - flag (boolean) value to determine whether the class should be added or removed\n     **\n     = (Element) original element.\n    \\*/\n    elproto.toggleClass = function (value, flag) {\n        if (flag != null) {\n            if (flag) {\n                return this.addClass(value);\n            } else {\n                return this.removeClass(value);\n            }\n        }\n        var classes = (value || "").match(rgNotSpace) || [],\n            elem = this.node,\n            className = elem.className.baseVal,\n            curClasses = className.match(rgNotSpace) || [],\n            j,\n            pos,\n            clazz,\n            finalValue;\n        j = 0;\n        while ((clazz = classes[j++])) {\n            pos = curClasses.indexOf(clazz);\n            if (~pos) {\n                curClasses.splice(pos, 1);\n            } else {\n                curClasses.push(clazz);\n            }\n        }\n\n        finalValue = curClasses.join(" ");\n        if (className != finalValue) {\n            elem.className.baseVal = finalValue;\n        }\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var operators = {\n            "+": function (x, y) {\n                    return x + y;\n                },\n            "-": function (x, y) {\n                    return x - y;\n                },\n            "/": function (x, y) {\n                    return x / y;\n                },\n            "*": function (x, y) {\n                    return x * y;\n                }\n        },\n        Str = String,\n        reUnit = /[a-z]+$/i,\n        reAddon = /^\\s*([+\\-\\/*])\\s*=\\s*([\\d.eE+\\-]+)\\s*([^\\d\\s]+)?\\s*$/;\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    eve.on("snap.util.attr", function (val) {\n        var plus = Str(val).match(reAddon);\n        if (plus) {\n            var evnt = eve.nt(),\n                name = evnt.substring(evnt.lastIndexOf(".") + 1),\n                a = this.attr(name),\n                atr = {};\n            eve.stop();\n            var unit = plus[3] || "",\n                aUnit = a.match(reUnit),\n                op = operators[plus[1]];\n            if (aUnit && aUnit == unit) {\n                val = op(parseFloat(a), +plus[2]);\n            } else {\n                a = this.asPX(name);\n                val = op(this.asPX(name), this.asPX(name, plus[2] + unit));\n            }\n            if (isNaN(a) || isNaN(val)) {\n                return;\n            }\n            atr[name] = val;\n            this.attr(atr);\n        }\n    })(-10);\n    eve.on("snap.util.equal", function (name, b) {\n        var A, B, a = Str(this.attr(name) || ""),\n            el = this,\n            bplus = Str(b).match(reAddon);\n        if (bplus) {\n            eve.stop();\n            var unit = bplus[3] || "",\n                aUnit = a.match(reUnit),\n                op = operators[bplus[1]];\n            if (aUnit && aUnit == unit) {\n                return {\n                    from: parseFloat(a),\n                    to: op(parseFloat(a), +bplus[2]),\n                    f: getUnit(aUnit)\n                };\n            } else {\n                a = this.asPX(name);\n                return {\n                    from: a,\n                    to: op(a, this.asPX(name, bplus[2] + unit)),\n                    f: getNumber\n                };\n            }\n        }\n    })(-10);\n});\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var proto = Paper.prototype,\n        is = Snap.is;\n    /*\\\n     * Paper.rect\n     [ method ]\n     *\n     * Draws a rectangle\n     **\n     - x (number) x coordinate of the top left corner\n     - y (number) y coordinate of the top left corner\n     - width (number) width\n     - height (number) height\n     - rx (number) #optional horizontal radius for rounded corners, default is 0\n     - ry (number) #optional vertical radius for rounded corners, default is rx or 0\n     = (object) the `rect` element\n     **\n     > Usage\n     | // regular rectangle\n     | var c = paper.rect(10, 10, 50, 50);\n     | // rectangle with rounded corners\n     | var c = paper.rect(40, 40, 50, 50, 10);\n    \\*/\n    proto.rect = function (x, y, w, h, rx, ry) {\n        var attr;\n        if (ry == null) {\n            ry = rx;\n        }\n        if (is(x, "object") && x == "[object Object]") {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                width: w,\n                height: h\n            };\n            if (rx != null) {\n                attr.rx = rx;\n                attr.ry = ry;\n            }\n        }\n        return this.el("rect", attr);\n    };\n    /*\\\n     * Paper.circle\n     [ method ]\n     **\n     * Draws a circle\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - r (number) radius\n     = (object) the `circle` element\n     **\n     > Usage\n     | var c = paper.circle(50, 50, 40);\n    \\*/\n    proto.circle = function (cx, cy, r) {\n        var attr;\n        if (is(cx, "object") && cx == "[object Object]") {\n            attr = cx;\n        } else if (cx != null) {\n            attr = {\n                cx: cx,\n                cy: cy,\n                r: r\n            };\n        }\n        return this.el("circle", attr);\n    };\n\n    var preload = (function () {\n        function onerror() {\n            this.parentNode.removeChild(this);\n        }\n        return function (src, f) {\n            var img = glob.doc.createElement("img"),\n                body = glob.doc.body;\n            img.style.cssText = "position:absolute;left:-9999em;top:-9999em";\n            img.onload = function () {\n                f.call(img);\n                img.onload = img.onerror = null;\n                body.removeChild(img);\n            };\n            img.onerror = onerror;\n            body.appendChild(img);\n            img.src = src;\n        };\n    }());\n\n    /*\\\n     * Paper.image\n     [ method ]\n     **\n     * Places an image on the surface\n     **\n     - src (string) URI of the source image\n     - x (number) x offset position\n     - y (number) y offset position\n     - width (number) width of the image\n     - height (number) height of the image\n     = (object) the `image` element\n     * or\n     = (object) Snap element object with type `image`\n     **\n     > Usage\n     | var c = paper.image("apple.png", 10, 10, 80, 80);\n    \\*/\n    proto.image = function (src, x, y, width, height) {\n        var el = this.el("image");\n        if (is(src, "object") && "src" in src) {\n            el.attr(src);\n        } else if (src != null) {\n            var set = {\n                "xlink:href": src,\n                preserveAspectRatio: "none"\n            };\n            if (x != null && y != null) {\n                set.x = x;\n                set.y = y;\n            }\n            if (width != null && height != null) {\n                set.width = width;\n                set.height = height;\n            } else {\n                preload(src, function () {\n                    Snap._.$(el.node, {\n                        width: this.offsetWidth,\n                        height: this.offsetHeight\n                    });\n                });\n            }\n            Snap._.$(el.node, set);\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ellipse\n     [ method ]\n     **\n     * Draws an ellipse\n     **\n     - x (number) x coordinate of the centre\n     - y (number) y coordinate of the centre\n     - rx (number) horizontal radius\n     - ry (number) vertical radius\n     = (object) the `ellipse` element\n     **\n     > Usage\n     | var c = paper.ellipse(50, 50, 40, 20);\n    \\*/\n    proto.ellipse = function (cx, cy, rx, ry) {\n        var attr;\n        if (is(cx, "object") && cx == "[object Object]") {\n            attr = cx;\n        } else if (cx != null) {\n            attr ={\n                cx: cx,\n                cy: cy,\n                rx: rx,\n                ry: ry\n            };\n        }\n        return this.el("ellipse", attr);\n    };\n    // SIERRA Paper.path(): Unclear from the link what a Catmull-Rom curveto is, and why it would make life any easier.\n    /*\\\n     * Paper.path\n     [ method ]\n     **\n     * Creates a `<path>` element using the given string as the path\'s definition\n     - pathString (string) #optional path string in SVG format\n     * Path string consists of one-letter commands, followed by comma seprarated arguments in numerical form. Example:\n     | "M10,20L30,40"\n     * This example features two commands: `M`, with arguments `(10, 20)` and `L` with arguments `(30, 40)`. Uppercase letter commands express coordinates in absolute terms, while lowercase commands express them in relative terms from the most recently declared coordinates.\n     *\n     # <p>Here is short list of commands available, for more details see <a href="http://www.w3.org/TR/SVG/paths.html#PathData" title="Details of a path\'s data attribute\'s format are described in the SVG specification.">SVG path string format</a> or <a href="https://developer.mozilla.org/en/SVG/Tutorial/Paths">article about path strings at MDN</a>.</p>\n     # <table><thead><tr><th>Command</th><th>Name</th><th>Parameters</th></tr></thead><tbody>\n     # <tr><td>M</td><td>moveto</td><td>(x y)+</td></tr>\n     # <tr><td>Z</td><td>closepath</td><td>(none)</td></tr>\n     # <tr><td>L</td><td>lineto</td><td>(x y)+</td></tr>\n     # <tr><td>H</td><td>horizontal lineto</td><td>x+</td></tr>\n     # <tr><td>V</td><td>vertical lineto</td><td>y+</td></tr>\n     # <tr><td>C</td><td>curveto</td><td>(x1 y1 x2 y2 x y)+</td></tr>\n     # <tr><td>S</td><td>smooth curveto</td><td>(x2 y2 x y)+</td></tr>\n     # <tr><td>Q</td><td>quadratic Bézier curveto</td><td>(x1 y1 x y)+</td></tr>\n     # <tr><td>T</td><td>smooth quadratic Bézier curveto</td><td>(x y)+</td></tr>\n     # <tr><td>A</td><td>elliptical arc</td><td>(rx ry x-axis-rotation large-arc-flag sweep-flag x y)+</td></tr>\n     # <tr><td>R</td><td><a href="http://en.wikipedia.org/wiki/Catmull–Rom_spline#Catmull.E2.80.93Rom_spline">Catmull-Rom curveto</a>*</td><td>x1 y1 (x y)+</td></tr></tbody></table>\n     * * _Catmull-Rom curveto_ is a not standard SVG command and added to make life easier.\n     * Note: there is a special case when a path consists of only three commands: `M10,10R…z`. In this case the path connects back to its starting point.\n     > Usage\n     | var c = paper.path("M10 10L90 90");\n     | // draw a diagonal line:\n     | // move to 10,10, line to 90,90\n    \\*/\n    proto.path = function (d) {\n        var attr;\n        if (is(d, "object") && !is(d, "array")) {\n            attr = d;\n        } else if (d) {\n            attr = {d: d};\n        }\n        return this.el("path", attr);\n    };\n    /*\\\n     * Paper.g\n     [ method ]\n     **\n     * Creates a group element\n     **\n     - varargs (…) #optional elements to nest within the group\n     = (object) the `g` element\n     **\n     > Usage\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g(c2, c1); // note that the order of elements is different\n     * or\n     | var c1 = paper.circle(),\n     |     c2 = paper.rect(),\n     |     g = paper.g();\n     | g.add(c2, c1);\n    \\*/\n    /*\\\n     * Paper.group\n     [ method ]\n     **\n     * See @Paper.g\n    \\*/\n    proto.group = proto.g = function (first) {\n        var attr,\n            el = this.el("g");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.svg\n     [ method ]\n     **\n     * Creates a nested SVG element.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `svg` element\n     **\n    \\*/\n    proto.svg = function (x, y, width, height, vbx, vby, vbw, vbh) {\n        var attrs = {};\n        if (is(x, "object") && y == null) {\n            attrs = x;\n        } else {\n            if (x != null) {\n                attrs.x = x;\n            }\n            if (y != null) {\n                attrs.y = y;\n            }\n            if (width != null) {\n                attrs.width = width;\n            }\n            if (height != null) {\n                attrs.height = height;\n            }\n            if (vbx != null && vby != null && vbw != null && vbh != null) {\n                attrs.viewBox = [vbx, vby, vbw, vbh];\n            }\n        }\n        return this.el("svg", attrs);\n    };\n    /*\\\n     * Paper.mask\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a mask.\n     **\n     = (object) the `mask` element\n     **\n    \\*/\n    proto.mask = function (first) {\n        var attr,\n            el = this.el("mask");\n        if (arguments.length == 1 && first && !first.type) {\n            el.attr(first);\n        } else if (arguments.length) {\n            el.add(Array.prototype.slice.call(arguments, 0));\n        }\n        return el;\n    };\n    /*\\\n     * Paper.ptrn\n     [ method ]\n     **\n     * Equivalent in behaviour to @Paper.g, except it’s a pattern.\n     - x (number) @optional X of the element\n     - y (number) @optional Y of the element\n     - width (number) @optional width of the element\n     - height (number) @optional height of the element\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     **\n     = (object) the `pattern` element\n     **\n    \\*/\n    proto.ptrn = function (x, y, width, height, vx, vy, vw, vh) {\n        if (is(x, "object")) {\n            var attr = x;\n        } else {\n            attr = {patternUnits: "userSpaceOnUse"};\n            if (x) {\n                attr.x = x;\n            }\n            if (y) {\n                attr.y = y;\n            }\n            if (width != null) {\n                attr.width = width;\n            }\n            if (height != null) {\n                attr.height = height;\n            }\n            if (vx != null && vy != null && vw != null && vh != null) {\n                attr.viewBox = [vx, vy, vw, vh];\n            } else {\n                attr.viewBox = [x || 0, y || 0, width || 0, height || 0];\n            }\n        }\n        return this.el("pattern", attr);\n    };\n    /*\\\n     * Paper.use\n     [ method ]\n     **\n     * Creates a <use> element.\n     - id (string) @optional id of element to link\n     * or\n     - id (Element) @optional element to link\n     **\n     = (object) the `use` element\n     **\n    \\*/\n    proto.use = function (id) {\n        if (id != null) {\n            if (id instanceof Element) {\n                if (!id.attr("id")) {\n                    id.attr({id: Snap._.id(id)});\n                }\n                id = id.attr("id");\n            }\n            if (String(id).charAt() == "#") {\n                id = id.substring(1);\n            }\n            return this.el("use", {"xlink:href": "#" + id});\n        } else {\n            return Element.prototype.use.call(this);\n        }\n    };\n    /*\\\n     * Paper.symbol\n     [ method ]\n     **\n     * Creates a <symbol> element.\n     - vbx (number) @optional viewbox X\n     - vby (number) @optional viewbox Y\n     - vbw (number) @optional viewbox width\n     - vbh (number) @optional viewbox height\n     = (object) the `symbol` element\n     **\n    \\*/\n    proto.symbol = function (vx, vy, vw, vh) {\n        var attr = {};\n        if (vx != null && vy != null && vw != null && vh != null) {\n            attr.viewBox = [vx, vy, vw, vh];\n        }\n\n        return this.el("symbol", attr);\n    };\n    /*\\\n     * Paper.text\n     [ method ]\n     **\n     * Draws a text string\n     **\n     - x (number) x coordinate position\n     - y (number) y coordinate position\n     - text (string|array) The text string to draw or array of strings to nest within separate `<tspan>` elements\n     = (object) the `text` element\n     **\n     > Usage\n     | var t1 = paper.text(50, 50, "Snap");\n     | var t2 = paper.text(50, 50, ["S","n","a","p"]);\n     | // Text path usage\n     | t1.attr({textpath: "M10,10L100,100"});\n     | // or\n     | var pth = paper.path("M10,10L100,100");\n     | t1.attr({textpath: pth});\n    \\*/\n    proto.text = function (x, y, text) {\n        var attr = {};\n        if (is(x, "object")) {\n            attr = x;\n        } else if (x != null) {\n            attr = {\n                x: x,\n                y: y,\n                text: text || ""\n            };\n        }\n        return this.el("text", attr);\n    };\n    /*\\\n     * Paper.line\n     [ method ]\n     **\n     * Draws a line\n     **\n     - x1 (number) x coordinate position of the start\n     - y1 (number) y coordinate position of the start\n     - x2 (number) x coordinate position of the end\n     - y2 (number) y coordinate position of the end\n     = (object) the `line` element\n     **\n     > Usage\n     | var t1 = paper.line(50, 50, 100, 100);\n    \\*/\n    proto.line = function (x1, y1, x2, y2) {\n        var attr = {};\n        if (is(x1, "object")) {\n            attr = x1;\n        } else if (x1 != null) {\n            attr = {\n                x1: x1,\n                x2: x2,\n                y1: y1,\n                y2: y2\n            };\n        }\n        return this.el("line", attr);\n    };\n    /*\\\n     * Paper.polyline\n     [ method ]\n     **\n     * Draws a polyline\n     **\n     - points (array) array of points\n     * or\n     - varargs (…) points\n     = (object) the `polyline` element\n     **\n     > Usage\n     | var p1 = paper.polyline([10, 10, 100, 100]);\n     | var p2 = paper.polyline(10, 10, 100, 100);\n    \\*/\n    proto.polyline = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, "object") && !is(points, "array")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el("polyline", attr);\n    };\n    /*\\\n     * Paper.polygon\n     [ method ]\n     **\n     * Draws a polygon. See @Paper.polyline\n    \\*/\n    proto.polygon = function (points) {\n        if (arguments.length > 1) {\n            points = Array.prototype.slice.call(arguments, 0);\n        }\n        var attr = {};\n        if (is(points, "object") && !is(points, "array")) {\n            attr = points;\n        } else if (points != null) {\n            attr = {points: points};\n        }\n        return this.el("polygon", attr);\n    };\n    // gradients\n    (function () {\n        var $ = Snap._.$;\n        // gradients\' helpers\n        function Gstops() {\n            return this.selectAll("stop");\n        }\n        function GaddStop(color, offset) {\n            var stop = $("stop"),\n                attr = {\n                    offset: +offset + "%"\n                };\n            color = Snap.color(color);\n            attr["stop-color"] = color.hex;\n            if (color.opacity < 1) {\n                attr["stop-opacity"] = color.opacity;\n            }\n            $(stop, attr);\n            this.node.appendChild(stop);\n            return this;\n        }\n        function GgetBBox() {\n            if (this.type == "linearGradient") {\n                var x1 = $(this.node, "x1") || 0,\n                    x2 = $(this.node, "x2") || 1,\n                    y1 = $(this.node, "y1") || 0,\n                    y2 = $(this.node, "y2") || 0;\n                return Snap._.box(x1, y1, math.abs(x2 - x1), math.abs(y2 - y1));\n            } else {\n                var cx = this.node.cx || .5,\n                    cy = this.node.cy || .5,\n                    r = this.node.r || 0;\n                return Snap._.box(cx - r, cy - r, r * 2, r * 2);\n            }\n        }\n        function gradient(defs, str) {\n            var grad = eve("snap.util.grad.parse", null, str).firstDefined(),\n                el;\n            if (!grad) {\n                return null;\n            }\n            grad.params.unshift(defs);\n            if (grad.type.toLowerCase() == "l") {\n                el = gradientLinear.apply(0, grad.params);\n            } else {\n                el = gradientRadial.apply(0, grad.params);\n            }\n            if (grad.type != grad.type.toLowerCase()) {\n                $(el.node, {\n                    gradientUnits: "userSpaceOnUse"\n                });\n            }\n            var stops = grad.stops,\n                len = stops.length,\n                start = 0,\n                j = 0;\n            function seed(i, end) {\n                var step = (end - start) / (i - j);\n                for (var k = j; k < i; k++) {\n                    stops[k].offset = +(+start + step * (k - j)).toFixed(2);\n                }\n                j = i;\n                start = end;\n            }\n            len--;\n            for (var i = 0; i < len; i++) if ("offset" in stops[i]) {\n                seed(i, stops[i].offset);\n            }\n            stops[len].offset = stops[len].offset || 100;\n            seed(len, stops[len].offset);\n            for (i = 0; i <= len; i++) {\n                var stop = stops[i];\n                el.addStop(stop.color, stop.offset);\n            }\n            return el;\n        }\n        function gradientLinear(defs, x1, y1, x2, y2) {\n            var el = Snap._.make("linearGradient", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (x1 != null) {\n                $(el.node, {\n                    x1: x1,\n                    y1: y1,\n                    x2: x2,\n                    y2: y2\n                });\n            }\n            return el;\n        }\n        function gradientRadial(defs, cx, cy, r, fx, fy) {\n            var el = Snap._.make("radialGradient", defs);\n            el.stops = Gstops;\n            el.addStop = GaddStop;\n            el.getBBox = GgetBBox;\n            if (cx != null) {\n                $(el.node, {\n                    cx: cx,\n                    cy: cy,\n                    r: r\n                });\n            }\n            if (fx != null && fy != null) {\n                $(el.node, {\n                    fx: fx,\n                    fy: fy\n                });\n            }\n            return el;\n        }\n        /*\\\n         * Paper.gradient\n         [ method ]\n         **\n         * Creates a gradient element\n         **\n         - gradient (string) gradient descriptor\n         > Gradient Descriptor\n         * The gradient descriptor is an expression formatted as\n         * follows: `<type>(<coords>)<colors>`.  The `<type>` can be\n         * either linear or radial.  The uppercase `L` or `R` letters\n         * indicate absolute coordinates offset from the SVG surface.\n         * Lowercase `l` or `r` letters indicate coordinates\n         * calculated relative to the element to which the gradient is\n         * applied.  Coordinates specify a linear gradient vector as\n         * `x1`, `y1`, `x2`, `y2`, or a radial gradient as `cx`, `cy`,\n         * `r` and optional `fx`, `fy` specifying a focal point away\n         * from the center of the circle. Specify `<colors>` as a list\n         * of dash-separated CSS color values.  Each color may be\n         * followed by a custom offset value, separated with a colon\n         * character.\n         > Examples\n         * Linear gradient, relative from top-left corner to bottom-right\n         * corner, from black through red to white:\n         | var g = paper.gradient("l(0, 0, 1, 1)#000-#f00-#fff");\n         * Linear gradient, absolute from (0, 0) to (100, 100), from black\n         * through red at 25% to white:\n         | var g = paper.gradient("L(0, 0, 100, 100)#000-#f00:25-#fff");\n         * Radial gradient, relative from the center of the element with radius\n         * half the width, from black to white:\n         | var g = paper.gradient("r(0.5, 0.5, 0.5)#000-#fff");\n         * To apply the gradient:\n         | paper.circle(50, 50, 40).attr({\n         |     fill: g\n         | });\n         = (object) the `gradient` element\n        \\*/\n        proto.gradient = function (str) {\n            return gradient(this.defs, str);\n        };\n        proto.gradientLinear = function (x1, y1, x2, y2) {\n            return gradientLinear(this.defs, x1, y1, x2, y2);\n        };\n        proto.gradientRadial = function (cx, cy, r, fx, fy) {\n            return gradientRadial(this.defs, cx, cy, r, fx, fy);\n        };\n        /*\\\n         * Paper.toString\n         [ method ]\n         **\n         * Returns SVG code for the @Paper\n         = (string) SVG code for the @Paper\n        \\*/\n        proto.toString = function () {\n            var doc = this.node.ownerDocument,\n                f = doc.createDocumentFragment(),\n                d = doc.createElement("div"),\n                svg = this.node.cloneNode(true),\n                res;\n            f.appendChild(d);\n            d.appendChild(svg);\n            Snap._.$(svg, {xmlns: "http://www.w3.org/2000/svg"});\n            res = d.innerHTML;\n            f.removeChild(f.firstChild);\n            return res;\n        };\n        /*\\\n         * Paper.toDataURL\n         [ method ]\n         **\n         * Returns SVG code for the @Paper as Data URI string.\n         = (string) Data URI string\n        \\*/\n        proto.toDataURL = function () {\n            if (window && window.btoa) {\n                return "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(this)));\n            }\n        };\n        /*\\\n         * Paper.clear\n         [ method ]\n         **\n         * Removes all child nodes of the paper, except <defs>.\n        \\*/\n        proto.clear = function () {\n            var node = this.node.firstChild,\n                next;\n            while (node) {\n                next = node.nextSibling;\n                if (node.tagName != "defs") {\n                    node.parentNode.removeChild(node);\n                } else {\n                    proto.clear.call({node: node});\n                }\n                node = next;\n            }\n        };\n    }());\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        is = Snap.is,\n        clone = Snap._.clone,\n        has = "hasOwnProperty",\n        p2s = /,?([a-z]),?/gi,\n        toFloat = parseFloat,\n        math = Math,\n        PI = math.PI,\n        mmin = math.min,\n        mmax = math.max,\n        pow = math.pow,\n        abs = math.abs;\n    function paths(ps) {\n        var p = paths.ps = paths.ps || {};\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p) if (p[has](key) && key != ps) {\n                p[key].sleep--;\n                !p[key].sleep && delete p[key];\n            }\n        });\n        return p[ps];\n    }\n    function box(x, y, width, height) {\n        if (x == null) {\n            x = y = width = height = 0;\n        }\n        if (y == null) {\n            y = x.y;\n            width = x.width;\n            height = x.height;\n            x = x.x;\n        }\n        return {\n            x: x,\n            y: y,\n            width: width,\n            w: width,\n            height: height,\n            h: height,\n            x2: x + width,\n            y2: y + height,\n            cx: x + width / 2,\n            cy: y + height / 2,\n            r1: math.min(width, height) / 2,\n            r2: math.max(width, height) / 2,\n            r0: math.sqrt(width * width + height * height) / 2,\n            path: rectPath(x, y, width, height),\n            vb: [x, y, width, height].join(" ")\n        };\n    }\n    function toString() {\n        return this.join(",").replace(p2s, "$1");\n    }\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n    function getPointAtSegmentLength(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length) {\n        if (length == null) {\n            return bezlen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y);\n        } else {\n            return findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y,\n                getTotLen(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, length));\n        }\n    }\n    function getLengthFactory(istotal, subpath) {\n        function O(val) {\n            return +(+val).toFixed(3);\n        }\n        return Snap._.cacher(function (path, length, onlystart) {\n            if (path instanceof Element) {\n                path = path.attr("d");\n            }\n            path = path2curve(path);\n            var x, y, p, l, sp = "", subpaths = {}, point,\n                len = 0;\n            for (var i = 0, ii = path.length; i < ii; i++) {\n                p = path[i];\n                if (p[0] == "M") {\n                    x = +p[1];\n                    y = +p[2];\n                } else {\n                    l = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                    if (len + l > length) {\n                        if (subpath && !subpaths.start) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            sp += [\n                                "C" + O(point.start.x),\n                                O(point.start.y),\n                                O(point.m.x),\n                                O(point.m.y),\n                                O(point.x),\n                                O(point.y)\n                            ];\n                            if (onlystart) {return sp;}\n                            subpaths.start = sp;\n                            sp = [\n                                "M" + O(point.x),\n                                O(point.y) + "C" + O(point.n.x),\n                                O(point.n.y),\n                                O(point.end.x),\n                                O(point.end.y),\n                                O(p[5]),\n                                O(p[6])\n                            ].join();\n                            len += l;\n                            x = +p[5];\n                            y = +p[6];\n                            continue;\n                        }\n                        if (!istotal && !subpath) {\n                            point = getPointAtSegmentLength(x, y, p[1], p[2], p[3], p[4], p[5], p[6], length - len);\n                            return point;\n                        }\n                    }\n                    len += l;\n                    x = +p[5];\n                    y = +p[6];\n                }\n                sp += p.shift() + p;\n            }\n            subpaths.end = sp;\n            point = istotal ? len : subpath ? subpaths : findDotsAtSegment(x, y, p[0], p[1], p[2], p[3], p[4], p[5], 1);\n            return point;\n        }, null, Snap._.clone);\n    }\n    var getTotalLength = getLengthFactory(1),\n        getPointAtLength = getLengthFactory(),\n        getSubpathsAtLength = getLengthFactory(0, 1);\n    function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t,\n            t13 = pow(t1, 3),\n            t12 = pow(t1, 2),\n            t2 = t * t,\n            t3 = t2 * t,\n            x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x,\n            y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y,\n            mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x),\n            my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y),\n            nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x),\n            ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y),\n            ax = t1 * p1x + t * c1x,\n            ay = t1 * p1y + t * c1y,\n            cx = t1 * c2x + t * p2x,\n            cy = t1 * c2y + t * p2y,\n            alpha = (90 - math.atan2(mx - nx, my - ny) * 180 / PI);\n        // (mx > nx || my < ny) && (alpha += 180);\n        return {\n            x: x,\n            y: y,\n            m: {x: mx, y: my},\n            n: {x: nx, y: ny},\n            start: {x: ax, y: ay},\n            end: {x: cx, y: cy},\n            alpha: alpha\n        };\n    }\n    function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {\n        if (!Snap.is(p1x, "array")) {\n            p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];\n        }\n        var bbox = curveDim.apply(null, p1x);\n        return box(\n            bbox.min.x,\n            bbox.min.y,\n            bbox.max.x - bbox.min.x,\n            bbox.max.y - bbox.min.y\n        );\n    }\n    function isPointInsideBBox(bbox, x, y) {\n        return  x >= bbox.x &&\n                x <= bbox.x + bbox.width &&\n                y >= bbox.y &&\n                y <= bbox.y + bbox.height;\n    }\n    function isBBoxIntersect(bbox1, bbox2) {\n        bbox1 = box(bbox1);\n        bbox2 = box(bbox2);\n        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y)\n            || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2)\n            || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y)\n            || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2)\n            || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2)\n            || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x\n                || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x)\n            && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y\n                || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);\n    }\n    function base3(t, p1, p2, p3, p4) {\n        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4,\n            t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;\n        return t * t2 - 3 * p1 + 3 * p2;\n    }\n    function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {\n        if (z == null) {\n            z = 1;\n        }\n        z = z > 1 ? 1 : z < 0 ? 0 : z;\n        var z2 = z / 2,\n            n = 12,\n            Tvalues = [-.1252,.1252,-.3678,.3678,-.5873,.5873,-.7699,.7699,-.9041,.9041,-.9816,.9816],\n            Cvalues = [0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],\n            sum = 0;\n        for (var i = 0; i < n; i++) {\n            var ct = z2 * Tvalues[i] + z2,\n                xbase = base3(ct, x1, x2, x3, x4),\n                ybase = base3(ct, y1, y2, y3, y4),\n                comb = xbase * xbase + ybase * ybase;\n            sum += Cvalues[i] * math.sqrt(comb);\n        }\n        return z2 * sum;\n    }\n    function getTotLen(x1, y1, x2, y2, x3, y3, x4, y4, ll) {\n        if (ll < 0 || bezlen(x1, y1, x2, y2, x3, y3, x4, y4) < ll) {\n            return;\n        }\n        var t = 1,\n            step = t / 2,\n            t2 = t - step,\n            l,\n            e = .01;\n        l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        while (abs(l - ll) > e) {\n            step /= 2;\n            t2 += (l < ll ? 1 : -1) * step;\n            l = bezlen(x1, y1, x2, y2, x3, y3, x4, y4, t2);\n        }\n        return t2;\n    }\n    function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {\n        if (\n            mmax(x1, x2) < mmin(x3, x4) ||\n            mmin(x1, x2) > mmax(x3, x4) ||\n            mmax(y1, y2) < mmin(y3, y4) ||\n            mmin(y1, y2) > mmax(y3, y4)\n        ) {\n            return;\n        }\n        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n            ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n            denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n\n        if (!denominator) {\n            return;\n        }\n        var px = nx / denominator,\n            py = ny / denominator,\n            px2 = +px.toFixed(2),\n            py2 = +py.toFixed(2);\n        if (\n            px2 < +mmin(x1, x2).toFixed(2) ||\n            px2 > +mmax(x1, x2).toFixed(2) ||\n            px2 < +mmin(x3, x4).toFixed(2) ||\n            px2 > +mmax(x3, x4).toFixed(2) ||\n            py2 < +mmin(y1, y2).toFixed(2) ||\n            py2 > +mmax(y1, y2).toFixed(2) ||\n            py2 < +mmin(y3, y4).toFixed(2) ||\n            py2 > +mmax(y3, y4).toFixed(2)\n        ) {\n            return;\n        }\n        return {x: px, y: py};\n    }\n    function inter(bez1, bez2) {\n        return interHelper(bez1, bez2);\n    }\n    function interCount(bez1, bez2) {\n        return interHelper(bez1, bez2, 1);\n    }\n    function interHelper(bez1, bez2, justCount) {\n        var bbox1 = bezierBBox(bez1),\n            bbox2 = bezierBBox(bez2);\n        if (!isBBoxIntersect(bbox1, bbox2)) {\n            return justCount ? 0 : [];\n        }\n        var l1 = bezlen.apply(0, bez1),\n            l2 = bezlen.apply(0, bez2),\n            n1 = ~~(l1 / 8),\n            n2 = ~~(l2 / 8),\n            dots1 = [],\n            dots2 = [],\n            xy = {},\n            res = justCount ? 0 : [];\n        for (var i = 0; i < n1 + 1; i++) {\n            var p = findDotsAtSegment.apply(0, bez1.concat(i / n1));\n            dots1.push({x: p.x, y: p.y, t: i / n1});\n        }\n        for (i = 0; i < n2 + 1; i++) {\n            p = findDotsAtSegment.apply(0, bez2.concat(i / n2));\n            dots2.push({x: p.x, y: p.y, t: i / n2});\n        }\n        for (i = 0; i < n1; i++) {\n            for (var j = 0; j < n2; j++) {\n                var di = dots1[i],\n                    di1 = dots1[i + 1],\n                    dj = dots2[j],\n                    dj1 = dots2[j + 1],\n                    ci = abs(di1.x - di.x) < .001 ? "y" : "x",\n                    cj = abs(dj1.x - dj.x) < .001 ? "y" : "x",\n                    is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);\n                if (is) {\n                    if (xy[is.x.toFixed(4)] == is.y.toFixed(4)) {\n                        continue;\n                    }\n                    xy[is.x.toFixed(4)] = is.y.toFixed(4);\n                    var t1 = di.t + abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t),\n                        t2 = dj.t + abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);\n                    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                        if (justCount) {\n                            res++;\n                        } else {\n                            res.push({\n                                x: is.x,\n                                y: is.y,\n                                t1: t1,\n                                t2: t2\n                            });\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function pathIntersection(path1, path2) {\n        return interPathHelper(path1, path2);\n    }\n    function pathIntersectionNumber(path1, path2) {\n        return interPathHelper(path1, path2, 1);\n    }\n    function interPathHelper(path1, path2, justCount) {\n        path1 = path2curve(path1);\n        path2 = path2curve(path2);\n        var x1, y1, x2, y2, x1m, y1m, x2m, y2m, bez1, bez2,\n            res = justCount ? 0 : [];\n        for (var i = 0, ii = path1.length; i < ii; i++) {\n            var pi = path1[i];\n            if (pi[0] == "M") {\n                x1 = x1m = pi[1];\n                y1 = y1m = pi[2];\n            } else {\n                if (pi[0] == "C") {\n                    bez1 = [x1, y1].concat(pi.slice(1));\n                    x1 = bez1[6];\n                    y1 = bez1[7];\n                } else {\n                    bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];\n                    x1 = x1m;\n                    y1 = y1m;\n                }\n                for (var j = 0, jj = path2.length; j < jj; j++) {\n                    var pj = path2[j];\n                    if (pj[0] == "M") {\n                        x2 = x2m = pj[1];\n                        y2 = y2m = pj[2];\n                    } else {\n                        if (pj[0] == "C") {\n                            bez2 = [x2, y2].concat(pj.slice(1));\n                            x2 = bez2[6];\n                            y2 = bez2[7];\n                        } else {\n                            bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];\n                            x2 = x2m;\n                            y2 = y2m;\n                        }\n                        var intr = interHelper(bez1, bez2, justCount);\n                        if (justCount) {\n                            res += intr;\n                        } else {\n                            for (var k = 0, kk = intr.length; k < kk; k++) {\n                                intr[k].segment1 = i;\n                                intr[k].segment2 = j;\n                                intr[k].bez1 = bez1;\n                                intr[k].bez2 = bez2;\n                            }\n                            res = res.concat(intr);\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n    function isPointInsidePath(path, x, y) {\n        var bbox = pathBBox(path);\n        return isPointInsideBBox(bbox, x, y) &&\n               interPathHelper(path, [["M", x, y], ["H", bbox.x2 + 10]], 1) % 2 == 1;\n    }\n    function pathBBox(path) {\n        var pth = paths(path);\n        if (pth.bbox) {\n            return clone(pth.bbox);\n        }\n        if (!path) {\n            return box();\n        }\n        path = path2curve(path);\n        var x = 0, \n            y = 0,\n            X = [],\n            Y = [],\n            p;\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            p = path[i];\n            if (p[0] == "M") {\n                x = p[1];\n                y = p[2];\n                X.push(x);\n                Y.push(y);\n            } else {\n                var dim = curveDim(x, y, p[1], p[2], p[3], p[4], p[5], p[6]);\n                X = X.concat(dim.min.x, dim.max.x);\n                Y = Y.concat(dim.min.y, dim.max.y);\n                x = p[5];\n                y = p[6];\n            }\n        }\n        var xmin = mmin.apply(0, X),\n            ymin = mmin.apply(0, Y),\n            xmax = mmax.apply(0, X),\n            ymax = mmax.apply(0, Y),\n            bb = box(xmin, ymin, xmax - xmin, ymax - ymin);\n        pth.bbox = clone(bb);\n        return bb;\n    }\n    function rectPath(x, y, w, h, r) {\n        if (r) {\n            return [\n                ["M", +x + (+r), y],\n                ["l", w - r * 2, 0],\n                ["a", r, r, 0, 0, 1, r, r],\n                ["l", 0, h - r * 2],\n                ["a", r, r, 0, 0, 1, -r, r],\n                ["l", r * 2 - w, 0],\n                ["a", r, r, 0, 0, 1, -r, -r],\n                ["l", 0, r * 2 - h],\n                ["a", r, r, 0, 0, 1, r, -r],\n                ["z"]\n            ];\n        }\n        var res = [["M", x, y], ["l", w, 0], ["l", 0, h], ["l", -w, 0], ["z"]];\n        res.toString = toString;\n        return res;\n    }\n    function ellipsePath(x, y, rx, ry, a) {\n        if (a == null && ry == null) {\n            ry = rx;\n        }\n        x = +x;\n        y = +y;\n        rx = +rx;\n        ry = +ry;\n        if (a != null) {\n            var rad = Math.PI / 180,\n                x1 = x + rx * Math.cos(-ry * rad),\n                x2 = x + rx * Math.cos(-a * rad),\n                y1 = y + rx * Math.sin(-ry * rad),\n                y2 = y + rx * Math.sin(-a * rad),\n                res = [["M", x1, y1], ["A", rx, rx, 0, +(a - ry > 180), 0, x2, y2]];\n        } else {\n            res = [\n                ["M", x, y],\n                ["m", 0, -ry],\n                ["a", rx, ry, 0, 1, 1, 0, 2 * ry],\n                ["a", rx, ry, 0, 1, 1, 0, -2 * ry],\n                ["z"]\n            ];\n        }\n        res.toString = toString;\n        return res;\n    }\n    var unit2px = Snap._unit2px,\n        getPath = {\n        path: function (el) {\n            return el.attr("path");\n        },\n        circle: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx, attr.cy, attr.r);\n        },\n        ellipse: function (el) {\n            var attr = unit2px(el);\n            return ellipsePath(attr.cx || 0, attr.cy || 0, attr.rx, attr.ry);\n        },\n        rect: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height, attr.rx, attr.ry);\n        },\n        image: function (el) {\n            var attr = unit2px(el);\n            return rectPath(attr.x || 0, attr.y || 0, attr.width, attr.height);\n        },\n        line: function (el) {\n            return "M" + [el.attr("x1") || 0, el.attr("y1") || 0, el.attr("x2"), el.attr("y2")];\n        },\n        polyline: function (el) {\n            return "M" + el.attr("points");\n        },\n        polygon: function (el) {\n            return "M" + el.attr("points") + "z";\n        },\n        deflt: function (el) {\n            var bbox = el.node.getBBox();\n            return rectPath(bbox.x, bbox.y, bbox.width, bbox.height);\n        }\n    };\n    function pathToRelative(pathArray) {\n        var pth = paths(pathArray),\n            lowerCase = String.prototype.toLowerCase;\n        if (pth.rel) {\n            return pathClone(pth.rel);\n        }\n        if (!Snap.is(pathArray, "array") || !Snap.is(pathArray && pathArray[0], "array")) {\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0;\n        if (pathArray[0][0] == "M") {\n            x = pathArray[0][1];\n            y = pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res.push(["M", x, y]);\n        }\n        for (var i = start, ii = pathArray.length; i < ii; i++) {\n            var r = res[i] = [],\n                pa = pathArray[i];\n            if (pa[0] != lowerCase.call(pa[0])) {\n                r[0] = lowerCase.call(pa[0]);\n                switch (r[0]) {\n                    case "a":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +(pa[6] - x).toFixed(3);\n                        r[7] = +(pa[7] - y).toFixed(3);\n                        break;\n                    case "v":\n                        r[1] = +(pa[1] - y).toFixed(3);\n                        break;\n                    case "m":\n                        mx = pa[1];\n                        my = pa[2];\n                    default:\n                        for (var j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +(pa[j] - ((j % 2) ? x : y)).toFixed(3);\n                        }\n                }\n            } else {\n                r = res[i] = [];\n                if (pa[0] == "m") {\n                    mx = pa[1] + x;\n                    my = pa[2] + y;\n                }\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    res[i][k] = pa[k];\n                }\n            }\n            var len = res[i].length;\n            switch (res[i][0]) {\n                case "z":\n                    x = mx;\n                    y = my;\n                    break;\n                case "h":\n                    x += +res[i][len - 1];\n                    break;\n                case "v":\n                    y += +res[i][len - 1];\n                    break;\n                default:\n                    x += +res[i][len - 2];\n                    y += +res[i][len - 1];\n            }\n        }\n        res.toString = toString;\n        pth.rel = pathClone(res);\n        return res;\n    }\n    function pathToAbsolute(pathArray) {\n        var pth = paths(pathArray);\n        if (pth.abs) {\n            return pathClone(pth.abs);\n        }\n        if (!is(pathArray, "array") || !is(pathArray && pathArray[0], "array")) { // rough assumption\n            pathArray = Snap.parsePathString(pathArray);\n        }\n        if (!pathArray || !pathArray.length) {\n            return [["M", 0, 0]];\n        }\n        var res = [],\n            x = 0,\n            y = 0,\n            mx = 0,\n            my = 0,\n            start = 0,\n            pa0;\n        if (pathArray[0][0] == "M") {\n            x = +pathArray[0][1];\n            y = +pathArray[0][2];\n            mx = x;\n            my = y;\n            start++;\n            res[0] = ["M", x, y];\n        }\n        var crz = pathArray.length == 3 &&\n            pathArray[0][0] == "M" &&\n            pathArray[1][0].toUpperCase() == "R" &&\n            pathArray[2][0].toUpperCase() == "Z";\n        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {\n            res.push(r = []);\n            pa = pathArray[i];\n            pa0 = pa[0];\n            if (pa0 != pa0.toUpperCase()) {\n                r[0] = pa0.toUpperCase();\n                switch (r[0]) {\n                    case "A":\n                        r[1] = pa[1];\n                        r[2] = pa[2];\n                        r[3] = pa[3];\n                        r[4] = pa[4];\n                        r[5] = pa[5];\n                        r[6] = +pa[6] + x;\n                        r[7] = +pa[7] + y;\n                        break;\n                    case "V":\n                        r[1] = +pa[1] + y;\n                        break;\n                    case "H":\n                        r[1] = +pa[1] + x;\n                        break;\n                    case "R":\n                        var dots = [x, y].concat(pa.slice(1));\n                        for (var j = 2, jj = dots.length; j < jj; j++) {\n                            dots[j] = +dots[j] + x;\n                            dots[++j] = +dots[j] + y;\n                        }\n                        res.pop();\n                        res = res.concat(catmullRom2bezier(dots, crz));\n                        break;\n                    case "O":\n                        res.pop();\n                        dots = ellipsePath(x, y, pa[1], pa[2]);\n                        dots.push(dots[0]);\n                        res = res.concat(dots);\n                        break;\n                    case "U":\n                        res.pop();\n                        res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                        r = ["U"].concat(res[res.length - 1].slice(-2));\n                        break;\n                    case "M":\n                        mx = +pa[1] + x;\n                        my = +pa[2] + y;\n                    default:\n                        for (j = 1, jj = pa.length; j < jj; j++) {\n                            r[j] = +pa[j] + ((j % 2) ? x : y);\n                        }\n                }\n            } else if (pa0 == "R") {\n                dots = [x, y].concat(pa.slice(1));\n                res.pop();\n                res = res.concat(catmullRom2bezier(dots, crz));\n                r = ["R"].concat(pa.slice(-2));\n            } else if (pa0 == "O") {\n                res.pop();\n                dots = ellipsePath(x, y, pa[1], pa[2]);\n                dots.push(dots[0]);\n                res = res.concat(dots);\n            } else if (pa0 == "U") {\n                res.pop();\n                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));\n                r = ["U"].concat(res[res.length - 1].slice(-2));\n            } else {\n                for (var k = 0, kk = pa.length; k < kk; k++) {\n                    r[k] = pa[k];\n                }\n            }\n            pa0 = pa0.toUpperCase();\n            if (pa0 != "O") {\n                switch (r[0]) {\n                    case "Z":\n                        x = +mx;\n                        y = +my;\n                        break;\n                    case "H":\n                        x = r[1];\n                        break;\n                    case "V":\n                        y = r[1];\n                        break;\n                    case "M":\n                        mx = r[r.length - 2];\n                        my = r[r.length - 1];\n                    default:\n                        x = r[r.length - 2];\n                        y = r[r.length - 1];\n                }\n            }\n        }\n        res.toString = toString;\n        pth.abs = pathClone(res);\n        return res;\n    }\n    function l2c(x1, y1, x2, y2) {\n        return [x1, y1, x2, y2, x2, y2];\n    }\n    function q2c(x1, y1, ax, ay, x2, y2) {\n        var _13 = 1 / 3,\n            _23 = 2 / 3;\n        return [\n                _13 * x1 + _23 * ax,\n                _13 * y1 + _23 * ay,\n                _13 * x2 + _23 * ax,\n                _13 * y2 + _23 * ay,\n                x2,\n                y2\n            ];\n    }\n    function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {\n        // for more information of where this math came from visit:\n        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n        var _120 = PI * 120 / 180,\n            rad = PI / 180 * (+angle || 0),\n            res = [],\n            xy,\n            rotate = Snap._.cacher(function (x, y, rad) {\n                var X = x * math.cos(rad) - y * math.sin(rad),\n                    Y = x * math.sin(rad) + y * math.cos(rad);\n                return {x: X, y: Y};\n            });\n        if (!recursive) {\n            xy = rotate(x1, y1, -rad);\n            x1 = xy.x;\n            y1 = xy.y;\n            xy = rotate(x2, y2, -rad);\n            x2 = xy.x;\n            y2 = xy.y;\n            var cos = math.cos(PI / 180 * angle),\n                sin = math.sin(PI / 180 * angle),\n                x = (x1 - x2) / 2,\n                y = (y1 - y2) / 2;\n            var h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n            if (h > 1) {\n                h = math.sqrt(h);\n                rx = h * rx;\n                ry = h * ry;\n            }\n            var rx2 = rx * rx,\n                ry2 = ry * ry,\n                k = (large_arc_flag == sweep_flag ? -1 : 1) *\n                    math.sqrt(abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x))),\n                cx = k * rx * y / ry + (x1 + x2) / 2,\n                cy = k * -ry * x / rx + (y1 + y2) / 2,\n                f1 = math.asin(((y1 - cy) / ry).toFixed(9)),\n                f2 = math.asin(((y2 - cy) / ry).toFixed(9));\n\n            f1 = x1 < cx ? PI - f1 : f1;\n            f2 = x2 < cx ? PI - f2 : f2;\n            f1 < 0 && (f1 = PI * 2 + f1);\n            f2 < 0 && (f2 = PI * 2 + f2);\n            if (sweep_flag && f1 > f2) {\n                f1 = f1 - PI * 2;\n            }\n            if (!sweep_flag && f2 > f1) {\n                f2 = f2 - PI * 2;\n            }\n        } else {\n            f1 = recursive[0];\n            f2 = recursive[1];\n            cx = recursive[2];\n            cy = recursive[3];\n        }\n        var df = f2 - f1;\n        if (abs(df) > _120) {\n            var f2old = f2,\n                x2old = x2,\n                y2old = y2;\n            f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);\n            x2 = cx + rx * math.cos(f2);\n            y2 = cy + ry * math.sin(f2);\n            res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);\n        }\n        df = f2 - f1;\n        var c1 = math.cos(f1),\n            s1 = math.sin(f1),\n            c2 = math.cos(f2),\n            s2 = math.sin(f2),\n            t = math.tan(df / 4),\n            hx = 4 / 3 * rx * t,\n            hy = 4 / 3 * ry * t,\n            m1 = [x1, y1],\n            m2 = [x1 + hx * s1, y1 - hy * c1],\n            m3 = [x2 + hx * s2, y2 - hy * c2],\n            m4 = [x2, y2];\n        m2[0] = 2 * m1[0] - m2[0];\n        m2[1] = 2 * m1[1] - m2[1];\n        if (recursive) {\n            return [m2, m3, m4].concat(res);\n        } else {\n            res = [m2, m3, m4].concat(res).join().split(",");\n            var newres = [];\n            for (var i = 0, ii = res.length; i < ii; i++) {\n                newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;\n            }\n            return newres;\n        }\n    }\n    function findDotAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {\n        var t1 = 1 - t;\n        return {\n            x: pow(t1, 3) * p1x + pow(t1, 2) * 3 * t * c1x + t1 * 3 * t * t * c2x + pow(t, 3) * p2x,\n            y: pow(t1, 3) * p1y + pow(t1, 2) * 3 * t * c1y + t1 * 3 * t * t * c2y + pow(t, 3) * p2y\n        };\n    }\n    \n    // Returns bounding box of cubic bezier curve.\n    // Source: http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html\n    // Original version: NISHIO Hirokazu\n    // Modifications: https://github.com/timo22345\n    function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {\n        var tvalues = [],\n            bounds = [[], []],\n            a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n        for (var i = 0; i < 2; ++i) {\n            if (i == 0) {\n                b = 6 * x0 - 12 * x1 + 6 * x2;\n                a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n                c = 3 * x1 - 3 * x0;\n            } else {\n                b = 6 * y0 - 12 * y1 + 6 * y2;\n                a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n                c = 3 * y1 - 3 * y0;\n            }\n            if (abs(a) < 1e-12) {\n                if (abs(b) < 1e-12) {\n                    continue;\n                }\n                t = -c / b;\n                if (0 < t && t < 1) {\n                    tvalues.push(t);\n                }\n                continue;\n            }\n            b2ac = b * b - 4 * c * a;\n            sqrtb2ac = math.sqrt(b2ac);\n            if (b2ac < 0) {\n                continue;\n            }\n            t1 = (-b + sqrtb2ac) / (2 * a);\n            if (0 < t1 && t1 < 1) {\n                tvalues.push(t1);\n            }\n            t2 = (-b - sqrtb2ac) / (2 * a);\n            if (0 < t2 && t2 < 1) {\n                tvalues.push(t2);\n            }\n        }\n\n        var x, y, j = tvalues.length,\n            jlen = j,\n            mt;\n        while (j--) {\n            t = tvalues[j];\n            mt = 1 - t;\n            bounds[0][j] = (mt * mt * mt * x0) + (3 * mt * mt * t * x1) + (3 * mt * t * t * x2) + (t * t * t * x3);\n            bounds[1][j] = (mt * mt * mt * y0) + (3 * mt * mt * t * y1) + (3 * mt * t * t * y2) + (t * t * t * y3);\n        }\n\n        bounds[0][jlen] = x0;\n        bounds[1][jlen] = y0;\n        bounds[0][jlen + 1] = x3;\n        bounds[1][jlen + 1] = y3;\n        bounds[0].length = bounds[1].length = jlen + 2;\n\n\n        return {\n          min: {x: mmin.apply(0, bounds[0]), y: mmin.apply(0, bounds[1])},\n          max: {x: mmax.apply(0, bounds[0]), y: mmax.apply(0, bounds[1])}\n        };\n    }\n\n    function path2curve(path, path2) {\n        var pth = !path2 && paths(path);\n        if (!path2 && pth.curve) {\n            return pathClone(pth.curve);\n        }\n        var p = pathToAbsolute(path),\n            p2 = path2 && pathToAbsolute(path2),\n            attrs = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            attrs2 = {x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null},\n            processPath = function (path, d, pcom) {\n                var nx, ny;\n                if (!path) {\n                    return ["C", d.x, d.y, d.x, d.y, d.x, d.y];\n                }\n                !(path[0] in {T: 1, Q: 1}) && (d.qx = d.qy = null);\n                switch (path[0]) {\n                    case "M":\n                        d.X = path[1];\n                        d.Y = path[2];\n                        break;\n                    case "A":\n                        path = ["C"].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));\n                        break;\n                    case "S":\n                        if (pcom == "C" || pcom == "S") { // In "S" case we have to take into account, if the previous command is C/S.\n                            nx = d.x * 2 - d.bx;          // And reflect the previous\n                            ny = d.y * 2 - d.by;          // command\'s control point relative to the current point.\n                        }\n                        else {                            // or some else or nothing\n                            nx = d.x;\n                            ny = d.y;\n                        }\n                        path = ["C", nx, ny].concat(path.slice(1));\n                        break;\n                    case "T":\n                        if (pcom == "Q" || pcom == "T") { // In "T" case we have to take into account, if the previous command is Q/T.\n                            d.qx = d.x * 2 - d.qx;        // And make a reflection similar\n                            d.qy = d.y * 2 - d.qy;        // to case "S".\n                        }\n                        else {                            // or something else or nothing\n                            d.qx = d.x;\n                            d.qy = d.y;\n                        }\n                        path = ["C"].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));\n                        break;\n                    case "Q":\n                        d.qx = path[1];\n                        d.qy = path[2];\n                        path = ["C"].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));\n                        break;\n                    case "L":\n                        path = ["C"].concat(l2c(d.x, d.y, path[1], path[2]));\n                        break;\n                    case "H":\n                        path = ["C"].concat(l2c(d.x, d.y, path[1], d.y));\n                        break;\n                    case "V":\n                        path = ["C"].concat(l2c(d.x, d.y, d.x, path[1]));\n                        break;\n                    case "Z":\n                        path = ["C"].concat(l2c(d.x, d.y, d.X, d.Y));\n                        break;\n                }\n                return path;\n            },\n            fixArc = function (pp, i) {\n                if (pp[i].length > 7) {\n                    pp[i].shift();\n                    var pi = pp[i];\n                    while (pi.length) {\n                        pcoms1[i] = "A"; // if created multiple C:s, their original seg is saved\n                        p2 && (pcoms2[i] = "A"); // the same as above\n                        pp.splice(i++, 0, ["C"].concat(pi.splice(0, 6)));\n                    }\n                    pp.splice(i, 1);\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            fixM = function (path1, path2, a1, a2, i) {\n                if (path1 && path2 && path1[i][0] == "M" && path2[i][0] != "M") {\n                    path2.splice(i, 0, ["M", a2.x, a2.y]);\n                    a1.bx = 0;\n                    a1.by = 0;\n                    a1.x = path1[i][1];\n                    a1.y = path1[i][2];\n                    ii = mmax(p.length, p2 && p2.length || 0);\n                }\n            },\n            pcoms1 = [], // path commands of original path p\n            pcoms2 = [], // path commands of original path p2\n            pfirst = "", // temporary holder for original path command\n            pcom = ""; // holder for previous path command of original path\n        for (var i = 0, ii = mmax(p.length, p2 && p2.length || 0); i < ii; i++) {\n            p[i] && (pfirst = p[i][0]); // save current path command\n\n            if (pfirst != "C") // C is not saved yet, because it may be result of conversion\n            {\n                pcoms1[i] = pfirst; // Save current path command\n                i && ( pcom = pcoms1[i - 1]); // Get previous path command pcom\n            }\n            p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath\n\n            if (pcoms1[i] != "A" && pfirst == "C") pcoms1[i] = "C"; // A is the only command\n            // which may produce multiple C:s\n            // so we have to make sure that C is also C in original path\n\n            fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1\n\n            if (p2) { // the same procedures is done to p2\n                p2[i] && (pfirst = p2[i][0]);\n                if (pfirst != "C") {\n                    pcoms2[i] = pfirst;\n                    i && (pcom = pcoms2[i - 1]);\n                }\n                p2[i] = processPath(p2[i], attrs2, pcom);\n\n                if (pcoms2[i] != "A" && pfirst == "C") {\n                    pcoms2[i] = "C";\n                }\n\n                fixArc(p2, i);\n            }\n            fixM(p, p2, attrs, attrs2, i);\n            fixM(p2, p, attrs2, attrs, i);\n            var seg = p[i],\n                seg2 = p2 && p2[i],\n                seglen = seg.length,\n                seg2len = p2 && seg2.length;\n            attrs.x = seg[seglen - 2];\n            attrs.y = seg[seglen - 1];\n            attrs.bx = toFloat(seg[seglen - 4]) || attrs.x;\n            attrs.by = toFloat(seg[seglen - 3]) || attrs.y;\n            attrs2.bx = p2 && (toFloat(seg2[seg2len - 4]) || attrs2.x);\n            attrs2.by = p2 && (toFloat(seg2[seg2len - 3]) || attrs2.y);\n            attrs2.x = p2 && seg2[seg2len - 2];\n            attrs2.y = p2 && seg2[seg2len - 1];\n        }\n        if (!p2) {\n            pth.curve = pathClone(p);\n        }\n        return p2 ? [p, p2] : p;\n    }\n    function mapPath(path, matrix) {\n        if (!matrix) {\n            return path;\n        }\n        var x, y, i, j, ii, jj, pathi;\n        path = path2curve(path);\n        for (i = 0, ii = path.length; i < ii; i++) {\n            pathi = path[i];\n            for (j = 1, jj = pathi.length; j < jj; j += 2) {\n                x = matrix.x(pathi[j], pathi[j + 1]);\n                y = matrix.y(pathi[j], pathi[j + 1]);\n                pathi[j] = x;\n                pathi[j + 1] = y;\n            }\n        }\n        return path;\n    }\n\n    // http://schepers.cc/getting-to-the-point\n    function catmullRom2bezier(crp, z) {\n        var d = [];\n        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {\n            var p = [\n                        {x: +crp[i - 2], y: +crp[i - 1]},\n                        {x: +crp[i],     y: +crp[i + 1]},\n                        {x: +crp[i + 2], y: +crp[i + 3]},\n                        {x: +crp[i + 4], y: +crp[i + 5]}\n                    ];\n            if (z) {\n                if (!i) {\n                    p[0] = {x: +crp[iLen - 2], y: +crp[iLen - 1]};\n                } else if (iLen - 4 == i) {\n                    p[3] = {x: +crp[0], y: +crp[1]};\n                } else if (iLen - 2 == i) {\n                    p[2] = {x: +crp[0], y: +crp[1]};\n                    p[3] = {x: +crp[2], y: +crp[3]};\n                }\n            } else {\n                if (iLen - 4 == i) {\n                    p[3] = p[2];\n                } else if (!i) {\n                    p[0] = {x: +crp[i], y: +crp[i + 1]};\n                }\n            }\n            d.push(["C",\n                  (-p[0].x + 6 * p[1].x + p[2].x) / 6,\n                  (-p[0].y + 6 * p[1].y + p[2].y) / 6,\n                  (p[1].x + 6 * p[2].x - p[3].x) / 6,\n                  (p[1].y + 6*p[2].y - p[3].y) / 6,\n                  p[2].x,\n                  p[2].y\n            ]);\n        }\n\n        return d;\n    }\n\n    // export\n    Snap.path = paths;\n\n    /*\\\n     * Snap.path.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the given path in pixels\n     **\n     - path (string) SVG path string\n     **\n     = (number) length\n    \\*/\n    Snap.path.getTotalLength = getTotalLength;\n    /*\\\n     * Snap.path.getPointAtLength\n     [ method ]\n     **\n     * Returns the coordinates of the point located at the given length along the given path\n     **\n     - path (string) SVG path string\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    Snap.path.getPointAtLength = getPointAtLength;\n    /*\\\n     * Snap.path.getSubpath\n     [ method ]\n     **\n     * Returns the subpath of a given path between given start and end lengths\n     **\n     - path (string) SVG path string\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    Snap.path.getSubpath = function (path, from, to) {\n        if (this.getTotalLength(path) - to < 1e-6) {\n            return getSubpathsAtLength(path, from).end;\n        }\n        var a = getSubpathsAtLength(path, to, 1);\n        return from ? getSubpathsAtLength(a, from).end : a;\n    };\n    /*\\\n     * Element.getTotalLength\n     [ method ]\n     **\n     * Returns the length of the path in pixels (only works for `path` elements)\n     = (number) length\n    \\*/\n    elproto.getTotalLength = function () {\n        if (this.node.getTotalLength) {\n            return this.node.getTotalLength();\n        }\n    };\n    // SIERRA Element.getPointAtLength()/Element.getTotalLength(): If a <path> is broken into different segments, is the jump distance to the new coordinates set by the _M_ or _m_ commands calculated as part of the path\'s total length?\n    /*\\\n     * Element.getPointAtLength\n     [ method ]\n     **\n     * Returns coordinates of the point located at the given length on the given path (only works for `path` elements)\n     **\n     - length (number) length, in pixels, from the start of the path, excluding non-rendering jumps\n     **\n     = (object) representation of the point:\n     o {\n     o     x: (number) x coordinate,\n     o     y: (number) y coordinate,\n     o     alpha: (number) angle of derivative\n     o }\n    \\*/\n    elproto.getPointAtLength = function (length) {\n        return getPointAtLength(this.attr("d"), length);\n    };\n    // SIERRA Element.getSubpath(): Similar to the problem for Element.getPointAtLength(). Unclear how this would work for a segmented path. Overall, the concept of _subpath_ and what I\'m calling a _segment_ (series of non-_M_ or _Z_ commands) is unclear.\n    /*\\\n     * Element.getSubpath\n     [ method ]\n     **\n     * Returns subpath of a given element from given start and end lengths (only works for `path` elements)\n     **\n     - from (number) length, in pixels, from the start of the path to the start of the segment\n     - to (number) length, in pixels, from the start of the path to the end of the segment\n     **\n     = (string) path string definition for the segment\n    \\*/\n    elproto.getSubpath = function (from, to) {\n        return Snap.path.getSubpath(this.attr("d"), from, to);\n    };\n    Snap._.box = box;\n    /*\\\n     * Snap.path.findDotsAtSegment\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds dot coordinates on the given cubic beziér curve at the given t\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     - t (number) position on the curve (0..1)\n     = (object) point information in format:\n     o {\n     o     x: (number) x coordinate of the point,\n     o     y: (number) y coordinate of the point,\n     o     m: {\n     o         x: (number) x coordinate of the left anchor,\n     o         y: (number) y coordinate of the left anchor\n     o     },\n     o     n: {\n     o         x: (number) x coordinate of the right anchor,\n     o         y: (number) y coordinate of the right anchor\n     o     },\n     o     start: {\n     o         x: (number) x coordinate of the start of the curve,\n     o         y: (number) y coordinate of the start of the curve\n     o     },\n     o     end: {\n     o         x: (number) x coordinate of the end of the curve,\n     o         y: (number) y coordinate of the end of the curve\n     o     },\n     o     alpha: (number) angle of the curve derivative at the point\n     o }\n    \\*/\n    Snap.path.findDotsAtSegment = findDotsAtSegment;\n    /*\\\n     * Snap.path.bezierBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given cubic beziér curve\n     - p1x (number) x of the first point of the curve\n     - p1y (number) y of the first point of the curve\n     - c1x (number) x of the first anchor of the curve\n     - c1y (number) y of the first anchor of the curve\n     - c2x (number) x of the second anchor of the curve\n     - c2y (number) y of the second anchor of the curve\n     - p2x (number) x of the second point of the curve\n     - p2y (number) y of the second point of the curve\n     * or\n     - bez (array) array of six points for beziér curve\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.bezierBBox = bezierBBox;\n    /*\\\n     * Snap.path.isPointInsideBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside bounding box\n     - bbox (string) bounding box\n     - x (string) x coordinate of the point\n     - y (string) y coordinate of the point\n     = (boolean) `true` if point is inside\n    \\*/\n    Snap.path.isPointInsideBBox = isPointInsideBBox;\n    Snap.closest = function (x, y, X, Y) {\n        var r = 100,\n            b = box(x - r / 2, y - r / 2, r, r),\n            inside = [],\n            getter = X[0].hasOwnProperty("x") ? function (i) {\n                return {\n                    x: X[i].x,\n                    y: X[i].y\n                };\n            } : function (i) {\n                return {\n                    x: X[i],\n                    y: Y[i]\n                };\n            },\n            found = 0;\n        while (r <= 1e6 && !found) {\n            for (var i = 0, ii = X.length; i < ii; i++) {\n                var xy = getter(i);\n                if (isPointInsideBBox(b, xy.x, xy.y)) {\n                    found++;\n                    inside.push(xy);\n                    break;\n                }\n            }\n            if (!found) {\n                r *= 2;\n                b = box(x - r / 2, y - r / 2, r, r)\n            }\n        }\n        if (r == 1e6) {\n            return;\n        }\n        var len = Infinity,\n            res;\n        for (i = 0, ii = inside.length; i < ii; i++) {\n            var l = Snap.len(x, y, inside[i].x, inside[i].y);\n            if (len > l) {\n                len = l;\n                inside[i].len = l;\n                res = inside[i];\n            }\n        }\n        return res;\n    };\n    /*\\\n     * Snap.path.isBBoxIntersect\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if two bounding boxes intersect\n     - bbox1 (string) first bounding box\n     - bbox2 (string) second bounding box\n     = (boolean) `true` if bounding boxes intersect\n    \\*/\n    Snap.path.isBBoxIntersect = isBBoxIntersect;\n    /*\\\n     * Snap.path.intersection\n     [ method ]\n     **\n     * Utility method\n     **\n     * Finds intersections of two paths\n     - path1 (string) path string\n     - path2 (string) path string\n     = (array) dots of intersection\n     o [\n     o     {\n     o         x: (number) x coordinate of the point,\n     o         y: (number) y coordinate of the point,\n     o         t1: (number) t value for segment of path1,\n     o         t2: (number) t value for segment of path2,\n     o         segment1: (number) order number for segment of path1,\n     o         segment2: (number) order number for segment of path2,\n     o         bez1: (array) eight coordinates representing beziér curve for the segment of path1,\n     o         bez2: (array) eight coordinates representing beziér curve for the segment of path2\n     o     }\n     o ]\n    \\*/\n    Snap.path.intersection = pathIntersection;\n    Snap.path.intersectionNumber = pathIntersectionNumber;\n    /*\\\n     * Snap.path.isPointInside\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns `true` if given point is inside a given closed path.\n     *\n     * Note: fill mode doesn’t affect the result of this method.\n     - path (string) path string\n     - x (number) x of the point\n     - y (number) y of the point\n     = (boolean) `true` if point is inside the path\n    \\*/\n    Snap.path.isPointInside = isPointInsidePath;\n    /*\\\n     * Snap.path.getBBox\n     [ method ]\n     **\n     * Utility method\n     **\n     * Returns the bounding box of a given path\n     - path (string) path string\n     = (object) bounding box\n     o {\n     o     x: (number) x coordinate of the left top point of the box,\n     o     y: (number) y coordinate of the left top point of the box,\n     o     x2: (number) x coordinate of the right bottom point of the box,\n     o     y2: (number) y coordinate of the right bottom point of the box,\n     o     width: (number) width of the box,\n     o     height: (number) height of the box\n     o }\n    \\*/\n    Snap.path.getBBox = pathBBox;\n    Snap.path.get = getPath;\n    /*\\\n     * Snap.path.toRelative\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into relative values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toRelative = pathToRelative;\n    /*\\\n     * Snap.path.toAbsolute\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path coordinates into absolute values\n     - path (string) path string\n     = (array) path string\n    \\*/\n    Snap.path.toAbsolute = pathToAbsolute;\n    /*\\\n     * Snap.path.toCubic\n     [ method ]\n     **\n     * Utility method\n     **\n     * Converts path to a new path where all segments are cubic beziér curves\n     - pathString (string|array) path string or array of segments\n     = (array) array of segments\n    \\*/\n    Snap.path.toCubic = path2curve;\n    /*\\\n     * Snap.path.map\n     [ method ]\n     **\n     * Transform the path string with the given matrix\n     - path (string) path string\n     - matrix (object) see @Matrix\n     = (string) transformed path string\n    \\*/\n    Snap.path.map = mapPath;\n    Snap.path.toString = toString;\n    Snap.path.clone = pathClone;\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var mmax = Math.max,\n        mmin = Math.min;\n\n    // Set\n    var Set = function (items) {\n        this.items = [];\n	this.bindings = {};\n        this.length = 0;\n        this.type = "set";\n        if (items) {\n            for (var i = 0, ii = items.length; i < ii; i++) {\n                if (items[i]) {\n                    this[this.items.length] = this.items[this.items.length] = items[i];\n                    this.length++;\n                }\n            }\n        }\n    },\n    setproto = Set.prototype;\n    /*\\\n     * Set.push\n     [ method ]\n     **\n     * Adds each argument to the current set\n     = (object) original element\n    \\*/\n    setproto.push = function () {\n        var item,\n            len;\n        for (var i = 0, ii = arguments.length; i < ii; i++) {\n            item = arguments[i];\n            if (item) {\n                len = this.items.length;\n                this[len] = this.items[len] = item;\n                this.length++;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.pop\n     [ method ]\n     **\n     * Removes last element and returns it\n     = (object) element\n    \\*/\n    setproto.pop = function () {\n        this.length && delete this[this.length--];\n        return this.items.pop();\n    };\n    /*\\\n     * Set.forEach\n     [ method ]\n     **\n     * Executes given function for each element in the set\n     *\n     * If the function returns `false`, the loop stops running.\n     **\n     - callback (function) function to run\n     - thisArg (object) context object for the callback\n     = (object) Set object\n    \\*/\n    setproto.forEach = function (callback, thisArg) {\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            if (callback.call(thisArg, this.items[i], i) === false) {\n                return this;\n            }\n        }\n        return this;\n    };\n    /*\\\n     * Set.animate\n     [ method ]\n     **\n     * Animates each element in set in sync.\n     *\n     **\n     - attrs (object) key-value pairs of destination attributes\n     - duration (number) duration of the animation in milliseconds\n     - easing (function) #optional easing function from @mina or custom\n     - callback (function) #optional callback function that executes when the animation ends\n     * or\n     - animation (array) array of animation parameter for each element in set in format `[attrs, duration, easing, callback]`\n     > Usage\n     | // animate all elements in set to radius 10\n     | set.animate({r: 10}, 500, mina.easein);\n     | // or\n     | // animate first element to radius 10, but second to radius 20 and in different time\n     | set.animate([{r: 10}, 500, mina.easein], [{r: 20}, 1500, mina.easein]);\n     = (Element) the current element\n    \\*/\n    setproto.animate = function (attrs, ms, easing, callback) {\n        if (typeof easing == "function" && !easing.length) {\n            callback = easing;\n            easing = mina.linear;\n        }\n        if (attrs instanceof Snap._.Animation) {\n            callback = attrs.callback;\n            easing = attrs.easing;\n            ms = easing.dur;\n            attrs = attrs.attr;\n        }\n        var args = arguments;\n        if (Snap.is(attrs, "array") && Snap.is(args[args.length - 1], "array")) {\n            var each = true;\n        }\n        var begin,\n            handler = function () {\n                if (begin) {\n                    this.b = begin;\n                } else {\n                    begin = this.b;\n                }\n            },\n            cb = 0,\n            set = this,\n            callbacker = callback && function () {\n                if (++cb == set.length) {\n                    callback.call(this);\n                }\n            };\n        return this.forEach(function (el, i) {\n            eve.once("snap.animcreated." + el.id, handler);\n            if (each) {\n                args[i] && el.animate.apply(el, args[i]);\n            } else {\n                el.animate(attrs, ms, easing, callbacker);\n            }\n        });\n    };\n    setproto.remove = function () {\n        while (this.length) {\n            this.pop().remove();\n        }\n        return this;\n    };\n    /*\\\n     * Set.bind\n     [ method ]\n     **\n     * Specifies how to handle a specific attribute when applied\n     * to a set.\n     *\n     **\n     - attr (string) attribute name\n     - callback (function) function to run\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     * or\n     - attr (string) attribute name\n     - element (Element) specific element in the set to apply the attribute to\n     - eattr (string) attribute on the element to bind the attribute to\n     = (object) Set object\n    \\*/\n    setproto.bind = function (attr, a, b) {\n        var data = {};\n        if (typeof a == "function") {\n            this.bindings[attr] = a;\n        } else {\n            var aname = b || attr;\n            this.bindings[attr] = function (v) {\n                data[aname] = v;\n                a.attr(data);\n            };\n        }\n        return this;\n    };\n    setproto.attr = function (value) {\n        var unbound = {};\n        for (var k in value) {\n            if (this.bindings[k]) {\n                this.bindings[k](value[k]);\n            } else {\n                unbound[k] = value[k];\n            }\n        }\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            this.items[i].attr(unbound);\n        }\n        return this;\n    };\n    /*\\\n     * Set.clear\n     [ method ]\n     **\n     * Removes all elements from the set\n    \\*/\n    setproto.clear = function () {\n        while (this.length) {\n            this.pop();\n        }\n    };\n    /*\\\n     * Set.splice\n     [ method ]\n     **\n     * Removes range of elements from the set\n     **\n     - index (number) position of the deletion\n     - count (number) number of element to remove\n     - insertion… (object) #optional elements to insert\n     = (object) set elements that were deleted\n    \\*/\n    setproto.splice = function (index, count, insertion) {\n        index = index < 0 ? mmax(this.length + index, 0) : index;\n        count = mmax(0, mmin(this.length - index, count));\n        var tail = [],\n            todel = [],\n            args = [],\n            i;\n        for (i = 2; i < arguments.length; i++) {\n            args.push(arguments[i]);\n        }\n        for (i = 0; i < count; i++) {\n            todel.push(this[index + i]);\n        }\n        for (; i < this.length - index; i++) {\n            tail.push(this[index + i]);\n        }\n        var arglen = args.length;\n        for (i = 0; i < arglen + tail.length; i++) {\n            this.items[index + i] = this[index + i] = i < arglen ? args[i] : tail[i - arglen];\n        }\n        i = this.items.length = this.length -= count - arglen;\n        while (this[i]) {\n            delete this[i++];\n        }\n        return new Set(todel);\n    };\n    /*\\\n     * Set.exclude\n     [ method ]\n     **\n     * Removes given element from the set\n     **\n     - element (object) element to remove\n     = (boolean) `true` if object was found and removed from the set\n    \\*/\n    setproto.exclude = function (el) {\n        for (var i = 0, ii = this.length; i < ii; i++) if (this[i] == el) {\n            this.splice(i, 1);\n            return true;\n        }\n        return false;\n    };\n    setproto.insertAfter = function (el) {\n        var i = this.items.length;\n        while (i--) {\n            this.items[i].insertAfter(el);\n        }\n        return this;\n    };\n    setproto.getBBox = function () {\n        var x = [],\n            y = [],\n            x2 = [],\n            y2 = [];\n        for (var i = this.items.length; i--;) if (!this.items[i].removed) {\n            var box = this.items[i].getBBox();\n            x.push(box.x);\n            y.push(box.y);\n            x2.push(box.x + box.width);\n            y2.push(box.y + box.height);\n        }\n        x = mmin.apply(0, x);\n        y = mmin.apply(0, y);\n        x2 = mmax.apply(0, x2);\n        y2 = mmax.apply(0, y2);\n        return {\n            x: x,\n            y: y,\n            x2: x2,\n            y2: y2,\n            width: x2 - x,\n            height: y2 - y,\n            cx: x + (x2 - x) / 2,\n            cy: y + (y2 - y) / 2\n        };\n    };\n    setproto.clone = function (s) {\n        s = new Set;\n        for (var i = 0, ii = this.items.length; i < ii; i++) {\n            s.push(this.items[i].clone());\n        }\n        return s;\n    };\n    setproto.toString = function () {\n        return "Snap\\u2018s set";\n    };\n    setproto.type = "set";\n    // export\n    Snap.Set = Set;\n    Snap.set = function () {\n        var set = new Set;\n        if (arguments.length) {\n            set.push.apply(set, Array.prototype.slice.call(arguments, 0));\n        }\n        return set;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var names = {},\n        reUnit = /[a-z]+$/i,\n        Str = String;\n    names.stroke = names.fill = "colour";\n    function getEmpty(item) {\n        var l = item[0];\n        switch (l.toLowerCase()) {\n            case "t": return [l, 0, 0];\n            case "m": return [l, 1, 0, 0, 1, 0, 0];\n            case "r": if (item.length == 4) {\n                return [l, 0, item[2], item[3]];\n            } else {\n                return [l, 0];\n            }\n            case "s": if (item.length == 5) {\n                return [l, 1, 1, item[3], item[4]];\n            } else if (item.length == 3) {\n                return [l, 1, 1];\n            } else {\n                return [l, 1];\n            }\n        }\n    }\n    function equaliseTransform(t1, t2, getBBox) {\n        t2 = Str(t2).replace(/\\.{3}|\\u2026/g, t1);\n        t1 = Snap.parseTransformString(t1) || [];\n        t2 = Snap.parseTransformString(t2) || [];\n        var maxlength = Math.max(t1.length, t2.length),\n            from = [],\n            to = [],\n            i = 0, j, jj,\n            tt1, tt2;\n        for (; i < maxlength; i++) {\n            tt1 = t1[i] || getEmpty(t2[i]);\n            tt2 = t2[i] || getEmpty(tt1);\n            if ((tt1[0] != tt2[0]) ||\n                (tt1[0].toLowerCase() == "r" && (tt1[2] != tt2[2] || tt1[3] != tt2[3])) ||\n                (tt1[0].toLowerCase() == "s" && (tt1[3] != tt2[3] || tt1[4] != tt2[4]))\n                ) {\n                    t1 = Snap._.transform2matrix(t1, getBBox());\n                    t2 = Snap._.transform2matrix(t2, getBBox());\n                    from = [["m", t1.a, t1.b, t1.c, t1.d, t1.e, t1.f]];\n                    to = [["m", t2.a, t2.b, t2.c, t2.d, t2.e, t2.f]];\n                    break;\n            }\n            from[i] = [];\n            to[i] = [];\n            for (j = 0, jj = Math.max(tt1.length, tt2.length); j < jj; j++) {\n                j in tt1 && (from[i][j] = tt1[j]);\n                j in tt2 && (to[i][j] = tt2[j]);\n            }\n        }\n        return {\n            from: path2array(from),\n            to: path2array(to),\n            f: getPath(from)\n        };\n    }\n    function getNumber(val) {\n        return val;\n    }\n    function getUnit(unit) {\n        return function (val) {\n            return +val.toFixed(3) + unit;\n        };\n    }\n    function getViewBox(val) {\n        return val.join(" ");\n    }\n    function getColour(clr) {\n        return Snap.rgb(clr[0], clr[1], clr[2]);\n    }\n    function getPath(path) {\n        var k = 0, i, ii, j, jj, out, a, b = [];\n        for (i = 0, ii = path.length; i < ii; i++) {\n            out = "[";\n            a = [\'"\' + path[i][0] + \'"\'];\n            for (j = 1, jj = path[i].length; j < jj; j++) {\n                a[j] = "val[" + (k++) + "]";\n            }\n            out += a + "]";\n            b[i] = out;\n        }\n        return Function("val", "return Snap.path.toString.call([" + b + "])");\n    }\n    function path2array(path) {\n        var out = [];\n        for (var i = 0, ii = path.length; i < ii; i++) {\n            for (var j = 1, jj = path[i].length; j < jj; j++) {\n                out.push(path[i][j]);\n            }\n        }\n        return out;\n    }\n    function isNumeric(obj) {\n        return isFinite(parseFloat(obj));\n    }\n    function arrayEqual(arr1, arr2) {\n        if (!Snap.is(arr1, "array") || !Snap.is(arr2, "array")) {\n            return false;\n        }\n        return arr1.toString() == arr2.toString();\n    }\n    Element.prototype.equal = function (name, b) {\n        return eve("snap.util.equal", this, name, b).firstDefined();\n    };\n    eve.on("snap.util.equal", function (name, b) {\n        var A, B, a = Str(this.attr(name) || ""),\n            el = this;\n        if (isNumeric(a) && isNumeric(b)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getNumber\n            };\n        }\n        if (names[name] == "colour") {\n            A = Snap.color(a);\n            B = Snap.color(b);\n            return {\n                from: [A.r, A.g, A.b, A.opacity],\n                to: [B.r, B.g, B.b, B.opacity],\n                f: getColour\n            };\n        }\n        if (name == "viewBox") {\n            A = this.attr(name).vb.split(" ").map(Number);\n            B = b.split(" ").map(Number);\n            return {\n                from: A,\n                to: B,\n                f: getViewBox\n            };\n        }\n        if (name == "transform" || name == "gradientTransform" || name == "patternTransform") {\n            if (b instanceof Snap.Matrix) {\n                b = b.toTransformString();\n            }\n            if (!Snap._.rgTransform.test(b)) {\n                b = Snap._.svgTransform2string(b);\n            }\n            return equaliseTransform(a, b, function () {\n                return el.getBBox(1);\n            });\n        }\n        if (name == "d" || name == "path") {\n            A = Snap.path.toCubic(a, b);\n            return {\n                from: path2array(A[0]),\n                to: path2array(A[1]),\n                f: getPath(A[0])\n            };\n        }\n        if (name == "points") {\n            A = Str(a).split(Snap._.separator);\n            B = Str(b).split(Snap._.separator);\n            return {\n                from: A,\n                to: B,\n                f: function (val) { return val; }\n            };\n        }\n        var aUnit = a.match(reUnit),\n            bUnit = Str(b).match(reUnit);\n        if (aUnit && arrayEqual(aUnit, bUnit)) {\n            return {\n                from: parseFloat(a),\n                to: parseFloat(b),\n                f: getUnit(aUnit)\n            };\n        } else {\n            return {\n                from: this.asPX(name),\n                to: this.asPX(name, b),\n                f: getNumber\n            };\n        }\n    });\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n    has = "hasOwnProperty",\n    supportsTouch = "createTouch" in glob.doc,\n    events = [\n        "click", "dblclick", "mousedown", "mousemove", "mouseout",\n        "mouseover", "mouseup", "touchstart", "touchmove", "touchend",\n        "touchcancel"\n    ],\n    touchMap = {\n        mousedown: "touchstart",\n        mousemove: "touchmove",\n        mouseup: "touchend"\n    },\n    getScroll = function (xy, el) {\n        var name = xy == "y" ? "scrollTop" : "scrollLeft",\n            doc = el && el.node ? el.node.ownerDocument : glob.doc;\n        return doc[name in doc.documentElement ? "documentElement" : "body"][name];\n    },\n    preventDefault = function () {\n        this.returnValue = false;\n    },\n    preventTouch = function () {\n        return this.originalEvent.preventDefault();\n    },\n    stopPropagation = function () {\n        this.cancelBubble = true;\n    },\n    stopTouch = function () {\n        return this.originalEvent.stopPropagation();\n    },\n    addEvent = function (obj, type, fn, element) {\n        var realName = supportsTouch && touchMap[type] ? touchMap[type] : type,\n            f = function (e) {\n                var scrollY = getScroll("y", element),\n                    scrollX = getScroll("x", element);\n                if (supportsTouch && touchMap[has](type)) {\n                    for (var i = 0, ii = e.targetTouches && e.targetTouches.length; i < ii; i++) {\n                        if (e.targetTouches[i].target == obj || obj.contains(e.targetTouches[i].target)) {\n                            var olde = e;\n                            e = e.targetTouches[i];\n                            e.originalEvent = olde;\n                            e.preventDefault = preventTouch;\n                            e.stopPropagation = stopTouch;\n                            break;\n                        }\n                    }\n                }\n                var x = e.clientX + scrollX,\n                    y = e.clientY + scrollY;\n                return fn.call(element, e, x, y);\n            };\n\n        if (type !== realName) {\n            obj.addEventListener(type, f, false);\n        }\n\n        obj.addEventListener(realName, f, false);\n\n        return function () {\n            if (type !== realName) {\n                obj.removeEventListener(type, f, false);\n            }\n\n            obj.removeEventListener(realName, f, false);\n            return true;\n        };\n    },\n    drag = [],\n    dragMove = function (e) {\n        var x = e.clientX,\n            y = e.clientY,\n            scrollY = getScroll("y"),\n            scrollX = getScroll("x"),\n            dragi,\n            j = drag.length;\n        while (j--) {\n            dragi = drag[j];\n            if (supportsTouch) {\n                var i = e.touches && e.touches.length,\n                    touch;\n                while (i--) {\n                    touch = e.touches[i];\n                    if (touch.identifier == dragi.el._drag.id || dragi.el.node.contains(touch.target)) {\n                        x = touch.clientX;\n                        y = touch.clientY;\n                        (e.originalEvent ? e.originalEvent : e).preventDefault();\n                        break;\n                    }\n                }\n            } else {\n                e.preventDefault();\n            }\n            var node = dragi.el.node,\n                o,\n                next = node.nextSibling,\n                parent = node.parentNode,\n                display = node.style.display;\n            // glob.win.opera && parent.removeChild(node);\n            // node.style.display = "none";\n            // o = dragi.el.paper.getElementByPoint(x, y);\n            // node.style.display = display;\n            // glob.win.opera && (next ? parent.insertBefore(node, next) : parent.appendChild(node));\n            // o && eve("snap.drag.over." + dragi.el.id, dragi.el, o);\n            x += scrollX;\n            y += scrollY;\n            eve("snap.drag.move." + dragi.el.id, dragi.move_scope || dragi.el, x - dragi.el._drag.x, y - dragi.el._drag.y, x, y, e);\n        }\n    },\n    dragUp = function (e) {\n        Snap.unmousemove(dragMove).unmouseup(dragUp);\n        var i = drag.length,\n            dragi;\n        while (i--) {\n            dragi = drag[i];\n            dragi.el._drag = {};\n            eve("snap.drag.end." + dragi.el.id, dragi.end_scope || dragi.start_scope || dragi.move_scope || dragi.el, e);\n            eve.off("snap.drag.*." + dragi.el.id);\n        }\n        drag = [];\n    };\n    /*\\\n     * Element.click\n     [ method ]\n     **\n     * Adds a click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unclick\n     [ method ]\n     **\n     * Removes a click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.dblclick\n     [ method ]\n     **\n     * Adds a double click event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.undblclick\n     [ method ]\n     **\n     * Removes a double click event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousedown\n     [ method ]\n     **\n     * Adds a mousedown event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousedown\n     [ method ]\n     **\n     * Removes a mousedown event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mousemove\n     [ method ]\n     **\n     * Adds a mousemove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmousemove\n     [ method ]\n     **\n     * Removes a mousemove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseout\n     [ method ]\n     **\n     * Adds a mouseout event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseout\n     [ method ]\n     **\n     * Removes a mouseout event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseover\n     [ method ]\n     **\n     * Adds a mouseover event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseover\n     [ method ]\n     **\n     * Removes a mouseover event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.mouseup\n     [ method ]\n     **\n     * Adds a mouseup event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.unmouseup\n     [ method ]\n     **\n     * Removes a mouseup event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchstart\n     [ method ]\n     **\n     * Adds a touchstart event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchstart\n     [ method ]\n     **\n     * Removes a touchstart event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchmove\n     [ method ]\n     **\n     * Adds a touchmove event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchmove\n     [ method ]\n     **\n     * Removes a touchmove event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchend\n     [ method ]\n     **\n     * Adds a touchend event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchend\n     [ method ]\n     **\n     * Removes a touchend event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    \n    /*\\\n     * Element.touchcancel\n     [ method ]\n     **\n     * Adds a touchcancel event handler to the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    /*\\\n     * Element.untouchcancel\n     [ method ]\n     **\n     * Removes a touchcancel event handler from the element\n     - handler (function) handler for the event\n     = (object) @Element\n    \\*/\n    for (var i = events.length; i--;) {\n        (function (eventName) {\n            Snap[eventName] = elproto[eventName] = function (fn, scope) {\n                if (Snap.is(fn, "function")) {\n                    this.events = this.events || [];\n                    this.events.push({\n                        name: eventName,\n                        f: fn,\n                        unbind: addEvent(this.node || document, eventName, fn, scope || this)\n                    });\n                } else {\n                    for (var i = 0, ii = this.events.length; i < ii; i++) if (this.events[i].name == eventName) {\n                        try {\n                            this.events[i].f.call(this);\n                        } catch (e) {}\n                    }\n                }\n                return this;\n            };\n            Snap["un" + eventName] =\n            elproto["un" + eventName] = function (fn) {\n                var events = this.events || [],\n                    l = events.length;\n                while (l--) if (events[l].name == eventName &&\n                               (events[l].f == fn || !fn)) {\n                    events[l].unbind();\n                    events.splice(l, 1);\n                    !events.length && delete this.events;\n                    return this;\n                }\n                return this;\n            };\n        })(events[i]);\n    }\n    /*\\\n     * Element.hover\n     [ method ]\n     **\n     * Adds hover event handlers to the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     - icontext (object) #optional context for hover in handler\n     - ocontext (object) #optional context for hover out handler\n     = (object) @Element\n    \\*/\n    elproto.hover = function (f_in, f_out, scope_in, scope_out) {\n        return this.mouseover(f_in, scope_in).mouseout(f_out, scope_out || scope_in);\n    };\n    /*\\\n     * Element.unhover\n     [ method ]\n     **\n     * Removes hover event handlers from the element\n     - f_in (function) handler for hover in\n     - f_out (function) handler for hover out\n     = (object) @Element\n    \\*/\n    elproto.unhover = function (f_in, f_out) {\n        return this.unmouseover(f_in).unmouseout(f_out);\n    };\n    var draggable = [];\n    // SIERRA unclear what _context_ refers to for starting, ending, moving the drag gesture.\n    // SIERRA Element.drag(): _x position of the mouse_: Where are the x/y values offset from?\n    // SIERRA Element.drag(): much of this member\'s doc appears to be duplicated for some reason.\n    // SIERRA Unclear about this sentence: _Additionally following drag events will be triggered: drag.start.<id> on start, drag.end.<id> on end and drag.move.<id> on every move._ Is there a global _drag_ object to which you can assign handlers keyed by an element\'s ID?\n    /*\\\n     * Element.drag\n     [ method ]\n     **\n     * Adds event handlers for an element\'s drag gesture\n     **\n     - onmove (function) handler for moving\n     - onstart (function) handler for drag start\n     - onend (function) handler for drag end\n     - mcontext (object) #optional context for moving handler\n     - scontext (object) #optional context for drag start handler\n     - econtext (object) #optional context for drag end handler\n     * Additionaly following `drag` events are triggered: `drag.start.<id>` on start, \n     * `drag.end.<id>` on end and `drag.move.<id>` on every move. When element is dragged over another element \n     * `drag.over.<id>` fires as well.\n     *\n     * Start event and start handler are called in specified context or in context of the element with following parameters:\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * Move event and move handler are called in specified context or in context of the element with following parameters:\n     o dx (number) shift by x from the start point\n     o dy (number) shift by y from the start point\n     o x (number) x position of the mouse\n     o y (number) y position of the mouse\n     o event (object) DOM event object\n     * End event and end handler are called in specified context or in context of the element with following parameters:\n     o event (object) DOM event object\n     = (object) @Element\n    \\*/\n    elproto.drag = function (onmove, onstart, onend, move_scope, start_scope, end_scope) {\n        var el = this;\n        if (!arguments.length) {\n            var origTransform;\n            return el.drag(function (dx, dy) {\n                this.attr({\n                    transform: origTransform + (origTransform ? "T" : "t") + [dx, dy]\n                });\n            }, function () {\n                origTransform = this.transform().local;\n            });\n        }\n        function start(e, x, y) {\n            (e.originalEvent || e).preventDefault();\n            el._drag.x = x;\n            el._drag.y = y;\n            el._drag.id = e.identifier;\n            !drag.length && Snap.mousemove(dragMove).mouseup(dragUp);\n            drag.push({el: el, move_scope: move_scope, start_scope: start_scope, end_scope: end_scope});\n            onstart && eve.on("snap.drag.start." + el.id, onstart);\n            onmove && eve.on("snap.drag.move." + el.id, onmove);\n            onend && eve.on("snap.drag.end." + el.id, onend);\n            eve("snap.drag.start." + el.id, start_scope || move_scope || el, x, y, e);\n        }\n        function init(e, x, y) {\n            eve("snap.draginit." + el.id, el, e, x, y);\n        }\n        eve.on("snap.draginit." + el.id, start);\n        el._drag = {};\n        draggable.push({el: el, start: start, init: init});\n        el.mousedown(init);\n        return el;\n    };\n    /*\n     * Element.onDragOver\n     [ method ]\n     **\n     * Shortcut to assign event handler for `drag.over.<id>` event, where `id` is the element\'s `id` (see @Element.id)\n     - f (function) handler for event, first argument would be the element you are dragging over\n    \\*/\n    // elproto.onDragOver = function (f) {\n    //     f ? eve.on("snap.drag.over." + this.id, f) : eve.unbind("snap.drag.over." + this.id);\n    // };\n    /*\\\n     * Element.undrag\n     [ method ]\n     **\n     * Removes all drag event handlers from the given element\n    \\*/\n    elproto.undrag = function () {\n        var i = draggable.length;\n        while (i--) if (draggable[i].el == this) {\n            this.unmousedown(draggable[i].init);\n            draggable.splice(i, 1);\n            eve.unbind("snap.drag.*." + this.id);\n            eve.unbind("snap.draginit." + this.id);\n        }\n        !draggable.length && Snap.unmousemove(dragMove).unmouseup(dragUp);\n        return this;\n    };\n});\n\n// Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n// \n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n// \n// http://www.apache.org/licenses/LICENSE-2.0\n// \n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob) {\n    var elproto = Element.prototype,\n        pproto = Paper.prototype,\n        rgurl = /^\\s*url\\((.+)\\)/,\n        Str = String,\n        $ = Snap._.$;\n    Snap.filter = {};\n    /*\\\n     * Paper.filter\n     [ method ]\n     **\n     * Creates a `<filter>` element\n     **\n     - filstr (string) SVG fragment of filter provided as a string\n     = (object) @Element\n     * Note: It is recommended to use filters embedded into the page inside an empty SVG element.\n     > Usage\n     | var f = paper.filter(\'<feGaussianBlur stdDeviation="2"/>\'),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    pproto.filter = function (filstr) {\n        var paper = this;\n        if (paper.type != "svg") {\n            paper = paper.paper;\n        }\n        var f = Snap.parse(Str(filstr)),\n            id = Snap._.id(),\n            width = paper.node.offsetWidth,\n            height = paper.node.offsetHeight,\n            filter = $("filter");\n        $(filter, {\n            id: id,\n            filterUnits: "userSpaceOnUse"\n        });\n        filter.appendChild(f.node);\n        paper.defs.appendChild(filter);\n        return new Element(filter);\n    };\n    \n    eve.on("snap.util.getattr.filter", function () {\n        eve.stop();\n        var p = $(this.node, "filter");\n        if (p) {\n            var match = Str(p).match(rgurl);\n            return match && Snap.select(match[1]);\n        }\n    });\n    eve.on("snap.util.attr.filter", function (value) {\n        if (value instanceof Element && value.type == "filter") {\n            eve.stop();\n            var id = value.node.id;\n            if (!id) {\n                $(value.node, {id: value.id});\n                id = value.id;\n            }\n            $(this.node, {\n                filter: Snap.url(id)\n            });\n        }\n        if (!value || value == "none") {\n            eve.stop();\n            this.node.removeAttribute("filter");\n        }\n    });\n    /*\\\n     * Snap.filter.blur\n     [ method ]\n     **\n     * Returns an SVG markup string for the blur filter\n     **\n     - x (number) amount of horizontal blur, in pixels\n     - y (number) #optional amount of vertical blur, in pixels\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.blur(5, 10)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.blur = function (x, y) {\n        if (x == null) {\n            x = 2;\n        }\n        var def = y == null ? x : [x, y];\n        return Snap.format(\'\\<feGaussianBlur stdDeviation="{def}"/>\', {\n            def: def\n        });\n    };\n    Snap.filter.blur.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.shadow\n     [ method ]\n     **\n     * Returns an SVG markup string for the shadow filter\n     **\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - blur (number) #optional amount of blur\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - color (string) #optional color of the shadow\n     - opacity (number) #optional `0..1` opacity of the shadow\n     * which makes blur default to `4`. Or\n     - dx (number) #optional horizontal shift of the shadow, in pixels\n     - dy (number) #optional vertical shift of the shadow, in pixels\n     - opacity (number) #optional `0..1` opacity of the shadow\n     = (string) filter representation\n     > Usage\n     | var f = paper.filter(Snap.filter.shadow(0, 2, 3)),\n     |     c = paper.circle(10, 10, 10).attr({\n     |         filter: f\n     |     });\n    \\*/\n    Snap.filter.shadow = function (dx, dy, blur, color, opacity) {\n        if (typeof blur == "string") {\n            color = blur;\n            opacity = color;\n            blur = 4;\n        }\n        if (typeof color != "string") {\n            opacity = color;\n            color = "#000";\n        }\n        color = color || "#000";\n        if (blur == null) {\n            blur = 4;\n        }\n        if (opacity == null) {\n            opacity = 1;\n        }\n        if (dx == null) {\n            dx = 0;\n            dy = 2;\n        }\n        if (dy == null) {\n            dy = dx;\n        }\n        color = Snap.color(color);\n        return Snap.format(\'<feGaussianBlur in="SourceAlpha" stdDeviation="{blur}"/><feOffset dx="{dx}" dy="{dy}" result="offsetblur"/><feFlood flood-color="{color}"/><feComposite in2="offsetblur" operator="in"/><feComponentTransfer><feFuncA type="linear" slope="{opacity}"/></feComponentTransfer><feMerge><feMergeNode/><feMergeNode in="SourceGraphic"/></feMerge>\', {\n            color: color,\n            dx: dx,\n            dy: dy,\n            blur: blur,\n            opacity: opacity\n        });\n    };\n    Snap.filter.shadow.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.grayscale\n     [ method ]\n     **\n     * Returns an SVG markup string for the grayscale filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.grayscale = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format(\'<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {b} {h} 0 0 0 0 0 1 0"/>\', {\n            a: 0.2126 + 0.7874 * (1 - amount),\n            b: 0.7152 - 0.7152 * (1 - amount),\n            c: 0.0722 - 0.0722 * (1 - amount),\n            d: 0.2126 - 0.2126 * (1 - amount),\n            e: 0.7152 + 0.2848 * (1 - amount),\n            f: 0.0722 - 0.0722 * (1 - amount),\n            g: 0.2126 - 0.2126 * (1 - amount),\n            h: 0.0722 + 0.9278 * (1 - amount)\n        });\n    };\n    Snap.filter.grayscale.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.sepia\n     [ method ]\n     **\n     * Returns an SVG markup string for the sepia filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.sepia = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format(\'<feColorMatrix type="matrix" values="{a} {b} {c} 0 0 {d} {e} {f} 0 0 {g} {h} {i} 0 0 0 0 0 1 0"/>\', {\n            a: 0.393 + 0.607 * (1 - amount),\n            b: 0.769 - 0.769 * (1 - amount),\n            c: 0.189 - 0.189 * (1 - amount),\n            d: 0.349 - 0.349 * (1 - amount),\n            e: 0.686 + 0.314 * (1 - amount),\n            f: 0.168 - 0.168 * (1 - amount),\n            g: 0.272 - 0.272 * (1 - amount),\n            h: 0.534 - 0.534 * (1 - amount),\n            i: 0.131 + 0.869 * (1 - amount)\n        });\n    };\n    Snap.filter.sepia.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.saturate\n     [ method ]\n     **\n     * Returns an SVG markup string for the saturate filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.saturate = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format(\'<feColorMatrix type="saturate" values="{amount}"/>\', {\n            amount: 1 - amount\n        });\n    };\n    Snap.filter.saturate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.hueRotate\n     [ method ]\n     **\n     * Returns an SVG markup string for the hue-rotate filter\n     **\n     - angle (number) angle of rotation\n     = (string) filter representation\n    \\*/\n    Snap.filter.hueRotate = function (angle) {\n        angle = angle || 0;\n        return Snap.format(\'<feColorMatrix type="hueRotate" values="{angle}"/>\', {\n            angle: angle\n        });\n    };\n    Snap.filter.hueRotate.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.invert\n     [ method ]\n     **\n     * Returns an SVG markup string for the invert filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.invert = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n//        <feColorMatrix type="matrix" values="-1 0 0 0 1  0 -1 0 0 1  0 0 -1 0 1  0 0 0 1 0" color-interpolation-filters="sRGB"/>\n        return Snap.format(\'<feComponentTransfer><feFuncR type="table" tableValues="{amount} {amount2}"/><feFuncG type="table" tableValues="{amount} {amount2}"/><feFuncB type="table" tableValues="{amount} {amount2}"/></feComponentTransfer>\', {\n            amount: amount,\n            amount2: 1 - amount\n        });\n    };\n    Snap.filter.invert.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.brightness\n     [ method ]\n     **\n     * Returns an SVG markup string for the brightness filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.brightness = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format(\'<feComponentTransfer><feFuncR type="linear" slope="{amount}"/><feFuncG type="linear" slope="{amount}"/><feFuncB type="linear" slope="{amount}"/></feComponentTransfer>\', {\n            amount: amount\n        });\n    };\n    Snap.filter.brightness.toString = function () {\n        return this();\n    };\n    /*\\\n     * Snap.filter.contrast\n     [ method ]\n     **\n     * Returns an SVG markup string for the contrast filter\n     **\n     - amount (number) amount of filter (`0..1`)\n     = (string) filter representation\n    \\*/\n    Snap.filter.contrast = function (amount) {\n        if (amount == null) {\n            amount = 1;\n        }\n        return Snap.format(\'<feComponentTransfer><feFuncR type="linear" slope="{amount}" intercept="{amount2}"/><feFuncG type="linear" slope="{amount}" intercept="{amount2}"/><feFuncB type="linear" slope="{amount}" intercept="{amount2}"/></feComponentTransfer>\', {\n            amount: amount,\n            amount2: .5 - amount / 2\n        });\n    };\n    Snap.filter.contrast.toString = function () {\n        return this();\n    };\n});\n\n// Copyright (c) 2014 Adobe Systems Incorporated. All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the "License");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an "AS IS" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nSnap.plugin(function (Snap, Element, Paper, glob, Fragment) {\n    var box = Snap._.box,\n        is = Snap.is,\n        firstLetter = /^[^a-z]*([tbmlrc])/i,\n        toString = function () {\n            return "T" + this.dx + "," + this.dy;\n        };\n    /*\\\n     * Element.getAlign\n     [ method ]\n     **\n     * Returns shift needed to align the element relatively to given element.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `"top"`, `"middle"`, `"bottom"`, `"left"`, `"center"`, `"right"`\n     = (object|string) Object in format `{dx: , dy: }` also has a string representation as a transformation string\n     > Usage\n     | el.transform(el.getAlign(el2, "top"));\n     * or\n     | var dy = el.getAlign(el2, "top").dy;\n    \\*/\n    Element.prototype.getAlign = function (el, way) {\n        if (way == null && is(el, "string")) {\n            way = el;\n            el = null;\n        }\n        el = el || this.paper;\n        var bx = el.getBBox ? el.getBBox() : box(el),\n            bb = this.getBBox(),\n            out = {};\n        way = way && way.match(firstLetter);\n        way = way ? way[1].toLowerCase() : "c";\n        switch (way) {\n            case "t":\n                out.dx = 0;\n                out.dy = bx.y - bb.y;\n            break;\n            case "b":\n                out.dx = 0;\n                out.dy = bx.y2 - bb.y2;\n            break;\n            case "m":\n                out.dx = 0;\n                out.dy = bx.cy - bb.cy;\n            break;\n            case "l":\n                out.dx = bx.x - bb.x;\n                out.dy = 0;\n            break;\n            case "r":\n                out.dx = bx.x2 - bb.x2;\n                out.dy = 0;\n            break;\n            default:\n                out.dx = bx.cx - bb.cx;\n                out.dy = 0;\n            break;\n        }\n        out.toString = toString;\n        return out;\n    };\n    /*\\\n     * Element.align\n     [ method ]\n     **\n     * Aligns the element relatively to given one via transformation.\n     * If no elements specified, parent `<svg>` container will be used.\n     - el (object) @optional alignment element\n     - way (string) one of six values: `"top"`, `"middle"`, `"bottom"`, `"left"`, `"center"`, `"right"`\n     = (object) this element\n     > Usage\n     | el.align(el2, "top");\n     * or\n     | el.align("middle");\n    \\*/\n    Element.prototype.align = function (el, way) {\n        return this.transform("..." + this.getAlign(el, way));\n    };\n});\n\nreturn Snap;\n}));\n}.call(window));//@ sourceMappingURL=data:application/json;base64,');
},221:function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(125);\nif(typeof content === 'string') content = [[module.id, content, '']];\n// add the styles to the DOM\nvar update = __webpack_require__(9)(content, {});\nif(content.locals) module.exports = content.locals;\n// Hot Module Replacement\nif(false) {\n	// When the styles change, update the <style> tags\n	if(!content.locals) {\n		module.hot.accept(\"!!./../../node_modules/css-loader/index.js!./Viewing.Extension.Markup3D.css\", function() {\n			var newContent = require(\"!!./../../node_modules/css-loader/index.js!./Viewing.Extension.Markup3D.css\");\n			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n			update(newContent);\n		});\n	}\n	// When the module is disposed, remove the <style> tags\n	module.hot.dispose(function() { update(); });\n}//@ sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QvVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QuY3NzP2VlNjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBbUY7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vVmlld2luZy5FeHRlbnNpb24uTWFya3VwM0QuY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL1ZpZXdpbmcuRXh0ZW5zaW9uLk1hcmt1cDNELmNzc1wiLCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL1ZpZXdpbmcuRXh0ZW5zaW9uLk1hcmt1cDNELmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9WaWV3aW5nLkV4dGVuc2lvbi5NYXJrdXAzRC9WaWV3aW5nLkV4dGVuc2lvbi5NYXJrdXAzRC5jc3NcbiAqKiBtb2R1bGUgaWQgPSAyMjFcbiAqKiBtb2R1bGUgY2h1bmtzID0gM1xuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=")}})});